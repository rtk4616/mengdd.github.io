<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meng&#39;s pages</title>
  <subtitle>Android developer and maybe other intersting things.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mengdd.github.io/"/>
  <updated>2017-02-06T07:54:46.000Z</updated>
  <id>http://mengdd.github.io/</id>
  
  <author>
    <name>Dandan Meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Say Hello to ConstraintLayout</title>
    <link href="http://mengdd.github.io/Android/2017/02/06/hello-constraint-layout/"/>
    <id>http://mengdd.github.io/Android/2017/02/06/hello-constraint-layout/</id>
    <published>2017-02-06T07:49:03.000Z</published>
    <updated>2017-02-06T07:54:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ConstraintLayout介绍&quot;&gt;&lt;a href=&quot;#ConstraintLayout介绍&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout介绍&quot;&gt;&lt;/a&gt;ConstraintLayout介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ConstraintLayout&lt;/code&gt;让你可以在很平的view结构(没有多层布局嵌套)中构建一个复杂的布局结构. 有点像&lt;code&gt;RelativeLayout&lt;/code&gt;, 所有的view都是根据它和兄弟View和父layout的关系布局的, 但是它比&lt;code&gt;RelativeLayout&lt;/code&gt;要更加灵活, 在Layout Editor中也更加好用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在Layout Editor中你可以直接靠拖拽来构建&lt;code&gt;ConstraintLayout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;为了在&lt;code&gt;ConstraintLayout&lt;/code&gt;中定义一个view的位置, 你必须给view加上两条或多条约束(constraints). 每一条约束代表了一种和其他View(或parent, 或不可见的guideline)之间的联系或者对齐关系.&lt;/p&gt;
&lt;p&gt;每一条约束都规定了这个view沿着水平或竖直轴的一个位置, 所以每个View在每个轴上都必须至少有一条约束(但是通常需要更多).&lt;/p&gt;
&lt;h2 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;p&gt;首先确认下载support库, 在&lt;code&gt;Tools &amp;gt; Android &amp;gt; SDK Manager&lt;/code&gt;的&lt;code&gt;SDK Tools&lt;/code&gt;tab下:&lt;br&gt;展开&lt;code&gt;Support Repository&lt;/code&gt;, check &lt;code&gt;ConstraintLayout for Android&lt;/code&gt;和&lt;code&gt;Solver for ConstraintLayout&lt;/code&gt;.&lt;br&gt;Check &lt;code&gt;Show Package Details&lt;/code&gt;, 显示版本信息.&lt;/p&gt;
&lt;p&gt;比如当前我最新的版本信息是1.0.0-beta4, 我在module的build.gradle中添加:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.android.support.constraint:constraint-layout:1.0.0-beta4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后点击Sync即可.&lt;/p&gt;
&lt;h2 id=&quot;转换已有布局&quot;&gt;&lt;a href=&quot;#转换已有布局&quot; class=&quot;headerlink&quot; title=&quot;转换已有布局&quot;&gt;&lt;/a&gt;转换已有布局&lt;/h2&gt;&lt;p&gt;我们可以新建布局, 然后让它的根节点是&lt;code&gt;android.support.constraint.ConstraintLayout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;除此之外, 我们还可以直接转换已有布局.&lt;br&gt;打开Layout, 切换到&lt;code&gt;Design&lt;/code&gt;tab, 然后在&lt;code&gt;Component Tree&lt;/code&gt;窗口, 右击布局然后选择最底部的&lt;code&gt;Convert XXXLayout(这里是你布局节点的类型) to ConstraintLayout&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;添加约束&quot;&gt;&lt;a href=&quot;#添加约束&quot; class=&quot;headerlink&quot; title=&quot;添加约束&quot;&gt;&lt;/a&gt;添加约束&lt;/h2&gt;&lt;p&gt;在Design模式下, 从Palette窗口中拖一个View到editor中去. 当你把一个View加入到ConstraintLayout中之后, 它会展示出一个bounding box, 四角的四个小方块用来拖拽调节大小, 每一个边上都有一个小圆点用来建立约束.&lt;br&gt;这些小方块和小圆点都被称为&lt;code&gt;handles&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;点击View, 然后点击并拖住一个约束handle, 把它拖拽到一个可用的anchor point(另一个View的边缘, layout的边缘, 或者一个guideline).当你松手的时候, 约束就生效了. (有一个默认的&lt;a href=&quot;https://developer.android.com/training/constraint-layout/index.html#adjust-the-view-margins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;margin&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;有几个规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个View都至少有两条约束: 一个水平的一个竖直的.&lt;/li&gt;
&lt;li&gt;你只能在共享平面的handle和anchor point之间建立约束. 比如一个View的竖直平面只能和另一个竖直平面建立约束, baseline也只能和其他baseline建立约束.&lt;/li&gt;
&lt;li&gt;每一个handle只能被用来建立一个约束, 但是你可以对一个anchor point建立(来自多个View的)多个约束.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要删掉一个约束, 只需要选择这个view, 点击那个对应的handle.&lt;/p&gt;
&lt;p&gt;如果你给同一个View加了两个相反的约束, 约束的线条就会变成弹簧状, 来显示两个相反方向的约束.  当View内容的尺寸固定或者是wrap的时候, 在这种情况下View就会在两个约束下居中显示, 如果你想让它展开, 那么就应该修改它的尺寸为&lt;a href=&quot;https://developer.android.com/training/constraint-layout/index.html#adjust-the-view-size&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Any Size&lt;/a&gt;; 如果你想要保持当前的尺寸, 你可以&lt;a href=&quot;https://developer.android.com/training/constraint-layout/index.html#adjust-the-constraint-bias&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;调节约束的权重&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;通常情况下可以加的有这几种约束:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parent constraint: View的边和Parent的边的关系.&lt;/li&gt;
&lt;li&gt;Position constraint: View之间水平和竖直的位置关系, 拖动可改变相对的margin距离.&lt;/li&gt;
&lt;li&gt;Alignment constraint: View边之间的对齐关系, 对齐后可以调节偏移量.&lt;/li&gt;
&lt;li&gt;Baseline alignment constraint: 对齐View的text baseline, 要创建baseline约束, 首先选中View, 然后把鼠标放在baseline上方两秒钟, 等它变白就可以拖到另一个baseline去建立约束了.&lt;/li&gt;
&lt;li&gt;Constrain to a guideline: 可以创建竖直或水平的guideline, 然后往上绑定约束, guideline对于用户来说是不可见的. 放置guideline的时候可以根据相对于layout边缘dp单位的距离, 也可以根据百分比.&lt;br&gt;Toolbar上有Guideline的按钮, 点击可选择水平或竖直.&lt;br&gt;点击Guideline尾部的小圆圈可以切换它到底是根据距离还是百分比放置的, 然后拖动它放到一个想要的位置.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用Autoconnect和Infer-Constraints&quot;&gt;&lt;a href=&quot;#使用Autoconnect和Infer-Constraints&quot; class=&quot;headerlink&quot; title=&quot;使用Autoconnect和Infer Constraints&quot;&gt;&lt;/a&gt;使用Autoconnect和Infer Constraints&lt;/h2&gt;&lt;p&gt;当打开&lt;code&gt;Autoconnect&lt;/code&gt;模式之后, 每一个&lt;strong&gt;新加的View&lt;/strong&gt;都会自动创建约束. Autoconnect模式默认是关闭的.&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;Infer Constraints&lt;/code&gt;会给layout中当前所有的View创建约束, 这是一个一次性的action. 它会选择建立最有效的约束, 所以它可能会建立离得很远的两个view之间的约束. 不像Autoconnect模式开启下, 只给新加的View建立约束, 并且只选择最近的元素.&lt;/p&gt;
&lt;h2 id=&quot;调整View大小&quot;&gt;&lt;a href=&quot;#调整View大小&quot; class=&quot;headerlink&quot; title=&quot;调整View大小&quot;&gt;&lt;/a&gt;调整View大小&lt;/h2&gt;&lt;p&gt;可以通过拖拽View四个角的handles来改变View的大小, 但是这样生成的是hard-coded的尺寸, 对于适配来讲这样是不好的.&lt;/p&gt;
&lt;p&gt;你可以点击View然后在Properties窗口编辑尺寸.&lt;br&gt;&lt;img src=&quot;/images/constraint-layout-properties-window.png&quot; alt=&quot;ConstraintLayout Properties Window&quot;&gt;&lt;/p&gt;
&lt;p&gt;有三种尺寸模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wrap Content:  用&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;图形表示.&lt;/li&gt;
&lt;li&gt;Any Size: 用弹簧图形表示. 说明View会一直展开到满足所有约束, 实际的值是0dp. 可以把它想象成”match constraints”. 如果此时只有单边的约束, 那么它只展开到能放下自己的内容为止. &lt;/li&gt;
&lt;li&gt;Fixed: 用图形&lt;code&gt;|-|&lt;/code&gt;表示, 固定尺寸.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过点击图形符号来切换这些模式.&lt;/p&gt;
&lt;p&gt;注意: 在&lt;code&gt;ConstraintLayout&lt;/code&gt;中的View中不应该使用&lt;code&gt;match_parent&lt;/code&gt;, 而是用”Any Size”(0dp).&lt;/p&gt;
&lt;h2 id=&quot;调整约束偏差&quot;&gt;&lt;a href=&quot;#调整约束偏差&quot; class=&quot;headerlink&quot; title=&quot;调整约束偏差&quot;&gt;&lt;/a&gt;调整约束偏差&lt;/h2&gt;&lt;p&gt;当你给一个View的对立两边都添加了约束, 而View的尺寸是fixed或者wrap_content, 那么默认情况下View就会居中显示在两个anchor point之间(bias=50%).&lt;br&gt;你可以通过拖拽View或者在Properties窗口中拖拽bias slider来改变它的偏移权重.&lt;/p&gt;
&lt;h2 id=&quot;调节View边距&quot;&gt;&lt;a href=&quot;#调节View边距&quot; class=&quot;headerlink&quot; title=&quot;调节View边距&quot;&gt;&lt;/a&gt;调节View边距&lt;/h2&gt;&lt;p&gt;可以在toolbar上点击默认边距(8)来修改.&lt;/p&gt;
&lt;p&gt;注意这个修改只对修改后新添加的View生效.&lt;/p&gt;
&lt;p&gt;每一个View的边距都可以通过Properties窗口修改: 点击约束线条上的margin数字.&lt;/p&gt;
&lt;p&gt;注意提供的值都是8的倍数, 以确保你遵循了Material Design的建议.&lt;/p&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/constraint-layout/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build a Responsive UI with ConstraintLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Demo: &lt;a href=&quot;https://github.com/mengdd/HelloConstraintLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloConstraintLayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ConstraintLayout介绍&quot;&gt;&lt;a href=&quot;#ConstraintLayout介绍&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout介绍&quot;&gt;&lt;/a&gt;ConstraintLayout介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ConstraintLayout&lt;/code&gt;让你可以在很平的view结构(没有多层布局嵌套)中构建一个复杂的布局结构. 有点像&lt;code&gt;RelativeLayout&lt;/code&gt;, 所有的view都是根据它和兄弟View和父layout的关系布局的, 但是它比&lt;code&gt;RelativeLayout&lt;/code&gt;要更加灵活, 在Layout Editor中也更加好用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 242</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2017/02/03/android-weekly-notes-issue-242/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2017/02/03/android-weekly-notes-issue-242/</id>
    <published>2017-02-03T09:27:49.000Z</published>
    <updated>2017-02-03T09:37:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-242&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-242&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #242&quot;&gt;&lt;/a&gt;Android Weekly Issue #242&lt;/h1&gt;&lt;p&gt;January 29th, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-242&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #242&lt;/a&gt;&lt;br&gt;本期内容包括: Android中常用的设计模式; 基于NoSQL的移动对象数据库–ObjectBox; MVC, MVP和MVVM模式的讨论; 一个Google Actions的Java SDK; 一个带黏性动画的FAB的实现; Kotlin 1.1的新功能; Firebase的实时数据库讨论; Model-View-Intent模式应用的实现; 关于实现gradient时透明颜色的使用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Common-Design-Patterns-for-Android&quot;&gt;&lt;a href=&quot;#Common-Design-Patterns-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Common Design Patterns for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.raywenderlich.com/109843/common-design-patterns-for-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Common Design Patterns for Android&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Creational-Patterns&quot;&gt;&lt;a href=&quot;#Creational-Patterns&quot; class=&quot;headerlink&quot; title=&quot;Creational Patterns&quot;&gt;&lt;/a&gt;Creational Patterns&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Builder&lt;/li&gt;
&lt;li&gt;依赖注入: 举例: Dagger &lt;/li&gt;
&lt;li&gt;Singleton&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Structural-Patterns&quot;&gt;&lt;a href=&quot;#Structural-Patterns&quot; class=&quot;headerlink&quot; title=&quot;Structural Patterns&quot;&gt;&lt;/a&gt;Structural Patterns&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Adapter&lt;/li&gt;
&lt;li&gt;Facade: 举例: Retrofit&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Behavioral-Patterns&quot;&gt;&lt;a href=&quot;#Behavioral-Patterns&quot; class=&quot;headerlink&quot; title=&quot;Behavioral Patterns&quot;&gt;&lt;/a&gt;Behavioral Patterns&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Command: 举例: EventBus&lt;/li&gt;
&lt;li&gt;Observer: 举例: RxAndroid&lt;/li&gt;
&lt;li&gt;Model View Controller&lt;/li&gt;
&lt;li&gt;Model View ViewModel&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ObjectBox-The-new-Mobile-Database&quot;&gt;&lt;a href=&quot;#ObjectBox-The-new-Mobile-Database&quot; class=&quot;headerlink&quot; title=&quot;ObjectBox - The new Mobile Database&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://greenrobot.org/announcement/introducing-objectbox-beta/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ObjectBox - The new Mobile Database&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://greenrobot.org/objectbox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ObjectBox&lt;/a&gt;是greenrobot发布的一个新的mobile对象数据库, 主要关注于性能, 据说superfast.&lt;/p&gt;
&lt;p&gt;在ObjectBox中, 主要是把NoSQL技术迁移到mobile端使用. 之前他们创建的greenDAO, 据说是最快的Object/Relational Mapper (ORM) for Android and SQLite.&lt;/p&gt;
&lt;p&gt;ObjectBox的5大特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Superfast.&lt;/li&gt;
&lt;li&gt;Object API.&lt;/li&gt;
&lt;li&gt;Instant unit testing.&lt;/li&gt;
&lt;li&gt;Simple threading.&lt;/li&gt;
&lt;li&gt;No manual schema migrations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://greenrobot.org/objectbox/documentation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/greenrobot/ObjectBoxExamples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;MVC-vs-MVP-vs-MVVM-on-Android&quot;&gt;&lt;a href=&quot;#MVC-vs-MVP-vs-MVVM-on-Android&quot; class=&quot;headerlink&quot; title=&quot;MVC vs. MVP vs. MVVM on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://realm.io/news/eric-maxwell-mvc-mvp-and-mvvm-on-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVC vs. MVP vs. MVVM on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MVC, MVP, MVVM模式的介绍.&lt;/p&gt;
&lt;h2 id=&quot;Building-Google-Actions-with-Java&quot;&gt;&lt;a href=&quot;#Building-Google-Actions-with-Java&quot; class=&quot;headerlink&quot; title=&quot;Building Google Actions with Java&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@froger_mcs/building-google-actions-with-java-696cffedbd01#.d6uuck1ho&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building Google Actions with Java&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;非官方的&lt;a href=&quot;https://github.com/frogermcs/Google-Actions-Java-SDK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Actions Java SDK&lt;/a&gt;, 本文为开发者介绍其如何使用.&lt;/p&gt;
&lt;h2 id=&quot;Android-Gooey-FAB-is-EASY&quot;&gt;&lt;a href=&quot;#Android-Gooey-FAB-is-EASY&quot; class=&quot;headerlink&quot; title=&quot;Android Gooey FAB is EASY&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://myhexaville.com/2017/01/18/android-gooey-fab-easy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Gooey FAB is EASY&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;实现一个胶黏的FAB.&lt;br&gt;首先作者展示了效果, 点击FAB, 从中逐渐分离中一个新的小按钮. 作者讨论了这种效果可能的实现方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用bitmap的mesh transformation, 这是能高度自定义的.&lt;/li&gt;
&lt;li&gt;创建自定义View, 自己绘制Path.&lt;/li&gt;
&lt;li&gt;最简单的办法: 用Animated Vector Drawable, 即本文所介绍的方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码在这里: &lt;a href=&quot;https://github.com/IhorKlimov/Android-Animations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Animations&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-Comes-in-Kotlin-1-1-for-Android-Developers&quot;&gt;&lt;a href=&quot;#What-Comes-in-Kotlin-1-1-for-Android-Developers&quot; class=&quot;headerlink&quot; title=&quot;What Comes in Kotlin 1.1 for Android Developers?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.elpassion.com/what-comes-in-kotlin-1-1-for-android-developers-831d559f780f#.wlmujxwi3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What Comes in Kotlin 1.1 for Android Developers?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kotlin 1.1的新features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coroutines. 改善Kotlin中的异步编程.&lt;/li&gt;
&lt;li&gt;Type Aliases. 可以为类型起别名.&lt;/li&gt;
&lt;li&gt;Inlining Property Accessors.&lt;/li&gt;
&lt;li&gt;Less Restrictive Inheritance. sealed类的子类不用再放在同一个类中; 非final的类现在也可以继承data类了.&lt;/li&gt;
&lt;li&gt;Destructuring and Underscores.&lt;/li&gt;
&lt;li&gt;Methods Count. 作者对比了一个sample程序, 用kotlin的不同版本, 发现用最新版kotlin确实会增加一些方法数, 但它仍然算是一个很轻量的库.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Understanding-the-Power-of-Firebase-Security-Rules&quot;&gt;&lt;a href=&quot;#Understanding-the-Power-of-Firebase-Security-Rules&quot; class=&quot;headerlink&quot; title=&quot;Understanding the Power of Firebase Security Rules&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@dftaiwo/understanding-the-power-of-firebase-security-rules-part-1-f46aae773a24#.cw34j1v2z&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding the Power of Firebase Security Rules&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者要写关于Firebase的一系列文章: 第一和第二篇主要介绍实时数据库的规则, 第三篇介绍Storage的规则.&lt;/p&gt;
&lt;p&gt;关于实时数据库规则的主要内容包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别你的用户.&lt;/li&gt;
&lt;li&gt;控制数据访问权限.&lt;/li&gt;
&lt;li&gt;验证创建, 更新和删除操作.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Reactive-apps-with-Model-View-Intent-Part-3&quot;&gt;&lt;a href=&quot;#Reactive-apps-with-Model-View-Intent-Part-3&quot; class=&quot;headerlink&quot; title=&quot;Reactive apps with Model-View-Intent - Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hannesdorfmann.com/android/mosby3-mvi-3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive apps with Model-View-Intent - Part 3&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上一篇中介绍了用Model-View-Intent模式来构建一个单相数据流的简单屏. 这篇文章接着讲如何用MVI和state reducer来构建一个复杂屏.&lt;/p&gt;
&lt;p&gt;(感觉太复杂了我没仔细看).&lt;/p&gt;
&lt;h2 id=&quot;Android-Dev-Tip-3-A-gotcha-with-color-transparent&quot;&gt;&lt;a href=&quot;#Android-Dev-Tip-3-A-gotcha-with-color-transparent&quot; class=&quot;headerlink&quot; title=&quot;Android Dev Tip #3: A gotcha with color/transparent&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://android.jlelse.eu/android-dev-tip-3-99da754151ad#.rarx8jafm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Dev Tip #3: A gotcha with color/transparent&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你要在xml中用gradient写一个渐变色, 对于透明色&lt;code&gt;@android:color/transparent.&lt;/code&gt;的使用一定要注意.&lt;/p&gt;
&lt;p&gt;透明色&lt;code&gt;@android:color/transparent.&lt;/code&gt;的色值是&lt;code&gt;#00000000&lt;/code&gt;, 所以它实际上代表的是一个透明的黑色.&lt;/p&gt;
&lt;p&gt;在gradient进行插值的时候, 会对ARGB每一个通道的色值都分别进行插值然后叠加.&lt;/p&gt;
&lt;p&gt;所以如果你想要保持颜色不变, 只改变透明度, 也即Alpha通道的值, 你就应该把透明色中RGB颜色设置为和原来的颜色一样. &lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;PreviewSeekBar&quot;&gt;&lt;a href=&quot;#PreviewSeekBar&quot; class=&quot;headerlink&quot; title=&quot;PreviewSeekBar&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/rubensousa/PreviewSeekBar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PreviewSeekBar&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个带Preview的SeekBar.&lt;/p&gt;
&lt;h2 id=&quot;AndroidTestingBox&quot;&gt;&lt;a href=&quot;#AndroidTestingBox&quot; class=&quot;headerlink&quot; title=&quot;AndroidTestingBox&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://roroche.github.io/AndroidTestingBox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidTestingBox&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android项目, 用于实验各种测试工具.&lt;/p&gt;
&lt;h2 id=&quot;FunctionalRx2&quot;&gt;&lt;a href=&quot;#FunctionalRx2&quot; class=&quot;headerlink&quot; title=&quot;FunctionalRx2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/pakoito/FunctionalRx2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FunctionalRx2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;a collection of constructs to simplify a functional programming approach to Java and Android.&lt;/p&gt;
&lt;h2 id=&quot;gradle-completion&quot;&gt;&lt;a href=&quot;#gradle-completion&quot; class=&quot;headerlink&quot; title=&quot;gradle-completion&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/eriwen/gradle-completion&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-completion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;gradle的tab补全, for bash and zsh.&lt;/p&gt;
&lt;h2 id=&quot;ObjectBox&quot;&gt;&lt;a href=&quot;#ObjectBox&quot; class=&quot;headerlink&quot; title=&quot;ObjectBox&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/greenrobot/ObjectBox&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ObjectBox&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;超快的移动平台对象数据库.&lt;/p&gt;
&lt;h2 id=&quot;superlightstack&quot;&gt;&lt;a href=&quot;#superlightstack&quot; class=&quot;headerlink&quot; title=&quot;superlightstack&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nextdimension/superlightstack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;superlightstack&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个轻量级的库, 用于创建View的stack, 并处理转换和状态维持.&lt;/p&gt;
&lt;h2 id=&quot;PicassoFaceDetectionTransformation&quot;&gt;&lt;a href=&quot;#PicassoFaceDetectionTransformation&quot; class=&quot;headerlink&quot; title=&quot;PicassoFaceDetectionTransformation&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/aryarohit07/PicassoFaceDetectionTransformation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PicassoFaceDetectionTransformation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个配合picasso使用的图像转换库, 可以根据人脸检测自动确定范围而切图.&lt;/p&gt;
&lt;p&gt;(Readme中附有配合Glide和Fresco使用的版本.)&lt;/p&gt;
&lt;h2 id=&quot;cwac-netsecurity&quot;&gt;&lt;a href=&quot;#cwac-netsecurity&quot; class=&quot;headerlink&quot; title=&quot;cwac-netsecurity&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/commonsguy/cwac-netsecurity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cwac-netsecurity&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This library contains a backport of the Android 7.0 network security configuration subsystem.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-242&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-242&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #242&quot;&gt;&lt;/a&gt;Android Weekly Issue #242&lt;/h1&gt;&lt;p&gt;January 29th, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-242&quot;&gt;Android Weekly Issue #242&lt;/a&gt;&lt;br&gt;本期内容包括: Android中常用的设计模式; 基于NoSQL的移动对象数据库–ObjectBox; MVC, MVP和MVVM模式的讨论; 一个Google Actions的Java SDK; 一个带黏性动画的FAB的实现; Kotlin 1.1的新功能; Firebase的实时数据库讨论; Model-View-Intent模式应用的实现; 关于实现gradient时透明颜色的使用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="MVC" scheme="http://mengdd.github.io/tags/MVC/"/>
    
      <category term="Color" scheme="http://mengdd.github.io/tags/Color/"/>
    
      <category term="Design Patterns" scheme="http://mengdd.github.io/tags/Design-Patterns/"/>
    
      <category term="ObjectBox" scheme="http://mengdd.github.io/tags/ObjectBox/"/>
    
      <category term="Google Actions" scheme="http://mengdd.github.io/tags/Google-Actions/"/>
    
      <category term="FAB" scheme="http://mengdd.github.io/tags/FAB/"/>
    
      <category term="Model-View-Intent" scheme="http://mengdd.github.io/tags/Model-View-Intent/"/>
    
      <category term="Gradient" scheme="http://mengdd.github.io/tags/Gradient/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 241</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2017/01/25/android-weekly-notes-issue-241/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2017/01/25/android-weekly-notes-issue-241/</id>
    <published>2017-01-25T01:40:01.000Z</published>
    <updated>2017-01-25T01:52:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-241&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-241&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #241&quot;&gt;&lt;/a&gt;Android Weekly Issue #241&lt;/h1&gt;&lt;p&gt;January 22nd, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-241&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #241&lt;/a&gt;&lt;br&gt;本期内容包括: 经典导航模式Master/Detail的设计和实现; APK的大小讨论和增量下载大小的预估工具; Model-View-Intent模式的讨论和实现; 分多个modules对build时间的影响; 测试中能够利用的一些Android特有的接缝设计(manifest, build config, resource).&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Case-Study-Master-Detail-Pattern-Revisited&quot;&gt;&lt;a href=&quot;#Case-Study-Master-Detail-Pattern-Revisited&quot; class=&quot;headerlink&quot; title=&quot;Case Study. Master/Detail Pattern Revisited&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://goneremote.io/master-detail-pattern/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Case Study. Master/Detail Pattern Revisited&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Master/Detail是一种经典的导航流, master屏包含一个list, detail显示某一项的详细信息. &lt;a href=&quot;https://developer.android.com/training/implementing-navigation/descendant.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Doc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者讲了他适配多种屏幕(包括平板)的设计, 以及简单的实现.&lt;/p&gt;
&lt;h2 id=&quot;Tracking-app-update-sizes&quot;&gt;&lt;a href=&quot;#Tracking-app-update-sizes&quot; class=&quot;headerlink&quot; title=&quot;Tracking app update sizes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/tracking-app-update-sizes-1a1f57634f7b#.v2ecs8u4t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tracking app update sizes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;以前作者有一系列的&lt;a href=&quot;https://medium.com/google-developers/smallerapk-part-1-anatomy-of-an-apk-da83c25e7003#.dv2tfqdyq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;讲过apk的组成以及如何减少apk的大小.&lt;/p&gt;
&lt;p&gt;事实上app的大小可以分下面四种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提交到Google Play的APK文件大小.&lt;/li&gt;
&lt;li&gt;初始的下载大小.&lt;/li&gt;
&lt;li&gt;在设备上的安装大小.&lt;/li&gt;
&lt;li&gt;更新下载大小.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前的一些文章可能都在讨论如何减少初始的大小, 但是大多数情况用户可能只安装你的应用一次, 之后就只是从Play Store更新, 所以应用的更新大小也是很重要的.&lt;/p&gt;
&lt;p&gt;事实上Android Studio(2.2+)改善了打包apk的机制, (&lt;a href=&quot;https://android-developers.googleblog.com/2016/11/understanding-apk-packaging-in-android-studio-2-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk packaging&lt;/a&gt;), 使得每一个build都尽可能地相似, 这样Play Store就能计算出一个较小的delta更新. 另外, Play Store也引入了新的算法, 比如最近的&lt;a href=&quot;https://android-developers.googleblog.com/2016/12/saving-data-reducing-the-size-of-app-updates-by-65-percent.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;File-By-File patching&lt;/a&gt;, 同样也有效减小了更新的大小.&lt;/p&gt;
&lt;p&gt;所以我们要注意的就是不要介入和干扰当前Android Studio和Play Store的这些优化, 比如不要用自定义的ZIP加密设置来自己压缩APK. 也不要用Zopfli来再次压缩APK.&lt;/p&gt;
&lt;p&gt;Play Store上会显示应用的下载大小, 如果用户已经安装了, 则显示的是更新大小.&lt;/p&gt;
&lt;p&gt;对于开发者来说, 如果能在发布前知道这些信息就更好了, 所以作者他们开源了这个库: &lt;a href=&quot;https://github.com/googlesamples/apk-patch-size-estimator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk-patch-size-estimator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个命令行的工具, 可以集成到CI里, 也可以手动比较两个apk文件.&lt;/p&gt;
&lt;p&gt;这个工具实现了当前Play Store的算法, 可以帮你估计出初始的apk下载大小和更新下载大小.&lt;/p&gt;
&lt;p&gt;(注意下载大小和apk文件大小不同因为Play Store可能会做进一步压缩.)&lt;/p&gt;
&lt;p&gt;同样, Android Studio中也有一个图形化的 APK Analyzer工具, 可以做apk的比较, 让你看到到底是哪一部分的尺寸增长了.&lt;/p&gt;
&lt;h2 id=&quot;Reactive-Apps-with-Model-View-Intent-Part-2&quot;&gt;&lt;a href=&quot;#Reactive-Apps-with-Model-View-Intent-Part-2&quot; class=&quot;headerlink&quot; title=&quot;Reactive Apps with Model-View-Intent - Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hannesdorfmann.com/android/mosby3-mvi-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Apps with Model-View-Intent - Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上一篇文章讨论了一个好的Model层可以解决很多问题. 这篇来介绍&lt;code&gt;Model-View-Intent&lt;/code&gt;模式.&lt;/p&gt;
&lt;h3 id=&quot;Model-View-Intent模式&quot;&gt;&lt;a href=&quot;#Model-View-Intent模式&quot; class=&quot;headerlink&quot; title=&quot;Model-View-Intent模式&quot;&gt;&lt;/a&gt;Model-View-Intent模式&lt;/h3&gt;&lt;p&gt;Model-View-Intent模式是在一个JavaScript的framework &lt;code&gt;cycle.js&lt;/code&gt;中提出的.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/view-model-intent.png&quot; alt=&quot;view-model-intent&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intent()&lt;/code&gt;: 这个方法接收用户输入, 然后输出将会作为参数传给&lt;code&gt;model()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model()&lt;/code&gt;: 接收&lt;code&gt;intent()&lt;/code&gt;的输出作为自己的输入, 来操纵Model, 这个方法的输出是一个新的Model(状态变化). 所以它不应该更新一个已经存在的Model. 因为我们想要不可变性. 注意这里是唯一一个允许创建新Model的地方.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;view()&lt;/code&gt;: 接收&lt;code&gt;model()&lt;/code&gt;方法返回的model作为输入, 然后将其展示出来.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用RxJava连接&quot;&gt;&lt;a href=&quot;#用RxJava连接&quot; class=&quot;headerlink&quot; title=&quot;用RxJava连接&quot;&gt;&lt;/a&gt;用RxJava连接&lt;/h3&gt;&lt;p&gt;我们希望数据流是单向的, 于是我们用了RxJava, 它很适合这种基于事件的编程, 在这里主要是UI事件.&lt;/p&gt;
&lt;p&gt;作者之后举了一个实现的例子, 在这个例子中他们的Model层用了ViewState后缀. &lt;code&gt;SearchInteractor&lt;/code&gt;用来执行搜索, 返回的结果是&lt;code&gt;Observable&amp;lt;SearchViewState&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这个模式中定义的View接口里包含了&lt;code&gt;render()&lt;/code&gt;方法, 根据传入的状态model显示UI; 这个View接口其实还包含了&lt;code&gt;intent()&lt;/code&gt;的方法, 返回的是一个&lt;code&gt;Observable&lt;/code&gt;, UI中用了&lt;a href=&quot;https://github.com/JakeWharton/RxBinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxBinding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;最后一步就是, 如何将View的intent和业务逻辑联系起来呢? 这里用到了一个额外的组件: &lt;code&gt;Presenter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这个Presenter看起来像这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SearchPresenter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MviBasePresenter&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;SearchView&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;SearchViewState&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; SearchInteractor searchInteractor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bindIntents&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Observable&amp;lt;SearchViewState&amp;gt; search =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent(SearchView::searchIntent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .switchMap(searchInteractor::search) &lt;span class=&quot;comment&quot;&gt;// I have used flatMap() in the video above, but switchMap() makes more sense here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .observeOn(AndroidSchedulers.mainThread());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscribeViewState(search, SearchView::render);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MviBasePresenter&lt;/code&gt;是&lt;a href=&quot;https://github.com/sockeqwe/mosby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mosby&lt;/a&gt;中的一个类.&lt;br&gt;这个类做的事情就是当View第一次attach到Prensenter上时, 调用&lt;code&gt;bindIntent()&lt;/code&gt;方法将来自view的intent绑定到业务逻辑上, 只有第一次会绑定, 当View再次attach时不会发生.&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;subscribeViewState()&lt;/code&gt;方法则处理了定于管理, 避免内存泄露(具体原因见原文).&lt;/p&gt;
&lt;h2 id=&quot;How-modularization-affects-build-time-of-an-Android-application&quot;&gt;&lt;a href=&quot;#How-modularization-affects-build-time-of-an-Android-application&quot; class=&quot;headerlink&quot; title=&quot;How modularization affects build time of an Android application&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@nikita.kozlov/how-modularisation-affects-build-time-of-an-android-application-43a984ce9968#.hzgv3h6cm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How modularization affects build time of an Android application&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android应用至少有一个application module, build这个module之后得到一个.apk文件.&lt;/p&gt;
&lt;p&gt;application module之间不能相互依赖, 它只能依赖于library, build library module的结果是得到一个.aar(Android Archive Library)文件.&lt;/p&gt;
&lt;p&gt;build的过程可以粗略分为5个阶段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.准备依赖.&lt;/li&gt;
&lt;li&gt;2.Merge资源和manifest.&lt;/li&gt;
&lt;li&gt;3.编译. 从annotation processors开始, 把源码编译成字节码.&lt;/li&gt;
&lt;li&gt;4.后处理. 所有以&lt;code&gt;transform&lt;/code&gt;开头的gradle tasks都属于这个阶段. 其中最重要的是&lt;code&gt;transformClassesWithMultidexlist&lt;/code&gt;和&lt;code&gt;transformClassesWithDex&lt;/code&gt;, 它们生成了.dex文件.&lt;/li&gt;
&lt;li&gt;5.打包发布. 对library来说是生成.aar, 对application来说是生成.apk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们都知道gradle只有在输入变化了的情况下才会重跑task. 而且如果一个module没有变化, 也不会被重新build, 那么就出现了一种假设: 多个module应用的增量build要比单个module的快, 因为只有被改变了的module才会重新编译.&lt;/p&gt;
&lt;p&gt;作者想验证这种假设是否正确.&lt;br&gt;他用的工具就是:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradle assembleDebug --profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;做了一系列实验之后证明这个假设还是有道理的.&lt;/p&gt;
&lt;p&gt;实验过程中的一些发现:&lt;/p&gt;
&lt;p&gt;1.当应用被拆分为多个modules之后, 改变application module中的代码, build时间会减少; 但是library中的代码, build时间反而会增加. 这是因为library build的时候debug和release的tasks都执行了(并不知道为什么).&lt;/p&gt;
&lt;p&gt;当library module被这样添加的时候:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile project(path: &amp;apos;:app2&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile project(path: &amp;apos;:app3&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不管app当前的build type是什么, app永远依赖的是library的release版本.&lt;/p&gt;
&lt;p&gt;这是一个Gradle当前的限制. 参见&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Library-Publication&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Library-Publication&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;幸运的是, 我们可以改变这一行为:&lt;br&gt;首先在library中添加:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaultPublishConfig &amp;apos;release&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        publishNonDefault true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;让它也可以发布debug版.&lt;br&gt;在app中依赖的时候:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    debugCompile project(path: &amp;apos;:app2&amp;apos;, configuration: &amp;quot;debug&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    releaseCompile project(path: &amp;apos;:app2&amp;apos;, configuration: &amp;quot;release&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    debugCompile project(path: &amp;apos;:app3&amp;apos;, configuration: &amp;quot;debug&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    releaseCompile project(path: &amp;apos;:app3&amp;apos;, configuration: &amp;quot;release&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样debug和release都只依赖各自对应版本的library了.&lt;/p&gt;
&lt;p&gt;2.不管我们改动的是library中的代码还是application中的代码, application module永远都会被重新编译, 所以减小app module的尺寸很有意义.&lt;/p&gt;
&lt;p&gt;3.上面这些都是library之间互相独立的情况, 如果library之间还有相互依赖, 那么build时间也会变长.&lt;/p&gt;
&lt;p&gt;4.如果应用超出了DEX的方法数限制, 用了multidex, 也会增加build时间, Android 5.0开始使用了一个叫做ART的runtime, 在这方面有一些优化, 可以减少build时间, 所以我们可以在开发的时候设置最小API是21: &lt;a href=&quot;https://developer.android.com/studio/build/multidex.html#dev-build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optimize multidex in development builds&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Exploiting-Android-Seams-for-Testing-and-Flexibility&quot;&gt;&lt;a href=&quot;#Exploiting-Android-Seams-for-Testing-and-Flexibility&quot; class=&quot;headerlink&quot; title=&quot;Exploiting Android Seams for Testing and Flexibility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.philosophicalhacker.com/post/exploiting-android-specific-seams-for-testing-and-flexibility/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploiting Android Seams for Testing and Flexibility&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何让Android应用代码可测试? 答案是创建一些接缝. 这篇文章中, 作者将一些Android特有的接缝, 来让我们的应用更加灵活和易测.&lt;/p&gt;
&lt;h3 id=&quot;Manifest接缝&quot;&gt;&lt;a href=&quot;#Manifest接缝&quot; class=&quot;headerlink&quot; title=&quot;Manifest接缝&quot;&gt;&lt;/a&gt;Manifest接缝&lt;/h3&gt;&lt;p&gt;使用&lt;a href=&quot;https://developer.android.com/studio/build/manifest-merge.html#merge_rule_markers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Merge rule markers&lt;/a&gt;可以方便地更改manifest.&lt;/p&gt;
&lt;p&gt;比如在build variant是mock的时候, 由于我们在src/mock/AndroidManifest.xml里这样写:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- src/mock/AndroidManifest.xml --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.StubConfigActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;tools:node&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以在build mock的时候, 启动Activity会被替换成上面这个&lt;code&gt;StubConfigActivity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;还有更多的可能值得探索, 比如你可以替换filter的内容, 从而改变默认intent启动的Activity.&lt;/p&gt;
&lt;h3 id=&quot;BuildConfig接缝&quot;&gt;&lt;a href=&quot;#BuildConfig接缝&quot; class=&quot;headerlink&quot; title=&quot;BuildConfig接缝&quot;&gt;&lt;/a&gt;BuildConfig接缝&lt;/h3&gt;&lt;p&gt;在gradle中可以根据不同的build variant来定义&lt;code&gt;BuildConfig&lt;/code&gt;中的变量值. &lt;/p&gt;
&lt;p&gt;默认情况下&lt;code&gt;BuildConfig&lt;/code&gt;中会包含一些有用的变量比如&lt;code&gt;DEBUG&lt;/code&gt;和&lt;code&gt;FLAVOR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;我们可以创建更多额外的变量:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;productFlavors &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildConfigField(&amp;apos;Boolean&amp;apos;, &amp;apos;MOCK&amp;apos;, &amp;quot;true&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个简单的应用case是我们可以定义不同的base url:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  buildConfigField(&amp;apos;String&amp;apos;, &amp;apos;API_BASE&amp;apos;, &amp;apos;\&amp;quot;api.awesomecompany.com\&amp;quot;&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;productFlavors &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sandbox &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildConfigField(&amp;apos;String&amp;apos;, &amp;apos;API_BASE&amp;apos;, &amp;apos;\&amp;quot;localhost:8080\&amp;quot;&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Resource接缝&quot;&gt;&lt;a href=&quot;#Resource接缝&quot; class=&quot;headerlink&quot; title=&quot;Resource接缝&quot;&gt;&lt;/a&gt;Resource接缝&lt;/h3&gt;&lt;p&gt;不同build variants的资源就像manifest一样, 最后会被merged. 但是对于资源我们没有markers可以控制它们如何merge. &lt;/p&gt;
&lt;p&gt;我们可以利用默认的merge行为: &lt;a href=&quot;https://developer.android.com/studio/write/add-resources.html#resource_merging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Resource merging&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;优先级是这样的:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;build variant &amp;gt; build type &amp;gt; product flavor &amp;gt; main source set &amp;gt; library dependencies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以我们可以把默认的资源放在main里, 然后在特定的build variant再创建一份覆盖它们.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Reptar&quot;&gt;&lt;a href=&quot;#Reptar&quot; class=&quot;headerlink&quot; title=&quot;Reptar&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Commit451/Reptar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reptar&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RxJava2.x的有用的类的集合.&lt;/p&gt;
&lt;h2 id=&quot;Toasty&quot;&gt;&lt;a href=&quot;#Toasty&quot; class=&quot;headerlink&quot; title=&quot;Toasty&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/GrenderG/Toasty&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toasty&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;前面加了一个icon的Toast, 带背景颜色, 除了内置的error, info, success, warning等几种形式, 还可以自定义.&lt;/p&gt;
&lt;h2 id=&quot;Google-Actions-Java-SDK&quot;&gt;&lt;a href=&quot;#Google-Actions-Java-SDK&quot; class=&quot;headerlink&quot; title=&quot;Google-Actions-Java-SDK&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/frogermcs/Google-Actions-Java-SDK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google-Actions-Java-SDK&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;非官方的Google Actions Java SDK.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-241&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-241&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #241&quot;&gt;&lt;/a&gt;Android Weekly Issue #241&lt;/h1&gt;&lt;p&gt;January 22nd, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-241&quot;&gt;Android Weekly Issue #241&lt;/a&gt;&lt;br&gt;本期内容包括: 经典导航模式Master/Detail的设计和实现; APK的大小讨论和增量下载大小的预估工具; Model-View-Intent模式的讨论和实现; 分多个modules对build时间的影响; 测试中能够利用的一些Android特有的接缝设计(manifest, build config, resource).&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="RxJava2" scheme="http://mengdd.github.io/tags/RxJava2/"/>
    
      <category term="APK" scheme="http://mengdd.github.io/tags/APK/"/>
    
      <category term="Testing" scheme="http://mengdd.github.io/tags/Testing/"/>
    
      <category term="Master/Detail" scheme="http://mengdd.github.io/tags/Master-Detail/"/>
    
      <category term="MVI" scheme="http://mengdd.github.io/tags/MVI/"/>
    
      <category term="Build Time" scheme="http://mengdd.github.io/tags/Build-Time/"/>
    
      <category term="Toast" scheme="http://mengdd.github.io/tags/Toast/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 240</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2017/01/24/android-weekly-notes-issue-240/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2017/01/24/android-weekly-notes-issue-240/</id>
    <published>2017-01-24T02:50:19.000Z</published>
    <updated>2017-01-24T02:58:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-240&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-240&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #240&quot;&gt;&lt;/a&gt;Android Weekly Issue #240&lt;/h1&gt;&lt;p&gt;January 15th, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-240&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #240&lt;/a&gt;&lt;br&gt;Hello, 各位亲, 从本篇笔记开始, 以后并不包含Android Weekly的每一篇文章了, 只是选一些我感兴趣的做笔记. 想要看全部文章的还请点击上面的链接.&lt;/p&gt;
&lt;p&gt;本期内容包括: 一个Android的RxJava教程; 关于测试中的注释讨论; Dagger2的实现细节讨论; Kotlin语言设计中和Effective Java相关的点和优化; Reactive app的构建模式, 一个好的model层的重要性; 怎样写数据库测试.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;RxAndroid-Tutorial&quot;&gt;&lt;a href=&quot;#RxAndroid-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;RxAndroid Tutorial&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.raywenderlich.com/141980/rxandroid-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxAndroid Tutorial&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个RxAndroid的Tutorial, 内容包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reactive Programming是什么. -&amp;gt; 把reactive programming比喻成excel里面的表达式.&lt;/li&gt;
&lt;li&gt;observable是什么.&lt;/li&gt;
&lt;li&gt;如何把按钮点击和输入文字改变事件事件变为observables.&lt;/li&gt;
&lt;li&gt;转换.&lt;/li&gt;
&lt;li&gt;过滤.&lt;/li&gt;
&lt;li&gt;指定线程.&lt;/li&gt;
&lt;li&gt;把多个observables联合成一个.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Clean-tests-Part-2-Comments&quot;&gt;&lt;a href=&quot;#Clean-tests-Part-2-Comments&quot; class=&quot;headerlink&quot; title=&quot;Clean tests, Part 2: Comments&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://android.jlelse.eu/clean-tests-part-2-comments-4016ee82f186#.15u9kq7jz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clean tests, Part 2: Comments&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上一篇文章里作者讨论了测试代码的命名, 这篇讨论注释.&lt;br&gt;在测试里我们经常会见到这样的注释:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;// GIVEN&lt;/li&gt;
&lt;li&gt;// WHEN&lt;/li&gt;
&lt;li&gt;// THEN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意每一次添加注释的时候都应该想清楚自己的代码是不是能够自解释, 而不是依赖于注释. 这条原则同样适用于产品代码和测试代码.&lt;/p&gt;
&lt;p&gt;为每一个测试重复这三行其实没有什么意义, 因为这个顺序是显而易见的.&lt;/p&gt;
&lt;p&gt;理想情况下, 简单的测试并不需要这些注释就显得很好看了, 如果是复杂的测试, 一般执行应该是一行, 验证也应该是一行, 如果需要太多验证我们应该考虑把它们抽取成多个测试方法. 而关于准备阶段, 如果我们真的需要很多准备的代码, 这是一种code smell, 可能说明我们要测试的这个方法做了太多事情, 可能我们应该先重构一下再进行测试.&lt;/p&gt;
&lt;p&gt;我们也应该好好利用&lt;code&gt;setUp()&lt;/code&gt;方法, 让我们的测试看起来更干净.&lt;/p&gt;
&lt;p&gt;最后建议用一些比较好的assert库让最后的断言语句看起来更易懂.&lt;/p&gt;
&lt;h2 id=&quot;Android-Dagger2-Critical-things-to-know-before-you-implement&quot;&gt;&lt;a href=&quot;#Android-Dagger2-Critical-things-to-know-before-you-implement&quot; class=&quot;headerlink&quot; title=&quot;Android Dagger2: Critical things to know before you implement&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.mindorks.com/android-dagger2-critical-things-to-know-before-you-implement-275663aecc3e#.nxpqzmohn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Dagger2: Critical things to know before you implement&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于Dagger2的实现, 你应该搞清楚的几个关键点.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现单例的时候, 如果提供了@Provides方法, 那么@Singleton也要在这个provides方法上声明, 声明在类上是没有用的. (类的单例声明只和构造@Inject配合使用).&lt;/li&gt;
&lt;li&gt;在component中提供了get方法后, 如果这个get方法没有被调用, 则对象不会被实例化.&lt;/li&gt;
&lt;li&gt;Scope可以定义在该scope下的单例.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;How-“Effective-Java”-may-have-influenced-the-design-of-Kotlin&quot;&gt;&lt;a href=&quot;#How-“Effective-Java”-may-have-influenced-the-design-of-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;How “Effective Java” may have influenced the design of Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@lukleDev/how-effective-java-may-have-influenced-the-design-of-kotlin-part-1-45fd64c2f974#.nqwl31wn6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How “Effective Java” may have influenced the design of Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kotlin的设计中考虑到的和Effective Java相关的几个点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin的构造默认参数值进一步简化了Builder模式.&lt;/li&gt;
&lt;li&gt;更容易创建单例: 用object声明.&lt;/li&gt;
&lt;li&gt;用了data声明后, 再也不用自己写&lt;code&gt;equals()&lt;/code&gt;和&lt;code&gt;hashCode()&lt;/code&gt;了.&lt;/li&gt;
&lt;li&gt;properties自带了默认的get/set, 使用更加简洁, 也支持后续扩展.&lt;/li&gt;
&lt;li&gt;Kotlin中的override关键字是强制的而不是可选的.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Reactive-apps-with-Model-View-Intent-Part-1&quot;&gt;&lt;a href=&quot;#Reactive-apps-with-Model-View-Intent-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Reactive apps with Model-View-Intent - Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hannesdorfmann.com/android/mosby3-mvi-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive apps with Model-View-Intent - Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者用RxJava + Model-View-Intent (MVI)构建的Reactive App, 也即UI响应状态变化的App.&lt;/p&gt;
&lt;p&gt;首先作者列举了Android流行的模式MVC, MVP, MVVM, 这里面都会有一个Model. 但是作者发现大多数时候程序并没有Model这一层.&lt;/p&gt;
&lt;p&gt;构建一个好的Model层可以解决很多问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态.&lt;/li&gt;
&lt;li&gt;屏幕方向旋转.&lt;/li&gt;
&lt;li&gt;后退导航.&lt;/li&gt;
&lt;li&gt;进程死亡.&lt;/li&gt;
&lt;li&gt;不可变和单向的数据流.&lt;/li&gt;
&lt;li&gt;可调试和重复的状态.&lt;/li&gt;
&lt;li&gt;可测试性.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最基本的理念就是把这个Model层作为唯一的真实状态来源.&lt;/p&gt;
&lt;h2 id=&quot;Testing-SQLite-on-Android-–-Medium&quot;&gt;&lt;a href=&quot;#Testing-SQLite-on-Android-–-Medium&quot; class=&quot;headerlink&quot; title=&quot;Testing SQLite on Android – Medium&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@MAFI8919/testing-sqlite-on-android-bfa0733e11e7#.a4hufzbc7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing SQLite on Android – Medium&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何写SQLite数据库测试.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Desertplaceholder&quot;&gt;&lt;a href=&quot;#Desertplaceholder&quot; class=&quot;headerlink&quot; title=&quot;Desertplaceholder&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JetradarMobile/desertplaceholder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Desertplaceholder&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个沙漠空白页面.&lt;/p&gt;
&lt;h2 id=&quot;Android-SwitchIcon&quot;&gt;&lt;a href=&quot;#Android-SwitchIcon&quot; class=&quot;headerlink&quot; title=&quot;Android-SwitchIcon&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/zagum/Android-SwitchIcon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-SwitchIcon&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google launcher风格的Switch icon, enable时点亮, disable时灰去.&lt;/p&gt;
&lt;h2 id=&quot;SlidesCodeHighlighter&quot;&gt;&lt;a href=&quot;#SlidesCodeHighlighter&quot; class=&quot;headerlink&quot; title=&quot;SlidesCodeHighlighter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/romannurik/SlidesCodeHighlighter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SlidesCodeHighlighter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个web应用, 让你可以把带有高亮的代码拷贝进slides.&lt;/p&gt;
&lt;h2 id=&quot;GithubWidget&quot;&gt;&lt;a href=&quot;#GithubWidget&quot; class=&quot;headerlink&quot; title=&quot;GithubWidget&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Nightonke/GithubWidget&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GithubWidget&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Github Widget, 显示Contributions, stars, followers, trending etc.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-240&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-240&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #240&quot;&gt;&lt;/a&gt;Android Weekly Issue #240&lt;/h1&gt;&lt;p&gt;January 15th, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-240&quot;&gt;Android Weekly Issue #240&lt;/a&gt;&lt;br&gt;Hello, 各位亲, 从本篇笔记开始, 以后并不包含Android Weekly的每一篇文章了, 只是选一些我感兴趣的做笔记. 想要看全部文章的还请点击上面的链接.&lt;/p&gt;
&lt;p&gt;本期内容包括: 一个Android的RxJava教程; 关于测试中的注释讨论; Dagger2的实现细节讨论; Kotlin语言设计中和Effective Java相关的点和优化; Reactive app的构建模式, 一个好的model层的重要性; 怎样写数据库测试.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="Testing" scheme="http://mengdd.github.io/tags/Testing/"/>
    
      <category term="SQLite" scheme="http://mengdd.github.io/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 239</title>
    <link href="http://mengdd.github.io/Android-Weekly/2017/01/10/android-weekly-notes-issue-239/"/>
    <id>http://mengdd.github.io/Android-Weekly/2017/01/10/android-weekly-notes-issue-239/</id>
    <published>2017-01-10T06:10:31.000Z</published>
    <updated>2017-01-10T06:29:56.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-239&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-239&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #239&quot;&gt;&lt;/a&gt;Android Weekly Issue #239&lt;/h1&gt;&lt;p&gt;January 8th, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-239&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #239&lt;/a&gt;&lt;br&gt;本期内容包括: Android Things开发; Android中有用却不常见的一些API介绍(拼写检查, 文字识别, 时间log, 截图, 创建PDF); Gradle依赖管理冲突和解决办法; Looper, Handler和HandlerThread; 兼顾Wear1.0和2.0的部署方式; 打开PDF的实现方法; 单元测试的命名; Robolectric的弊病; 迁移到RxJava2的好处和面临的挑战. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Preparing-your-computer-for-Android-dev&quot;&gt;&lt;a href=&quot;#Preparing-your-computer-for-Android-dev&quot; class=&quot;headerlink&quot; title=&quot;Preparing your computer for Android dev&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@rafael_toledo/preparing-your-android-environment-for-development-android-tutorials-pt-1-5f76ca2b8a32#.yxa0bvkp5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Preparing your computer for Android dev&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Windows, OSX和Linux上设置开发环境.&lt;/p&gt;
&lt;h2 id=&quot;Beginner’s-guide-to-Raspberry-Pi-3-B-and-Android-Things&quot;&gt;&lt;a href=&quot;#Beginner’s-guide-to-Raspberry-Pi-3-B-and-Android-Things&quot; class=&quot;headerlink&quot; title=&quot;Beginner’s guide to Raspberry Pi 3 B and Android Things&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.andtuts.com/a-beginners-guide-to-raspberry-pi-3-b-and-android-things/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beginner’s guide to Raspberry Pi 3 B and Android Things&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何Set up with Android Things.&lt;/p&gt;
&lt;h2 id=&quot;Creating-new-project-and-emulator-on-Android-Studio&quot;&gt;&lt;a href=&quot;#Creating-new-project-and-emulator-on-Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;Creating new project and emulator on Android Studio&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@rafael_toledo/creating-a-new-project-and-an-emulator-on-android-studio-android-tutorials-2-35bd965ac42b#.lwlhy72wf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating new project and emulator on Android Studio&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何创建新项目和模拟器.&lt;/p&gt;
&lt;h2 id=&quot;Discovering-Android-API&quot;&gt;&lt;a href=&quot;#Discovering-Android-API&quot; class=&quot;headerlink&quot; title=&quot;Discovering Android API&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.autsoft.hu/discovering-the-android-api-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Discovering Android API&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android是基于Java的, Java本身已经有四千多个类, Android API也有很多个类, 有一些不太常见但是却很有用的API我们应该了解一下.&lt;/p&gt;
&lt;p&gt;这篇文章就旨在发现那些不常见却很有用的API, 并且附有一个&lt;a href=&quot;https://github.com/peekler/GDG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;No-1-Spell-Checker&quot;&gt;&lt;a href=&quot;#No-1-Spell-Checker&quot; class=&quot;headerlink&quot; title=&quot;No.1 - Spell Checker&quot;&gt;&lt;/a&gt;No.1 - Spell Checker&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/view/textservice/TextServicesManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextServicesManager&lt;/a&gt;从API 14开始支持, 可以发现拼写错误, 并返回正确的单词拼写.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TextServicesManager tsm = (TextServicesManager) getSystemService(Context.TEXT_SERVICES_MANAGER_SERVICE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SpellCheckerSession spellCheckerSession = tsm.newSpellCheckerSession(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;No-2-Text-Recognizer&quot;&gt;&lt;a href=&quot;#No-2-Text-Recognizer&quot; class=&quot;headerlink&quot; title=&quot;No.2 - Text Recognizer&quot;&gt;&lt;/a&gt;No.2 - Text Recognizer&lt;/h3&gt;&lt;p&gt;Google Play Services Vision API中的文字识别.&lt;/p&gt;
&lt;p&gt;Version API中包括了人脸识别, 二维码扫描和文字识别.&lt;/p&gt;
&lt;p&gt;这个例子中可以从图像中扫描出文字信息.&lt;/p&gt;
&lt;h3 id=&quot;No-3-TimingLogger&quot;&gt;&lt;a href=&quot;#No-3-TimingLogger&quot; class=&quot;headerlink&quot; title=&quot;No.3 - TimingLogger&quot;&gt;&lt;/a&gt;No.3 - TimingLogger&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/util/TimingLogger.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TimingLogger&lt;/a&gt;是用来测量流逝时间的一个好工具.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TimingLogger timings = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TimingLogger(TAG, &lt;span class=&quot;string&quot;&gt;&quot;methodA&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ... do some work A ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timings.addSplit(&lt;span class=&quot;string&quot;&gt;&quot;work A&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ... do some work B ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timings.addSplit(&lt;span class=&quot;string&quot;&gt;&quot;work B&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ... do some work C ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timings.addSplit(&lt;span class=&quot;string&quot;&gt;&quot;work C&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timings.dumpToLog();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后一句执行后, 会在log中一次性输出下面的log:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;D/TAG     ( 3459): methodA: begin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D/TAG     ( 3459): methodA:      9 ms, work A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D/TAG     ( 3459): methodA:      1 ms, work B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D/TAG     ( 3459): methodA:      6 ms, work C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D/TAG     ( 3459): methodA: end, 16 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意需要在adb中使能TAG:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setprop log.tag.TAG_MYJOB VERBOSE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假设本例子中TAG = “TAG_MYJOB”.&lt;/p&gt;
&lt;h3 id=&quot;No-4-Taking-screenshots&quot;&gt;&lt;a href=&quot;#No-4-Taking-screenshots&quot; class=&quot;headerlink&quot; title=&quot;No.4 - Taking screenshots&quot;&gt;&lt;/a&gt;No.4 - Taking screenshots&lt;/h3&gt;&lt;p&gt;有一些库可以提供截屏, 比如&lt;a href=&quot;https://github.com/jraska/Falcon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Falcon&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;在Android 21之上用&lt;a href=&quot;https://developer.android.com/reference/android/media/projection/MediaProjection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MediaProjection&lt;/a&gt;甚至可以录屏.&lt;/p&gt;
&lt;p&gt;但是得到屏幕图像更简单的一种方法是:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;View viewRoot = getWindow().getDecorView().getRootView();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viewRoot.setDrawingCacheEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bitmap screenShotAsBitmap = Bitmap.createBitmap(viewRoot.getDrawingCache());  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viewRoot.setDrawingCacheEnabled(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// use screenShotAsBitmap as you need&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;No-5-PDF-Creation-API&quot;&gt;&lt;a href=&quot;#No-5-PDF-Creation-API&quot; class=&quot;headerlink&quot; title=&quot;No.5 - PDF Creation API&quot;&gt;&lt;/a&gt;No.5 - PDF Creation API&lt;/h3&gt;&lt;p&gt;从API 19开始Android就提供了API可以创建PDF文档.&lt;br&gt;文中的例子是创建了一个PDF文档, 然后把当前屏幕内容放进去.&lt;/p&gt;
&lt;h2 id=&quot;Avoiding-Conflicts-in-android-gradle-dependencies&quot;&gt;&lt;a href=&quot;#Avoiding-Conflicts-in-android-gradle-dependencies&quot; class=&quot;headerlink&quot; title=&quot;Avoiding Conflicts in android gradle dependencies&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.mindorks.com/avoiding-conflicts-in-android-gradle-dependencies-28e4200ca235#.x66q6p4v4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avoiding Conflicts in android gradle dependencies&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果两个依赖又都依赖了同一个库, 但是是不同的版本, 那会发生什么呢?&lt;/p&gt;
&lt;p&gt;比如下面这个例子:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;androidTestCompile &amp;apos;junit:junit:4.12&amp;apos; //(Depends on version 1.3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;androidTestCompile &amp;apos;org.mockito:mockito-core:1.10.19&amp;apos; //(Depends on version 1.1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个库都依赖于”org.hamcrest:hamcrest-core”, 但是版本却不同.&lt;/p&gt;
&lt;p&gt;这种情况下, 最终被包含进build的是最高版本的库.&lt;/p&gt;
&lt;p&gt;在依赖被声明的module里运行下面这个命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew dependencies.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会显式地看到gradle自动把第二个依赖中的hamcrest库从1.1升级到了1.3.&lt;/p&gt;
&lt;p&gt;前面, 两个依赖都是test依赖, 所以gradle自动解决了冲突.  如果两个依赖属于不同的配置, 如, 把第一个&lt;code&gt;androidTestCompile&lt;/code&gt;改为&lt;code&gt;compile&lt;/code&gt;, gradle将会报错.&lt;/p&gt;
&lt;p&gt;原因是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When instrumentation tests are run, both the main APK and test APK share the same classpath. Gradle build will fail if the main APK and the test APK use the same library (e.g. Guava) but in different versions. If gradle didn’t catch that, your app could behave differently during tests and during normal run (including crashing in one of the cases).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决依赖冲突&lt;/strong&gt;&lt;br&gt;一旦有了依赖冲突, 就需要开发者决定最后到底用什么版本的库, 有几种解决方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法1: 从依赖中排除这个库.&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Now junit will not include hamcrest library. Therefore there will be no &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//dependency conflict. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; compile (&amp;apos;junit:junit:4.12&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude group: &amp;apos;org.hamcrest&amp;apos;, module:&amp;apos;hamcrest-core&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;androidTestCompile (&amp;apos;org.mockito:mockito-core:1.10.19&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude group: &amp;apos;org.hamcrest&amp;apos;, module:&amp;apos;hamcrest-core&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;真实的项目中可能有多个依赖依赖于同一个库, 那么我们就需要写多个排除语句.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法2: 显式地声明冲突库的版本.&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;junit:junit:4.12&amp;apos; //(Depends on version 1.3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;androidTestCompile &amp;apos;org.mockito:mockito-core:1.10.19&amp;apos; //(Depends on version 1.1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;androidTestCompile &amp;apos;org.hamcrest:hamcrest-core:1.3&amp;apos; //(We explictly mention &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//that include version 1.3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法不用写exclude, 但是当升级直接依赖库的时候需要注意更新这种间接依赖库的版本.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法3: 强制解析.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强制设置所有configuration的依赖版本:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurations.all &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolutionStrategy.force &amp;apos;org.hamcrest:hamcrest-core:1.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用这种方法的时候需要小心, 因为与方法2不同, 它是把所有configuration中的版本都强制设置了. 当直接依赖更新的时候, 要注意更新间接依赖的版本.&lt;/p&gt;
&lt;h2 id=&quot;Looper-Handler-and-HandlerThread&quot;&gt;&lt;a href=&quot;#Looper-Handler-and-HandlerThread&quot; class=&quot;headerlink&quot; title=&quot;Looper, Handler, and HandlerThread&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.mindorks.com/android-core-looper-handler-and-handlerthread-bd54d69fe91a#.zf2nhog1x&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Looper, Handler, and HandlerThread&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讨论Looper, Handler和HandlerThread.&lt;/p&gt;
&lt;p&gt;首先, 读者应该了解Java的&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thread&lt;/a&gt;和&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Runnable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;然后让我们带着问题来探索和复习:&lt;/p&gt;
&lt;h3 id=&quot;Java的Thread存在什么问题&quot;&gt;&lt;a href=&quot;#Java的Thread存在什么问题&quot; class=&quot;headerlink&quot; title=&quot;Java的Thread存在什么问题?&quot;&gt;&lt;/a&gt;Java的Thread存在什么问题?&lt;/h3&gt;&lt;p&gt;Java的Thread是一次性的, 当它执行完&lt;code&gt;run()&lt;/code&gt;方法之后, 它就死了.&lt;/p&gt;
&lt;h3 id=&quot;我们可以改善这个问题吗&quot;&gt;&lt;a href=&quot;#我们可以改善这个问题吗&quot; class=&quot;headerlink&quot; title=&quot;我们可以改善这个问题吗?&quot;&gt;&lt;/a&gt;我们可以改善这个问题吗?&lt;/h3&gt;&lt;p&gt;线程本身是个双刃剑, 我们可以把任务分发到多个线程来加速, 但同时线程过多又会降低速度. 线程创建也会花费时间, 所以最好我们能有一个固定优化数量的线程, 然后用它们来执行任务.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程复用模型&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.一个线程保持活跃, 通过它的&lt;code&gt;run()&lt;/code&gt;方法不断循环.&lt;/li&gt;
&lt;li&gt;2.任务由该线程连续执行, 并保持在一个队列中(MessageQueue).&lt;/li&gt;
&lt;li&gt;3.当完成之后结束这个线程.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Android是以什么方式来做这件事的呢&quot;&gt;&lt;a href=&quot;#Android是以什么方式来做这件事的呢&quot; class=&quot;headerlink&quot; title=&quot;Android是以什么方式来做这件事的呢?&quot;&gt;&lt;/a&gt;Android是以什么方式来做这件事的呢?&lt;/h3&gt;&lt;p&gt;Android用&lt;code&gt;Looper&lt;/code&gt;, &lt;code&gt;Handler&lt;/code&gt;和&lt;code&gt;HandlerThread&lt;/code&gt;实现了上述模型.&lt;br&gt;系统可以用这样的图表示:&lt;br&gt;&lt;img src=&quot;/images/Android-Looper-Handler.jpeg&quot; alt=&quot;Android Looper Handler&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.&lt;code&gt;MessageQueue&lt;/code&gt;是一个队列, 里面含有需要被处理的任务(消息).&lt;/li&gt;
&lt;li&gt;2.&lt;code&gt;Handler&lt;/code&gt;利用&lt;code&gt;Looper&lt;/code&gt;往队列中加任务, 同时也在任务出队列的时候进行处理.&lt;/li&gt;
&lt;li&gt;3.&lt;code&gt;Looper&lt;/code&gt;是一个工人, 保持一个线程的活跃, 循环消息队列, 把消息发给对应的handler去处理.(一个线程只能对应一个唯一的&lt;code&gt;Looper&lt;/code&gt;, 但是可以有多个关联的&lt;code&gt;Handler&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;4.最后&lt;code&gt;Looper.quit()&lt;/code&gt;会让线程终止.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为一个线程创建&lt;code&gt;Looper&lt;/code&gt;和&lt;code&gt;MessageQueue&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LooperThread&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Handler mHandler; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Looper.prepare();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;// process incoming messages here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;// this will run in non-ui/background thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Looper.loop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建&lt;code&gt;Handler&lt;/code&gt;的时候自动和当前线程的Looper关联, 但是也可以通过构造传入Looper来使Handler关联到特定的线程.&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;Handler&lt;/code&gt;发消息有两种方式: &lt;code&gt;Message&lt;/code&gt;和&lt;code&gt;Runnable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;自己创建一个线程并提供Looper和消息队列的方式是不好的, 所以Android提供了&lt;code&gt;HandlerThread&lt;/code&gt;来简化这个过程, 它内部的实现和我们之前做的差不多, 但是是以一种更加稳健的方式. 所以我们应该使用&lt;code&gt;HandlerThread&lt;/code&gt;而不是自己实现.&lt;/p&gt;
&lt;p&gt;大多数时候你只需要继承&lt;code&gt;HandlerThread&lt;/code&gt;来创建它的子类.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHandlerThread&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HandlerThread&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Handler handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyHandlerThread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLooperPrepared&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler(getLooper()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// process incoming messages here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// this will run in non-ui/background thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Looper&lt;/code&gt;只有在&lt;code&gt;HandlerThread&lt;/code&gt;的&lt;code&gt;start()&lt;/code&gt;方法被调用(线程开始跑)后才会进入prepared状态.&lt;/li&gt;
&lt;li&gt;只有在&lt;code&gt;HandlerThread&lt;/code&gt;的&lt;code&gt;Looper&lt;/code&gt;处于parepared状态以后, &lt;code&gt;Handler&lt;/code&gt;才可以关联.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一种创建&lt;code&gt;HandlerThread&lt;/code&gt;的方式:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HandlerThread handlerThread = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HandlerThread(&lt;span class=&quot;string&quot;&gt;&quot;MyHandlerThread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;handlerThread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Handler handler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler(handlerThread.getLooper());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意: &lt;code&gt;HandlerThread&lt;/code&gt;需要调用&lt;code&gt;quit()&lt;/code&gt;方法来停止线程执行和释放资源.&lt;/p&gt;
&lt;p&gt;作者文后还附有一个练习的demo.&lt;/p&gt;
&lt;h2 id=&quot;Android-Wear-packaging&quot;&gt;&lt;a href=&quot;#Android-Wear-packaging&quot; class=&quot;headerlink&quot; title=&quot;Android Wear packaging&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/android-wear-packaging/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Wear packaging&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Wear 2.0将在2017年发布, 本文讨论了如何同时支持1.0和2.0的应用部署.&lt;/p&gt;
&lt;h2 id=&quot;Simple-Things-–-Part-1&quot;&gt;&lt;a href=&quot;#Simple-Things-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Simple Things – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/simple-things-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple Things – Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Things应用.&lt;/p&gt;
&lt;h2 id=&quot;Options-for-Viewing-PDFs&quot;&gt;&lt;a href=&quot;#Options-for-Viewing-PDFs&quot; class=&quot;headerlink&quot; title=&quot;Options for Viewing PDFs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://commonsware.com/blog/2017/01/04/options-viewing-pdfs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Options for Viewing PDFs&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;显示PDF传统的方法是通过ACTION_VIEW发出去, 用一个第三方应用打开.&lt;/p&gt;
&lt;p&gt;但是有一些开发者不愿意这样做.&lt;/p&gt;
&lt;p&gt;还有一种方法是把文件上传, 然后用Google Docs URL用WebView打开它. &lt;/p&gt;
&lt;p&gt;除了这些传统的方法, 还有一些选项, 虽然它们各自都有一些问题.&lt;/p&gt;
&lt;p&gt;比如用&lt;code&gt;PdfRenderer&lt;/code&gt;, 它是Android 5.0加入的.&lt;/p&gt;
&lt;p&gt;Mozilka在Firefox上用的是&lt;a href=&quot;https://mozilla.github.io/pdf.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PDF.js&lt;/a&gt;, 在Android 4.4+的WebView上可用, 它会给apk带来2MB左右的增加.&lt;/p&gt;
&lt;p&gt;Google在Chrominum上用的是&lt;a href=&quot;https://pdfium.googlesource.com/pdfium/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pdfium&lt;/a&gt;, 这是C++. &lt;a href=&quot;https://github.com/barteksc/AndroidPdfViewer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;barteksc/AndroidPdfViewer&lt;/a&gt;封装了Pdfium, 处理了渲染和基本的手势, 在一些较老的Android版本上也使用, 但是大约每个CPU架构会给APK增加5MB, 默认情况下你会增加30MB.&lt;/p&gt;
&lt;h2 id=&quot;Clean-tests-Part-1-Naming&quot;&gt;&lt;a href=&quot;#Clean-tests-Part-1-Naming&quot; class=&quot;headerlink&quot; title=&quot;Clean tests, Part 1: Naming&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://android.jlelse.eu/clean-tests-part-1-naming-cce94edf0522#.5nmmqx81y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clean tests, Part 1: Naming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于怎么写干净的单元测试, 本文作者提出了几点他对于命名的看法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要用”test”开头写测试名.&lt;/li&gt;
&lt;li&gt;不要把被测试的方法名字写在测试名里.&lt;/li&gt;
&lt;li&gt;测试是一种规范.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Why-I-Don’t-use-Robolectric&quot;&gt;&lt;a href=&quot;#Why-I-Don’t-use-Robolectric&quot; class=&quot;headerlink&quot; title=&quot;Why I Don’t use Robolectric&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.philosophicalhacker.com/post/why-i-dont-use-roboletric/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why I Don’t use Robolectric&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者觉得Robolectric不好的几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Robolectric mock了一些我们并不拥有的type.&lt;/li&gt;
&lt;li&gt;Robolectric turns TDD on its head.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以最好的做法是我们在写Android代码的时候将逻辑代码抽象出来, 与framework分离, 这样在测试的时候不依赖于Android SDK的类, 也不需要robolectric来模拟一个中间层.&lt;/p&gt;
&lt;h2 id=&quot;The-Next-Step-for-Reactive-Android-Programming&quot;&gt;&lt;a href=&quot;#The-Next-Step-for-Reactive-Android-Programming&quot; class=&quot;headerlink&quot; title=&quot;The Next Step for Reactive Android Programming&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://futurice.com/blog/the-next-step-for-reactive-android-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Next Step for Reactive Android Programming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RxJava 2已经推出了, 本篇文章讨论从RxJava 1迁移到RxJava 2会带来的好处和挑战.&lt;/p&gt;
&lt;p&gt;好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兼容了&lt;a href=&quot;https://github.com/reactive-streams/reactive-streams-jvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Streams&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Backpressure的处理.&lt;/li&gt;
&lt;li&gt;Performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;挑战:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流中不能再使用null.&lt;/li&gt;
&lt;li&gt;方法数限制. RxJava 1(5500), RxJava 2(9200).&lt;/li&gt;
&lt;li&gt;自定义操作符变得很难写.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: 可以对比简单的操作符&lt;a href=&quot;https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/internal/operators/observable/ObservableMap.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;map&lt;/a&gt;和复杂的操作符&lt;a href=&quot;https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/internal/operators/observable/ObservableFlatMap.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flatMap&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Introducing-Auto-Layout-for-Sketch&quot;&gt;&lt;a href=&quot;#Introducing-Auto-Layout-for-Sketch&quot; class=&quot;headerlink&quot; title=&quot;Introducing Auto-Layout for Sketch&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/sketch-app-sources/introducing-auto-layout-for-sketch-24e7b5d068f9#.tusju2z7k&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing Auto-Layout for Sketch&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Sketch插件, 让你查看不同屏幕上的效果.&lt;/p&gt;
&lt;h2 id=&quot;Designing-for-Both-Android-and-iOS&quot;&gt;&lt;a href=&quot;#Designing-for-Both-Android-and-iOS&quot; class=&quot;headerlink&quot; title=&quot;Designing for Both Android and iOS&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://webdesign.tutsplus.com/articles/a-tale-of-two-platforms-designing-for-both-android-and-ios--cms-23616&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Designing for Both Android and iOS&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android和iOS的设计, 很详细的介绍, 最后附有一些resources.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;flowless&quot;&gt;&lt;a href=&quot;#flowless&quot; class=&quot;headerlink&quot; title=&quot;flowless&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Zhuinden/flowless&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flowless&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个框架, 给你Activity的UI状态命名, 管理并记录状态转换.&lt;/p&gt;
&lt;h2 id=&quot;Store&quot;&gt;&lt;a href=&quot;#Store&quot; class=&quot;headerlink&quot; title=&quot;Store&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/NYTimes/Store&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Store&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;异步数据加载和缓存的库.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-239&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-239&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #239&quot;&gt;&lt;/a&gt;Android Weekly Issue #239&lt;/h1&gt;&lt;p&gt;January 8th, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-239&quot;&gt;Android Weekly Issue #239&lt;/a&gt;&lt;br&gt;本期内容包括: Android Things开发; Android中有用却不常见的一些API介绍(拼写检查, 文字识别, 时间log, 截图, 创建PDF); Gradle依赖管理冲突和解决办法; Looper, Handler和HandlerThread; 兼顾Wear1.0和2.0的部署方式; 打开PDF的实现方法; 单元测试的命名; Robolectric的弊病; 迁移到RxJava2的好处和面临的挑战. &lt;/p&gt;
    
    </summary>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="RxJava2" scheme="http://mengdd.github.io/tags/RxJava2/"/>
    
      <category term="Handler" scheme="http://mengdd.github.io/tags/Handler/"/>
    
      <category term="Android Things" scheme="http://mengdd.github.io/tags/Android-Things/"/>
    
      <category term="Looper" scheme="http://mengdd.github.io/tags/Looper/"/>
    
      <category term="HandlerThread" scheme="http://mengdd.github.io/tags/HandlerThread/"/>
    
      <category term="PDF" scheme="http://mengdd.github.io/tags/PDF/"/>
    
      <category term="Robolectric" scheme="http://mengdd.github.io/tags/Robolectric/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 238</title>
    <link href="http://mengdd.github.io/Android-Weekly/2017/01/03/android-weekly-notes-issue-238/"/>
    <id>http://mengdd.github.io/Android-Weekly/2017/01/03/android-weekly-notes-issue-238/</id>
    <published>2017-01-03T10:02:01.000Z</published>
    <updated>2017-01-10T06:22:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-238&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-238&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #238&quot;&gt;&lt;/a&gt;Android Weekly Issue #238&lt;/h1&gt;&lt;p&gt;January 1st, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-238&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #238&lt;/a&gt;&lt;br&gt;本期内容包括: Firebase发送Notification; RecyclerView的预取; 后台工作的实现方式讨论; RecyclerView分组数据; 跨平台应用工具Flutter介绍; Gradle依赖管理;&lt;br&gt;写测试的一些注意事项; Android Things应用搭建及一些思考; 如何搭建CI等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Mastering-Firebase-Notifications&quot;&gt;&lt;a href=&quot;#Mastering-Firebase-Notifications&quot; class=&quot;headerlink&quot; title=&quot;Mastering Firebase Notifications&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@Miqubel/mastering-firebase-notifications-36a3ffe57c41#.ykkpzrs4l&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering Firebase Notifications&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用Firebase发通知:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Console Notifications.&lt;/li&gt;
&lt;li&gt;使用命令行, 发送curl命令.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FirebaseMessagingService&lt;/code&gt;在应用前台的时候处理通知.&lt;/li&gt;
&lt;li&gt;如果应用前后台的时候都需要处理, 则发送data而不是notification.&lt;br&gt;官方文档&lt;a href=&quot;https://firebase.google.com/docs/cloud-messaging/android/receive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase cloud-messaging&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RecyclerView-Prefetch&quot;&gt;&lt;a href=&quot;#RecyclerView-Prefetch&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView Prefetch&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/recyclerview-prefetch-c2f269075710#.21takened&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RecyclerView Prefetch&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者研究了RecyclerView的渲染时间, 发现在滚动的时候很多的时间会花在新item的创建和bind上, 这样会推迟UI线程的其他工作, 还有RenderThread的后续工作, 如果超出了frame boundary, 就有可能会造成明显的卡顿.&lt;/p&gt;
&lt;p&gt;而同时前一帧, UI线程可能处于空闲状态.&lt;/p&gt;
&lt;p&gt;那么我们有没有可能以一种预取的方式, 把即将出现的View在提前的空闲阶段准备好呢?&lt;/p&gt;
&lt;p&gt;pre-fetch的优化已经在&lt;a href=&quot;https://developer.android.com/topic/libraries/support-library/revisions.html#rev25-0-0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support Library v25&lt;/a&gt;加入, &lt;a href=&quot;https://developer.android.com/topic/libraries/support-library/revisions.html#25-1-0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v25.1.0&lt;/a&gt;有进一步的加强. 如果你没有自定义LayoutManager, 也没有嵌套&lt;code&gt;RecyclerView&lt;/code&gt;, 那么你升级support library之后就自动获得了这项优化. 其他两种情况你还需要调用一些方法.&lt;/p&gt;
&lt;p&gt;你可以设置&lt;code&gt;LayoutManager.setItemPrefetchEnabled()&lt;/code&gt;来对比开启和关闭预取功能前后的不同. 性能测量用&lt;a href=&quot;https://developer.android.com/studio/profile/systrace.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Systrace&lt;/a&gt;和&lt;a href=&quot;https://developer.android.com/studio/profile/dev-options-rendering.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GPU profiling&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Things-to-consider-before-running-background-tasks&quot;&gt;&lt;a href=&quot;#Things-to-consider-before-running-background-tasks&quot; class=&quot;headerlink&quot; title=&quot;Things to consider before running background tasks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.yipl.com.np/things-to-consider-before-running-background-tasks-e71f00d2ad3a#.baugcaodi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Things to consider before running background tasks&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;完成后台任务的几种方式和各自的优缺点分析.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread.&lt;/li&gt;
&lt;li&gt;AsyncTask.&lt;/li&gt;
&lt;li&gt;Service.&lt;/li&gt;
&lt;li&gt;IntentService.&lt;/li&gt;
&lt;li&gt;Loader.&lt;/li&gt;
&lt;li&gt;JobService and JobScheduler. GCM Network Manager.&lt;/li&gt;
&lt;li&gt;RxJava.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Android-RecyclerView-Grouping-Data&quot;&gt;&lt;a href=&quot;#Android-RecyclerView-Grouping-Data&quot; class=&quot;headerlink&quot; title=&quot;Android RecyclerView - Grouping Data&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://krtkush.github.io/2016/07/08/android-recyclerview-grouping-data.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android RecyclerView - Grouping Data&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者展示了如何将RecyclerView中的数据分组展示, 在他的例子中是按照时间分组, 每一组开始是该组的时间占据一行.&lt;/p&gt;
&lt;p&gt;其实主要是前期的数据处理, 首先创建一个HashMap, 分组依据作为key, 符合该依据的数据作为值存在对应key的value list里; 然后给日期和数据创建一个共同的基类, 把HashMap再重新展开成一个List, 里面穿插好数据. 最后用RecyclerView按照数据类型不同显示两种布局.&lt;/p&gt;
&lt;h2 id=&quot;Flutter-Intro&quot;&gt;&lt;a href=&quot;#Flutter-Intro&quot; class=&quot;headerlink&quot; title=&quot;Flutter Intro&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@develodroid/flutter-i-intro-and-install-a8bf6dfcc7c8#.f9ktsu3r8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flutter Intro&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://flutter.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flutter&lt;/a&gt;是一个Google推出的新工具, 用来构建跨平台的应用.&lt;/p&gt;
&lt;p&gt;本文介绍了如何setup和创建一个Hello World.&lt;/p&gt;
&lt;h2 id=&quot;How-to-add-Gradle-dependencies-using-‘foreach’&quot;&gt;&lt;a href=&quot;#How-to-add-Gradle-dependencies-using-‘foreach’&quot; class=&quot;headerlink&quot; title=&quot;How to add Gradle dependencies using ‘foreach’&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/android-how-to-add-gradle-dependencies-using-foreach-c4cbcc070458#.aplxhrmn3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to add Gradle dependencies using ‘foreach’&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一种管理依赖的方式, 把所有的依赖定义在同一个文件的不同分组里, 然后在每个module各自添加自己的分组即可.&lt;/p&gt;
&lt;h2 id=&quot;Best-practices-to-improve-app-engagement&quot;&gt;&lt;a href=&quot;#Best-practices-to-improve-app-engagement&quot; class=&quot;headerlink&quot; title=&quot;Best practices to improve app engagement&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://android-developers.googleblog.com/2016/12/important-best-practices-to-improve-app-engagement.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best practices to improve app engagement&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何提高app的用户参与度.&lt;/p&gt;
&lt;h2 id=&quot;The-Do’s-and-Don’ts-of-Writing-Test-cases-in-Android&quot;&gt;&lt;a href=&quot;#The-Do’s-and-Don’ts-of-Writing-Test-cases-in-Android&quot; class=&quot;headerlink&quot; title=&quot;The Do’s and Don’ts of Writing Test cases in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.mindorks.com/the-dos-and-don-ts-of-writing-test-cases-in-android-70f1b5dab3e1#.7ol81s1wo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Do’s and Don’ts of Writing Test cases in Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了在写测试的时候需要注意的几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先明确我们要测试的是什么, 预先条件是否满足, 如果是因为前置条件不满足, 那么并不是我们的测试本身失败了.&lt;/li&gt;
&lt;li&gt;每个测试都是独立完成的, 测试的执行顺序不应该影响结果.&lt;/li&gt;
&lt;li&gt;在测试中不要写条件语句. 条件语句是在实际代码中的, 每一个条件都应该对应一个单独的测试case.&lt;/li&gt;
&lt;li&gt;测试应该不受外部因素影响, 比如server和网络. 因为如果因为这类原因测试失败了, 并不代表我们的代码有bug.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Making-Rainbow-HAT-Work-with-the-Android-Things&quot;&gt;&lt;a href=&quot;#Making-Rainbow-HAT-Work-with-the-Android-Things&quot; class=&quot;headerlink&quot; title=&quot;Making Rainbow HAT Work with the Android Things&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/making-rainbow-hat-work-with-the-android-things-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Rainbow HAT Work with the Android Things&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android Things应用.&lt;/p&gt;
&lt;h2 id=&quot;Christmas-Voice-–-Part-2&quot;&gt;&lt;a href=&quot;#Christmas-Voice-–-Part-2&quot; class=&quot;headerlink&quot; title=&quot;Christmas Voice – Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/christmas-voice-part-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Christmas Voice – Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个小应用, 录音, 做转换并播放.&lt;/p&gt;
&lt;h2 id=&quot;Will-Android-do-for-the-IoT-what-it-did-for-mobile&quot;&gt;&lt;a href=&quot;#Will-Android-do-for-the-IoT-what-it-did-for-mobile&quot; class=&quot;headerlink&quot; title=&quot;Will Android do for the IoT what it did for mobile?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@carl.whalley/will-android-do-for-iot-what-it-did-for-mobile-c9ac79d06c#.41phc9zbb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Will Android do for the IoT what it did for mobile?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于Android Things的一些看法.&lt;/p&gt;
&lt;h2 id=&quot;Set-up-a-CI-server-for-Android-dev&quot;&gt;&lt;a href=&quot;#Set-up-a-CI-server-for-Android-dev&quot; class=&quot;headerlink&quot; title=&quot;Set up a CI server for Android dev&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@pamartineza/how-to-set-up-a-continuous-integration-server-for-android-development-ubuntu-jenkins-sonarqube-43c1ed6b08d3#.lzs2m4zg8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Set up a CI server for Android dev&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何搭建Android项目的CI, (Ubuntu + Jenkins + SonarQube).&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Material-Growth-amp-communications&quot;&gt;&lt;a href=&quot;#Material-Growth-amp-communications&quot; class=&quot;headerlink&quot; title=&quot;Material: Growth &amp;amp; communications&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://material.io/guidelines/growth-communications/introduction.html#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material: Growth &amp;amp; communications&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何进行用户引导, feature发现和手势教育.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;PanoramaImageView&quot;&gt;&lt;a href=&quot;#PanoramaImageView&quot; class=&quot;headerlink&quot; title=&quot;PanoramaImageView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/gjiazhe/PanoramaImageView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PanoramaImageView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个ImageView, 在设备转动的时候可以自动滚动内容.&lt;/p&gt;
&lt;h2 id=&quot;TextDecorator&quot;&gt;&lt;a href=&quot;#TextDecorator&quot; class=&quot;headerlink&quot; title=&quot;TextDecorator&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nntuyen/text-decorator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextDecorator&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;可以给文字分段加上各种装饰, 下划线, 点击事件等.&lt;/p&gt;
&lt;h2 id=&quot;Delightful-SQLBrite&quot;&gt;&lt;a href=&quot;#Delightful-SQLBrite&quot; class=&quot;headerlink&quot; title=&quot;Delightful-SQLBrite&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/geralt-encore/Delightful-SQLBrite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Delightful-SQLBrite&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个示例应用, 展示&lt;a href=&quot;https://github.com/square/sqldelight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLDelight&lt;/a&gt;和&lt;a href=&quot;https://github.com/square/sqlbrite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLBrite&lt;/a&gt;结合使用.&lt;/p&gt;
&lt;h2 id=&quot;mainframer&quot;&gt;&lt;a href=&quot;#mainframer&quot; class=&quot;headerlink&quot; title=&quot;mainframer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/gojuno/mainframer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mainframer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个远程build的脚本.&lt;/p&gt;
&lt;h2 id=&quot;material-about-library&quot;&gt;&lt;a href=&quot;#material-about-library&quot; class=&quot;headerlink&quot; title=&quot;material-about-library&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/daniel-stoneuk/material-about-library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material-about-library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;创建一个Material风格about页面的库.&lt;/p&gt;
&lt;h2 id=&quot;android-snowfall&quot;&gt;&lt;a href=&quot;#android-snowfall&quot; class=&quot;headerlink&quot; title=&quot;android-snowfall&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JetradarMobile/android-snowfall&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-snowfall&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;下雪View.&lt;/p&gt;
&lt;h2 id=&quot;Android-ExpandIcon&quot;&gt;&lt;a href=&quot;#Android-ExpandIcon&quot; class=&quot;headerlink&quot; title=&quot;Android-ExpandIcon&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/zagum/Android-ExpandIcon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-ExpandIcon&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;展开/合上的上下箭头icon, 支持点击和手势滑动切换.&lt;/p&gt;
&lt;h2 id=&quot;RxAnimations&quot;&gt;&lt;a href=&quot;#RxAnimations&quot; class=&quot;headerlink&quot; title=&quot;RxAnimations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/0ximDigital/RxAnimations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxAnimations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rx形式的动画库.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-238&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-238&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #238&quot;&gt;&lt;/a&gt;Android Weekly Issue #238&lt;/h1&gt;&lt;p&gt;January 1st, 2017&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-238&quot;&gt;Android Weekly Issue #238&lt;/a&gt;&lt;br&gt;本期内容包括: Firebase发送Notification; RecyclerView的预取; 后台工作的实现方式讨论; RecyclerView分组数据; 跨平台应用工具Flutter介绍; Gradle依赖管理;&lt;br&gt;写测试的一些注意事项; Android Things应用搭建及一些思考; 如何搭建CI等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RecyclerView" scheme="http://mengdd.github.io/tags/RecyclerView/"/>
    
      <category term="Notification" scheme="http://mengdd.github.io/tags/Notification/"/>
    
      <category term="Testing" scheme="http://mengdd.github.io/tags/Testing/"/>
    
      <category term="Android Things" scheme="http://mengdd.github.io/tags/Android-Things/"/>
    
      <category term="Background work" scheme="http://mengdd.github.io/tags/Background-work/"/>
    
      <category term="Flutter" scheme="http://mengdd.github.io/tags/Flutter/"/>
    
      <category term="CI" scheme="http://mengdd.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 237</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/12/30/android-weekly-notes-issue-237/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/12/30/android-weekly-notes-issue-237/</id>
    <published>2016-12-30T07:30:25.000Z</published>
    <updated>2016-12-30T07:41:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-237&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-237&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #237&quot;&gt;&lt;/a&gt;Android Weekly Issue #237&lt;/h1&gt;&lt;p&gt;December 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-237&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #237&lt;/a&gt;&lt;br&gt;这是本年的最后一篇issue, 感谢大家.&lt;br&gt;本期内容包括: ConstraintLayout的使用; Android Things的应用; 如何利用第三方库使得Java具有Kotlin的一些新特性; Firebase是如何利用&lt;code&gt;ContentProvider&lt;/code&gt;进行初始化的; Kotlin上的并发处理; 其他还有一些关于程序架构, 代码优化相关的讨论.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Building-interfaces-with-ConstraintLayout&quot;&gt;&lt;a href=&quot;#Building-interfaces-with-ConstraintLayout&quot; class=&quot;headerlink&quot; title=&quot;Building interfaces with ConstraintLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/building-interfaces-with-constraintlayout-3958fa38a9f7#.al6p1anu7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building interfaces with ConstraintLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文介绍&lt;code&gt;ConstraintLayout&lt;/code&gt;的chains和ratios. 另外还提到很多使用&lt;code&gt;ConstraintLayout&lt;/code&gt;的实现细节.&lt;/p&gt;
&lt;p&gt;所谓chains就是几个View之间建立的双向约束.&lt;/p&gt;
&lt;p&gt;ratios是帮助你设置View的宽高比, 它所做的事情和&lt;a href=&quot;https://developer.android.com/reference/android/support/percent/PercentFrameLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PercentFrameLayout&lt;/a&gt;差不多, 但是不用添加额外的ViewGroup.&lt;/p&gt;
&lt;h2 id=&quot;Electronic-Candle-using-Android-Things&quot;&gt;&lt;a href=&quot;#Electronic-Candle-using-Android-Things&quot; class=&quot;headerlink&quot; title=&quot;Electronic Candle using Android Things&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/+DaveSmithDev/posts/4JN7ZaSKxaM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electronic Candle using Android Things&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用ObjectAnimator和Android Things搭建的一个电子蜡烛.&lt;/p&gt;
&lt;h2 id=&quot;ExoPlayer-2-1-What’s-new&quot;&gt;&lt;a href=&quot;#ExoPlayer-2-1-What’s-new&quot; class=&quot;headerlink&quot; title=&quot;ExoPlayer 2.1 - What’s new&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-exoplayer/exoplayer-2-1-whats-new-2832c09fedab#.po64o4uha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer 2.1 - What’s new&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ExoPlayer 2.1有什么新功能.&lt;br&gt;这是他们的&lt;a href=&quot;https://github.com/google/ExoPlayer/blob/release-v2/RELEASENOTES.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Living-Android-without-Kotlin&quot;&gt;&lt;a href=&quot;#Living-Android-without-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Living (Android) without Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/living-android-without-kotlin-db7391a2b170#.7fm956ryk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Living (Android) without Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你因为种种原因不能在项目中使用kotlin, 这篇文章告诉你如何借助于一些工具和库用Java实现Kotlin的一些features.&lt;/p&gt;
&lt;h2 id=&quot;Christmas-Voice-–-Part-1&quot;&gt;&lt;a href=&quot;#Christmas-Voice-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Christmas Voice – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/christmas-voice-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Christmas Voice – Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者发布了一个改变声音的应用, 并且将其开源了: &lt;a href=&quot;https://github.com/StylingAndroid/ChristmasVoice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChristmasVoice&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;How-does-Firebase-initialize-on-Android&quot;&gt;&lt;a href=&quot;#How-does-Firebase-initialize-on-Android&quot; class=&quot;headerlink&quot; title=&quot;How does Firebase initialize on Android?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://firebase.googleblog.com/2016/12/how-does-firebase-initialize-on-android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How does Firebase initialize on Android?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firebase在Android上是如何初始化的?&lt;/p&gt;
&lt;p&gt;很多SDK在初始化的时候会要求应用传入&lt;code&gt;Context&lt;/code&gt;. Firebase简化了这一步骤. 解决方案就是用了&lt;code&gt;ContentProvider&lt;/code&gt;, 既解决了时间问题, 也得到了sdk需要的&lt;code&gt;Context&lt;/code&gt;. 并且不需要应用的开发者添加任何额外的初始化代码.&lt;/p&gt;
&lt;p&gt;选择&lt;code&gt;ContentProvider&lt;/code&gt;主要有两点原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentProvider&lt;/code&gt;初始化早.&lt;br&gt;当一个Android进程启动的时候, 首先会初始化每一个ContentProvider, 然后是Application, 最后是被Intent启动的组件. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在ContentProvider初始化的时候, 就可以拿到Context了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentProvider&lt;/code&gt;可以merge到最终的manifest里.&lt;br&gt;&lt;a href=&quot;https://developer.android.com/studio/build/manifest-merge.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manifest merge&lt;/a&gt;是在build的时候来定义你的应用最终的manifest. 最终的manifest会包含所有依赖的库的manifest中声明的组件.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你也想选择用&lt;code&gt;ContentProvider&lt;/code&gt;来做应用或库的初始化, 请注意authority的唯一性问题和&lt;code&gt;ContentProvider&lt;/code&gt;只在主进程运行的问题.&lt;/p&gt;
&lt;h2 id=&quot;Seductive-Code&quot;&gt;&lt;a href=&quot;#Seductive-Code&quot; class=&quot;headerlink&quot; title=&quot;Seductive Code&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://publicobject.com/2016/12/19/seductive-code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Seductive Code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当我们在改善代码可读性的时候, 很有可能会影响到性能和可维护性. &lt;/p&gt;
&lt;p&gt;作者举例说明了他在实际编程中遇到的几个问题.&lt;/p&gt;
&lt;h2 id=&quot;Testing-Android-Things-–-Unit-amp-Vendor-tests&quot;&gt;&lt;a href=&quot;#Testing-Android-Things-–-Unit-amp-Vendor-tests&quot; class=&quot;headerlink&quot; title=&quot;Testing Android Things – Unit &amp;amp; Vendor tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.blundellapps.co.uk/testing-android-things-iot-meets-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing Android Things – Unit &amp;amp; Vendor tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何开发Android Things应用, 才能让测试更加容易. 本文以一个很小的LED灯闪烁程序为例.&lt;/p&gt;
&lt;h2 id=&quot;Engineering-the-Architecture-Behind-Uber’s-New-Rider-App&quot;&gt;&lt;a href=&quot;#Engineering-the-Architecture-Behind-Uber’s-New-Rider-App&quot; class=&quot;headerlink&quot; title=&quot;Engineering the Architecture Behind Uber’s New Rider App&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://eng.uber.com/new-rider-app/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Engineering the Architecture Behind Uber’s New Rider App&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Uber团队重新打造了他们的ride app, 提出了一个新的构架模式: Riblets.&lt;/p&gt;
&lt;p&gt;关于架构的选型, 已有的类型可以查看这个&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.tmcojtwgg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS Architecture Patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Rebuilding-the-Buffer-Android-Composer&quot;&gt;&lt;a href=&quot;#Rebuilding-the-Buffer-Android-Composer&quot; class=&quot;headerlink&quot; title=&quot;Rebuilding the Buffer Android Composer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://overflow.buffer.com/2016/12/22/rebuild-android-composer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rebuilding the Buffer Android Composer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者重构了自己应用的代码, 应用了clean architecture, 本文讲述了其过程.&lt;/p&gt;
&lt;h2 id=&quot;Papercut&quot;&gt;&lt;a href=&quot;#Papercut&quot; class=&quot;headerlink&quot; title=&quot;Papercut&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://stu.ie/?page_id=3133&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papercut&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Stuie/papercut&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papercut&lt;/a&gt;是一个库, 用来标记那些我们觉得需要删除或者需要重构的代码.&lt;/p&gt;
&lt;h2 id=&quot;Concurrency-Primitives-in-Kotlin&quot;&gt;&lt;a href=&quot;#Concurrency-Primitives-in-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Concurrency Primitives in Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/concurrency-primitives-in-kotlin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency Primitives in Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者最近看了一本书, 讲Android的并发, 觉得很好, 想要用Kotlin来重写书中的例子, 结果发现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin中没有&lt;code&gt;synchronized&lt;/code&gt;关键字.&lt;/li&gt;
&lt;li&gt;Kotlin中没有&lt;code&gt;volatile&lt;/code&gt;关键字.&lt;/li&gt;
&lt;li&gt;Kotlin中的&lt;code&gt;Any&lt;/code&gt;, 类比于Java中的&lt;code&gt;Object&lt;/code&gt;, 但是却没有&lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt;和&lt;code&gt;notifyAll()&lt;/code&gt;方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以Kotlin中的并发是怎么处理呢? 这里有个问题: &lt;a href=&quot;https://discuss.kotlinlang.org/t/concurrency-in-kotlin/858&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin forum&lt;/a&gt;, Kotlin语言的开发人员表示这些应该由库来处理, 而不是语言本身.&lt;/p&gt;
&lt;p&gt;尽管Kotlin不支持, 但是它还是提供了一些底层的并发工具.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建线程. 因为Kotlin可以调用Java代码, 所以仍然可以通过两种方法来创建线程.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Synchronized&lt;/code&gt;注解和&lt;code&gt;synchronized()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Volatile&lt;/code&gt;注解.&lt;/li&gt;
&lt;li&gt;没有&lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt;和&lt;code&gt;notifyAll()&lt;/code&gt;方法, 但是可以把&lt;code&gt;Object&lt;/code&gt;对象作为锁, 然后调用锁的这些方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35520583/why-there-are-no-concurrency-keywords-in-kotlin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;上有一个相关问题, 答案很不错, 列了处理并发的一些有用的库.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;KataScreenshotAndroid&quot;&gt;&lt;a href=&quot;#KataScreenshotAndroid&quot; class=&quot;headerlink&quot; title=&quot;KataScreenshotAndroid&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Karumi/KataScreenshotAndroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KataScreenshotAndroid&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Screen Kata应用, 用来练习做UI测试的.&lt;/p&gt;
&lt;h2 id=&quot;Papercut-1&quot;&gt;&lt;a href=&quot;#Papercut-1&quot; class=&quot;headerlink&quot; title=&quot;Papercut&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Stuie/papercut&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papercut&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个用来标记需要重构或者移除代码的工具库.&lt;/p&gt;
&lt;h2 id=&quot;Squint&quot;&gt;&lt;a href=&quot;#Squint&quot; class=&quot;headerlink&quot; title=&quot;Squint&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/IntruderShanky/Squint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Squint&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个可以自定义的对角线切割View.&lt;/p&gt;
&lt;h2 id=&quot;Colorful&quot;&gt;&lt;a href=&quot;#Colorful&quot; class=&quot;headerlink&quot; title=&quot;Colorful&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/garretyoder/Colorful&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Colorful&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个动态的主题库, 让你可以方便地修改应用的颜色.&lt;/p&gt;
&lt;h2 id=&quot;scytale&quot;&gt;&lt;a href=&quot;#scytale&quot; class=&quot;headerlink&quot; title=&quot;scytale&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yakivmospan/scytale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scytale&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包装了JCA API和AndroidKeyStore API, 让创建, 加密和管理任何Android API的keys变得更容易.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-237&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-237&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #237&quot;&gt;&lt;/a&gt;Android Weekly Issue #237&lt;/h1&gt;&lt;p&gt;December 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-237&quot;&gt;Android Weekly Issue #237&lt;/a&gt;&lt;br&gt;这是本年的最后一篇issue, 感谢大家.&lt;br&gt;本期内容包括: ConstraintLayout的使用; Android Things的应用; 如何利用第三方库使得Java具有Kotlin的一些新特性; Firebase是如何利用&lt;code&gt;ContentProvider&lt;/code&gt;进行初始化的; Kotlin上的并发处理; 其他还有一些关于程序架构, 代码优化相关的讨论.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="ExoPlayer" scheme="http://mengdd.github.io/tags/ExoPlayer/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/tags/Java/"/>
    
      <category term="Android Things" scheme="http://mengdd.github.io/tags/Android-Things/"/>
    
      <category term="ContentProvider" scheme="http://mengdd.github.io/tags/ContentProvider/"/>
    
      <category term="Architecture" scheme="http://mengdd.github.io/tags/Architecture/"/>
    
      <category term="Concurrency" scheme="http://mengdd.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 236</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/Design/2016/12/21/android-weekly-notes-issue-236/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/Design/2016/12/21/android-weekly-notes-issue-236/</id>
    <published>2016-12-21T02:27:39.000Z</published>
    <updated>2016-12-21T02:42:46.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-236&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-236&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #236&quot;&gt;&lt;/a&gt;Android Weekly Issue #236&lt;/h1&gt;&lt;p&gt;December 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-236&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的物联网平台Android Things; FileProvider; Android Studio的Layout Preview使用; Retrofit2使用; Google Sign-In和SmartLock; 把敏感信息放入NDK的解决方式.&lt;/p&gt;
&lt;p&gt;设计部分讨论了调色板的灵感来源和几个开发app的时候应该注意的问题.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Getting-started-with-Android-Things&quot;&gt;&lt;a href=&quot;#Getting-started-with-Android-Things&quot; class=&quot;headerlink&quot; title=&quot;Getting started with Android Things&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@alexsimo/getting-started-with-android-things-b73be3295b42#.c1arra4ps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting started with Android Things&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Internet of Things (物联网, IoT), 是互联网, 传统电信网等咨询承载体, 让所有能行使独立功能的物品之间实现互联互通的网络.&lt;/p&gt;
&lt;p&gt;2016年12月, Google发布了Android Things的开发者预览版, 这是一个专门为IoT设备定制的Android系统.&lt;/p&gt;
&lt;p&gt;本篇文章一步一步地教你如何写一个IoT的基本程序, 跑在Raspberry Pi 3 Model B上.&lt;/p&gt;
&lt;h2 id=&quot;FileProvider&quot;&gt;&lt;a href=&quot;#FileProvider&quot; class=&quot;headerlink&quot; title=&quot;FileProvider&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/fileprovider/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FileProvider&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上次我们提到了用&lt;code&gt;DownloadManager&lt;/code&gt;下载的东西可以和其他应用分享, 那么如果我们下载的时候没有用&lt;code&gt;DownloadManager&lt;/code&gt;呢? &lt;/p&gt;
&lt;p&gt;比较常见的情况是我们的应用需要分享内容到其他应用, 或者是文件的类型是我们应用不能自己处理的, 需要找一个支持这种文件类型的其他应用来帮我们打开它.&lt;/p&gt;
&lt;p&gt;怎么解决呢? 答案是用&lt;code&gt;FileProvider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;上一期有一篇文章也说过Android 7开始废弃了”file://“, 解决方案就是用&lt;code&gt;FileProvider&lt;/code&gt;, 所以实现是一样的, 这里就不重复了.&lt;/p&gt;
&lt;h2 id=&quot;Working-with-the-Layout-Preview&quot;&gt;&lt;a href=&quot;#Working-with-the-Layout-Preview&quot; class=&quot;headerlink&quot; title=&quot;Working with the Layout Preview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/layout-preview-101/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with the Layout Preview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Layout Preview向你展示了你的xml将如何在设备上显示. 你可以用它查看布局在不同的配置下如何显示, 比如可以切换横竖屏, 语言等等.&lt;/p&gt;
&lt;p&gt;但是它同样也有一些问题:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issue #1: Preview显示空白&lt;/strong&gt;&lt;br&gt;当你的布局是由动态获取的数据来填充的, preview不知道如何填充, 所以你看到的是空白的. &lt;/p&gt;
&lt;p&gt;一个好的practice是使用&lt;code&gt;tools&lt;/code&gt;命名空间, 指定一些只在preview阶段使用的属性. 这样你就可以指定一些text或src用来预览.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #2: 使得动态内容在Preview可见&lt;/strong&gt;&lt;br&gt;如果你的图片是动态资源, 你也可以设置一些最大宽高给parent view, 以防真实的图片比期待的大太多或者是比例不对. 你可以设置&lt;code&gt;tools:layout_height&lt;/code&gt; 和&lt;code&gt;tools:layout_width&lt;/code&gt;, 还有&lt;code&gt;tools:background&lt;/code&gt;在preview中查看view占多大.&lt;/p&gt;
&lt;p&gt;本文还推荐了另一个阅读资料: &lt;a href=&quot;https://tips.seebrock3r.me/tools-of-the-trade-part-1-f3c1c73de898#.e038jlqyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tools of the trade — Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #3: 修复坏掉的Previews&lt;/strong&gt;&lt;br&gt;当你创建一个自定义View的时候, 你需要确保你的View不需要任何外部依赖即可被实例化, 否则Preview可能看不到你的View. 因为Preview不是运行在你的app上的, 它只是运行在IDE的JVM上, 所以View framework之外的东西它是访问不到的.&lt;/p&gt;
&lt;p&gt;解决办法是在你的自定义View中做一些特殊处理, 比如把依赖注入放在&lt;code&gt;!isInEditMode()&lt;/code&gt;里, 或者用&lt;code&gt;tools:&lt;/code&gt;命名空间加一些默认值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #4: &lt;merge&gt; 布局没有被渲染&lt;/merge&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;merge&gt;里面的控件在preview里会被重叠在一起.&lt;br&gt;解决的办法是使用&lt;code&gt;tools:showIn=&amp;quot;layout&amp;quot;&lt;/code&gt;, 指定&lt;merge&gt;具体是显示在哪个布局里. 如果你有多个布局都用到这个&lt;merge&gt;, 你可以选一个.&lt;/merge&gt;&lt;/merge&gt;&lt;/merge&gt;&lt;/p&gt;
&lt;p&gt;从Android Studio 2.2开始, 你可以使用&lt;code&gt;tools:parentTag&lt;/code&gt;来指定parent的类型, 比如&lt;code&gt;tools:parentTag=&amp;quot;LinearLayout&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #5: 在Preview中显示隐藏的View&lt;/strong&gt;&lt;br&gt;如果你在layout中把view的visibility设置为gone, 那么它是不会在Preview中显示的. &lt;/p&gt;
&lt;p&gt;解决办法: 使用&lt;code&gt;tools:visibility=&amp;quot;visible&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Android-Things-Tutorials&quot;&gt;&lt;a href=&quot;#Android-Things-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Android Things Tutorials&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.mindorks.com/android-things-tutorials-getting-started-8464c11009ff#.dhacx13kq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things Tutorials&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Things教程.&lt;/p&gt;
&lt;h2 id=&quot;Get-Started-With-Retrofit-2-HTTP-Client&quot;&gt;&lt;a href=&quot;#Get-Started-With-Retrofit-2-HTTP-Client&quot; class=&quot;headerlink&quot; title=&quot;Get Started With Retrofit 2 HTTP Client&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/getting-started-with-retrofit-2--cms-27792&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get Started With Retrofit 2 HTTP Client&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本篇文章以实例讲述如何使用Retrofit, 虽然都是基础内容, 但讲解很详细.&lt;/p&gt;
&lt;h2 id=&quot;Improving-sign-in-experience-with-Google-Sign-In-and-SmartLock&quot;&gt;&lt;a href=&quot;#Improving-sign-in-experience-with-Google-Sign-In-and-SmartLock&quot; class=&quot;headerlink&quot; title=&quot;Improving sign-in experience with Google Sign-In and SmartLock&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@p.tournaris/android-improving-sign-in-experience-with-google-sign-in-and-smartlock-f0bfd789602a#.dqh1aptm4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improving sign-in experience with Google Sign-In and SmartLock&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google提供了两种方式来帮助我们改善用户的登录体验:&lt;br&gt;Google Sign-In(之前被称为Google+ Sign-In)和SmartLock.&lt;/p&gt;
&lt;p&gt;这篇文章举例解释了Google Sign-In和SmartLock的实现.&lt;/p&gt;
&lt;p&gt;Google Sign-In的部分比较简单.&lt;/p&gt;
&lt;p&gt;SmartLock让我们可以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让用户保存credentials.&lt;/li&gt;
&lt;li&gt;在打开应用的时候请求credentials.&lt;/li&gt;
&lt;li&gt;使用存在Chrome上的credentials, 这样我们的网站和app就可以共享credentials.&lt;/li&gt;
&lt;li&gt;显示Email提示, 让用户选择email地址.&lt;/li&gt;
&lt;li&gt;所有的这些信息都保存在Google的server里, 用户可以保存或删除.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Demo app: &lt;a href=&quot;https://github.com/charbgr/AuthManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;charbgr/AuthManager&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Storing-your-secure-information-in-the-NDK&quot;&gt;&lt;a href=&quot;#Storing-your-secure-information-in-the-NDK&quot; class=&quot;headerlink&quot; title=&quot;Storing your secure information in the NDK&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.androidsecurity.info/2016/12/15/storing-your-secure-information-in-the-ndk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Storing your secure information in the NDK&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章说敏感信息放在Java代码里不安全, 很容易被人反编译查看出来, 如果放在NDK里面就好一些, 你打开查看的只能是二进制文件, 很难找到.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Introduction-to-Natural-palettes&quot;&gt;&lt;a href=&quot;#Introduction-to-Natural-palettes&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Natural palettes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stories.uplabs.com/introduction-to-natural-palettes-9503bfeee3d5#.z9y0xf7zc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Natural palettes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者从大自然的图像中得到颜色组合的灵感.&lt;br&gt;文章中举了几个例子, 如何用相关的照片找到相关主题的调色板.&lt;/p&gt;
&lt;p&gt;另推荐一个网站: &lt;a href=&quot;http://color.romanuke.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IN COLOR&lt;br&gt; BALANCE&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Make-your-Android-app-look-better&quot;&gt;&lt;a href=&quot;#Make-your-Android-app-look-better&quot; class=&quot;headerlink&quot; title=&quot;Make your Android app look better&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/make-your-android-app-look-less-shitty-5dd63c4938f1#.4q5ro3ty8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make your Android app look better&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;让你的App看起来更好的几点建议:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用同一个图标集的图标.&lt;br&gt;(这里推荐了一些图片工具和网站.)&lt;/li&gt;
&lt;li&gt;使用Material Design设计的keylines, 使用固定的格子大小.&lt;/li&gt;
&lt;li&gt;使用颜色的时候小心一些. (这里推荐了一些调色板网站)&lt;/li&gt;
&lt;li&gt;选择字体要明智一些.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Material-Components&quot;&gt;&lt;a href=&quot;#Material-Components&quot; class=&quot;headerlink&quot; title=&quot;Material Components&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/material-components&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Components&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;模块化和可定制的Material Design UI组件. Android, iOS, Web.&lt;/p&gt;
&lt;h2 id=&quot;Android-oss-from-Kickstarter&quot;&gt;&lt;a href=&quot;#Android-oss-from-Kickstarter&quot; class=&quot;headerlink&quot; title=&quot;Android-oss from Kickstarter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/kickstarter/android-oss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-oss from Kickstarter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kickstarter开源了他们的Android应用.&lt;/p&gt;
&lt;h2 id=&quot;stencil&quot;&gt;&lt;a href=&quot;#stencil&quot; class=&quot;headerlink&quot; title=&quot;stencil&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/thoughtbot/stencil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stencil&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个kotlin写的Android库, 实现一种文字路径的动画.&lt;/p&gt;
&lt;h2 id=&quot;AuthManager&quot;&gt;&lt;a href=&quot;#AuthManager&quot; class=&quot;headerlink&quot; title=&quot;AuthManager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/charbgr/AuthManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AuthManager&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包装了Google Sign-In和SmartLock的Manager.&lt;/p&gt;
&lt;h2 id=&quot;FolioReader-Android&quot;&gt;&lt;a href=&quot;#FolioReader-Android&quot; class=&quot;headerlink&quot; title=&quot;FolioReader-Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/FolioReader/FolioReader-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FolioReader-Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个ePub阅读器和解析框架.&lt;/p&gt;
&lt;h2 id=&quot;BufferTextInputLayout&quot;&gt;&lt;a href=&quot;#BufferTextInputLayout&quot; class=&quot;headerlink&quot; title=&quot;BufferTextInputLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/bufferapp/BufferTextInputLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BufferTextInputLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对Support Library中的&lt;code&gt;TextInputLayout&lt;/code&gt;的扩展, 增加了字数统计.&lt;/p&gt;
&lt;h2 id=&quot;TextLayoutBuilder&quot;&gt;&lt;a href=&quot;#TextLayoutBuilder&quot; class=&quot;headerlink&quot; title=&quot;TextLayoutBuilder&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://facebookincubator.github.io/TextLayoutBuilder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextLayoutBuilder&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Builder模式来配置创建一个Layout的属性.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-236&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-236&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #236&quot;&gt;&lt;/a&gt;Android Weekly Issue #236&lt;/h1&gt;&lt;p&gt;December 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-236&quot;&gt;Android Weekly Issue #236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的物联网平台Android Things; FileProvider; Android Studio的Layout Preview使用; Retrofit2使用; Google Sign-In和SmartLock; 把敏感信息放入NDK的解决方式.&lt;/p&gt;
&lt;p&gt;设计部分讨论了调色板的灵感来源和几个开发app的时候应该注意的问题.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="Design" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Design/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Security" scheme="http://mengdd.github.io/tags/Security/"/>
    
      <category term="Design" scheme="http://mengdd.github.io/tags/Design/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="IoT" scheme="http://mengdd.github.io/tags/IoT/"/>
    
      <category term="Android Things" scheme="http://mengdd.github.io/tags/Android-Things/"/>
    
      <category term="FileProvider" scheme="http://mengdd.github.io/tags/FileProvider/"/>
    
      <category term="IDE" scheme="http://mengdd.github.io/tags/IDE/"/>
    
      <category term="Retrofit2" scheme="http://mengdd.github.io/tags/Retrofit2/"/>
    
      <category term="Sign In" scheme="http://mengdd.github.io/tags/Sign-In/"/>
    
      <category term="SmartLock" scheme="http://mengdd.github.io/tags/SmartLock/"/>
    
      <category term="NDK" scheme="http://mengdd.github.io/tags/NDK/"/>
    
      <category term="Color" scheme="http://mengdd.github.io/tags/Color/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 235</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/12/16/android-weekly-notes-issue-235/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/12/16/android-weekly-notes-issue-235/</id>
    <published>2016-12-16T06:14:34.000Z</published>
    <updated>2016-12-16T06:40:43.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-235&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-235&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #235&quot;&gt;&lt;/a&gt;Android Weekly Issue #235&lt;/h1&gt;&lt;p&gt;December 11th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-235&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #235&lt;/a&gt;&lt;br&gt;本期内容包括: 开发一个自定义View并发布为开源库的完整流程介绍; 用&lt;code&gt;AnimatedVectorDrawable&lt;/code&gt;实现的动画; 什么样的程序是可测试的; &lt;code&gt;DownloadManager&lt;/code&gt;介绍; Okhttp的重试; Android 7取消了&lt;code&gt;file://&lt;/code&gt;; Android Studio即将推出的build cache功能; 支持离线模式的app构架; 如何写自定义的lint规则; Epoxy, 一个处理复杂RecyclerView屏的库; &lt;code&gt;FragmentPagerAdapter&lt;/code&gt;和&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;的比较等. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Make-an-android-custom-view-publish-and-open-source&quot;&gt;&lt;a href=&quot;#Make-an-android-custom-view-publish-and-open-source&quot; class=&quot;headerlink&quot; title=&quot;Make an android custom view, publish and open source &quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/dualcores-studio/make-an-android-custom-view-publish-and-open-source-99a3d86df228#.zc8s14lek&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make an android custom view, publish and open source &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者开发了一个环形的SeekBar, 并把它作为一个库发布到了JCenter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者首先讲了自定义View的实现&lt;/strong&gt;:&lt;br&gt;首先是关于View生命周期的介绍, 在写自定义View的时候有几个关键的生命周期回调需要处理:&lt;br&gt;&lt;img src=&quot;/images/view-lifecycle-diagram-lite-version.png&quot; alt=&quot;view-lifecycle-diagram-lite-version&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者实现的几个关键步骤讲解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义属性并获取.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onMeasure()&lt;/code&gt;中控制尺寸.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onDraw()&lt;/code&gt;中绘制: 避免在&lt;code&gt;onDraw()&lt;/code&gt;中分配内存; 用&lt;code&gt;invalidate()&lt;/code&gt;方法来激发重绘.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onTouchEvent()&lt;/code&gt;处理用户手势. 在他的环形SeekBar的实现里, 这里涉及到了点击坐标到角度的转换. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将自定义View库开源到Github&lt;/strong&gt;:&lt;br&gt;开源到Github有个好的README很重要, 这里有几个tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供截图, Gif或者Video.&lt;/li&gt;
&lt;li&gt;提供安装/使用说明.&lt;br&gt;作者自己的库: &lt;a href=&quot;https://github.com/enginebai/SwagPoints&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwagPoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;发布库&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去&lt;a href=&quot;https://bintray.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JFrog Bintray&lt;/a&gt;注册.&lt;/li&gt;
&lt;li&gt;创建repository, package, 和版本号.&lt;/li&gt;
&lt;li&gt;生成并上传, 用了&lt;a href=&quot;https://github.com/blundell/release-android-library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;添加到Jcenter.&lt;/li&gt;
&lt;li&gt;被接受之后收到邮件, 就可以使用了.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Animation-Jump-through&quot;&gt;&lt;a href=&quot;#Animation-Jump-through&quot; class=&quot;headerlink&quot; title=&quot;Animation: Jump-through&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.k238d5tw2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animation: Jump-through&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;AnimatedVectorDrawable&lt;/code&gt;实现的一个很fancy的位置标志动画.&lt;/p&gt;
&lt;h2 id=&quot;What-makes-Android-Apps-Testable&quot;&gt;&lt;a href=&quot;#What-makes-Android-Apps-Testable&quot; class=&quot;headerlink&quot; title=&quot;What makes Android Apps Testable&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What makes Android Apps Testable&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果程序的架构不适合测试, 那么硬要写一些测试很可能就会面临这样的局面: 要么就是发现没法写测试, 要么就是为了写测试而破坏了代码, 做了一些奇怪的事情.&lt;/p&gt;
&lt;p&gt;那么到底是什么样的程序才是适合写测试, 或者是可测试的呢?&lt;/p&gt;
&lt;p&gt;有一个有趣的定义是seam(接缝), 在接缝处你可以改变程序的行为, 而不用编辑当前程序. 如果程序没有接缝, 你将无法设置测试的初始条件和验证测试结果.&lt;/p&gt;
&lt;p&gt;本文中举了一个实际的例子, 开始的时候程序没有seam, 所以导致无法测试, 后来把静态方法改为实例的方法之后, 我们就可以通过Mockito来模拟行为, 设置条件, 最后通过验证某一方法的调用与否来进行验证.&lt;/p&gt;
&lt;h2 id=&quot;DownloadManager-–-Part-3&quot;&gt;&lt;a href=&quot;#DownloadManager-–-Part-3&quot; class=&quot;headerlink&quot; title=&quot;DownloadManager – Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/downloadmanager-part-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DownloadManager – Part 3&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;DownloadManager&lt;/code&gt;来处理下载.&lt;br&gt;首先它在设备上有自己的UI, 还有notification, 还有Downloads app能让用户管理下载文件.&lt;/p&gt;
&lt;p&gt; 我们可以查询到文件的一些信息, 比如MIME type, 文件尺寸, 下载状态等.&lt;/p&gt;
&lt;p&gt; 我们还可以用&lt;code&gt;getUriForDownloadedFile()&lt;/code&gt;方法来获取一个URI, 配合MIME type, 发送Intent, 来打开一个相关的查看程序.&lt;/p&gt;
&lt;p&gt; 关于储存文件的合适地点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件小, 仅app自己使用 -&amp;gt; 私有数据区域(默认行为).&lt;/li&gt;
&lt;li&gt;文件大, 仅app自己使用 -&amp;gt; 外部存储的私有数据区域(不需要权限). &lt;code&gt;setDestinationInExternalFilesDir()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;文件需要被别的应用访问 -&amp;gt; 外部存储的共有区域, 需要&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;权限. &lt;code&gt;setDestinationInExternalPublicDir()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OkHttp-is-quietly-retrying-requests-Is-your-API-ready&quot;&gt;&lt;a href=&quot;#OkHttp-is-quietly-retrying-requests-Is-your-API-ready&quot; class=&quot;headerlink&quot; title=&quot;OkHttp is quietly retrying requests. Is your API ready?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/inloop/okhttp-is-quietly-retrying-requests-is-your-api-ready-19489ef35ace#.ldxyyly7t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp is quietly retrying requests. Is your API ready?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在网路较慢或不稳定的时候, OkHttp有可能会重复发送请求, 直到成功. &lt;/p&gt;
&lt;p&gt;这个重试的逻辑是通过&lt;a href=&quot;https://github.com/square/okhttp/blob/07309c1c7d9e296014268ebd155ebf7ef8679f6c/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RetryAndFollowUpInterceptor.java&lt;/a&gt;实现的.&lt;/p&gt;
&lt;p&gt;那么, 我们可以关掉这个重试行为吗? 有一些issues就在讨论这个问题: &lt;a href=&quot;https://github.com/square/okhttp/issues/1043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue # 1043&lt;/a&gt;. 后来有两个pull requests:  &lt;a href=&quot;https://github.com/square/okhttp/pull/1259&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR #1259&lt;/a&gt;和&lt;a href=&quot;https://github.com/square/okhttp/pull/2479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR #2479&lt;/a&gt;改进了这个问题, 减少(但并没有消除)了不必要的retry请求.&lt;/p&gt;
&lt;p&gt;全局关闭重试行为: &lt;code&gt;OkHttpClient.Builder .retryOnConnectionFailure()&lt;/code&gt;设置为false. 但是注意这样是很粗暴并具有破坏性的, 消除了retry逻辑带来的好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果Url有多个IP, 失败了一个还可以试另一个.&lt;/li&gt;
&lt;li&gt;连接池中的连接偶尔会time out, 减少这种意外导致的后果.&lt;/li&gt;
&lt;li&gt;可以顺次查找多个代理, 如果都失败了再转向直接连接.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解决真正的问题&lt;/strong&gt;: 关闭静默重试在某些情形下有帮助, 但是其实它隐藏了真正的问题, 就是你的API是否是幂等的&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;idempotent&lt;/a&gt;. server端可以根据客户端的GUID来检测重复, 这样server就不会多次执行操作, 会通知发送者.&lt;/p&gt;
&lt;h2 id=&quot;File-scheme-is-now-not-allowed-with-Intent-on-N&quot;&gt;&lt;a href=&quot;#File-scheme-is-now-not-allowed-with-Intent-on-N&quot; class=&quot;headerlink&quot; title=&quot;File scheme is now not allowed with Intent on N&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;File scheme is now not allowed with Intent on N&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android N (Nougat, API 24)开始, 不再允许发送&lt;code&gt;file://&lt;/code&gt;的Intent, 将会直接抛出&lt;code&gt;FileUriExposedException&lt;/code&gt;异常.&lt;/p&gt;
&lt;p&gt;所以当你把&lt;code&gt;targetSdkVersion&lt;/code&gt;改为24之后, 你必须要确保你修复了这些问题再发布.&lt;/p&gt;
&lt;p&gt;解决方案是什么呢? 用&lt;code&gt;content://&lt;/code&gt;, 结合&lt;code&gt;FileProvider&lt;/code&gt;:&lt;br&gt;首先在manifest里面声明:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.support.v4.content.FileProvider&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:authorities&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;applicationId&amp;#125;.provider&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:exported&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:grantUriPermissions&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta-data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.support.FILE_PROVIDER_PATHS&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@xml/provider_paths&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;res\xml\provider_paths.xml&lt;/code&gt;文件里指明路径:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;external-path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;external_files&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;paths&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后, 把&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Uri photoURI = Uri.fromFile(createImageFile());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改为&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Uri photoURI = FileProvider.getUriForFile(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BuildConfig.APPLICATION_ID + &lt;span class=&quot;string&quot;&gt;&quot;.provider&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        createImageFile());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后放在Intent里发送就好了.&lt;/p&gt;
&lt;p&gt;注意, 如果你的&lt;code&gt;targetSdkVersion&lt;/code&gt;还没有更新到24, 那么即便是在Nougat的手机上&lt;code&gt;file://&lt;/code&gt;也仍然是能正常使用的.&lt;/p&gt;
&lt;h2 id=&quot;Use-Android-Studio-Gradle-Build-Cache-for-faster-builds&quot;&gt;&lt;a href=&quot;#Use-Android-Studio-Gradle-Build-Cache-for-faster-builds&quot; class=&quot;headerlink&quot; title=&quot;Use Android Studio Gradle Build Cache for faster builds&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://zeroturnaround.com/rebellabs/using-build-cache-in-android-studio-makes-gradle-build-faster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Use Android Studio Gradle Build Cache for faster builds&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Studio当前的最新版是2.3 Canary 2. 有一些新的改进, 但是其中最吸引人的是这个&lt;a href=&quot;http://tools.android.com/tech-docs/build-cache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build cache&lt;/a&gt;. 它会使你的clean build更快.&lt;/p&gt;
&lt;p&gt;本文后面解析了build cache的工作原理.&lt;/p&gt;
&lt;h2 id=&quot;Offline-App-Architecture-build-for-the-Next-Billion&quot;&gt;&lt;a href=&quot;#Offline-App-Architecture-build-for-the-Next-Billion&quot; class=&quot;headerlink&quot; title=&quot;Offline App Architecture, build for the Next Billion&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/so-you-want-to-develop-for-the-next-billion-9eb072c26bc8#.1zklimr3o&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Offline App Architecture, build for the Next Billion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个好的应用应该在网络不好甚至离线的时候仍然可以使用, 我们应该做些什么呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定连接状况. 可以使用这个&lt;a href=&quot;https://github.com/facebook/network-connection-class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;network-connection-class
&lt;/a&gt;. 如果你使用的是Okhttp, 可以加一个Intercepter来进行采样.&lt;/li&gt;
&lt;li&gt;有效地缓存. 从网络取数据很慢并且昂贵, 所以有效地利用之前取到的数据是很关键的优化. (Cache-Control, Etag).&lt;/li&gt;
&lt;li&gt;在本地操作, 在全局同步. 等网络请求的时候可以先显示本地数据, 而不是loading.&lt;/li&gt;
&lt;li&gt;有效地处理线程.&lt;/li&gt;
&lt;li&gt;优化图片. 网络不好的时候先用RGB_565, 等网络变好了再取高质量图片.&lt;/li&gt;
&lt;li&gt;使用大Cookie. 尽量一次传输更多的数据(big cookie), 而不是频繁发送一些小请求(small cookies).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Writing-custom-lint-rules-and-integrating-them&quot;&gt;&lt;a href=&quot;#Writing-custom-lint-rules-and-integrating-them&quot; class=&quot;headerlink&quot; title=&quot;Writing custom lint rules and integrating them&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@mosesJay/writing-custom-lint-rules-and-integrating-them-with-android-studio-inspections-or-carefulnow-c54d72f00d30#.5y0o98bor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing custom lint rules and integrating them&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何创建自定义的lint规则.&lt;br&gt;事情的由来是作者发现了一个死循环调用, 然后他想做一个什么标记以防以后其他人会犯同样的错误.&lt;/p&gt;
&lt;p&gt;然后他想到的是&lt;a href=&quot;https://developer.android.com/studio/write/annotations.html#adding-nullness&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Nullable注解&lt;/a&gt;, 的检查, 实质是依靠&lt;a href=&quot;https://developer.android.com/studio/write/lint.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lint&lt;/a&gt;来实现的.&lt;/p&gt;
&lt;p&gt;于是他自己写了一个自定义的lint规则, 来提示使用用他的注解&lt;code&gt;@CarefulNow&lt;/code&gt;标记的方法时应当注意.&lt;br&gt;详细的实现方式请看原文.&lt;/p&gt;
&lt;h2 id=&quot;Epoxy-Airbnb’s-View-Architecture-on-Android&quot;&gt;&lt;a href=&quot;#Epoxy-Airbnb’s-View-Architecture-on-Android&quot; class=&quot;headerlink&quot; title=&quot;Epoxy: Airbnb’s View Architecture on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394#.uyvuayspc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Epoxy: Airbnb’s View Architecture on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/airbnb/epoxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epoxy&lt;/a&gt;是一个Android库, 用来处理复杂的RecyclerView屏. 本文介绍了它在项目中实际的使用.&lt;/p&gt;
&lt;h2 id=&quot;Adventures-with-FragmentStatePagerAdapter&quot;&gt;&lt;a href=&quot;#Adventures-with-FragmentStatePagerAdapter&quot; class=&quot;headerlink&quot; title=&quot;Adventures with FragmentStatePagerAdapter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/inloop/adventures-with-fragmentstatepageradapter-4f56a643f8e0#.qk6aygake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures with FragmentStatePagerAdapter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;可能有很多Android开发者对于&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentPagerAdapter&lt;/a&gt;和&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentStatePagerAdapter&lt;/a&gt;的区别不是太清楚或根本不知道, 本文作者就具体介绍了二者的不同.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;&lt;br&gt;适用于项目个数确定的情形.&lt;br&gt;为什么呢? 因为一旦fragment的实例被创建, 它永远也不会从&lt;code&gt;FragmentManager&lt;/code&gt;中移除, 直到Activity被销毁.&lt;/p&gt;
&lt;p&gt;当Fragment不见的时候, 仅仅是&lt;code&gt;onDestroyView()&lt;/code&gt;被调用, 当fragment再次回来时, 再调用&lt;code&gt;onCreateView()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;&lt;br&gt;当fragment的实例不可达的时候, 实例就会立即从&lt;code&gt;FragmentManager&lt;/code&gt;移除. 被移除的fragment实例的状态由&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;保存, 当你再次回到该项的时候, fragment会重建新实例, 并且状态被恢复. 所以这种adapter适用于项目个数不确定或的情况.&lt;/p&gt;
&lt;p&gt;所以使用&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;的时候需要注意内存问题.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notifyDatasetChanged()的问题&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notifyDataSetChanged()&lt;/code&gt;是用来处理数据集变化的情况, 比如一些项目增删的情况. 这个方法不是用来刷新当前显示的Fragment或其中的Views的.&lt;/p&gt;
&lt;p&gt;文章中还有一些关于数据改变实现以及现有issue的讨论. 为了解决issue作者还发布了一个库&lt;a href=&quot;https://github.com/inloop/UpdatableFragmentStatePagerAdapter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UpdatableFragmentStatePagerAdapter&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;KeepActivitiesTile&quot;&gt;&lt;a href=&quot;#KeepActivitiesTile&quot; class=&quot;headerlink&quot; title=&quot;KeepActivitiesTile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Stocard/KeepActivitiesTile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KeepActivitiesTile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个quick settings tile来开启”Don’t keep activities”.&lt;/p&gt;
&lt;h2 id=&quot;WaveLoading&quot;&gt;&lt;a href=&quot;#WaveLoading&quot; class=&quot;headerlink&quot; title=&quot;WaveLoading&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/race604/WaveLoading&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WaveLoading&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个波形的loading图, 水面上涨代表loading程度.&lt;/p&gt;
&lt;h2 id=&quot;coordinators&quot;&gt;&lt;a href=&quot;#coordinators&quot; class=&quot;headerlink&quot; title=&quot;coordinators&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/square/coordinators&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coordinators&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Simple MVWhatever for Android.&lt;/p&gt;
&lt;h2 id=&quot;epoxy&quot;&gt;&lt;a href=&quot;#epoxy&quot; class=&quot;headerlink&quot; title=&quot;epoxy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/airbnb/epoxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epoxy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个处理复杂的RecyclerView屏的库.&lt;/p&gt;
&lt;h2 id=&quot;Screen-Record-for-Android&quot;&gt;&lt;a href=&quot;#Screen-Record-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Screen Record for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gist.github.com/tasomaniac/93cefd97af13e2ea2b2f248affb373bd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Screen Record for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;录屏脚本.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-235&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-235&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #235&quot;&gt;&lt;/a&gt;Android Weekly Issue #235&lt;/h1&gt;&lt;p&gt;December 11th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-235&quot;&gt;Android Weekly Issue #235&lt;/a&gt;&lt;br&gt;本期内容包括: 开发一个自定义View并发布为开源库的完整流程介绍; 用&lt;code&gt;AnimatedVectorDrawable&lt;/code&gt;实现的动画; 什么样的程序是可测试的; &lt;code&gt;DownloadManager&lt;/code&gt;介绍; Okhttp的重试; Android 7取消了&lt;code&gt;file://&lt;/code&gt;; Android Studio即将推出的build cache功能; 支持离线模式的app构架; 如何写自定义的lint规则; Epoxy, 一个处理复杂RecyclerView屏的库; &lt;code&gt;FragmentPagerAdapter&lt;/code&gt;和&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;的比较等. &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="AnimatedVectorDrawable" scheme="http://mengdd.github.io/tags/AnimatedVectorDrawable/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="RecyclerView" scheme="http://mengdd.github.io/tags/RecyclerView/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="Android 7" scheme="http://mengdd.github.io/tags/Android-7/"/>
    
      <category term="Custom View" scheme="http://mengdd.github.io/tags/Custom-View/"/>
    
      <category term="JCenter" scheme="http://mengdd.github.io/tags/JCenter/"/>
    
      <category term="DownloadManager" scheme="http://mengdd.github.io/tags/DownloadManager/"/>
    
      <category term="OkHttp" scheme="http://mengdd.github.io/tags/OkHttp/"/>
    
      <category term="Offline Architecture" scheme="http://mengdd.github.io/tags/Offline-Architecture/"/>
    
      <category term="lint" scheme="http://mengdd.github.io/tags/lint/"/>
    
      <category term="FragmentPagerAdapter" scheme="http://mengdd.github.io/tags/FragmentPagerAdapter/"/>
    
      <category term="FragmentStatePagerAdapter" scheme="http://mengdd.github.io/tags/FragmentStatePagerAdapter/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 234</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/React-Native/Java/2016/12/13/android-weekly-notes-issue-234/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/React-Native/Java/2016/12/13/android-weekly-notes-issue-234/</id>
    <published>2016-12-13T03:08:45.000Z</published>
    <updated>2016-12-13T03:16:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-234&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-234&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #234&quot;&gt;&lt;/a&gt;Android Weekly Issue #234&lt;/h1&gt;&lt;p&gt;December 4th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-234&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #234&lt;/a&gt;&lt;br&gt;本期内容包括: ConstraintLayout的使用; React Native教程; fastlane管理模拟器; Android中的任务调度; 文字sticker的实现; 给Android library加flavor; 更好的关键帧动画; SQLDelight的使用; icon Animation; OkLog的使用等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Guide-to-ConstraintLayout&quot;&gt;&lt;a href=&quot;#Guide-to-ConstraintLayout&quot; class=&quot;headerlink&quot; title=&quot;Guide to ConstraintLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@loutry/guide-to-constraintlayout-407cd87bc013#.pdg54u72z&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide to ConstraintLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章教你如何使用&lt;code&gt;ConstraintLayout&lt;/code&gt;, 有很多实际的例子.&lt;/p&gt;
&lt;h2 id=&quot;React-Native-Express&quot;&gt;&lt;a href=&quot;#React-Native-Express&quot; class=&quot;headerlink&quot; title=&quot;React Native Express&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.reactnativeexpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native Express&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一步一步地教你跨平台的Reactive Native, 比官方的文档要深入, 并且提供例子.&lt;/p&gt;
&lt;h2 id=&quot;Managing-Android-Virtual-Devices-during-test-session&quot;&gt;&lt;a href=&quot;#Managing-Android-Virtual-Devices-during-test-session&quot; class=&quot;headerlink&quot; title=&quot;Managing Android Virtual Devices during test session&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/azimolabs/managing-android-virtual-devices-during-test-session-98a403acffc2#.cu4nfhl6u&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing Android Virtual Devices during test session&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们用&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fastlane&lt;/a&gt;管理模拟器, 并且开发了一个插件.&lt;/p&gt;
&lt;h2 id=&quot;You-don’t-have-to-use-WeakReference-to-avoid-memory-leaks&quot;&gt;&lt;a href=&quot;#You-don’t-have-to-use-WeakReference-to-avoid-memory-leaks&quot; class=&quot;headerlink&quot; title=&quot;You don’t have to use WeakReference to avoid memory leaks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/weakreference-in-android-dd1e66b9be9d#.vmxu20g30&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;You don’t have to use WeakReference to avoid memory leaks&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;并不是到处都要用&lt;code&gt;WeakReference&lt;/code&gt;来避免内存泄漏.&lt;/p&gt;
&lt;h2 id=&quot;Effective-Java-for-Android&quot;&gt;&lt;a href=&quot;#Effective-Java-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Effective Java for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/rocknnull/effective-java-for-android-cheatsheet-bf4e3433889a#.8t44xdb4t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Effective Java for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个cheat-sheet, Effective Java中提到的内容, 作者列出了他认为在Android开发中最重要的几项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用private来限制不可实例化.&lt;/li&gt;
&lt;li&gt;使用静态工厂方法.&lt;/li&gt;
&lt;li&gt;使用Builders.&lt;/li&gt;
&lt;li&gt;避免互换性.&lt;/li&gt;
&lt;li&gt;静态内部类.&lt;/li&gt;
&lt;li&gt;使用泛型.&lt;/li&gt;
&lt;li&gt;返回空的集合而不是null.&lt;/li&gt;
&lt;li&gt;字符串连接用StringBuilder, 不要用+.&lt;/li&gt;
&lt;li&gt;可恢复的异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Scheduling-tasks-in-Android-made-easy&quot;&gt;&lt;a href=&quot;#Scheduling-tasks-in-Android-made-easy&quot; class=&quot;headerlink&quot; title=&quot;Scheduling tasks in Android made easy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.hypertrack.io/2016/12/01/scheduling-tasks-in-android-made-easy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scheduling tasks in Android made easy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;分发异步任务的时候, 用很多选择: &lt;code&gt;AlarmManager&lt;/code&gt;, &lt;code&gt;Handler&lt;/code&gt;, &lt;code&gt;JobSheduler&lt;/code&gt;, &lt;code&gt;GcmNetworkManager&lt;/code&gt;. 作者他们的库: &lt;a href=&quot;https://github.com/hypertrack/smart-scheduler-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smart-scheduler-android&lt;/a&gt;就是用来有效地处理异步任务调度问题.&lt;/p&gt;
&lt;h2 id=&quot;How-to-create-beautiful-text-stickers-for-Android&quot;&gt;&lt;a href=&quot;#How-to-create-beautiful-text-stickers-for-Android&quot; class=&quot;headerlink&quot; title=&quot;How to create beautiful text stickers for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/uptech-team/how-to-create-beautiful-text-stickers-for-android-10eeea0cee09#.11x8ar94q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to create beautiful text stickers for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前作者有一篇文章讲了如何创建Snapchat一样的图片stickers.&lt;/p&gt;
&lt;p&gt;本篇讲如何创建文字的stickers, 代码: &lt;a href=&quot;https://github.com/uptechteam/MotionViews-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MotionViews-Android&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Elite-Worship&quot;&gt;&lt;a href=&quot;#Elite-Worship&quot; class=&quot;headerlink&quot; title=&quot;Elite Worship&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sqisland.com/2016/12/elite-worship.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elite Worship&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Chiu-Ki Chan分享了一些她的看法, 关于精英崇拜, 和如何让社区更加平等, 鼓励每一个人都参与进来.&lt;/p&gt;
&lt;h2 id=&quot;Product-Flavors-for-Android-Libraries&quot;&gt;&lt;a href=&quot;#Product-Flavors-for-Android-Libraries&quot; class=&quot;headerlink&quot; title=&quot;Product Flavors for Android Libraries&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sahildave/product-flavors-for-android-library-d3b2d240fca2#.ravhhk30a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Product Flavors for Android Libraries&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何给Android Library加上不同的flavor使用.&lt;/p&gt;
&lt;h2 id=&quot;Keyframes-Delivering-scalable-high-quality-animations&quot;&gt;&lt;a href=&quot;#Keyframes-Delivering-scalable-high-quality-animations&quot; class=&quot;headerlink&quot; title=&quot;Keyframes: Delivering scalable, high-quality animations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.facebook.com/posts/354469174916519&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyframes: Delivering scalable, high-quality animations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Facebook分享了一个库&lt;a href=&quot;https://github.com/facebookincubator/Keyframes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyframes&lt;/a&gt;用来导出AE的动画, 并且在移动设备上播放它.&lt;/p&gt;
&lt;h2 id=&quot;SQLDelight-Getting-Started&quot;&gt;&lt;a href=&quot;#SQLDelight-Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;SQLDelight: Getting Started&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@tonyowen/sqldelight-getting-started-67054fe51306#.rske25ore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLDelight: Getting Started&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/square/sqldelight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sqldelight&lt;/a&gt;是一个库, 可以用SQL语句来生成Java Model类.&lt;br&gt;SQLDelight也是一个Intellij插件.&lt;/p&gt;
&lt;p&gt;作者介绍了如何使用SQLDelight, 注意生成models需要结合AutoValue.&lt;/p&gt;
&lt;h2 id=&quot;Your-ViewHolders-are-Dumb-Make-’em-Not-Dumb&quot;&gt;&lt;a href=&quot;#Your-ViewHolders-are-Dumb-Make-’em-Not-Dumb&quot; class=&quot;headerlink&quot; title=&quot;Your ViewHolders are Dumb. Make ’em Not Dumb&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jonfhancock/your-viewholders-are-dumb-make-em-not-dumb-82e6f73f630c#.auaur0y3r&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Your ViewHolders are Dumb. Make ’em Not Dumb&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者举例说明ViewHolder应该如何优化代码, 解放Adapter.&lt;/p&gt;
&lt;h2 id=&quot;An-Introduction-to-Icon-Animation-Techniques&quot;&gt;&lt;a href=&quot;#An-Introduction-to-Icon-Animation-Techniques&quot; class=&quot;headerlink&quot; title=&quot;An Introduction to Icon Animation Techniques&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2016/11/introduction-to-icon-animation-techniques.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Introduction to Icon Animation Techniques&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何创建漂亮的icon动画.&lt;/p&gt;
&lt;h2 id=&quot;OkLog-2-0-—-improved-Android-network-logging&quot;&gt;&lt;a href=&quot;#OkLog-2-0-—-improved-Android-network-logging&quot; class=&quot;headerlink&quot; title=&quot;OkLog 2.0 — improved Android network logging&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@simonpercic/oklog-2-0-improved-android-network-logging-a72b2ffe4c66#.6h8w44eh8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkLog 2.0 — improved Android network logging&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/simonpercic/OkLog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkLog&lt;/a&gt;是一个库, 可以在logcat中打印网络请求和响应, 点击进入页面查看, 本文介绍2.0版本的改进.&lt;/p&gt;
&lt;h2 id=&quot;How-to-Build-an-Android-App-for-Fire-TV-Part-4&quot;&gt;&lt;a href=&quot;#How-to-Build-an-Android-App-for-Fire-TV-Part-4&quot; class=&quot;headerlink&quot; title=&quot;How to Build an Android App for Fire TV (Part 4)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/amazon-appstore/developing-for-the-living-room-how-to-build-an-android-app-for-fire-tv-part-4-cbe572a6f1e6#.zfg39casg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Build an Android App for Fire TV (Part 4)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文是为Fire TV搭建一个Android App系列文章的第四篇.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;android-PageFlip&quot;&gt;&lt;a href=&quot;#android-PageFlip&quot; class=&quot;headerlink&quot; title=&quot;android-PageFlip&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/eschao/android-PageFlip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-PageFlip&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;3D的翻页效果.&lt;/p&gt;
&lt;h2 id=&quot;smart-scheduler-android&quot;&gt;&lt;a href=&quot;#smart-scheduler-android&quot; class=&quot;headerlink&quot; title=&quot;smart-scheduler-android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/hypertrack/smart-scheduler-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smart-scheduler-android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用于周期性和非周期性任务分发的工具类.&lt;/p&gt;
&lt;h2 id=&quot;PageLoader&quot;&gt;&lt;a href=&quot;#PageLoader&quot; class=&quot;headerlink&quot; title=&quot;PageLoader&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/arieridwan8/pageloader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageLoader&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个简单的可定制化的loading页面库.&lt;/p&gt;
&lt;h2 id=&quot;fastlane-plugin-automated-test-emulator-run&quot;&gt;&lt;a href=&quot;#fastlane-plugin-automated-test-emulator-run&quot; class=&quot;headerlink&quot; title=&quot;fastlane-plugin-automated-test-emulator-run&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/AzimoLabs/fastlane-plugin-automated-test-emulator-run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fastlane-plugin-automated-test-emulator-run&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;fastlane插件, 用于启动模拟器进行自动化测试.&lt;/p&gt;
&lt;h2 id=&quot;Keyframes&quot;&gt;&lt;a href=&quot;#Keyframes&quot; class=&quot;headerlink&quot; title=&quot;Keyframes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/facebookincubator/Keyframes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyframes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;导出AE动画并在移动设备上播放的库.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-234&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-234&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #234&quot;&gt;&lt;/a&gt;Android Weekly Issue #234&lt;/h1&gt;&lt;p&gt;December 4th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-234&quot;&gt;Android Weekly Issue #234&lt;/a&gt;&lt;br&gt;本期内容包括: ConstraintLayout的使用; React Native教程; fastlane管理模拟器; Android中的任务调度; 文字sticker的实现; 给Android library加flavor; 更好的关键帧动画; SQLDelight的使用; icon Animation; OkLog的使用等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="React Native" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/React-Native/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/React-Native/Java/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="React Native" scheme="http://mengdd.github.io/tags/React-Native/"/>
    
      <category term="fastlane" scheme="http://mengdd.github.io/tags/fastlane/"/>
    
      <category term="Effective Java" scheme="http://mengdd.github.io/tags/Effective-Java/"/>
    
      <category term="Sticker" scheme="http://mengdd.github.io/tags/Sticker/"/>
    
      <category term="Flavor" scheme="http://mengdd.github.io/tags/Flavor/"/>
    
      <category term="SQLDelight" scheme="http://mengdd.github.io/tags/SQLDelight/"/>
    
      <category term="OkLog" scheme="http://mengdd.github.io/tags/OkLog/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 233</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/Java/2016/12/01/android-weekly-notes-issue-233/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/Java/2016/12/01/android-weekly-notes-issue-233/</id>
    <published>2016-12-01T10:23:40.000Z</published>
    <updated>2016-12-13T03:16:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-233&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-233&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #233&quot;&gt;&lt;/a&gt;Android Weekly Issue #233&lt;/h1&gt;&lt;p&gt;November 27th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-233&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #233&lt;/a&gt;&lt;br&gt;本期内容包括: 用Mockito做RxJava的单元测试; Android开发中的命令行使用; Android 7.1的App Shortcuts; 自定义View的绘制; 用Firebase的Remote Config进行feature逐步分发; APK分析工具的使用, APK瘦身讨论; RxJava处理网络请求和缓存; presenter的设计; 用Firebase发送push notification; transient关键字的使用等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Testing-asynchronous-RxJava-code-using-Mockito&quot;&gt;&lt;a href=&quot;#Testing-asynchronous-RxJava-code-using-Mockito&quot; class=&quot;headerlink&quot; title=&quot;Testing asynchronous RxJava code using Mockito&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@fabioCollini/testing-asynchronous-rxjava-code-using-mockito-8ad831a16877#.yhndxn3y1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing asynchronous RxJava code using Mockito&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲了如何用Mockito给RxJava的异步请求代码写单元测试.&lt;br&gt;内容包括了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何设置Mockito的默认返回值. (通过自定义的&lt;code&gt;MockitoConfiguration&lt;/code&gt;类).&lt;/li&gt;
&lt;li&gt;如何把异步变为同步测试. (1.用&lt;code&gt;blockingGet()&lt;/code&gt;; 2.在RxJava2中, 可以使用&lt;code&gt;TestObserver&lt;/code&gt;的&lt;code&gt;awaitTerminalEvent()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AssertJ&lt;/a&gt;的使用.&lt;/li&gt;
&lt;li&gt;测试异步代码. 使用Rule来替换原来的scheduler.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatMap()&lt;/code&gt;, &lt;code&gt;concatMap()&lt;/code&gt;, &lt;code&gt;concatMapEager()&lt;/code&gt;操作符的使用.&lt;/li&gt;
&lt;li&gt;测试Timeout.&lt;/li&gt;
&lt;li&gt;测试异常和retry逻辑.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好用的工具: &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AssertJ&lt;/a&gt;&lt;br&gt;用来更方便地写Java测试中的assert语句.&lt;/p&gt;
&lt;h2 id=&quot;Mastering-the-Terminal-side-of-Android-development&quot;&gt;&lt;a href=&quot;#Mastering-the-Terminal-side-of-Android-development&quot; class=&quot;headerlink&quot; title=&quot;Mastering the Terminal side of Android development&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@cesarmcferreira/mastering-the-terminal-side-of-android-development-e7520466c521#.5pjzgdn2s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering the Terminal side of Android development&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了在Android开发中他是如何使用命令行的.&lt;/p&gt;
&lt;p&gt;使用更好的命令行程序: &lt;a href=&quot;http://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt;.&lt;br&gt;它有很多有用的&lt;a href=&quot;https://www.iterm2.com/features.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;features&lt;/a&gt;, 比如分屏, 自定义颜色, 粘贴历史等.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;on-my-zsh&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on-my-zsh&lt;/a&gt;内置了一个&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git plugin&lt;/a&gt;, 提供了很多aliases和功能.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zsh-autosuggestions&lt;/a&gt;会在你输入的时候根据历史提供建议.&lt;/p&gt;
&lt;p&gt;你可以用Ctrl + R在命令历史中进行逆向智能搜索(Reverse intelligent search). 你开始输入这个命令, 命令行会在历史中寻找并自动补全. 你可以按Enter来执行这个命令, 或者左右箭头来编辑命令, 或者继续按Ctrl + R在其他可能的命令中寻找.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dryrun&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你在github上看到一个程序, 想要运行一下看看, 你不必再把它下载下来, 导入Android Studio了.&lt;/p&gt;
&lt;p&gt;你只需要用&lt;a href=&quot;https://github.com/cesarferreira/dryrun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dryrun&lt;/a&gt;, 一句命令就可以:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dryrun REMOTE_GIT_URL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build faster, build offline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在build的时候使用–offline可以让所有依赖都使用缓存版本, 不再进行网络请求, 从而加快执行速度.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew assembleDevelopDebug --offline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./gradlew test --offline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Android Studio中也可以进行设置.&lt;br&gt;在&lt;code&gt;Settings -&amp;gt; Build, Execution, Deployment -&amp;gt; Build tools -&amp;gt; Gradle&lt;/code&gt;中勾选&lt;code&gt;Offline work&lt;/code&gt;即可.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;alfi&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/cesarferreira/alfi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alfi&lt;/a&gt;是一个工具, 装了这个工具之后, 用一行命令就可以查到第三方库的依赖语句, 然后你就可以把它拷贝粘贴到&lt;code&gt;build.gradle&lt;/code&gt;中去了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gradle tasks shortcuts&lt;/strong&gt;&lt;br&gt;gradle的task有缩写版的, 比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iDD for installDevelopmentDebug&lt;/li&gt;
&lt;li&gt;aDD for assembleDevelopmentDebug&lt;/li&gt;
&lt;li&gt;cC for connectedCheck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Android Rocket Launcher&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/cesarferreira/android-rocket-launcher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Rocket Launcher&lt;/a&gt;增加新的tasks, 在命令行启动应用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接在console输出单元测试结果&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  testOptions.unitTests.all &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testLogging &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      events &amp;apos;passed&amp;apos;, &amp;apos;skipped&amp;apos;, &amp;apos;failed&amp;apos;, &amp;apos;standardOut&amp;apos;, &amp;apos;standardError&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      outputs.upToDateWhen &amp;#123; false &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      showStandardStreams = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个工具&lt;a href=&quot;https://github.com/JakeWharton/pidcat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pidcat&lt;/a&gt;可以指定包名显示log.&lt;/p&gt;
&lt;h2 id=&quot;Exploring-Android-Nougat-7-1-App-Shortcuts&quot;&gt;&lt;a href=&quot;#Exploring-Android-Nougat-7-1-App-Shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Exploring Android Nougat 7.1 App Shortcuts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲Android 7.1推出的App Shortcuts如何实现.&lt;/p&gt;
&lt;h2 id=&quot;The-Quirks-of-Supporting-SDK-25&quot;&gt;&lt;a href=&quot;#The-Quirks-of-Supporting-SDK-25&quot; class=&quot;headerlink&quot; title=&quot;The Quirks of Supporting SDK 25&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.zdominguez.com/2016/11/the-quirks-of-supporting-sdk-25.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Quirks of Supporting SDK 25&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了她在适配Nougat, API 25时学到的东西, 包括更换SDK版本, 圆形的启动icon, 还有app shortcuts. (根据文中的图标, 这个app居然是domain).&lt;/p&gt;
&lt;h2 id=&quot;Android-draw-a-custom-view&quot;&gt;&lt;a href=&quot;#Android-draw-a-custom-view&quot; class=&quot;headerlink&quot; title=&quot;Android: draw a custom view&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@romandanylyk96/android-draw-a-custom-view-ef79fe2ff54b#.i4ipiz2u7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android: draw a custom view&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者自定义了一个ViewPager的page indicator: &lt;a href=&quot;https://github.com/romandanylyk/PageIndicatorView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageIndicatorView&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这篇文章讲述了如何自定义View, 首先是View的生命周期, 然后是具体如何实现, 如何避免一些常见的错误, 最后是如何添加View的动画.&lt;br&gt;&lt;img src=&quot;/images/view-lifecycle.png&quot; alt=&quot;view-lifecycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各个生命周期中应该干的事情&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数中: 解析自定义属性.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onAttachedToWindow()&lt;/code&gt;中: 可以发现同一布局中相关的其他View, 其id是上一步通过自定义属性传入的.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt;: 自定义View尺寸相关, 当覆盖这个方法时, 最后要调用&lt;code&gt;setMeasuredDimension(int width, int height)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onLayout()&lt;/code&gt;: 一般这个方法是给ViewGroup的child指定位置和尺寸的, 对于自定义View来说, 没有child就没有必要覆盖这个方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDraw()&lt;/code&gt;: 这里是画东西的地方. 用canvas和Paint结合绘制. 需要注意的是&lt;code&gt;onDraw()&lt;/code&gt;会被多次调用, 当你有一些变化, 滚动滑动等, 都会重绘, 所以这个方法中不要创建新对象. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;View更新&lt;/strong&gt;&lt;br&gt;有两个方法可以让View重绘:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;invalidate()&lt;/code&gt;: 只是重新绘制, 调用&lt;code&gt;onDraw()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requestLayout()&lt;/code&gt;: 将会从&lt;code&gt;onMeasure()&lt;/code&gt;开始, 可能会改变尺寸, 然后根据新尺寸重新绘制.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Animation&lt;/strong&gt;&lt;br&gt;自定义View的动画是一帧帧进行的, 这就意味着你每一步都要调用&lt;code&gt;invalidate()&lt;/code&gt;来画它.&lt;/p&gt;
&lt;p&gt;在自定义View中你的动画好助手是&lt;code&gt;ValueAnimator&lt;/code&gt;, 它可以让你动画任何值.&lt;/p&gt;
&lt;h2 id=&quot;How-to-Stage-Rollout-Features-using-Firebase-Remote-Config&quot;&gt;&lt;a href=&quot;#How-to-Stage-Rollout-Features-using-Firebase-Remote-Config&quot; class=&quot;headerlink&quot; title=&quot;How to Stage Rollout Features using Firebase Remote Config&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/stage-rollout-features-firebase-remote-config-ios-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Stage Rollout Features using Firebase Remote Config&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/6346149?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Staged Rollout&lt;/a&gt;是Google Play Store的一个feature. 让你可以慢慢地把新版App发布给一部分用户, 并逐渐增大比例. 使用Firebase Remote Config, 我们可以做的更多,  我们可以控制某个feature的发布.&lt;/p&gt;
&lt;h2 id=&quot;Making-the-most-of-the-APK-analyzer&quot;&gt;&lt;a href=&quot;#Making-the-most-of-the-APK-analyzer&quot; class=&quot;headerlink&quot; title=&quot;Making the most of the APK analyzer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/making-the-most-of-the-apk-analyzer-c066cb871ea2#.36ccm5y0c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making the most of the APK analyzer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Studio中Build菜单有一项是&lt;code&gt;Analyze APK...&lt;/code&gt;, 这是一个很有用的功能.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Raw File Size&lt;/code&gt;是apk在磁盘上的大小.&lt;br&gt;&lt;code&gt;Download size&lt;/code&gt;是估计下载你的应用所需要的数据流量大小, 考虑到了Play Store的压缩.&lt;/p&gt;
&lt;p&gt;文件和文件夹是按照大小降序排列的. 这对于Apk瘦身来说很有用, 很容易发现最占地方的原因.&lt;/p&gt;
&lt;p&gt;比如作者发现了一些png很占地方, 于是就用&lt;a href=&quot;https://developer.android.com/studio/write/vector-asset-studio.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PSD support in the Vector Asset import tool&lt;/a&gt;把它们转成了&lt;code&gt;VectorDrawable&lt;/code&gt;, 后向兼容用&lt;code&gt;VectorDrawableCompat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;有一些没有压缩的WAV可以转成OGG. &lt;/p&gt;
&lt;p&gt;在lib/里面, 发现它们要支持的三个ABI: x86, armeabi-v7a, armeabi, 解决的办法就是利用&lt;a href=&quot;https://developer.android.com/studio/build/configure-apk-splits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk拆分&lt;/a&gt;, 针对每一个ABI有一个不同的版本.&lt;/p&gt;
&lt;p&gt;还有一个优化是把&lt;code&gt;android:extractNativeLibs&lt;/code&gt; 属性设置为false, 这样系统就不会把.so文件在安装的时候从apk中拷贝到文件系统了. 这样应用的增量更新也会小一点.&lt;/p&gt;
&lt;p&gt;这个功能有一个”Compare with”按钮, 利用它你可以比较两个apk的改变.&lt;/p&gt;
&lt;p&gt;可以通过查看DEX文件来查看方法数限制 (Referenced Methods), 类混淆等问题.&lt;/p&gt;
&lt;h2 id=&quot;Rxify-The-Anti-Cache-then-Network-OR-Network-then-Cache-Problem&quot;&gt;&lt;a href=&quot;#Rxify-The-Anti-Cache-then-Network-OR-Network-then-Cache-Problem&quot; class=&quot;headerlink&quot; title=&quot;Rxify : The Anti Cache-then-Network OR Network-then-Cache Problem&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.andevcon.com/news/rxify-the-anti-cache-then-network-or-network-then-cache-problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rxify&lt;/code&gt; : The Anti Cache-then-Network OR Network-then-Cache Problem&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用RxJava处理网络请求和缓存.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果先使用Cache, 没有缓存的时候再进行网络请求. -&amp;gt; 用&lt;code&gt;.concatWith()&lt;/code&gt;和&lt;code&gt;.take(1)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果优先取网络最新数据, 没网的时候才用缓存数据. -&amp;gt; &lt;code&gt;.onErrorReturn()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Your-presenters-don’t-need-all-those-lifecycle-events&quot;&gt;&lt;a href=&quot;#Your-presenters-don’t-need-all-those-lifecycle-events&quot; class=&quot;headerlink&quot; title=&quot;Your presenters don’t need all those lifecycle events&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@anupcowkur/your-presenters-dont-need-all-those-lifecycle-events-721f500eeef4#.f7nupw3jo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Your presenters don’t need all those lifecycle events&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者认为在Presenter中放入太多生命周期的方法不太好, 他觉得最基本的只需要这两个方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Presenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewAttached&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MVPView view)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewDetached&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然当你需要更多的时候可以加入更多, 但是我们不应该每个生命周期方法都加进去.&lt;/p&gt;
&lt;h2 id=&quot;How-to-send-notifications-using-Android-Firebase&quot;&gt;&lt;a href=&quot;#How-to-send-notifications-using-Android-Firebase&quot; class=&quot;headerlink&quot; title=&quot;How to send notifications using Android Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.survivingwithandroid.com/2016/09/android-firebase-push-notification.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to send notifications using Android Firebase&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Firebase Messaging如何发送push notification.&lt;/p&gt;
&lt;h2 id=&quot;RxRecipes-Wrap-your-way-to-Rx&quot;&gt;&lt;a href=&quot;#RxRecipes-Wrap-your-way-to-Rx&quot; class=&quot;headerlink&quot; title=&quot;RxRecipes: Wrap your way to Rx&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/rxrecipes-wrap-your-way-to-rx-fd40eb5254b6#.hbtcjp4rm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxRecipes: Wrap your way to Rx&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;.fromCallable()&lt;/code&gt;来把一个同步方法包装成一个Observable. &lt;/p&gt;
&lt;p&gt;并比较了和&lt;code&gt;.just()&lt;/code&gt;的区别. (&lt;code&gt;.just()&lt;/code&gt;发射的东西在创建的时候就确定了, 而&lt;code&gt;.fromCallable()&lt;/code&gt;是在subscribe的时候确定的.)&lt;/p&gt;
&lt;h2 id=&quot;Diving-deeper-into-the-Java-transient-modifier&quot;&gt;&lt;a href=&quot;#Diving-deeper-into-the-Java-transient-modifier&quot; class=&quot;headerlink&quot; title=&quot;Diving deeper into the Java transient modifier&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/diving-deeper-into-the-java-transient-modifier-3b16eff68f42#.8pbk9i6fm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Diving deeper into the Java transient modifier&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;transient&lt;/code&gt;修饰符加在字段上时, 在对象被序列化的时候, 这个字段将被排除在外, 反序列化时这个字段将被初始化一个默认值.&lt;/p&gt;
&lt;p&gt;可能的使用场景: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现了Serializable的User对象中的password字段.&lt;/li&gt;
&lt;li&gt;一个Serializable的类中的某个字段是通过其他字段推导或派生出来的, 这些派生的字段没有必要被序列化, 于是把它们标记为&lt;code&gt;transient&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意transient和static是不能并存的, 因为static默认是transient的.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Tinker&quot;&gt;&lt;a href=&quot;#Tinker&quot; class=&quot;headerlink&quot; title=&quot;Tinker&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Tencent/tinker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tinker&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;腾讯的热补丁(hot-fix)解决方案, 支持不重新安装app的dex, library和资源更新.&lt;/p&gt;
&lt;h2 id=&quot;Android-Debug-Database&quot;&gt;&lt;a href=&quot;#Android-Debug-Database&quot; class=&quot;headerlink&quot; title=&quot;Android-Debug-Database&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/Android-Debug-Database&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Debug-Database&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在浏览器里看应用的数据库和shared preferences.&lt;/p&gt;
&lt;h2 id=&quot;blurkit-android&quot;&gt;&lt;a href=&quot;#blurkit-android&quot; class=&quot;headerlink&quot; title=&quot;blurkit-android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/wonderkiln/blurkit-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blurkit-android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;实时模糊布局. 像iOS一样.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-233&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-233&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #233&quot;&gt;&lt;/a&gt;Android Weekly Issue #233&lt;/h1&gt;&lt;p&gt;November 27th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-233&quot;&gt;Android Weekly Issue #233&lt;/a&gt;&lt;br&gt;本期内容包括: 用Mockito做RxJava的单元测试; Android开发中的命令行使用; Android 7.1的App Shortcuts; 自定义View的绘制; 用Firebase的Remote Config进行feature逐步分发; APK分析工具的使用, APK瘦身讨论; RxJava处理网络请求和缓存; presenter的设计; 用Firebase发送push notification; transient关键字的使用等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Java/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Mockito" scheme="http://mengdd.github.io/tags/Mockito/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/tags/Java/"/>
    
      <category term="Terminal" scheme="http://mengdd.github.io/tags/Terminal/"/>
    
      <category term="Android 7.1" scheme="http://mengdd.github.io/tags/Android-7-1/"/>
    
      <category term="App Shortcuts" scheme="http://mengdd.github.io/tags/App-Shortcuts/"/>
    
      <category term="Custom View" scheme="http://mengdd.github.io/tags/Custom-View/"/>
    
      <category term="Remote Config" scheme="http://mengdd.github.io/tags/Remote-Config/"/>
    
      <category term="APK analyzer" scheme="http://mengdd.github.io/tags/APK-analyzer/"/>
    
      <category term="Cache" scheme="http://mengdd.github.io/tags/Cache/"/>
    
      <category term="push notification" scheme="http://mengdd.github.io/tags/push-notification/"/>
    
      <category term="transient" scheme="http://mengdd.github.io/tags/transient/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java笔记一 创建和销毁对象</title>
    <link href="http://mengdd.github.io/Java/2016/11/25/effective-java-notes-1/"/>
    <id>http://mengdd.github.io/Java/2016/11/25/effective-java-notes-1/</id>
    <published>2016-11-25T08:50:40.000Z</published>
    <updated>2016-11-25T09:01:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Effective-Java笔记一-创建和销毁对象&quot;&gt;&lt;a href=&quot;#Effective-Java笔记一-创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;Effective Java笔记一 创建和销毁对象&quot;&gt;&lt;/a&gt;Effective Java笔记一 创建和销毁对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第1条 考虑用静态工厂方法代替构造器&lt;/li&gt;
&lt;li&gt;第2条 遇到多个构造器参数时要考虑用构建器&lt;/li&gt;
&lt;li&gt;第3条 用私有构造器或者枚举类型强化Singleton属性&lt;/li&gt;
&lt;li&gt;第4条 通过私有构造器强化不可实例化的能力&lt;/li&gt;
&lt;li&gt;第5条 避免创建不必要的对象&lt;/li&gt;
&lt;li&gt;第6条 消除过期的对象引用&lt;/li&gt;
&lt;li&gt;第7条 避免使用终结方法&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第1条-考虑用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#第1条-考虑用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;第1条 考虑用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;第1条 考虑用静态工厂方法代替构造器&lt;/h2&gt;&lt;p&gt;对于类而言, 最常用的获取实例的方法就是提供一个公有的构造器, 还有一种方法, 就是提供一个公有的静态工厂方法(static factory method), 返回类的实例.&lt;/p&gt;
&lt;p&gt;(注意此处的静态工厂方法与设计模式中的工厂方法模式不同.)&lt;/p&gt;
&lt;p&gt;提供静态工厂方法而不是公有构造, 这样做有几大&lt;strong&gt;优势&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态工厂方法&lt;strong&gt;有名称&lt;/strong&gt;. 可以更确切地描述正被返回的对象.&lt;br&gt;当一个类需要多个带有相同签名的构造器时, 可以用静态工厂方法, 并且慎重地选择名称以便突出它们之间的区别.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不必在每次调用它们的时候都创建一个新对象.&lt;/strong&gt; 可以重复利用实例. 如果程序经常请求创建相同的对象, 并且创建对象的代价很高, 这项改动可以提升性能. (不可变类, 单例, 枚举).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以返回原类型的子类型对象.&lt;/strong&gt; 适用于基于接口的框架, 可以隐藏实现类API, 也可以根据参数返回不同的子类型.&lt;br&gt;由于接口不能有静态方法, 因此按照惯例, 接口Type的静态工厂方法被放在一个名为Types的不可实例化的类中.&lt;br&gt;(Java的java.util.Collections). 服务提供者框架(Service Provider Framework, 如JDBC)的基础, 从实现中解耦.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在创建参数化类型实例的时候, 使代码更简洁.&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态工厂方法的&lt;strong&gt;缺点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类如果不含public或者protected的构造器, 就不能被子类化. 对于公有的静态工厂方法所返回的非公有类, 也同样如此.&lt;/li&gt;
&lt;li&gt;静态工厂方法与其他的静态方法没有区别. 在API文档中没有明确标识出来. 可以使用一些惯用的名称来弥补这一劣势:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;: 类型转换方法, 返回的实例与参数具有相同的值.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;of()&lt;/code&gt;: valueOf()的一种更简洁的替代.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getInstance()&lt;/code&gt;: 返回的实例通过参数来描述, 对于单例来说, 该方法没有参数, 返回唯一的实例.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt;: 像getInstance()一样, 但newInstance()能确保返回的每个实例都与其他实例不同.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getType()&lt;/code&gt;: 像getInstance()一样, Type表示返回的对象类型, 在工厂方法处于不同的类中的时候使用.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newType()&lt;/code&gt;: 和newInstance()一样, Type表示返回类型, 在工厂方法处于不同的类中的时候使用.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第2条-遇到多个构造器参数时要考虑用构建器&quot;&gt;&lt;a href=&quot;#第2条-遇到多个构造器参数时要考虑用构建器&quot; class=&quot;headerlink&quot; title=&quot;第2条 遇到多个构造器参数时要考虑用构建器&quot;&gt;&lt;/a&gt;第2条 遇到多个构造器参数时要考虑用构建器&lt;/h2&gt;&lt;p&gt;静态工厂和构造器有一个共同的局限性: 它们都不能很好地扩展到大量的可选参数.&lt;/p&gt;
&lt;p&gt;重载多个构造器方法可行, 但是当有许多参数的时候, 代码会很难写难读.&lt;/p&gt;
&lt;p&gt;第二种替代方法是JavaBeans模式, 即一个无参数构造来创建对象, 然后调用setter方法来设置每个参数. 这种模式也有严重的缺点, 因为构造过程被分到了几个调用中, 在构造过程中JavaBean可能处于不一致的状态.&lt;br&gt;类无法通过检验构造器参数的有效性来保证一致性. 另一点是这种模式阻止了把类做成不可变的可能.&lt;/p&gt;
&lt;p&gt;第三种方法就是&lt;strong&gt;Builder模式&lt;/strong&gt;. 不直接生成想要的对象, 而是利用必要参数调用构造器(或者静态工厂)得到一个builder对象, 然后在builder对象上调用类似setter的方法, 来设置可选参数, 最后调用无参的&lt;code&gt;build()&lt;/code&gt;方法来生成不可变的对象.&lt;/p&gt;
&lt;p&gt;这个Builder是它构建的类的静态成员类.&lt;br&gt;Builder的setter方法返回Builder本身, 可以链式操作.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Builder模式的优势&lt;/strong&gt;: 可读性增强; 可以有多个可变参数;  易于做参数检查和构造约束检查; 比JavaBeans更加安全; 灵活性: 可以利用单个builder构建多个对象, 可以自动填充某些域, 比如自增序列号.&lt;/p&gt;
&lt;p&gt;Builder模式的不足: 为了创建对象必须先创建Builder, 在某些十分注重性能的情况下, 可能就成了问题; Builder模式较冗长, 因此只有参数很多时才使用.&lt;/p&gt;
&lt;h2 id=&quot;第3条-用私有构造器或者枚举类型强化Singleton属性&quot;&gt;&lt;a href=&quot;#第3条-用私有构造器或者枚举类型强化Singleton属性&quot; class=&quot;headerlink&quot; title=&quot;第3条 用私有构造器或者枚举类型强化Singleton属性&quot;&gt;&lt;/a&gt;第3条 用私有构造器或者枚举类型强化Singleton属性&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Singleton(单例)&lt;/code&gt;指仅仅被实例化一次的类. 通常用来代表那些本质上唯一的系统组件. &lt;/p&gt;
&lt;p&gt;使类成为Singleton会使得它的客户端代码测试变得困难, 因为无法给它替换模拟实现, 除非它实现了一个充当其类型的接口.&lt;/p&gt;
&lt;p&gt;单例的实现: 私有构造方法, 类中保留一个字段实例(static, final), 用public直接公开字段或者用一个public static的&lt;code&gt;getInstance()&lt;/code&gt;方法返回该字段.&lt;/p&gt;
&lt;p&gt;为了使单例实现序列化(&lt;code&gt;Serializable&lt;/code&gt;), 仅仅在声明中加上&lt;code&gt;implements Serializable&lt;/code&gt;是不够的, 为了维护并保证单例, 必须声明所有实例域都是&lt;code&gt;transient&lt;/code&gt;的, 并提供一个&lt;code&gt;readResolve()&lt;/code&gt;方法, 返回单例的实例. 否则每次反序列化一个实例时, 都会创建一个新的实例.&lt;/p&gt;
&lt;p&gt;从Java 1.5起, &lt;strong&gt;可以使用枚举来实现单例&lt;/strong&gt;: 只需要编写一个包含单个元素的枚举类型.&lt;br&gt;这种方法无偿地提供了序列化机制, 绝对防止多次实例化.&lt;/p&gt;
&lt;h2 id=&quot;第4条-通过私有构造器强化不可实例化的能力&quot;&gt;&lt;a href=&quot;#第4条-通过私有构造器强化不可实例化的能力&quot; class=&quot;headerlink&quot; title=&quot;第4条 通过私有构造器强化不可实例化的能力&quot;&gt;&lt;/a&gt;第4条 通过私有构造器强化不可实例化的能力&lt;/h2&gt;&lt;p&gt;只包含静态方法和静态域的类名声不太好, 因为有些人会滥用它们来编写过程化的程序. 尽管如此, 它们确实也有特有的用处, 比如:&lt;br&gt;&lt;code&gt;java.lang.Math&lt;/code&gt;, &lt;code&gt;java.util.Arrays&lt;/code&gt;把基本类型的值或数组类型上的相关方法组织起来; &lt;code&gt;java.util.Collections&lt;/code&gt;把实现特定接口的对象上的静态方法组织起来; 还可以利用这种类把final类上的方法组织起来, 以取代扩展该类的做法.&lt;/p&gt;
&lt;p&gt;这种工具类(utility class)不希望被实例化, 然而在缺少显式构造器的情况下, 系统会提供默认构造器, 可能会造成这些类被无意识地实例化.&lt;/p&gt;
&lt;p&gt;通过做成抽象类来强制该类不可被实例化, 这是行不通的, 因为可能会造成”这个类是用来被继承的”的误解, 而继承它的子类又可以被实例化.&lt;/p&gt;
&lt;p&gt;所以只要让这个类包含一个私有的构造器, 它就不能被实例化了. 进一步地, 可以在这个私有构造器中抛出异常. &lt;/p&gt;
&lt;p&gt;这种做法还会导致这个类不能被子类化, 因为子类构造器必须显式或隐式地调用super构造器. 在这种情况下, 子类就没有可访问的超类构造器可调用了.&lt;/p&gt;
&lt;h2 id=&quot;第5条-避免创建不必要的对象&quot;&gt;&lt;a href=&quot;#第5条-避免创建不必要的对象&quot; class=&quot;headerlink&quot; title=&quot;第5条 避免创建不必要的对象&quot;&gt;&lt;/a&gt;第5条 避免创建不必要的对象&lt;/h2&gt;&lt;p&gt;一般来说, 最好能重用对象而不是每次需要的时候创建一个相同功能的新对象. 如果对象是&lt;strong&gt;不可变的(immutable)&lt;/strong&gt;, 它就始终可以被重用.&lt;/p&gt;
&lt;p&gt;比如应该用:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &lt;span class=&quot;string&quot;&gt;&quot;stringette&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而不是:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;stringette&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Don&#39;t do this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;包含相同字符串的字面常量对象是会被重用的.&lt;/p&gt;
&lt;p&gt;对于同时提供了静态工厂方法和构造方法的&lt;strong&gt;不可变类&lt;/strong&gt;, 通常可以使用静态工厂方法而不是构造器, 以避免创建不必要的对象.&lt;br&gt;比如&lt;code&gt;Boolean.valueOf()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;除了重用不可变对象以外, 也可以重用那些已知不会被修改的可变对象. 比如把一个方法中需要用到的不变的数据保存成常量对象(&lt;code&gt;static final&lt;/code&gt;), 只在初始化的时候创建一次(&lt;code&gt;用static块&lt;/code&gt;), 这样就不用每次调用方法都重复创建.&lt;/p&gt;
&lt;p&gt;如果该方法永远不会调用, 那也不需要初始化相关的字段, 可以通过延迟初始化(lazily initializing)把这些对象的初始化放到方法第一次被调用的时候. (但是不建议这样做, 没有性能的显著提高, 并且会使方法看起来复杂.)&lt;/p&gt;
&lt;p&gt;前面的例子中, 所讨论的对象显然是能够被重用的, 因为它们被初始化之后不会再改变. 其他有些情形则并不总是这么明显了. (适配器(adapter)模式, Map的接口keySet()方法返回同样的Set实例).&lt;/p&gt;
&lt;p&gt;Java 1.5中加入了自动装箱(autoboxing), 会创建对象. 所以程序中优先使用基本类型而不是装箱基本类型, 要当心无意识的自动装箱. &lt;/p&gt;
&lt;p&gt;小对象的构造器只做很少量的显式工作, 创建和回收都是很廉价的, 所以通过创建附加的对象提升程序的清晰简洁性也是好事.&lt;/p&gt;
&lt;p&gt;通过维护自己的对象池(object pool)来避免创建对象并不是一种好的做法(代码, 内存), 除非池中的对象是非常重量级的. 正确使用的典型: 数据库连接池.&lt;/p&gt;
&lt;h2 id=&quot;第6条-消除过期的对象引用&quot;&gt;&lt;a href=&quot;#第6条-消除过期的对象引用&quot; class=&quot;headerlink&quot; title=&quot;第6条 消除过期的对象引用&quot;&gt;&lt;/a&gt;第6条 消除过期的对象引用&lt;/h2&gt;&lt;p&gt;一个内存泄露的例子: 一个用数组实现的Stack, 依靠size标记来管理栈的深度, 但是这样从栈中弹出来的过期对象并没有被释放. &lt;/p&gt;
&lt;p&gt;称内存泄露为”无意识的对象保持(unintentional object retention)”更为恰当.&lt;/p&gt;
&lt;p&gt;修复方法: 一旦对象引用已经过期, 只需清空这些引用即可.&lt;/p&gt;
&lt;p&gt;清空对象引用应该是一种例外, 而不是一种规范行为. 消除过期引用最好的方法是让包含该引用的变量结束其生命周期. 如果你是在最紧凑的作用域范围内定义变量, 这种情形就会自然发生.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般而言, 只要类是自己管理内存&lt;/strong&gt;, 程序员就应该警惕内存泄露问题. 一旦元素被释放掉, 则该元素中包含的任何对象引用都应该被清空.&lt;/p&gt;
&lt;p&gt;内存泄露的&lt;strong&gt;另一个常见来源是缓存&lt;/strong&gt;. 这个问题有这几种可能的解决方案: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.缓存项的生命周期由该键的外部引用决定 -&amp;gt; &lt;code&gt;WeakHashMap&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;2.缓存项的生命周期是否有意义并不是很容易确定 -&amp;gt; 随着时间的推移或者新增项的时候删除没用的项.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内存泄露的&lt;strong&gt;第三个常见来源是监听器和其他回调&lt;/strong&gt;.&lt;br&gt;如果你实现了一个API, 客户端注册了回调却没有注销, 就会积聚对象.&lt;br&gt;API端可以只保存对象的弱引用来确保回调对象生命周期结束后会被垃圾回收. &lt;/p&gt;
&lt;h2 id=&quot;第7条-避免使用终结方法&quot;&gt;&lt;a href=&quot;#第7条-避免使用终结方法&quot; class=&quot;headerlink&quot; title=&quot;第7条 避免使用终结方法&quot;&gt;&lt;/a&gt;第7条 避免使用终结方法&lt;/h2&gt;&lt;p&gt;终结方法(finalizer)通常是不可预测的, 也是很危险的, 一般情况下是不必要的.&lt;br&gt;使用终结方法会导致行为不稳定, 降低性能, 以及可移植性问题.&lt;/p&gt;
&lt;p&gt;不要把finalizer当成是C++中的析构器(destructors)的对应物.&lt;br&gt;在Java中, 当一个对象变得不可到达的时候, 垃圾回收器会回收与该对象相关联的存储空间.&lt;/p&gt;
&lt;p&gt;C++的析构器也可以用来回收其他的非内存资源, 而在Java中, 一般用try-finally块来完成类似的工作.&lt;/p&gt;
&lt;p&gt;终结方法的缺点在于不能保证会被及时地执行. 从一个对象变得不可到达开始, 到它的终结方法被执行, 所花费的时间是任意长的. JVM会延迟执行终结方法. &lt;/p&gt;
&lt;p&gt;及时地执行终结方法正是垃圾回收算法的一个主要功能. 这种算法在不同的JVM上不同. &lt;/p&gt;
&lt;p&gt;Java语言规范不仅不保证终结方法会被及时地执行, 而且根本就不保证它们会被执行. 所以不应该依赖于终结方法来更新重要的持久状态. &lt;/p&gt;
&lt;p&gt;不要被&lt;code&gt;System.gc()&lt;/code&gt;和&lt;code&gt;System.runFinalization()&lt;/code&gt;这两个方法所迷惑, 它们确实增加了终结方法被执行的机会, 但是它们并不保证终结方法一定会被执行. &lt;/p&gt;
&lt;p&gt;如果未捕获的异常在终结过程中被抛出来, 那么这种异常可以被忽略, 而且该对象的终结过程也会终止. &lt;/p&gt;
&lt;p&gt;使用终结方法有一个严重的性能损失. &lt;/p&gt;
&lt;p&gt;如果类的对象中封装的资源(例如文件或线程)确实需要终止, 应该怎么做才能不用编写终结方法呢? 只需&lt;strong&gt;提供一个显式的终止方法&lt;/strong&gt;. 并要求该类的客户端在每个实例不再有用的时候调用这个方法. 注意, 该实例必须记录下自己是否已经被终止了, 如果被终止之后再被调用, 要抛出异常.&lt;br&gt;例子: &lt;code&gt;InputStream&lt;/code&gt;, &lt;code&gt;OutputStream&lt;/code&gt;和&lt;code&gt;java.sql.Connection&lt;/code&gt;上的&lt;code&gt;close()&lt;/code&gt;方法; &lt;code&gt;java.util.Timer&lt;/code&gt;的&lt;code&gt;cancel()&lt;/code&gt;方法.&lt;br&gt;&lt;code&gt;Image.flush()&lt;/code&gt;会释放实例相关资源, 但该实例仍处于可用的状态, 如果有必要会重新分配资源. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显式的终止方法通常与try-finally块结合使用, 以确保及时终止.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;终结方法的好处, 它有两种合法用途:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当显式终止方法被忘记调用时, 终结方法可以充当安全网(safety net). &lt;strong&gt;但是如果终结方法发现资源还未被终止, 应该记录日志警告, 这表示客户端代码中的bug.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对象的本地对等体(native peer), 垃圾回收器不会知道它, 当它的Java对等体被回收的时候, 它不会被回收. 如果本地对等体拥有必须被及时终止的资源, 那么该类就应该有一个显式的终止方法, 如前, 可以是本地方法或者它也可以调用本地方法; 如果本地对等体并不拥有关键资源, 终结方法是执行这项任务最合适的工具. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意, 终结方法链(finalizer chaining)并不会自动执行. 子类覆盖终结方法时, 必须手动调用超类的终结方法. try中终结子类, finally中终结超类. &lt;/p&gt;
&lt;p&gt;为了避免忘记调用超类的终结方法, 还有一种写法, 是在子类中写一个匿名的类, 该匿名类的单个实例被称为&lt;strong&gt;终结方法守卫者(finalizer guardian)&lt;/strong&gt;, 当守卫者被终结的时候, 它执行外围实例的终结行为. 这样外围类并没有覆盖超类的终结方法, 保证了超类的终结方法一定会被执行. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Effective-Java笔记一-创建和销毁对象&quot;&gt;&lt;a href=&quot;#Effective-Java笔记一-创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;Effective Java笔记一 创建和销毁对象&quot;&gt;&lt;/a&gt;Effective Java笔记一 创建和销毁对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第1条 考虑用静态工厂方法代替构造器&lt;/li&gt;
&lt;li&gt;第2条 遇到多个构造器参数时要考虑用构建器&lt;/li&gt;
&lt;li&gt;第3条 用私有构造器或者枚举类型强化Singleton属性&lt;/li&gt;
&lt;li&gt;第4条 通过私有构造器强化不可实例化的能力&lt;/li&gt;
&lt;li&gt;第5条 避免创建不必要的对象&lt;/li&gt;
&lt;li&gt;第6条 消除过期的对象引用&lt;/li&gt;
&lt;li&gt;第7条 避免使用终结方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://mengdd.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://mengdd.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 232</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/25/android-weekly-notes-issue-232/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/25/android-weekly-notes-issue-232/</id>
    <published>2016-11-25T08:32:57.000Z</published>
    <updated>2016-11-28T06:25:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-232&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-232&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #232&quot;&gt;&lt;/a&gt;Android Weekly Issue #232&lt;/h1&gt;&lt;p&gt;November 20th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #232&lt;/a&gt;&lt;br&gt;本期内容包括: Kotlin的优势讨论; MVVM模式结合RxJava和Retrofit的应用构架实现; Android中传感器使用; 如何给App写单元测试; Reductor的组合使用; Android应用进程被杀死的状态恢复和问题处理; Kotlin中的Anko; 后台任务处理库”Android Job”; VectorDrawable和PNG的使用问题等.&lt;/p&gt;
&lt;p&gt;本期开源库: 给ImageView和RelativeLayout的底部加曲线; 长按弹框; Switch Button控件; 给View加深度/厚度的库.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;How-Kotlin-became-our-primary-language-for-Android&quot;&gt;&lt;a href=&quot;#How-Kotlin-became-our-primary-language-for-Android&quot; class=&quot;headerlink&quot; title=&quot;How Kotlin became our primary language for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/uptech-team/how-kotlin-became-our-primary-language-for-android-3af7fd6a994c#.a50t4ple8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Kotlin became our primary language for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们team想要完全用kotlin开发一个应用.&lt;br&gt;本文是他们的心得体会.&lt;/p&gt;
&lt;p&gt;关于函数式编程的学习, 作者推荐: &lt;a href=&quot;https://www.coursera.org/specializations/scala&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个Scala的课程&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kotlin的优势: 和Java可以互相调用; 函数式语言; function purity; 高阶函数(函数可以作为参数或返回值); 不可变性(val); Null-safety; Anko;  Kotlin Android extensions(移除了ButterKnife); 还有对初学者很友好, 可以摆脱很多第三方的依赖, 函数扩展等等优势.&lt;/p&gt;
&lt;h2 id=&quot;RxJava-2-Android-MVVM-Lifecycle-App-Structure-with-Retrofit-2&quot;&gt;&lt;a href=&quot;#RxJava-2-Android-MVVM-Lifecycle-App-Structure-with-Retrofit-2&quot; class=&quot;headerlink&quot; title=&quot;RxJava 2: Android MVVM Lifecycle App Structure with Retrofit 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@manuelvicnt/rxjava2-android-mvvm-lifecycle-app-structure-with-retrofit-2-cf903849f49e#.jx3vg232m&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 2: Android MVVM Lifecycle App Structure with Retrofit 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者一年多以前写过一个这个文章: &lt;a href=&quot;https://medium.com/@manuelvicnt/rxjava-android-mvvm-app-structure-with-retrofit-a5605fa32c00#.44uq87s6w&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava: Android MVVM App structure with Retrofit&lt;/a&gt;, 介绍MVVM结合Retrofit和RxJava的App架构模式. 此篇文章是一年后作者对此的改进.&lt;/p&gt;
&lt;p&gt;主要内容有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.通过View和ViewModel之间的协议接口, 让ViewModel知道View的生命周期变化.&lt;/li&gt;
&lt;li&gt;2.RxJava2的流式类型: Completable, Maybe, Flowable的使用.&lt;/li&gt;
&lt;li&gt;3.用RxJava操作符组合网络请求: 让不同的网络请求一起发送, 并且都返回以后才得到通知 -&amp;gt; 用&lt;code&gt;.zip()&lt;/code&gt;. 顺序连接不同的网络请求 -&amp;gt; &lt;code&gt;.flatMap()&lt;/code&gt;, &lt;code&gt;.andThen()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;4.后台网络请求和View更新的处理: 不取消网络请求, 等View再次resume的时候检查状态再更新. 这里提供了两种选择, 一种是用前面提到的协议接口中的生命周期方法, 另一种是用&lt;code&gt;AsyncProcessor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;5.Mock Retrofit的网络请求.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tech-Talks-You-Do-Have-Something-To-Say&quot;&gt;&lt;a href=&quot;#Tech-Talks-You-Do-Have-Something-To-Say&quot; class=&quot;headerlink&quot; title=&quot;Tech Talks - You Do Have Something To Say!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/upday-devs/tech-talks-you-do-have-something-to-say-a1a0ae23fa0#.61m7x6rj8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tech Talks - You Do Have Something To Say!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章鼓励你分享你的知识, 经验, 问题及解决方法,  无论是通过演讲还是写出来的方式.&lt;/p&gt;
&lt;h2 id=&quot;Da-Real-Fragmentation-Sensors&quot;&gt;&lt;a href=&quot;#Da-Real-Fragmentation-Sensors&quot; class=&quot;headerlink&quot; title=&quot;Da Real Fragmentation - Sensors&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pguardiola.com/blog/darealfragmentation-sensors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Da Real Fragmentation - Sensors&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;介绍了Android中传感器的使用.&lt;/p&gt;
&lt;h2 id=&quot;Simple-unit-tests-for-Android&quot;&gt;&lt;a href=&quot;#Simple-unit-tests-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Simple unit tests for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stfalcon.com/en/blog/post/simple-unit-tests-for-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple unit tests for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何给你的App写简单的单元测试.&lt;/p&gt;
&lt;h2 id=&quot;Reductor-Redux-for-Android-Part-2&quot;&gt;&lt;a href=&quot;#Reductor-Redux-for-Android-Part-2&quot; class=&quot;headerlink&quot; title=&quot;Reductor - Redux for Android. Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yarikx.github.io/Reductor-composition/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor - Redux for Android. Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是系列文章中的一篇, 继续讲&lt;a href=&quot;https://github.com/Yarikx/reductor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor&lt;/a&gt; library – Redux的Android版实现.&lt;/p&gt;
&lt;p&gt;这篇文章结合例子将如何组合使用以及用@CombinedState来生成代码.&lt;/p&gt;
&lt;h2 id=&quot;Android-process-death-—-and-the-big-implications-for-your-app&quot;&gt;&lt;a href=&quot;#Android-process-death-—-and-the-big-implications-for-your-app&quot; class=&quot;headerlink&quot; title=&quot;Android process death — and the (big) implications for your app&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/inloop/android-process-kill-and-the-big-implications-for-your-app-1ecbed4921cb#.iipoq2fne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android process death — and the (big) implications for your app&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文探讨进程被杀死有可能导致的种种问题.&lt;/p&gt;
&lt;p&gt;你的Android应用如果在paused或者stopped状态, 那么它任何时候都有可能会被系统杀死. 这时候你的Activity, Fragment和View状态将被保存, 当你回到应用的时候, 系统会重新启动进程, 重新创建Activity, 存储的状态会在bundle中返回.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个过程存在一个问题&lt;/strong&gt;: 整个进程都被杀死了, 所有单例(或application scope的对象), 临时数据, 还有retained Fragment中的数据, 这些所有都会处于一种全新创建的状态, 但唯有一个不同, 一些在bundle中存储的状态被恢复出来了.&lt;/p&gt;
&lt;p&gt;这样有可能会导致一些异常, 比如你的界面想要恢复一种状态, 但是数据已经被清空了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何测试这种情况呢?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用App, home键把它放进后台, 杀死app, 再恢复.&lt;/li&gt;
&lt;li&gt;打开选项”Don’t Keep Activities”. 这种测试并不会杀死进程, 只会测试Activity的状态恢复.&lt;/li&gt;
&lt;li&gt;设置Developer options中的Background Process Limit为”No background processes”. 这样把应用放在后台, 打开另一个应用, 再回来自己的应用, 将会重启进程.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;相关问题信号&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例&lt;/li&gt;
&lt;li&gt;保存可变数据的共享的实例&lt;/li&gt;
&lt;li&gt;Application类中保存的数据和状态&lt;/li&gt;
&lt;li&gt;可变的静态字段&lt;/li&gt;
&lt;li&gt;Retained fragments(状态恢复了, 但是数据却丢失了)&lt;/li&gt;
&lt;li&gt;基本上任何没有在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;中保存但是你却依赖的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题没有唯一的解决方案, 取决于你的应用.&lt;/p&gt;
&lt;h2 id=&quot;400-faster-layouts-with-Anko&quot;&gt;&lt;a href=&quot;#400-faster-layouts-with-Anko&quot; class=&quot;headerlink&quot; title=&quot;400% faster layouts with Anko&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@vergauwen.simon/400-faster-layouts-with-anko-da17f32c45dd#.bz6a3y8ql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;400% faster layouts with Anko&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者把自己的一个布局改为用Kotlin的Anko, 然后测试性能.&lt;/p&gt;
&lt;p&gt;好处是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.性能提升了, 避免了XML的运行时解析所花费的时间.&lt;/li&gt;
&lt;li&gt;2.可以动态地加入逻辑, 比如版本判断, 屏幕尺寸, 方向判断等.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者用的测试性能的工具是: &lt;a href=&quot;https://github.com/frogermcs/AndroidDevMetrics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDevMetrics&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Background-Work-with-Android-Job-and-Dagger&quot;&gt;&lt;a href=&quot;#Background-Work-with-Android-Job-and-Dagger&quot; class=&quot;headerlink&quot; title=&quot;Background Work with Android Job and Dagger&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.adavis.info/2016/11/background-work-with-android-job-and.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Background Work with Android Job and Dagger&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Android上的后台工作, 你可以选择&lt;code&gt;Alarm Manager&lt;/code&gt;, &lt;code&gt;Job Scheduler&lt;/code&gt;或&lt;code&gt;GCM Network Manager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;为了帮开发者从每种实现中抽象出来, Evernote开源了一个库: Android Job. 本文介绍了这个库如何使用.&lt;/p&gt;
&lt;h2 id=&quot;VectorDrawable-PNG&quot;&gt;&lt;a href=&quot;#VectorDrawable-PNG&quot; class=&quot;headerlink&quot; title=&quot;VectorDrawable PNG&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/vectordrawable-png/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VectorDrawable PNG&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的应用中有VectorDrawable的版本兼容问题, 用support library中的Compat版本也不好使, 于是他们在旧版本决定使用自动生成的png.&lt;/p&gt;
&lt;p&gt;然后发现了生成png的颜色设置问题, 在旧版本生成的图片用的是fillColor而不是tintColor. 把fillColor设置成想要的颜色即可.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Depth-Library-by-Daniel-Zeller&quot;&gt;&lt;a href=&quot;#Depth-Library-by-Daniel-Zeller&quot; class=&quot;headerlink&quot; title=&quot;Depth Library by Daniel Zeller&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.androidexperiments.com/experiment/depth-library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth Library by Daniel Zeller&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个应用, 展示了&lt;a href=&quot;https://github.com/danielzeller/Depth-LIB-Android-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth-LIB-Android-&lt;/a&gt;的功能.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Crescento&quot;&gt;&lt;a href=&quot;#Crescento&quot; class=&quot;headerlink&quot; title=&quot;Crescento&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/developer-shivam/crescento/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crescento&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;ImageView&lt;/code&gt;和&lt;code&gt;RelativeLayout&lt;/code&gt;底部加上曲线的库.&lt;/p&gt;
&lt;h2 id=&quot;LongPressPopup&quot;&gt;&lt;a href=&quot;#LongPressPopup&quot; class=&quot;headerlink&quot; title=&quot;LongPressPopup&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RiccardoMoro/LongPressPopup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LongPressPopup&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;长按出现弹框的库.&lt;/p&gt;
&lt;h2 id=&quot;RMSwitch&quot;&gt;&lt;a href=&quot;#RMSwitch&quot; class=&quot;headerlink&quot; title=&quot;RMSwitch&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RiccardoMoro/RMSwitch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RMSwitch&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Switch Button的库, 带有更多自定义扩展功能.&lt;/p&gt;
&lt;h2 id=&quot;Depth-LIB-Android&quot;&gt;&lt;a href=&quot;#Depth-LIB-Android&quot; class=&quot;headerlink&quot; title=&quot;Depth-LIB-Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/danielzeller/Depth-LIB-Android-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth-LIB-Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个库给View加上深度/厚度.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-232&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-232&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #232&quot;&gt;&lt;/a&gt;Android Weekly Issue #232&lt;/h1&gt;&lt;p&gt;November 20th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-232&quot;&gt;Android Weekly Issue #232&lt;/a&gt;&lt;br&gt;本期内容包括: Kotlin的优势讨论; MVVM模式结合RxJava和Retrofit的应用构架实现; Android中传感器使用; 如何给App写单元测试; Reductor的组合使用; Android应用进程被杀死的状态恢复和问题处理; Kotlin中的Anko; 后台任务处理库”Android Job”; VectorDrawable和PNG的使用问题等.&lt;/p&gt;
&lt;p&gt;本期开源库: 给ImageView和RelativeLayout的底部加曲线; 长按弹框; Switch Button控件; 给View加深度/厚度的库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="RxJava2" scheme="http://mengdd.github.io/tags/RxJava2/"/>
    
      <category term="Redux" scheme="http://mengdd.github.io/tags/Redux/"/>
    
      <category term="Reductor" scheme="http://mengdd.github.io/tags/Reductor/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Sensor" scheme="http://mengdd.github.io/tags/Sensor/"/>
    
      <category term="Testing" scheme="http://mengdd.github.io/tags/Testing/"/>
    
      <category term="Unit Test" scheme="http://mengdd.github.io/tags/Unit-Test/"/>
    
      <category term="Process" scheme="http://mengdd.github.io/tags/Process/"/>
    
      <category term="State" scheme="http://mengdd.github.io/tags/State/"/>
    
      <category term="Anko" scheme="http://mengdd.github.io/tags/Anko/"/>
    
      <category term="VectorDrawable" scheme="http://mengdd.github.io/tags/VectorDrawable/"/>
    
      <category term="PNG" scheme="http://mengdd.github.io/tags/PNG/"/>
    
      <category term="Switch" scheme="http://mengdd.github.io/tags/Switch/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 231</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/17/android-weekly-notes-issue-231/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/17/android-weekly-notes-issue-231/</id>
    <published>2016-11-17T10:25:37.000Z</published>
    <updated>2016-11-17T10:42:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-231&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-231&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #231&quot;&gt;&lt;/a&gt;Android Weekly Issue #231&lt;/h1&gt;&lt;p&gt;November 13th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-231&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #231&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Weekly阅读笔记, Issue #231, 本期内容包括: MVP中的View做成passive响应式的, 返回Observable; Android Studio使用技巧; &lt;code&gt;BottomNavigationView&lt;/code&gt;的使用; App tracking; Kotlin; 用Kotlin实现的Filter Animation效果; Dagger2的&lt;code&gt;Scope&lt;/code&gt;和&lt;code&gt;Subcomponent&lt;/code&gt;使用; Espresso测试中mock dagger注入; Android和Java中的Reference和内存泄露; MVVM + RxJava构架实际使用的经验分享; 还有TV以及Audio相关的内容等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Reactive-Views-retrying-errors&quot;&gt;&lt;a href=&quot;#Reactive-Views-retrying-errors&quot; class=&quot;headerlink&quot; title=&quot;Reactive Views: retrying errors&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/xing-engineering/reactive-views-retrying-errors-a59fffbd827f#.m2n2c6v6i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Views: retrying errors&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的app近来重构采用了RxJava和Clean Architecture, 进而想要使用&lt;a href=&quot;http://martinfowler.com/eaaDev/PassiveScreen.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;passive view&lt;/a&gt;, 然后他们就发现了关于Reactive Views的一系列文章, 尤其是这一篇: &lt;a href=&quot;https://artemzin.com/blog/rxui-talking-to-android-view-layer-in-a-reactive-way/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxUi: Talking to Android View layer in a Reactive way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;他们的主要工作就是把View也改成响应式的, 即View返回Observable. 在Presenter初始化的时候和View的Observable绑定, 所以事件发生的时候会trigger到presenter.&lt;/p&gt;
&lt;p&gt;这项工作主要需要依赖于&lt;a href=&quot;https://github.com/JakeWharton/RxBinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxBinding&lt;/a&gt;, 由于RxBinding没有提供长按RecyclerView item的bind, 所以他们自己写了&lt;a href=&quot;https://gist.github.com/Shyish/92257b6348312b541aa4f6b205eb14e4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个&lt;/a&gt;.&lt;br&gt;Snackbar也是: &lt;a href=&quot;https://gist.github.com/Shyish/8af4cd774320c57ced0ec21f8840797e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnackbarActionOnSubscribe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者采用这种方式重构了他们的代码, 使得view变成完全passive的.&lt;/p&gt;
&lt;p&gt;并且其中还有一个&lt;code&gt;retryWhen()&lt;/code&gt;使用的解释: &lt;a href=&quot;http://blog.danlew.net/2016/01/25/rxjavas-repeatwhen-and-retrywhen-explained/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava’s repeatWhen and retryWhen, explained&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;50-Android-Studio-Tips-Tricks-amp-Resources&quot;&gt;&lt;a href=&quot;#50-Android-Studio-Tips-Tricks-amp-Resources&quot; class=&quot;headerlink&quot; title=&quot;50 Android Studio Tips, Tricks &amp;amp; Resources&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@mmbialas/50-android-studio-tips-tricks-resources-you-should-be-familiar-with-as-an-android-developer-af86e7cf56d2#.gzyghprf0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;50 Android Studio Tips, Tricks &amp;amp; Resources&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;设置Logcat的颜色; 使用&lt;a href=&quot;https://medium.com/google-developers/writing-more-code-by-writing-less-code-with-android-studio-live-templates-244f648d17c7#.2p54ef8jr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Live Templates&lt;/a&gt;; 快捷键使用; Android Studio的插件; 还有一些资源分享.&lt;/p&gt;
&lt;h2 id=&quot;BottomNavigationView&quot;&gt;&lt;a href=&quot;#BottomNavigationView&quot; class=&quot;headerlink&quot; title=&quot;BottomNavigationView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/bottomnavigationview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BottomNavigationView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Design support library 25.0.0推出了BottomNavigationView, 本文介绍其使用.&lt;/p&gt;
&lt;h2 id=&quot;The-key-concepts-of-app-tracking-for-developers&quot;&gt;&lt;a href=&quot;#The-key-concepts-of-app-tracking-for-developers&quot; class=&quot;headerlink&quot; title=&quot;The key concepts of app tracking for developers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sergii/the-key-concepts-of-app-tracking-for-developers-a11bebf1e65e#.mhdpwt9x9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The key concepts of app tracking for developers&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章主要讲移动应用数据追踪和分析的几个原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么你需要tracking;  &lt;/li&gt;
&lt;li&gt;什么时候需要收集数据; &lt;/li&gt;
&lt;li&gt;用什么Analytics tool; &lt;/li&gt;
&lt;li&gt;用户隐私相关; &lt;/li&gt;
&lt;li&gt;代码设计模式以及挑战; &lt;/li&gt;
&lt;li&gt;如何debug和测试输出;&lt;/li&gt;
&lt;li&gt;如何分析数据;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Why-You-Must-Try-Kotlin-For-Android-Development&quot;&gt;&lt;a href=&quot;#Why-You-Must-Try-Kotlin-For-Android-Development&quot; class=&quot;headerlink&quot; title=&quot;Why You Must Try Kotlin For Android Development?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@amitshekhar/why-you-must-try-kotlin-for-android-development-e14d00c8084b#.z0xt70upu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why You Must Try Kotlin For Android Development?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;为什么要使用Kotlin来做Android开发? 简洁, 安全, 灵活, 和Java可互相操作.&lt;/p&gt;
&lt;p&gt;文中介绍了Null Safety, Smart Casting, Default Arguments, Named Arguments, Functional Programming, Concise Code.&lt;/p&gt;
&lt;h2 id=&quot;Implementing-Filter-Animation-in-Kotlin&quot;&gt;&lt;a href=&quot;#Implementing-Filter-Animation-in-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Implementing Filter Animation in Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yalantis.com/blog/develop-filter-animation-kotlin-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Implementing Filter Animation in Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们搞了一个应用FIT, 为女性IT工作者提供社区和交流平台, 想要成为Quora加上Linkedin.&lt;/p&gt;
&lt;p&gt;为了让用户选择分类和过滤器tag进行搜索, 他们开发了一个组件: &lt;a href=&quot;https://github.com/Yalantis/SearchFilter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SearchFilter&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;文中讨论了这种设计的动画实现, 库是用Kotlin写的.&lt;/p&gt;
&lt;h2 id=&quot;DI-101-—-Part-3&quot;&gt;&lt;a href=&quot;#DI-101-—-Part-3&quot; class=&quot;headerlink&quot; title=&quot;DI 101 — Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/di-101/di-101-part-3-f0136e67db8#.rdp4e4fwc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DI 101 — Part 3&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文讲什么是Scope, 如何定义Scope, 如何使用Scope和@Subcomponent.&lt;/p&gt;
&lt;p&gt;Subcomponent会继承父类的所有bindings.&lt;/p&gt;
&lt;p&gt;作者定义了一个Activity的Scope, 然后定义了一个Subcomponent专门给这个Activity用, 这个Subcomponent只在这个Activity的生命周期里存活. 代码例子比较简洁易懂.&lt;/p&gt;
&lt;h2 id=&quot;How-Dagger-2-Helps-In-Android-Espresso-Tests&quot;&gt;&lt;a href=&quot;#How-Dagger-2-Helps-In-Android-Espresso-Tests&quot; class=&quot;headerlink&quot; title=&quot;How Dagger 2 Helps In Android Espresso Tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ottodroid.net/?p=514&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Dagger 2 Helps In Android Espresso Tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章介绍了如何在写Espresso测试的时候, 使用一个测试用的Dagger Component.&lt;/p&gt;
&lt;h2 id=&quot;Finally-understanding-how-references-work-in-Android-and-Java&quot;&gt;&lt;a href=&quot;#Finally-understanding-how-references-work-in-Android-and-Java&quot; class=&quot;headerlink&quot; title=&quot;Finally understanding how references work in Android and Java&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/finally-understanding-how-references-work-in-android-and-java-26a0d9c92f83#.95piwft68&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Finally understanding how references work in Android and Java&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲了Java中的引用类型和Android中的内存泄露.&lt;/p&gt;
&lt;p&gt;Java中的引用类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strong reference&lt;/li&gt;
&lt;li&gt;WeakReference&lt;/li&gt;
&lt;li&gt;SoftReference&lt;/li&gt;
&lt;li&gt;PhantomReference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者详细介绍了每一种引用并用例子说明了使用场景. &lt;/p&gt;
&lt;h2 id=&quot;MVVM-RxJava-Learnings&quot;&gt;&lt;a href=&quot;#MVVM-RxJava-Learnings&quot; class=&quot;headerlink&quot; title=&quot;MVVM + RxJava: Learnings&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/upday-devs/mvvm-rxjava-learnings-1819423f9592#.3rat89dq5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVVM + RxJava: Learnings&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的新闻应用采用MVVM + RxJava架构, 本文总结了他们遇到的问题和学到的两点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;暴露状态, 而不是事件;&lt;/li&gt;
&lt;li&gt;所有的事情都应该通过ViewModel.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Adding-TV-Channels-to-Your-App-with-the-TIF-Companion-Library&quot;&gt;&lt;a href=&quot;#Adding-TV-Channels-to-Your-App-with-the-TIF-Companion-Library&quot; class=&quot;headerlink&quot; title=&quot;Adding TV Channels to Your App with the TIF Companion Library&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/11/adding-tv-channels-to-your-app-with-the-tif-companion-library.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adding TV Channels to Your App with the TIF Companion Library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;TV Input Framework(TIF)和Android TV让第三方应用开发者可以很容易地创建自己的电视频道. &lt;/p&gt;
&lt;h2 id=&quot;Background-Audio-in-Android-With-MediaSessionCompat&quot;&gt;&lt;a href=&quot;#Background-Audio-in-Android-With-MediaSessionCompat&quot; class=&quot;headerlink&quot; title=&quot;Background Audio in Android With MediaSessionCompat&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/background-audio-in-android-with-mediasessioncompat--cms-27030&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Background Audio in Android With MediaSessionCompat&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android support library中的&lt;code&gt;MediaSessionCompat&lt;/code&gt;使用, 以及如何用它来做一个背景音乐.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;FirebaseUI-Android&quot;&gt;&lt;a href=&quot;#FirebaseUI-Android&quot; class=&quot;headerlink&quot; title=&quot;FirebaseUI-Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/firebase/FirebaseUI-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FirebaseUI-Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;FirebaseUI for Android — UI Bindings for Firebase.&lt;/p&gt;
&lt;h2 id=&quot;ChipsLayoutManager&quot;&gt;&lt;a href=&quot;#ChipsLayoutManager&quot; class=&quot;headerlink&quot; title=&quot;ChipsLayoutManager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/BelooS/ChipsLayoutManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChipsLayoutManager&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个自定义的RecyclerView的layout manager, 流式地显示很多小块的TextView.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-231&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-231&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #231&quot;&gt;&lt;/a&gt;Android Weekly Issue #231&lt;/h1&gt;&lt;p&gt;November 13th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-231&quot;&gt;Android Weekly Issue #231&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Weekly阅读笔记, Issue #231, 本期内容包括: MVP中的View做成passive响应式的, 返回Observable; Android Studio使用技巧; &lt;code&gt;BottomNavigationView&lt;/code&gt;的使用; App tracking; Kotlin; 用Kotlin实现的Filter Animation效果; Dagger2的&lt;code&gt;Scope&lt;/code&gt;和&lt;code&gt;Subcomponent&lt;/code&gt;使用; Espresso测试中mock dagger注入; Android和Java中的Reference和内存泄露; MVVM + RxJava构架实际使用的经验分享; 还有TV以及Audio相关的内容等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="TV" scheme="http://mengdd.github.io/tags/TV/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Memory Leak" scheme="http://mengdd.github.io/tags/Memory-Leak/"/>
    
      <category term="Tools" scheme="http://mengdd.github.io/tags/Tools/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="BottomNavigationView" scheme="http://mengdd.github.io/tags/BottomNavigationView/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Audio" scheme="http://mengdd.github.io/tags/Audio/"/>
    
      <category term="Passive View" scheme="http://mengdd.github.io/tags/Passive-View/"/>
    
      <category term="RxBinding" scheme="http://mengdd.github.io/tags/RxBinding/"/>
    
      <category term="Tracking" scheme="http://mengdd.github.io/tags/Tracking/"/>
    
      <category term="Analytics" scheme="http://mengdd.github.io/tags/Analytics/"/>
    
      <category term="Scope" scheme="http://mengdd.github.io/tags/Scope/"/>
    
      <category term="Subcomponent" scheme="http://mengdd.github.io/tags/Subcomponent/"/>
    
      <category term="Reference" scheme="http://mengdd.github.io/tags/Reference/"/>
    
      <category term="Media" scheme="http://mengdd.github.io/tags/Media/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 230</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/11/android-weekly-notes-issue-230/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/11/android-weekly-notes-issue-230/</id>
    <published>2016-11-11T04:57:21.000Z</published>
    <updated>2016-11-13T02:57:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-230&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-230&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #230&quot;&gt;&lt;/a&gt;Android Weekly Issue #230&lt;/h1&gt;&lt;p&gt;November 6th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-230&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #230&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Android Weekly笔记, 本期内容包括: Mockito的扩展; ConstraintLayout的链式约束; Kotlin的Async-Await; RxJava2.0; 屏幕旋转导致的Activity重建; Throwable类的设计问题; Espresso测试中如何等待异步请求返回; Kotlin的扩展和运算符重载; Android KeyStore实现用户验证.&lt;/p&gt;
&lt;p&gt;代码部分有proguard的库, mvp的库和WifiManager, ConfigurationManager的包装库.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Extending-Mockito&quot;&gt;&lt;a href=&quot;#Extending-Mockito&quot; class=&quot;headerlink&quot; title=&quot;Extending Mockito&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2016/10/31/mockitomatchers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Extending Mockito&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲了如何扩展Mockito, 简化对参数的验证.&lt;/p&gt;
&lt;p&gt;首先作者举了之前验证参数的例子, 用的是ArgumentCaptor, 写起来很麻烦, 用了自定义的matcher之后简化了很多.&lt;/p&gt;
&lt;h2 id=&quot;ConstraintLayout-Chains-–-Part-2&quot;&gt;&lt;a href=&quot;#ConstraintLayout-Chains-–-Part-2&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout Chains – Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/constraintlayout-chains-part-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout Chains – Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上一篇文章讲过在ConstraintLayout中如何创建对称的链式约束, 本篇文章介绍chainStyle的不同设置和比较.&lt;/p&gt;
&lt;p&gt;默认的spread chain: 均匀分布;&lt;br&gt;inside spread chain: 边缘元素顶边, 中间均匀分布.&lt;/p&gt;
&lt;p&gt;如果指定了权重, 将会按照权重布局. 那么spread chain和inside spread chain就没有区别了.&lt;/p&gt;
&lt;p&gt;packed chain: 默认会把所有元素都放在一起放在中间, 可以指定bias来定义偏移基准, 默认bias是0.5, bias设置为0.25的意思就是往左偏. &lt;/p&gt;
&lt;h2 id=&quot;A-glimpse-of-Async-Await-on-Android&quot;&gt;&lt;a href=&quot;#A-glimpse-of-Async-Await-on-Android&quot; class=&quot;headerlink&quot; title=&quot;A glimpse of Async-Await on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@haarman.niek/async-await-in-android-f0202cf31088#.bdf3jarxd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A glimpse of Async-Await on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kotlin 1.1推出了&lt;a href=&quot;https://github.com/Kotlin/kotlin-coroutines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coroutines&lt;/a&gt;, 这是一个让计算可以在某个点暂停然后之后又恢复的功能, 例子是几年前C#的&lt;a href=&quot;http://blog.stephencleary.com/2012/02/async-and-await.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Async-Await&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者先举例说明了异步操作的几种常见实现, 最后结合自己的库用Async-Await做了一个例子.&lt;/p&gt;
&lt;h2 id=&quot;What’s-different-in-2-0&quot;&gt;&lt;a href=&quot;#What’s-different-in-2-0&quot; class=&quot;headerlink&quot; title=&quot;What’s different in 2.0&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/wiki/What&amp;#39;s-different-in-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s different in 2.0&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RxJava2.0.0已经发布了. 这是它的wiki page来介绍2.0有什么不同.&lt;/p&gt;
&lt;h2 id=&quot;Activity-Revival-and-the-case-of-the-Rotating-Device&quot;&gt;&lt;a href=&quot;#Activity-Revival-and-the-case-of-the-Rotating-Device&quot; class=&quot;headerlink&quot; title=&quot;Activity Revival and the case of the Rotating Device&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/activity-revival-and-the-case-of-the-rotating-device-167e34f9a30d#.fwrqz8nit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity Revival and the case of the Rotating Device&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本篇文章讲configuration变化(比如屏幕旋转)导致的Activity重建.&lt;/p&gt;
&lt;p&gt;为什么configuration变化的时候要重建Activity呢? 因为系统想要尽力地做一些helpful的事情, 希望在这种时候能重新加载正确的资源.&lt;/p&gt;
&lt;p&gt;怎么处理呢?&lt;/p&gt;
&lt;p&gt;方法一: 让系统自动处理. 在屏幕旋转时, &lt;code&gt;onSaveInstanceState()&lt;/code&gt;会在Activity销毁前调用, 可以存储一些状态, 之后重建的时候从bundle中拿出来恢复.&lt;/p&gt;
&lt;p&gt;方法二: 自己处理. 如果你想要获取更多控制, 那么你可以在manifest中声明&lt;code&gt;configChanges&lt;/code&gt;类型, 然后在Activity中覆写&lt;code&gt;onConfigurationChanged()&lt;/code&gt;方法, 来自己做处理.&lt;/p&gt;
&lt;p&gt;另外文章中还讨论了网络请求, 屏幕方向设置, retained fragment的使用等.&lt;/p&gt;
&lt;h2 id=&quot;RxJava-and-Retrofit-Throwing-a-Tantrum&quot;&gt;&lt;a href=&quot;#RxJava-and-Retrofit-Throwing-a-Tantrum&quot; class=&quot;headerlink&quot; title=&quot;RxJava and Retrofit Throwing a Tantrum&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/square-corner-blog/no-cause-for-concern-rxjava-and-retrofit-throwing-a-tantrum-96c9e4ba8a6c#.p1ck4zijo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava and Retrofit Throwing a Tantrum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讨论了他们在项目中遇到的一个问题.&lt;br&gt;他们用&lt;code&gt;RxJavaHooks.enableAssemblyTracking();&lt;/code&gt;来收集RxJava崩溃栈信息, 可以显示出到底是哪一个Observable崩了.&lt;br&gt;使用这个工具以后发现了一个问题, 进而研究了JDK的&lt;code&gt;Throwable&lt;/code&gt;类.&lt;/p&gt;
&lt;p&gt;原来cause不存在(this)和cause未知(null)是两种不同的情况, 但是&lt;code&gt;Throwable&lt;/code&gt;的&lt;code&gt;getCause()&lt;/code&gt;方法都会返回null.&lt;/p&gt;
&lt;h2 id=&quot;Retrofitting-Espresso&quot;&gt;&lt;a href=&quot;#Retrofitting-Espresso&quot; class=&quot;headerlink&quot; title=&quot;Retrofitting Espresso&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://collectiveidea.com/blog/archives/2016/10/13/retrofitting-espresso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofitting Espresso&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用Espresso做测试, 如何等待网络请求结束再验证UI.&lt;/p&gt;
&lt;h2 id=&quot;Composing-functions-in-Kotlin-with-extensions-and-operators&quot;&gt;&lt;a href=&quot;#Composing-functions-in-Kotlin-with-extensions-and-operators&quot; class=&quot;headerlink&quot; title=&quot;Composing functions in Kotlin with extensions and operators&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/composing-functions-in-kotlin-with-extensions-and-operators/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Composing functions in Kotlin with extensions and operators&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;结合Kotlin的extensions和operator overloading功能, 改善function, 让代码变得更优雅.&lt;/p&gt;
&lt;h2 id=&quot;Authentication-sucks-Bad-security-too&quot;&gt;&lt;a href=&quot;#Authentication-sucks-Bad-security-too&quot; class=&quot;headerlink&quot; title=&quot;Authentication sucks. Bad security too&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@flschweiger/authentication-sucks-bad-security-too-345ed20463d4#.yl40vbtgd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Authentication sucks. Bad security too&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个例子, 说明为什么老的验证方法用户体验不好, 我们如何在仍然考虑用户安全的情况下进行改善.&lt;/p&gt;
&lt;p&gt;解决方案是用Android 6.0推出的Android Keystore.&lt;br&gt;作者展示了如何实现并提供了&lt;a href=&quot;https://github.com/flschweiger/SafeApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Design&quot;&gt;&lt;a href=&quot;#Design&quot; class=&quot;headerlink&quot; title=&quot;Design&quot;&gt;&lt;/a&gt;Design&lt;/h1&gt;&lt;h2 id=&quot;Eight-don’ts-for-your-Material-Design-app&quot;&gt;&lt;a href=&quot;#Eight-don’ts-for-your-Material-Design-app&quot; class=&quot;headerlink&quot; title=&quot;Eight don’ts for your Material Design app&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.prototypr.io/common-material-design-bad-practices-to-avoid-b7995f251329#.ij9u38lu7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eight don’ts for your Material Design app&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Material Design app需要避免的8个点.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Android-proguards&quot;&gt;&lt;a href=&quot;#Android-proguards&quot; class=&quot;headerlink&quot; title=&quot;Android-proguards&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yongjhih/android-proguards&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-proguards&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用一行就可以加上所有流行库的proguard.&lt;/p&gt;
&lt;h2 id=&quot;Moxy&quot;&gt;&lt;a href=&quot;#Moxy&quot; class=&quot;headerlink&quot; title=&quot;Moxy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Arello-Mobile/Moxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Moxy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个MVP的库.&lt;/p&gt;
&lt;h2 id=&quot;WiseFy&quot;&gt;&lt;a href=&quot;#WiseFy&quot; class=&quot;headerlink&quot; title=&quot;WiseFy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/isuPatches/WiseFy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WiseFy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包装了Android的WifiManager和ConnectivityManager的一个库.&lt;/p&gt;
&lt;h1 id=&quot;VIDEOS-amp-PODCASTS&quot;&gt;&lt;a href=&quot;#VIDEOS-amp-PODCASTS&quot; class=&quot;headerlink&quot; title=&quot;VIDEOS &amp;amp; PODCASTS&quot;&gt;&lt;/a&gt;VIDEOS &amp;amp; PODCASTS&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLnVy79PaFHMXJha06t6pWfkYcATV4oPvC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droidcon NYC 2016&lt;/a&gt;&lt;br&gt;所有Droidcon NYC 2016的视频资源.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-230&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-230&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #230&quot;&gt;&lt;/a&gt;Android Weekly Issue #230&lt;/h1&gt;&lt;p&gt;November 6th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-230&quot;&gt;Android Weekly Issue #230&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Android Weekly笔记, 本期内容包括: Mockito的扩展; ConstraintLayout的链式约束; Kotlin的Async-Await; RxJava2.0; 屏幕旋转导致的Activity重建; Throwable类的设计问题; Espresso测试中如何等待异步请求返回; Kotlin的扩展和运算符重载; Android KeyStore实现用户验证.&lt;/p&gt;
&lt;p&gt;代码部分有proguard的库, mvp的库和WifiManager, ConfigurationManager的包装库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Mockito" scheme="http://mengdd.github.io/tags/Mockito/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Async-Await" scheme="http://mengdd.github.io/tags/Async-Await/"/>
    
      <category term="RxJava2.0" scheme="http://mengdd.github.io/tags/RxJava2-0/"/>
    
      <category term="Activity" scheme="http://mengdd.github.io/tags/Activity/"/>
    
      <category term="Rotation" scheme="http://mengdd.github.io/tags/Rotation/"/>
    
      <category term="JDK" scheme="http://mengdd.github.io/tags/JDK/"/>
    
      <category term="Authentication" scheme="http://mengdd.github.io/tags/Authentication/"/>
    
      <category term="KeyStore" scheme="http://mengdd.github.io/tags/KeyStore/"/>
    
      <category term="proguard" scheme="http://mengdd.github.io/tags/proguard/"/>
    
      <category term="WifiManager" scheme="http://mengdd.github.io/tags/WifiManager/"/>
    
      <category term="ConfigurationManager" scheme="http://mengdd.github.io/tags/ConfigurationManager/"/>
    
      <category term="Material Design" scheme="http://mengdd.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit结合RxJava使用指南</title>
    <link href="http://mengdd.github.io/Android/Retrofit/RxJava/2016/11/08/hello-retrofit-with-rxjava/"/>
    <id>http://mengdd.github.io/Android/Retrofit/RxJava/2016/11/08/hello-retrofit-with-rxjava/</id>
    <published>2016-11-08T02:36:59.000Z</published>
    <updated>2016-11-09T09:15:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;a href=&quot;#Retrofit结合RxJava使用指南&quot; class=&quot;headerlink&quot; title=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;/a&gt;Retrofit结合RxJava使用指南&lt;/h1&gt;&lt;p&gt;Retrofit是一个当前很流行的网络请求库, 官网的介绍是: “Type-safe HTTP client for Android and Java”. 本文介绍Retrofit的使用.&lt;br&gt;先介绍单独使用Retrofit进行网络请求, 后面主要介绍和RxJava结合的请求, 有实例代码.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Retrofit单独使用&quot;&gt;&lt;a href=&quot;#Retrofit单独使用&quot; class=&quot;headerlink&quot; title=&quot;Retrofit单独使用&quot;&gt;&lt;/a&gt;Retrofit单独使用&lt;/h2&gt;&lt;h3 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h3&gt;&lt;p&gt;首先在manifest中加上网络权限:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;app/build.gradle&lt;/code&gt;中加上依赖:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.google.code.gson:gson:2.8.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;准备API和model类&quot;&gt;&lt;a href=&quot;#准备API和model类&quot; class=&quot;headerlink&quot; title=&quot;准备API和model类&quot;&gt;&lt;/a&gt;准备API和model类&lt;/h3&gt;&lt;p&gt;本例子中使用&lt;a href=&quot;https://developer.github.com/v3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github API&lt;/a&gt;做请求.&lt;/p&gt;
&lt;p&gt;以Github的Root Endpoint为例:&lt;br&gt;&lt;code&gt;https://api.github.com&lt;/code&gt;.&lt;br&gt;首先, 我们在命令行发送:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://api.github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者在Postman发送这个请求, 两种方法都可以得到结果.&lt;/p&gt;
&lt;p&gt;这个请求返回的是一个json.&lt;/p&gt;
&lt;p&gt;利用这个网站: &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsonschema2pojo&lt;/a&gt;, 可以用json生成一个java类, 比如上面这个, 我们给它起名字叫&lt;code&gt;Endpoints.java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;之后例子中的API都是这种方式, 先发送请求得到json, 然后转成java的model类.&lt;/p&gt;
&lt;h3 id=&quot;利用Retrofit发送请求并得到结果&quot;&gt;&lt;a href=&quot;#利用Retrofit发送请求并得到结果&quot; class=&quot;headerlink&quot; title=&quot;利用Retrofit发送请求并得到结果&quot;&gt;&lt;/a&gt;利用Retrofit发送请求并得到结果&lt;/h3&gt;&lt;p&gt;首先写一个&lt;code&gt;ServiceGenerator&lt;/code&gt;类, 用于生成service:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String API_BASE_URL = &lt;span class=&quot;string&quot;&gt;&quot;https://api.github.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; OkHttpClient.Builder httpClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OkHttpClient.Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Retrofit.Builder builder =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Retrofit.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .baseUrl(API_BASE_URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .addConverterFactory(GsonConverterFactory.create());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;S&amp;gt; &lt;span class=&quot;function&quot;&gt;S &lt;span class=&quot;title&quot;&gt;createService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;S&amp;gt; serviceClass)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Retrofit retrofit = builder.client(httpClient.build()).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retrofit.create(serviceClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里指定了我们的base url.&lt;br&gt;&lt;code&gt;createService()&lt;/code&gt;方法返回的是一个泛型.&lt;/p&gt;
&lt;p&gt;然后我们创建&lt;code&gt;GithubService&lt;/code&gt;, 注意这是一个&lt;strong&gt;接口&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.ddmeng.helloretrofit.data.models.Endpoints;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; retrofit2.Call;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; retrofit2.http.GET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; retrofit2.http.Url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GitHubService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;Endpoints&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllEndpoints&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Url String url)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里&lt;code&gt;@GET&lt;/code&gt;指定了是一个GET请求, 因为我们请求的就是base url, 所以是这样写的.&lt;br&gt;&lt;code&gt;Endpoints&lt;/code&gt;类是这个请求所返回的json转化的java类.&lt;/p&gt;
&lt;p&gt;好了, 准备工作做完了, 现在就可以请求并得到结果:&lt;br&gt;请求github api的root url, 得到所有的endpoints:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHubService gitHubService = ServiceGenerator.createService(GitHubService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;Endpoints&amp;gt; endpointsCall = gitHubService.getAllEndpoints(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpointsCall.enqueue(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;Endpoints&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;Endpoints&amp;gt; call, Response&amp;lt;Endpoints&amp;gt; response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Endpoints endpoints = response.body();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String repositoryUrl = endpoints.getRepositoryUrl();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LogUtils.i(repositoryUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Toast.makeText(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;repository url: &quot;&lt;/span&gt; + repositoryUrl, Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;Endpoints&amp;gt; call, Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明:&lt;br&gt;首先利用前面的ServiceGenerator来创建Service, 然后调用接口中定义的&lt;code&gt;getAllEndpoints()&lt;/code&gt;方法, 此处传入了空字符串, 因为我请求的就是base url.&lt;/p&gt;
&lt;h3 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;&lt;/a&gt;同步和异步&lt;/h3&gt;&lt;p&gt;这里注意用Retrofit请求的返回值是&lt;code&gt;Call&amp;lt;T&amp;gt;&lt;/code&gt; (后面我们还会介绍用RxJava的情形), 泛型T是model类型, 它有两个方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt;是同步方法, 返回&lt;code&gt;Response&amp;lt;T&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enqueue()&lt;/code&gt;是异步方法, 在上面的例子中用的就是这个, 在回调&lt;code&gt;onResponse()&lt;/code&gt;中返回了&lt;code&gt;Response&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Converter&quot;&gt;&lt;a href=&quot;#Converter&quot; class=&quot;headerlink&quot; title=&quot;Converter&quot;&gt;&lt;/a&gt;Converter&lt;/h3&gt;&lt;p&gt;Converter的作用: 如果不指定Converter, 默认情况下Retrofit只能返回&lt;code&gt;ResponseBody&lt;/code&gt;类型, 加了Converter之后就可以返回我们定义的Model类型了.&lt;br&gt;所以Converter替我们做了json -&amp;gt; model的工作.&lt;/p&gt;
&lt;p&gt;本例子中ConverterFactory指定的是&lt;code&gt;GsonConverterFactory&lt;/code&gt;. 这里我们选的是Gson Converter, 所以依赖的是&lt;code&gt;com.squareup.retrofit2:converter-gson&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Retrofit支持多种converters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gson: com.squareup.retrofit2:converter-gson&lt;/li&gt;
&lt;li&gt;Jackson: com.squareup.retrofit2:converter-jackson&lt;/li&gt;
&lt;li&gt;Moshi: com.squareup.retrofit2:converter-moshi&lt;/li&gt;
&lt;li&gt;Protobuf: com.squareup.retrofit2:converter-protobuf&lt;/li&gt;
&lt;li&gt;Wire: com.squareup.retrofit2:converter-wire&lt;/li&gt;
&lt;li&gt;Simple XML: com.squareup.retrofit2:converter-simplexml&lt;/li&gt;
&lt;li&gt;Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Path和参数&quot;&gt;&lt;a href=&quot;#Path和参数&quot; class=&quot;headerlink&quot; title=&quot;Path和参数&quot;&gt;&lt;/a&gt;Path和参数&lt;/h3&gt;&lt;p&gt;从上面返回的endpoints可以看到, user_url是: &lt;code&gt;https://api.github.com/users/{user}&lt;/code&gt;&lt;br&gt;这是一个带path参数的url, 我们发请求的时候在{user}处写一个github用户名, 即可得到该用户的信息, 比如:&lt;br&gt;&lt;code&gt;https://api.github.com/users/mengdd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;那么用Retrofit如何处理呢?&lt;br&gt;只需要在&lt;code&gt;GithubService&lt;/code&gt;中增加一个方法, 这样写:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GitHubService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;Endpoints&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllEndpoints&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Url String url)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;users/&amp;#123;user&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Path(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt; String user)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用时的方法完全一样, 不再赘述, 同理, 如果要在后面加参数, 可以用&lt;code&gt;@Query&lt;/code&gt;.&lt;br&gt;更多注解的例子见官方网站: &lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Retrofit-RxJava&quot;&gt;&lt;a href=&quot;#Retrofit-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Retrofit + RxJava&quot;&gt;&lt;/a&gt;Retrofit + RxJava&lt;/h2&gt;&lt;p&gt;RxJava近年来很流行, 主要优势是流式操作, 可以处理并行发送请求, 使用灵活, 线程切换容易.&lt;br&gt;当你要处理的逻辑比较复杂时, 就会发现使用RxJava的优势.&lt;/p&gt;
&lt;p&gt;以我们的例子来说, 当前我们利用一个请求可以得到一个用户的信息并显示出来.&lt;br&gt;如果我们想得到这个用户的所有repo的所有者或者其他信息, 所有他follow的人的信息, 以及他们的repo的信息呢?&lt;/p&gt;
&lt;p&gt;这就需要发很多个请求, 并且其中有些请求是并行发送的, 如果按照前面的方法, 不断地在callback里面嵌套, 那就太难看了.&lt;/p&gt;
&lt;h3 id=&quot;Setup-with-RxJava&quot;&gt;&lt;a href=&quot;#Setup-with-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Setup with RxJava&quot;&gt;&lt;/a&gt;Setup with RxJava&lt;/h3&gt;&lt;h4 id=&quot;添加RxJava依赖&quot;&gt;&lt;a href=&quot;#添加RxJava依赖&quot; class=&quot;headerlink&quot; title=&quot;添加RxJava依赖&quot;&gt;&lt;/a&gt;添加RxJava依赖&lt;/h4&gt;&lt;p&gt;首先, 添加RxJava和RxAndroid的依赖:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxjava:1.2.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxandroid:1.2.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注: 虽然在我写这篇文章的时候(2016.11.4)RxJava2.0刚刚release, 但是我们还是先用RxJava1来写这个demo.&lt;/p&gt;
&lt;p&gt;然后添加retrofit的adapter-rxjava:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以现在我们的依赖总的看起来是这样:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;fileTree&lt;/span&gt;(dir: &lt;span class=&quot;string&quot;&gt;&#39;libs&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&#39;*.jar&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    androidTestCompile(&lt;span class=&quot;string&quot;&gt;&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;com.android.support&#39;&lt;/span&gt;, module: &lt;span class=&quot;string&quot;&gt;&#39;support-annotations&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;com.android.support:appcompat-v7:$&amp;#123;supportLibVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;com.android.support:design:$&amp;#123;supportLibVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;com.jakewharton:butterknife:$&amp;#123;butterKnifeVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &lt;span class=&quot;string&quot;&gt;&quot;com.jakewharton:butterknife-compiler:$&amp;#123;butterKnifeVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.google.code.gson:gson:2.8.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxjava:1.2.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxandroid:1.2.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &lt;span class=&quot;string&quot;&gt;&#39;junit:junit:4.12&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Retrofit结合RxJava&quot;&gt;&lt;a href=&quot;#Retrofit结合RxJava&quot; class=&quot;headerlink&quot; title=&quot;Retrofit结合RxJava&quot;&gt;&lt;/a&gt;Retrofit结合RxJava&lt;/h4&gt;&lt;p&gt;Retrofit.Builder()中加入这一行:&lt;br&gt;&lt;code&gt;.addCallAdapterFactory(RxJavaCallAdapterFactory.create());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ServiceGenerator变成这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String API_BASE_URL = &lt;span class=&quot;string&quot;&gt;&quot;https://api.github.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; OkHttpClient.Builder httpClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OkHttpClient.Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Retrofit.Builder builder =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Retrofit.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .baseUrl(API_BASE_URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .addConverterFactory(GsonConverterFactory.create())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;S&amp;gt; &lt;span class=&quot;function&quot;&gt;S &lt;span class=&quot;title&quot;&gt;createService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;S&amp;gt; serviceClass)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Retrofit retrofit = builder.client(httpClient.build()).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retrofit.create(serviceClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们在&lt;code&gt;GithubService&lt;/code&gt;中定义的接口方法, 既可以像原来一样返回&lt;code&gt;Call&lt;/code&gt;, 也可以返回&lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Retrofit-RxJava请求实例&quot;&gt;&lt;a href=&quot;#Retrofit-RxJava请求实例&quot; class=&quot;headerlink&quot; title=&quot;Retrofit + RxJava请求实例&quot;&gt;&lt;/a&gt;Retrofit + RxJava请求实例&lt;/h3&gt;&lt;p&gt;以单个请求为例,&lt;br&gt;&lt;strong&gt;不用RxJava的时候&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;users/&amp;#123;user&amp;#125;/following&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; getUserFollowing(&lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;) String user);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;请求的时候是这样的:&lt;br&gt;请求指定用户follow的所有人:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHubService service = ServiceGenerator.createService(GitHubService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; userFollowing = service.getUserFollowing(inputUserNameView.getText().toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userFollowing.enqueue(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; call, Response&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;User&amp;gt; followingUsers = response.body();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        peopleListAdapter.setUsers(followingUsers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; call, Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在改用RxJava了, 返回的不是Call而是Observable:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;users/&amp;#123;user&amp;#125;/following&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; getUserFollowingObservable(&lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;) String user);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结合RxJava请求的时候变为这样:&lt;br&gt;还是请求用户follow的所有人:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHubService service = ServiceGenerator.createService(GitHubService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String username = inputUserNameView.getText().toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;onNext: &quot;&lt;/span&gt; + users.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.setUsers(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用RxJava实现后, 请求返回的是一个Observable, 用&lt;code&gt;subscribe()&lt;/code&gt;添加一个订阅者, 即它的观察者.&lt;br&gt;当请求返回后, 回到主线程, 更新UI.&lt;br&gt;这是单个请求的例子, 所以RxJava的优势不是很明显, 如果我们有多个请求, 用RxJava进行变换组合显然就是更好的选择.&lt;/p&gt;
&lt;h4 id=&quot;用RxJava进行线程切换&quot;&gt;&lt;a href=&quot;#用RxJava进行线程切换&quot; class=&quot;headerlink&quot; title=&quot;用RxJava进行线程切换&quot;&gt;&lt;/a&gt;用RxJava进行线程切换&lt;/h4&gt;&lt;p&gt;上个例子中&lt;code&gt;.subscribeOn(Schedulers.io())&lt;/code&gt;指定Observable的工作, 在我们的例子中Observable的工作即发送请求, 在io线程做, 指定了被观察者的处理线程;&lt;br&gt;&lt;code&gt;.observeOn(AndroidSchedulers.mainThread())&lt;/code&gt;指定最后onNext()回调在主线程, 即指定了通知后续观察者的线程.&lt;br&gt;关于这两个操作符的更多说明请看官方文档: &lt;a href=&quot;http://reactivex.io/documentation/operators/subscribeon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;subscribeOn&lt;/a&gt;和&lt;a href=&quot;http://reactivex.io/documentation/operators/observeon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;observeOn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;RxJava处理多个请求的例子&quot;&gt;&lt;a href=&quot;#RxJava处理多个请求的例子&quot; class=&quot;headerlink&quot; title=&quot;RxJava处理多个请求的例子&quot;&gt;&lt;/a&gt;RxJava处理多个请求的例子&lt;/h3&gt;&lt;p&gt;设计这样一个场景, 我们现在取到了一个用户follow的所有人, 但是取回的信息中并不包含每个人拥有的repo个数, 只有一个url可用户查看所有repo.&lt;/p&gt;
&lt;p&gt;接下来我们要取其中每一个人的详细信息, 就要查询另一个API, 重新查询这个人的完整信息.&lt;br&gt;查询用户follow的所有人, 然后查询每一个人的详细信息:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;subscription = service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;List&amp;lt;User&amp;gt;, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service.getUserObservable(user.getLogin());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.setUsers(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到我们加了两个&lt;code&gt;flatMap()&lt;/code&gt;和一个&lt;code&gt;toList()&lt;/code&gt;来做这个事情.&lt;/p&gt;
&lt;p&gt;首先, 第一步我们用&lt;code&gt;getUserFollowingObservable()&lt;/code&gt;得到的是一个&lt;code&gt;Observable&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;&lt;/code&gt;;&lt;br&gt;我们之后用&lt;code&gt;.flatMap()&lt;/code&gt;, 它的输入是&lt;code&gt;List&amp;lt;User&amp;gt;&lt;/code&gt;, 返回的是&lt;code&gt;Observable&amp;lt;User&amp;gt;&lt;/code&gt;. 我们在其中用了一个&lt;code&gt;.from()&lt;/code&gt;来生成一个发射一组User的&lt;code&gt;Observable&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;之后第二个&lt;code&gt;.flatMap()&lt;/code&gt;里, 输入是前一个&lt;code&gt;Observable&lt;/code&gt;的输出, 即User, 调用了&lt;code&gt;getUserObservable()&lt;/code&gt;, 返回的结果是&lt;code&gt;Observable&amp;lt;User&amp;gt;&lt;/code&gt;, 之后加一个&lt;code&gt;.toList()&lt;/code&gt;, 把输出的结果从单个的User变为List&lt;user&gt;, 即和我们最初的例子一样. &lt;/user&gt;&lt;/p&gt;
&lt;p&gt;只不过此时得到的用户信息是更详细的用户信息, 包含了他的repo数据和follow数据. 因为它们是通过单独查询每一个人得到的.&lt;/p&gt;
&lt;p&gt;运行, 虽然可以得到我们想要的结果, 但是这个例子仍然是有问题的.&lt;/p&gt;
&lt;h4 id=&quot;线程问题处理&quot;&gt;&lt;a href=&quot;#线程问题处理&quot; class=&quot;headerlink&quot; title=&quot;线程问题处理&quot;&gt;&lt;/a&gt;线程问题处理&lt;/h4&gt;&lt;p&gt;上面多个请求的例子, 发现虽然实现了我们的需求, 但是结果回来得很慢.&lt;br&gt;我们加上一个&lt;code&gt;.map&lt;/code&gt;操作符来加上log:&lt;br&gt;(这里省略了一些前后的代码, 只是在&lt;code&gt;.flatMap()&lt;/code&gt;里加了一个&lt;code&gt;.map()&lt;/code&gt;)&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subscription = service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;List&amp;lt;User&amp;gt;, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service.getUserObservable(user.getLogin())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;// this .map is used to output log information to check the threads&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;getUserObservable: &quot;&lt;/span&gt; + user.getLogin());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由Log可以发现(log中的线程号是一样的)单独取每一个用户详细信息的请求都发生在同一个线程, 是顺次进行的.&lt;/p&gt;
&lt;p&gt;查看代码:&lt;br&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloRetrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/HelloRetrofit&lt;/a&gt;.&lt;br&gt;&lt;code&gt;git checkout multiple-requests-in-single-thread&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回头梳理一下我们的需求, 请求一个所有follow的人, 返回一个follow的人的List, 然后对List中的每一个人, 单独请求详细信息.&lt;/p&gt;
&lt;p&gt;那么按理来说, 第二个批量的请求是可以同时发送, 并行进行的.&lt;br&gt;所以我们想要的行为其实是平行发送多个请求, 然后最后统一结果到UI线程. &lt;/p&gt;
&lt;p&gt;改动如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;subscription = service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;// 从io线程开始, 取用户follow的所有人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;List&amp;lt;User&amp;gt;, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;from&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service.getUserObservable(user.getLogin()) &lt;span class=&quot;comment&quot;&gt;// 取每个人的详细信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;// 指定取每个人详细信息的工作都在单独的io线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;// this map operation is just used for showing log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;getUserObservable: &quot;&lt;/span&gt; + user.getLogin());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .observeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;// 最后返回到主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;onNext: &quot;&lt;/span&gt; + users.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.setUsers(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给改动的部分加上了注释, 这样更清楚一些.&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;subscribeOn()&lt;/code&gt;指定的是当前的这个Observable的工作在什么线程进行.&lt;br&gt;所以在本例子中, &lt;code&gt;subscribeOn(Schedulers.io())&lt;/code&gt;的位置放在&lt;code&gt;.flatMap()&lt;/code&gt;里面才会产生多个请求并行的效果.&lt;/p&gt;
&lt;p&gt;这样一改, 我们的显示时间不再是所有请求时间之和, 而是只取决于最慢的那个请求时间.&lt;/p&gt;
&lt;p&gt;查看代码:&lt;br&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloRetrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/HelloRetrofit&lt;/a&gt;&lt;br&gt;&lt;code&gt;git checkout multiple-requests-in-multiple-threads&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;取消订阅&quot;&gt;&lt;a href=&quot;#取消订阅&quot; class=&quot;headerlink&quot; title=&quot;取消订阅&quot;&gt;&lt;/a&gt;取消订阅&lt;/h3&gt;&lt;p&gt;正常情况下, 行为结束之后, 到达&lt;code&gt;onComplete()&lt;/code&gt;或者&lt;code&gt;onError()&lt;/code&gt;, RxJava的订阅会自动取消.&lt;br&gt;但是在处理网络请求的时候, 很可能会出现请求还没有返回, 界面就已经结束了的情况.&lt;/p&gt;
&lt;p&gt;上面的代码中已经出现了, 订阅方法&lt;code&gt;subscribe()&lt;/code&gt;的返回值是一个&lt;code&gt;Subscription&lt;/code&gt;对象, 我们保存了这个对象的引用, 然后在&lt;code&gt;onPause()&lt;/code&gt;的时候取消了请求, 防止内存泄露.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (subscription != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; subscription.isUnsubscribed()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscription.unsubscribe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然也可以选别的生命周期回调, 比如&lt;code&gt;onDestroyView()&lt;/code&gt;或者&lt;code&gt;onDestroy()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;如果有多个请求, 可以用:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CompositeSubscription compositeSubscription = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CompositeSubscription();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在发请求的地方, 返回subscription&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compositeSubscription.add(subscription);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 选一个生命周期注销所有请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compositeSubscription.unsubscribe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Demo说明&quot;&gt;&lt;a href=&quot;#Demo说明&quot; class=&quot;headerlink&quot; title=&quot;Demo说明&quot;&gt;&lt;/a&gt;Demo说明&lt;/h2&gt;&lt;p&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloRetrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/HelloRetrofit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本Demo只用于展示Retrofit和RxJava结合的使用, 为了清晰起见所以没有采用MVP构架, 也没有用Dagger进行依赖注入, 有的请求也没有在生命周期结束时取消, 也没有UI的loading效果和没网情况的处理等, 大家使用时请根据实际需要做一些处理.&lt;/p&gt;
&lt;p&gt;这些没有的东西会在我最近在做一个应用repo中出现: &lt;a href=&quot;https://github.com/mengdd/GithubClient&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/GithubClient&lt;/a&gt;, 还在开发中, 可以关注一下. &lt;/p&gt;
&lt;p&gt;另, Demo使用有时候用着用着请求就返回了:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;message&amp;quot;:&amp;quot;API rate limit exceeded for xxx ip...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是因为没授权的用户每小时最多只能发60个请求:&lt;a href=&quot;https://developer.github.com/v3/#rate-limiting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.github.com/v3/#rate-limiting&lt;/a&gt;&lt;br&gt;解决办法就是..查following的人时, 不要查那种follow了很多人的账号. orz.&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Consuming-APIs-with-Retrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath- Consuming APIs with Retrofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://futurestud.io/tutorials/retrofit-getting-started-and-android-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Future Studio 系列教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/56e80c2c677659311bed9841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 与 Retrofit 结合的最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;a href=&quot;#Retrofit结合RxJava使用指南&quot; class=&quot;headerlink&quot; title=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;/a&gt;Retrofit结合RxJava使用指南&lt;/h1&gt;&lt;p&gt;Retrofit是一个当前很流行的网络请求库, 官网的介绍是: “Type-safe HTTP client for Android and Java”. 本文介绍Retrofit的使用.&lt;br&gt;先介绍单独使用Retrofit进行网络请求, 后面主要介绍和RxJava结合的请求, 有实例代码.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/categories/Android/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/categories/Android/Retrofit/RxJava/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 229</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/01/android-weekly-notes-issue-229/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/01/android-weekly-notes-issue-229/</id>
    <published>2016-11-01T10:01:50.000Z</published>
    <updated>2016-11-01T10:18:13.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-229&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-229&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #229&quot;&gt;&lt;/a&gt;Android Weekly Issue #229&lt;/h1&gt;&lt;p&gt;October 30th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-229&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #229&lt;/a&gt;&lt;br&gt;Android Weekly笔记, 本期内容包括: 性能库Pury的插件化; 一种新的多选设计和实现; 音频播放; Dagger的测试mock方案; ConstraintLayout的链式约束; Mobile Vision API的二维码扫描功能; RxJava的使用缺陷讨论; SOLID原则图解.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Get-access-to-raw-profiling-results-with-plugins-for-Pury&quot;&gt;&lt;a href=&quot;#Get-access-to-raw-profiling-results-with-plugins-for-Pury&quot; class=&quot;headerlink&quot; title=&quot;Get access to raw profiling results with plugins for Pury&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@nikita.kozlov/get-access-to-raw-profiling-results-with-plugins-for-pury-f9a7cc5e8345#.y26lx22wo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get access to raw profiling results with plugins for Pury&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Pury是一个做profile的工具, 前面有过一篇文章介绍: &lt;a href=&quot;https://medium.com/@nikita.kozlov/pury-new-way-to-profile-your-android-application-7e248b5f615e#.57ggfep5p&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文是作者的另一篇文章, 讲Pury的插件化和扩展.&lt;/p&gt;
&lt;p&gt;另外, 作者最近正在集成Google Analytics到Pury中.&lt;/p&gt;
&lt;h2 id=&quot;Building-a-Multiselection-Solution-for-Android-in-Kotlin&quot;&gt;&lt;a href=&quot;#Building-a-Multiselection-Solution-for-Android-in-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Building a Multiselection Solution for Android in Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yalantis.com/blog/how-we-created-a-multiselection-solution-for-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a Multiselection Solution for Android in Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在移动应用上的多选设计很难, 通常不是很灵活, 用起来也不舒服. &lt;/p&gt;
&lt;p&gt;本文推荐了一种全新的多选设计: 把屏幕分为两部分: 包括主要的列表和选中列表. 选中的项目自动移动到选中列表中去.&lt;/p&gt;
&lt;p&gt;这个设计概念的实现: &lt;code&gt;ViewPager&lt;/code&gt; + 两个&lt;code&gt;RecyclerView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;作者选用了kotlin来实现. 列举了几个kotlin的features: Extension functions, Null safety, Collections, Better syntax.&lt;/p&gt;
&lt;p&gt;作者的库: &lt;a href=&quot;https://github.com/Yalantis/Multi-Selection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Multi-Selection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文中还介绍了如何使用这个库.&lt;/p&gt;
&lt;h2 id=&quot;Audio-not-playing-in-Android&quot;&gt;&lt;a href=&quot;#Audio-not-playing-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Audio (not) playing in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/uptech-team/audio-not-playing-in-android-cde9a0fdfafd#.kp7qsjuha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Audio (not) playing in Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于Android上的音频播放, 作者的总结文章. &lt;/p&gt;
&lt;p&gt;音频播放的方式有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaPlayer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MediaPlayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/SoundPool.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SoundPool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/AudioTrack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AudioTrack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/ExoPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于&lt;code&gt;MediaPlayer&lt;/code&gt;的使用, 官方文档: &lt;a href=&quot;https://developer.android.com/guide/topics/media/mediaplayer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Media Playback&lt;/a&gt;, 本文中有一张图是&lt;code&gt;MediaPlayer&lt;/code&gt;的生命周期图.&lt;/p&gt;
&lt;p&gt;作者逐个列举了实际使用这些API时可能会遇到的一些issues. 并且最终选择的最佳解决方案是Google的&lt;a href=&quot;https://github.com/google/ExoPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer&lt;/a&gt;, 2.0版本已经解决了她之前遇到的所有issues.&lt;/p&gt;
&lt;h2 id=&quot;Providing-test-doubles-with-Dagger-1-and-Dagger-2&quot;&gt;&lt;a href=&quot;#Providing-test-doubles-with-Dagger-1-and-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Providing test doubles with Dagger 1 and Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/providing-test-doubles-with-dagger-1-and-dagger-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Providing test doubles with Dagger 1 and Dagger 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲在使用Dagger1和Dagger2的项目中, 如何为测试mock依赖.&lt;/p&gt;
&lt;h2 id=&quot;ConstraintLayout-Chains-–-Part-1&quot;&gt;&lt;a href=&quot;#ConstraintLayout-Chains-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout Chains – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/constraintlayout-chains-spread-chains/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout Chains – Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讲了&lt;code&gt;ConstraintLayout&lt;/code&gt;的一个重要特性: chains, 链.&lt;br&gt;chains是一个机制, 把一些独立的Views链起来, 然后我们可以对这一个集合来采取一些行为.&lt;/p&gt;
&lt;p&gt;比如选中一个parent下的两个TextView(这两个本来是分别对齐parent的左右), 然后选择”Center Horizontally”, 就是建立了一个链.&lt;br&gt;在xml中实际上给这两个view都各自加上了一条限制条件, 限制它们在对方的(左/右)边, 这两条对称性的限制条件就构成了一个链.&lt;/p&gt;
&lt;p&gt;这种链叫spread chains, 是默认的style.&lt;/p&gt;
&lt;h2 id=&quot;Machine-Learning-with-the-Mobile-Vision-API-—-Part-2&quot;&gt;&lt;a href=&quot;#Machine-Learning-with-the-Mobile-Vision-API-—-Part-2&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning with the Mobile Vision API — Part 2 &quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/machine-learning-for-android-developers-with-the-mobile-vision-api-part-2-barcode-detection-61e84c858518#.3dy9fgj56&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Machine Learning with the Mobile Vision API — Part 2 &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;a href=&quot;https://developers.google.com/vision/barcodes-overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mobile Vision的Barcode API&lt;/a&gt;来进行二维码检测.&lt;br&gt;Code: &lt;a href=&quot;https://github.com/moyheen/barcode-detector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;barcode-detector&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Reactive-Frustrations&quot;&gt;&lt;a href=&quot;#Reactive-Frustrations&quot; class=&quot;headerlink&quot; title=&quot;Reactive Frustrations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://upday.github.io/blog/reactive_frustrations_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Frustrations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;大多数Rx相关的文章都说优点, 本篇不同, 作者分享了在使用RxJava过程中碰到的一些烦人的事情.&lt;br&gt;不过尽管有这些挫折, RxJava仍然是一个很棒的工具.&lt;/p&gt;
&lt;h3 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;p&gt;RxJava的文档有时候对初学者来说会很具迷惑性.&lt;br&gt;推荐看: &lt;a href=&quot;http://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxMarbles&lt;/a&gt;, 有操作符图解.&lt;/p&gt;
&lt;h3 id=&quot;匿名类&quot;&gt;&lt;a href=&quot;#匿名类&quot; class=&quot;headerlink&quot; title=&quot;匿名类&quot;&gt;&lt;/a&gt;匿名类&lt;/h3&gt;&lt;p&gt;RxJava的使用中会构建很多匿名类.&lt;br&gt;推荐使用: &lt;a href=&quot;https://github.com/orfjackal/retrolambda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrolambda&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin&lt;/a&gt;, 或&lt;a href=&quot;https://source.android.com/source/jack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jack&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;忘记subscribe&quot;&gt;&lt;a href=&quot;#忘记subscribe&quot; class=&quot;headerlink&quot; title=&quot;忘记subscribe&quot;&gt;&lt;/a&gt;忘记subscribe&lt;/h3&gt;&lt;p&gt;这是一个常见的错误, 如果只写好了Observable但没有触发, 通常是没有subscribe, 因为Observable是被动的, 只有当被订阅的时候才会触发.&lt;/p&gt;
&lt;h3 id=&quot;代码的推理&quot;&gt;&lt;a href=&quot;#代码的推理&quot; class=&quot;headerlink&quot; title=&quot;代码的推理&quot;&gt;&lt;/a&gt;代码的推理&lt;/h3&gt;&lt;p&gt;有时候很难看见一块代码就知道执行结果, 必须往上游排查.&lt;/p&gt;
&lt;p&gt;所以作者在他们的项目中规定了一项对于Observable的命名规范:&lt;br&gt;&lt;code&gt;...Once&lt;/code&gt;表示只发射一次; &lt;code&gt;...Stream&lt;/code&gt;表示会发射值, 或者不发射, 但是不会completes; &lt;code&gt;...OnceAndStream&lt;/code&gt;订阅时会发射值, 之后可能会继续发射, 但是不会停止.&lt;/p&gt;
&lt;h3 id=&quot;map操作符&quot;&gt;&lt;a href=&quot;#map操作符&quot; class=&quot;headerlink&quot; title=&quot;...map操作符&quot;&gt;&lt;/a&gt;&lt;code&gt;...map&lt;/code&gt;操作符&lt;/h3&gt;&lt;p&gt;有一些比较容易混淆的操作符:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;: 并行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switchMap&lt;/code&gt;: 中断前一个, 串行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concatMap&lt;/code&gt;: 等待前一个结束, 串行;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Designing-something-S-O-L-I-D&quot;&gt;&lt;a href=&quot;#Designing-something-S-O-L-I-D&quot; class=&quot;headerlink&quot; title=&quot;Designing something S.O.L.I.D&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/designing-something-solid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Designing something S.O.L.I.D&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt;是软件开发的五项原则:&lt;/p&gt;
&lt;p&gt;SOLID (single responsibility, open-closed, Liskov substitution, interface segregation and dependency inversion).&lt;/p&gt;
&lt;p&gt;这里是&lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;)的解释.&lt;/p&gt;
&lt;p&gt;这篇文章图形化地解释了SOLID, 配图和例子都很有趣.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Design-Is-Never-Done&quot;&gt;&lt;a href=&quot;#Design-Is-Never-Done&quot; class=&quot;headerlink&quot; title=&quot;Design Is Never Done&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://design.google.com/articles/design-is-never-done/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Is Never Done&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Material Design的新工具套件和开源项目.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;EasyMVP&quot;&gt;&lt;a href=&quot;#EasyMVP&quot; class=&quot;headerlink&quot; title=&quot;EasyMVP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://6thsolution.github.io/EasyMVP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EasyMVP&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个MVP库. 比较特别的几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用注解来注入Presenter(可以和Dagger2结合使用, 否则只能注入无参构造), 绑定Presenter和View的生命周期;&lt;/li&gt;
&lt;li&gt;使用Loaders来字啊configurations changes时保存Presenter;&lt;/li&gt;
&lt;li&gt;加上&lt;code&gt;easymvp-rx&lt;/code&gt;插件后, 遵循Clean Architecture原则, 加入了domain层, 提供了UseCase的基类;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Input-Mask&quot;&gt;&lt;a href=&quot;#Input-Mask&quot; class=&quot;headerlink&quot; title=&quot;Input Mask&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RedMadRobot/input-mask-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Input Mask&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个小的工具库, 可以按格式显示用户的输入. 比如在输入上加括号, 每三位数字空一格之类的.&lt;/p&gt;
&lt;h2 id=&quot;sdk-artifact-sync&quot;&gt;&lt;a href=&quot;#sdk-artifact-sync&quot; class=&quot;headerlink&quot; title=&quot;sdk-artifact-sync&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JakeWharton/sdk-artifact-sync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sdk-artifact-sync&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个脚本, 同步你local Android SDK中的所有artifacts到一个remote的Maven artifact host上.&lt;/p&gt;
&lt;h2 id=&quot;material-remixer&quot;&gt;&lt;a href=&quot;#material-remixer&quot; class=&quot;headerlink&quot; title=&quot;material-remixer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/material-foundation/material-remixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material-remixer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;material-remixer是一个工具, 利用它可以实时调整产品的UI参数. 目标平台: Android, iOS和Web都能用的工具.&lt;/p&gt;
&lt;h1 id=&quot;News&quot;&gt;&lt;a href=&quot;#News&quot; class=&quot;headerlink&quot; title=&quot;News&quot;&gt;&lt;/a&gt;News&lt;/h1&gt;&lt;h2 id=&quot;ConstraintLayout-beta-2-is-now-available&quot;&gt;&lt;a href=&quot;#ConstraintLayout-beta-2-is-now-available&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout beta 2 is now available&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sites.google.com/a/android.com/tools/recent/constraintlayoutbeta2isnowavailable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout beta 2 is now available&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ConstraintLayout beta 2发布啦, 修改了一些issues并改善了性能.&lt;/p&gt;
&lt;h2 id=&quot;Google-Play-Services-Release-Notes&quot;&gt;&lt;a href=&quot;#Google-Play-Services-Release-Notes&quot; class=&quot;headerlink&quot; title=&quot;Google Play Services Release Notes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/android/guides/releases#october_2016_-_v98&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Play Services Release Notes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Play Service 9.8发布了.&lt;/p&gt;
&lt;h2 id=&quot;Some-new-Firebase-libraries&quot;&gt;&lt;a href=&quot;#Some-new-Firebase-libraries&quot; class=&quot;headerlink&quot; title=&quot;Some new Firebase libraries&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://firebase.googleblog.com/2016/10/start-your-week-off-with-some-new-firebase-libraries.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Some new Firebase libraries&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firebase也发了新版.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-229&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-229&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #229&quot;&gt;&lt;/a&gt;Android Weekly Issue #229&lt;/h1&gt;&lt;p&gt;October 30th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-229&quot;&gt;Android Weekly Issue #229&lt;/a&gt;&lt;br&gt;Android Weekly笔记, 本期内容包括: 性能库Pury的插件化; 一种新的多选设计和实现; 音频播放; Dagger的测试mock方案; ConstraintLayout的链式约束; Mobile Vision API的二维码扫描功能; RxJava的使用缺陷讨论; SOLID原则图解.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Mobile Vision" scheme="http://mengdd.github.io/tags/Mobile-Vision/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Dagger" scheme="http://mengdd.github.io/tags/Dagger/"/>
    
      <category term="Pury" scheme="http://mengdd.github.io/tags/Pury/"/>
    
      <category term="Multiselection" scheme="http://mengdd.github.io/tags/Multiselection/"/>
    
      <category term="Audio" scheme="http://mengdd.github.io/tags/Audio/"/>
    
      <category term="Barcode Detection" scheme="http://mengdd.github.io/tags/Barcode-Detection/"/>
    
      <category term="SOLID" scheme="http://mengdd.github.io/tags/SOLID/"/>
    
  </entry>
  
  <entry>
    <title>用Android Studio开发最常用到的快捷键</title>
    <link href="http://mengdd.github.io/Android/Tools/IDE/2016/10/27/android-studio-shortcuts-used-frequently/"/>
    <id>http://mengdd.github.io/Android/Tools/IDE/2016/10/27/android-studio-shortcuts-used-frequently/</id>
    <published>2016-10-27T14:23:45.000Z</published>
    <updated>2016-10-28T07:09:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Studio常用快捷键&quot;&gt;&lt;a href=&quot;#Android-Studio常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;Android Studio常用快捷键&quot;&gt;&lt;/a&gt;Android Studio常用快捷键&lt;/h1&gt;&lt;p&gt;Android Studio日常开发常用快捷键.&lt;br&gt;快捷键版本: Mac OS X 10.5+&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;搜索查看类&quot;&gt;&lt;a href=&quot;#搜索查看类&quot; class=&quot;headerlink&quot; title=&quot;搜索查看类&quot;&gt;&lt;/a&gt;搜索查看类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索所有文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;double Shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索类文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索符号&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开最近的文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开最近编辑过的文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在文件内搜索&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全文搜索&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示结构, 类中方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳到当前文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从以上查找中途退出&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;发现引用&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F7(显示在下面)/ Opt + Cmd + F7(显示在当前)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查找定义&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + B/ Cmd + 单击, 找到定义后再次点击会显示所有引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;找子类/实现&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;找基类/接口&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;高亮Usages&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + F7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查找Action&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示文件在项目中的位置&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F1, 再加Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制当前文件的路径&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;编辑类&quot;&gt;&lt;a href=&quot;#编辑类&quot; class=&quot;headerlink&quot; title=&quot;编辑类&quot;&gt;&lt;/a&gt;编辑类&lt;/h2&gt;&lt;h3 id=&quot;编辑&quot;&gt;&lt;a href=&quot;#编辑&quot; class=&quot;headerlink&quot; title=&quot;编辑&quot;&gt;&lt;/a&gt;编辑&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;剪切&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;粘贴&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从剪切板粘贴&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制当前行或当前选中块&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;以光标位置向前, 删除一个词&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除一行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;把代码包起来: try-catch等&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查看方法的参数信息&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + P&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;生成&quot;&gt;&lt;a href=&quot;#生成&quot; class=&quot;headerlink&quot; title=&quot;生成&quot;&gt;&lt;/a&gt;生成&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;生成方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;生成未定义的方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Override方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;实现(implement)方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + I&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;自动补全&quot;&gt;&lt;a href=&quot;#自动补全&quot; class=&quot;headerlink&quot; title=&quot;自动补全&quot;&gt;&lt;/a&gt;自动补全&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;加import语句&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Warning信息并采用快捷修复&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;重构&quot;&gt;&lt;a href=&quot;#重构&quot; class=&quot;headerlink&quot; title=&quot;重构&quot;&gt;&lt;/a&gt;重构&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;重命名&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + F6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更改签名(重构方法)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;提取方法M,变量V,字段F,常量C,参数P&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + M,V,F,C,P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;内联&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;选择-移动&quot;&gt;&lt;a href=&quot;#选择-移动&quot; class=&quot;headerlink&quot; title=&quot;选择, 移动&quot;&gt;&lt;/a&gt;选择, 移动&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到某一行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;选中行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + 方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;选中词&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + 上下方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;按词移动光标&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + 左右方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;返回上/下一次光标所在的地方&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + 左右方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动当前行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + 上下方向&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;格式化&quot;&gt;&lt;a href=&quot;#格式化&quot; class=&quot;headerlink&quot; title=&quot;格式化&quot;&gt;&lt;/a&gt;格式化&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;格式化代码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;优化imports&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Opt + O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;行注释&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;块注释&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + /&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;运行调试类&quot;&gt;&lt;a href=&quot;#运行调试类&quot; class=&quot;headerlink&quot; title=&quot;运行调试类&quot;&gt;&lt;/a&gt;运行调试类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行…&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Opt + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调试&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调试…&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Opt + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;设置断点&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;单步执行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跑到光标处&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;看表达式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Resume&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Cmd + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查看所有断点&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Cmd + F8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;测试类&quot;&gt;&lt;a href=&quot;#测试类&quot; class=&quot;headerlink&quot; title=&quot;测试类&quot;&gt;&lt;/a&gt;测试类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;生成或打开测试类&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行测试&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调试测试&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;版本控制类&quot;&gt;&lt;a href=&quot;#版本控制类&quot; class=&quot;headerlink&quot; title=&quot;版本控制类&quot;&gt;&lt;/a&gt;版本控制类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示版本控制窗口&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Diff&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;下一个Diff&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在Diff中打开文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;窗口类&quot;&gt;&lt;a href=&quot;#窗口类&quot; class=&quot;headerlink&quot; title=&quot;窗口类&quot;&gt;&lt;/a&gt;窗口类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Android Monitor&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;代码全屏或退出&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开Preferences&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + ,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开项目结构窗口&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + ;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;快速切换scheme&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + `&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://saulmm.github.io/the-powerful-android-studio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The powerful Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Studio常用快捷键&quot;&gt;&lt;a href=&quot;#Android-Studio常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;Android Studio常用快捷键&quot;&gt;&lt;/a&gt;Android Studio常用快捷键&lt;/h1&gt;&lt;p&gt;Android Studio日常开发常用快捷键.&lt;br&gt;快捷键版本: Mac OS X 10.5+&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Tools" scheme="http://mengdd.github.io/categories/Android/Tools/"/>
    
      <category term="IDE" scheme="http://mengdd.github.io/categories/Android/Tools/IDE/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 228</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/Nougat/Design-Support-Library/2016/10/26/android-weekly-notes-issue-228/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/Nougat/Design-Support-Library/2016/10/26/android-weekly-notes-issue-228/</id>
    <published>2016-10-26T04:00:24.000Z</published>
    <updated>2016-10-26T04:11:58.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-228&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-228&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #228&quot;&gt;&lt;/a&gt;Android Weekly Issue #228&lt;/h1&gt;&lt;p&gt;October 23rd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-228&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #228&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Android 7.1的App Shortcuts; Searchbar的设计讨论; Nougat的Direct Reply; Alarms API讨论; Support Library的BottomNavigationView; MVVM模式; Dagger2的subcomponent实现; Test Rules介绍等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Android-7-1-Static-Shortcut&quot;&gt;&lt;a href=&quot;#Android-7-1-Static-Shortcut&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 Static Shortcut&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@tonyowen/android-7-1-static-shortcut-6c42d81ba11b#.8emk7ssh1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 Static Shortcut&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Exploring-Android-Nougat-7-1-App-Shortcuts&quot;&gt;&lt;a href=&quot;#Exploring-Android-Nougat-7-1-App-Shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Exploring Android Nougat 7.1 App Shortcuts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这两篇文章都在介绍Android 7.1的App Shortcuts.&lt;/p&gt;
&lt;p&gt;本博客相关文章: &lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5996665.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 App Shortcuts使用
&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&quot;Exposing-the-Searchbar&quot;&gt;&lt;a href=&quot;#Exposing-the-Searchbar&quot; class=&quot;headerlink&quot; title=&quot;Exposing the Searchbar&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@alexstyl/https-medium-com-alexstyl-animating-the-toolbar-7a8f1aab39dd#.283nz252o&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exposing the Searchbar&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;比起点击一个search icon, 然后进入搜索屏, 用户更喜欢一个search bar, 然后直接就可以在主屏上进行搜索.&lt;/p&gt;
&lt;p&gt;作者对于他们的应用想到的解决方式就是, 在主屏上放一个search bar,然后 用一个transition, 把主屏和搜索屏(两个Activity)衔接起来, 这样用户在点击search bar之后, 不会感觉到他们打开了一个新屏.&lt;/p&gt;
&lt;p&gt;另一个效果就是, 在点击search bar之后, 当前屏fade away, search bar展开, 在第二屏直接打开键盘, 用户可以进行搜索.&lt;/p&gt;
&lt;p&gt;Code: &lt;a href=&quot;https://github.com/alexstyl/Material-SearchTransition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material-SearchTransition&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Nougat-Direct-Reply&quot;&gt;&lt;a href=&quot;#Nougat-Direct-Reply&quot; class=&quot;headerlink&quot; title=&quot;Nougat - Direct Reply&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/nougat-direct-reply/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nougat - Direct Reply&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Direct Reply是指用户可以直接回复Notification, 而不用打开app.&lt;br&gt;这篇文章作者示例了如何实现在message app中用Direct Reply清除消息和直接回复.&lt;/p&gt;
&lt;h2 id=&quot;Da-Real-Fragmentation-Alarms&quot;&gt;&lt;a href=&quot;#Da-Real-Fragmentation-Alarms&quot; class=&quot;headerlink&quot; title=&quot;Da Real Fragmentation - Alarms&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pguardiola.com/blog/darealfragmentation-alarms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Da Real Fragmentation - Alarms&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者这篇文章先是详细介绍了Alarm的各个选项和使用情形, 以及它的API版本变化.&lt;/p&gt;
&lt;h2 id=&quot;Bottom-Navigation-View-in-the-Design-Support-Library&quot;&gt;&lt;a href=&quot;#Bottom-Navigation-View-in-the-Design-Support-Library&quot; class=&quot;headerlink&quot; title=&quot;Bottom Navigation View in the Design Support Library&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.autsoft.hu/now-you-can-use-the-bottom-navigation-view-in-the-design-support-library/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom Navigation View in the Design Support Library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Design Support Library 25.0.0中, Google发布了Bottom Navigation的官方实现: &lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BottomNavigationView&lt;/a&gt;.&lt;br&gt;这篇文章写了如何使用这个View, 并且最后列出了一些第三方库.&lt;/p&gt;
&lt;h2 id=&quot;Shades-of-MVVM&quot;&gt;&lt;a href=&quot;#Shades-of-MVVM&quot; class=&quot;headerlink&quot; title=&quot;Shades of MVVM&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.bignerdranch.com/blog/shades-of-mvvm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shades of MVVM&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讨论了MVVM模式及它的几种变形.&lt;/p&gt;
&lt;h2 id=&quot;Activities-Subcomponents-Multibinding-in-Dagger-2&quot;&gt;&lt;a href=&quot;#Activities-Subcomponents-Multibinding-in-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Activities Subcomponents Multibinding in Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/azimolabs/activities-subcomponents-multibinding-in-dagger-2-85d6053d6a95#.p9bh8bjoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activities Subcomponents Multibinding in Dagger 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger/releases/tag/dagger-2.7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger-2.7&lt;/a&gt; 添加了&lt;code&gt;@Modules.subcomponents&lt;/code&gt;.&lt;br&gt;本文演示了如何用这个更好地添加子ActivityComponent. 而不用每次都借助AppComponent. 这样做除了解耦之外, 对于测试时很有帮助.&lt;/p&gt;
&lt;p&gt;例子代码: &lt;a href=&quot;https://github.com/frogermcs/Dagger2Recipes-ActivitiesMultibinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2Recipes-ActivitiesMultibinding&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Experimenting-with-TensorFlow-on-Android-Part-1&quot;&gt;&lt;a href=&quot;#Experimenting-with-TensorFlow-on-Android-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Experimenting with TensorFlow on Android Part 1 &quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@mgazar/experimenting-with-tensorflow-on-android-pt-1-362683b31838#.ylwet4d3p&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Experimenting with TensorFlow on Android Part 1 &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow&lt;/a&gt;是一个Machine Intelligence开源库, 主要的用途是数据计算, deep learning等.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bazel.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bazel&lt;/a&gt;是一个build tool, 功能类似于gradle.&lt;/p&gt;
&lt;p&gt;本文讲了如何setup.&lt;/p&gt;
&lt;h2 id=&quot;Understanding-Test-Rules&quot;&gt;&lt;a href=&quot;#Understanding-Test-Rules&quot; class=&quot;headerlink&quot; title=&quot;Understanding Test Rules&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/understanding-test-rules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding Test Rules&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Espresso中的Rule是如何工作的呢?&lt;br&gt;之前有一个文章: &lt;a href=&quot;http://cwd.dhemery.com/2010/12/junit-rules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Rules To Influence JUnit Test Execution&lt;/a&gt;说明JUnit中的Rule是如何工作的.&lt;/p&gt;
&lt;p&gt;然后作者讲了如何自定义一个TestRule.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Sketch-template-for-app-shortcuts&quot;&gt;&lt;a href=&quot;#Sketch-template-for-app-shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Sketch template for app shortcuts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/+RomanNurik/posts/3HMBgjn546j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch template for app shortcuts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了为Android 7.1的app shortcuts功能而准备的sketch模板.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;PageIndicatorView&quot;&gt;&lt;a href=&quot;#PageIndicatorView&quot; class=&quot;headerlink&quot; title=&quot;PageIndicatorView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/romandanylyk/PageIndicatorView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageIndicatorView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Page Indicator, 结合Android ViewPager使用的, 转换时有点点连接的功能.&lt;/p&gt;
&lt;h2 id=&quot;PermissionUtil&quot;&gt;&lt;a href=&quot;#PermissionUtil&quot; class=&quot;headerlink&quot; title=&quot;PermissionUtil&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/kayvannj/PermissionUtil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PermissionUtil&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android 6.0 permission请求的库.&lt;/p&gt;
&lt;h2 id=&quot;DeviceAnimationTestRule&quot;&gt;&lt;a href=&quot;#DeviceAnimationTestRule&quot; class=&quot;headerlink&quot; title=&quot;DeviceAnimationTestRule&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/VictorAlbertos/DeviceAnimationTestRule&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DeviceAnimationTestRule&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个JUnit rule, 用来disable和enable设备动画.&lt;/p&gt;
&lt;h2 id=&quot;DiagonalLayout&quot;&gt;&lt;a href=&quot;#DiagonalLayout&quot; class=&quot;headerlink&quot; title=&quot;DiagonalLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/florent37/DiagonalLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DiagonalLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对角线布局, 感觉怪怪的.&lt;/p&gt;
&lt;h1 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h1&gt;&lt;h2 id=&quot;Android-7-1-Developer-Preview&quot;&gt;&lt;a href=&quot;#Android-7-1-Developer-Preview&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 Developer Preview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/10/android71-dev-preview-available.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 Developer Preview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android 7.1发了Developer Preview啦.&lt;br&gt;官网Overview在这里: &lt;a href=&quot;https://developer.android.com/preview/api-overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 for Developers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ConstraintLayout-beta-1-is-now-available&quot;&gt;&lt;a href=&quot;#ConstraintLayout-beta-1-is-now-available&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout beta 1 is now available&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sites.google.com/a/android.com/tools/recent/constraintlayoutbeta1isnowavailable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout beta 1 is now available&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ConstraintLayout beta 1发布啦.&lt;/p&gt;
&lt;h1 id=&quot;TOOLS&quot;&gt;&lt;a href=&quot;#TOOLS&quot; class=&quot;headerlink&quot; title=&quot;TOOLS&quot;&gt;&lt;/a&gt;TOOLS&lt;/h1&gt;&lt;h2 id=&quot;Learn-You-a-Git&quot;&gt;&lt;a href=&quot;#Learn-You-a-Git&quot; class=&quot;headerlink&quot; title=&quot;Learn You a Git&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://karumi.github.io/learnyougit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn You a Git&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;教你学习Git的工具.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-228&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-228&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #228&quot;&gt;&lt;/a&gt;Android Weekly Issue #228&lt;/h1&gt;&lt;p&gt;October 23rd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-228&quot;&gt;Android Weekly Issue #228&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Android 7.1的App Shortcuts; Searchbar的设计讨论; Nougat的Direct Reply; Alarms API讨论; Support Library的BottomNavigationView; MVVM模式; Dagger2的subcomponent实现; Test Rules介绍等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Nougat/"/>
    
      <category term="Design Support Library" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Nougat/Design-Support-Library/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Android 7" scheme="http://mengdd.github.io/tags/Android-7/"/>
    
      <category term="Shortcuts" scheme="http://mengdd.github.io/tags/Shortcuts/"/>
    
      <category term="Alarm" scheme="http://mengdd.github.io/tags/Alarm/"/>
    
      <category term="BottomNavigationView" scheme="http://mengdd.github.io/tags/BottomNavigationView/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Dagger" scheme="http://mengdd.github.io/tags/Dagger/"/>
    
      <category term="TensorFlow" scheme="http://mengdd.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Android 7.1 App Shortcuts使用</title>
    <link href="http://mengdd.github.io/Android/Nougat/2016/10/25/nougat-app-shortcuts/"/>
    <id>http://mengdd.github.io/Android/Nougat/2016/10/25/nougat-app-shortcuts/</id>
    <published>2016-10-25T06:00:01.000Z</published>
    <updated>2016-10-31T03:30:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-7-1-App-Shortcuts使用&quot;&gt;&lt;a href=&quot;#Android-7-1-App-Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 App Shortcuts使用&quot;&gt;&lt;/a&gt;Android 7.1 App Shortcuts使用&lt;/h1&gt;&lt;p&gt;Android 7.1已经发了预览版, 这里是API Overview: &lt;a href=&quot;https://developer.android.com/preview/api-overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API overview&lt;/a&gt;.&lt;br&gt;其中App Shortcuts是新提供的一种快捷访问方式, 形式为长按应用图标出现的长条.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;br&gt;图来自: &lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击快捷方式可以访问应用功能, 并且这种快捷方式也可以被拖拽到桌面单独放置.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;App-Shortcuts-是什么&quot;&gt;&lt;a href=&quot;#App-Shortcuts-是什么&quot; class=&quot;headerlink&quot; title=&quot;App Shortcuts 是什么&quot;&gt;&lt;/a&gt;App Shortcuts 是什么&lt;/h2&gt;&lt;p&gt;其中App Shortcuts是指在桌面长按app图标而出现的快捷方式, 可以为你的app的关键功能添加更快速的入口而不用先打开app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts-doc.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击快捷方式可以访问应用功能, 并且这种快捷方式也可以被拖拽到桌面单独放置, 变成单独的桌面快捷方式(pinned shortcuts).&lt;/p&gt;
&lt;p&gt;有两种shortcuts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态的: 在xml中定义, 适用于一些通用的动作.&lt;/li&gt;
&lt;li&gt;动态的: 由&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/ShortcutManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShortcutManager&lt;/a&gt;发布, 可以根据用户的行为或者偏好添加, 可以动态更新.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个应用目前最多可以有5个shortcuts(静态 + 动态).&lt;/p&gt;
&lt;p&gt;运行条件:&lt;br&gt;应用添加App Shortcuts是Android 7.1(API 25)的API, 所以只能在Android 7.1的设备上显示, 同时需要launcher支持, 比如Pixel launcher(Pixel设备的默认launcher), Now launcher(Nexus设备上的launcher)现在就支持, 其他launcher也可以提供支持.&lt;/p&gt;
&lt;h2 id=&quot;静态Shortcuts使用&quot;&gt;&lt;a href=&quot;#静态Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;静态Shortcuts使用&quot;&gt;&lt;/a&gt;静态Shortcuts使用&lt;/h2&gt;&lt;p&gt;静态的Shortcuts是写在xml中的, 直到下一次应用升级, 不能被改变.&lt;br&gt;要添加静态shortcuts只需两步:&lt;br&gt;首先, 在应用的Manifest中启动Activity上添加&lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta-data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.app.shortcuts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@xml/shortcuts&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;code&gt;res/xml/&lt;/code&gt;目录下创建&lt;code&gt;shortcuts.xml&lt;/code&gt;文件, 里面包含静态的shortcuts:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shortcuts&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:enabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_check_circle_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutDisabledMessage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_disabled_message&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutId&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutLongLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_long_label_1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutShortLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_short_label_1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.VIEW&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetClass&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.shortcuts.StaticShortcutActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetPackage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:enabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_android_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutDisabledMessage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_disabled_message&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutId&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;static_2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutLongLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_long_label_2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutShortLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_short_label_2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetClass&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.MainActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetPackage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.action.STATIC_SHORTCUT_2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetClass&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.shortcuts.StaticShortcutActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetPackage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shortcuts&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就好了, 这个文件添加了两个shortcuts, 点击都将打开指定的Activity, 本例子中是&lt;code&gt;StaticShortcutActivity&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;用多个Intent构建back-stack&quot;&gt;&lt;a href=&quot;#用多个Intent构建back-stack&quot; class=&quot;headerlink&quot; title=&quot;用多个Intent构建back stack&quot;&gt;&lt;/a&gt;用多个Intent构建back stack&lt;/h3&gt;&lt;p&gt;上面这个文件里添加了两个静态的shortcuts, 第一个关联了一个Activity, 点击shortcut将直接打开这个Activity, 回退的时候回到桌面.&lt;/p&gt;
&lt;p&gt;如果你想要的效果是点击back键回到应用里的某个界面, 那么可以利用多个intents来构建back stack, 比如在第二个shortcut里面, 点击shortcut还是打开目标Activity, 这个指定目标Activity的Intent放在最后, 但是回退会返回到MainActivity, 即之前的那个Intent.&lt;/p&gt;
&lt;h2 id=&quot;动态Shortcuts使用&quot;&gt;&lt;a href=&quot;#动态Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;动态Shortcuts使用&quot;&gt;&lt;/a&gt;动态Shortcuts使用&lt;/h2&gt;&lt;p&gt;动态的shortcuts可以在用户使用app的过程中构建, 更新, 或者删除.&lt;br&gt;使用&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/ShortcutManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShortcutManager&lt;/a&gt;可以对动态shortcuts完成下面几种操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish发布: &lt;code&gt;setDynamicShortcuts()&lt;/code&gt;, &lt;code&gt;addDynamicShortcuts(List)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Update更新: &lt;code&gt;updateShortcuts(List)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Remove删除: &lt;code&gt;removeDynamicShortcuts(List)&lt;/code&gt;, &lt;code&gt;removeAllDynamicShortcuts()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如添加一个动态shortcut:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ShortcutInfo shortcut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;id1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setShortLabel(&lt;span class=&quot;string&quot;&gt;&quot;Web site&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setLongLabel(&lt;span class=&quot;string&quot;&gt;&quot;Open the web site&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setIcon(Icon.createWithResource(context, R.drawable.icon_website))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setIntent(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_VIEW,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   Uri.parse(&lt;span class=&quot;string&quot;&gt;&quot;https://www.mysite.example.com/&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shortcutManager.setDynamicShortcuts(Arrays.asList(shortcut));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击这个shortcut会发出一个打开网页的Intent, 让你选择浏览器, 从而打开网址.&lt;/p&gt;
&lt;h3 id=&quot;多个Intent构建back-stack&quot;&gt;&lt;a href=&quot;#多个Intent构建back-stack&quot; class=&quot;headerlink&quot; title=&quot;多个Intent构建back stack&quot;&gt;&lt;/a&gt;多个Intent构建back stack&lt;/h3&gt;&lt;p&gt;动态的shortcut仍然可以用多个Intent来指定一个back stack, 那么打开目标Activity之后就可以返回到应用中的指定界面而不是回到launcher:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShortcutInfo dynamicShortcut2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;shortcut_dynamic&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setShortLabel(&lt;span class=&quot;string&quot;&gt;&quot;Dynamic Shortcut&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setLongLabel(&lt;span class=&quot;string&quot;&gt;&quot;Open Dynamic shortcut 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setIcon(Icon.createWithResource(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, R.drawable.ic_favorite_border_black_24dp))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setIntents(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// this dynamic shortcut set up a back stack using Intents, when pressing back, will go to MainActivity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// the last Intent is what the shortcut really opened&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent[]&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_MAIN, Uri.EMPTY, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(DynamicShortcutActivity.ACTION_OPEN_DYNAMIC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// intent&#39;s action must be set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;和静态一样, 最后一个Intent对应的是shortcut打开的界面&lt;code&gt;DynamicShortcutActivity&lt;/code&gt;, 前面的都是用来构建back stack, 即back退回到MainActivity.&lt;br&gt;注意这里的Intent必须指定Action, 否则会抛出异常.&lt;/p&gt;
&lt;h2 id=&quot;Shortcuts的个数限制&quot;&gt;&lt;a href=&quot;#Shortcuts的个数限制&quot; class=&quot;headerlink&quot; title=&quot;Shortcuts的个数限制&quot;&gt;&lt;/a&gt;Shortcuts的个数限制&lt;/h2&gt;&lt;p&gt;Shortcuts的总数不能超过5个, 即静态和动态shortcuts加起来总数最多是五个.&lt;br&gt;当我们尝试添加第六个shortcut时, 应用会抛出异常: &lt;code&gt;java.lang.IllegalArgumentException: Max number of dynamic shortcuts exceeded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;虽然总数限制是5个, 但是当我正好有5个(2个静态 + 3个动态)的时候, 长按只显示了4个shortcuts.&lt;br&gt;如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts-demo-screenshot.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文完整代码见: Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloNougat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloNougat&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Shortcuts的次序&quot;&gt;&lt;a href=&quot;#Shortcuts的次序&quot; class=&quot;headerlink&quot; title=&quot;Shortcuts的次序&quot;&gt;&lt;/a&gt;Shortcuts的次序&lt;/h2&gt;&lt;p&gt;当我们有多个Shortcuts之后, 默认它们是按照添加顺序排列的, 即按照添加顺序rank递增.&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;setRank()&lt;/code&gt;来改变长按时它们显示的排序:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@TargetApi&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateDynamicShortcuts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ShortcutInfo webShortcut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;shortcut_blog&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .setRank(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ShortcutInfo dynamicShortcut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;shortcut_dynamic&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .setRank(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the rank value can not be set to negative, otherwise will throw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// java.lang.IllegalArgumentException: Rank cannot be negative or bigger than MAX_RANK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the static shortcuts have the rank 0, so they will always be closest to launcher icon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shortcutManager.updateShortcuts(Arrays.asList(webShortcut, dynamicShortcut));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样更改之后, 原先排在最远端的&lt;code&gt;shortcut_dynamic&lt;/code&gt;被移到了第三个, &lt;code&gt;shortcut_blog&lt;/code&gt;被移到了它的后面.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setRank()&lt;/code&gt;不接受负值, 会抛出异常.&lt;/p&gt;
&lt;p&gt;我们只能改变动态shortcuts的排序, 静态的shortcuts等级为0, 它们是按照xml中写定的先后顺序排的, 所以:&lt;br&gt;&lt;code&gt;静态的shortcuts永远离应用icon最近, 动态shortcuts在其之上排序, rank越大的离应用icon越远.&lt;/code&gt;&lt;br&gt;如果没有指定rank, 则按生成的顺序递增.&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;App Shortcuts的官方文档: &lt;a href=&quot;https://developer.android.com/preview/shortcuts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Shortcuts&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloNougat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloNougat&lt;/a&gt;.&lt;br&gt;近期考虑加入更多Android 7 Nougat特性sample.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-7-1-App-Shortcuts使用&quot;&gt;&lt;a href=&quot;#Android-7-1-App-Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 App Shortcuts使用&quot;&gt;&lt;/a&gt;Android 7.1 App Shortcuts使用&lt;/h1&gt;&lt;p&gt;Android 7.1已经发了预览版, 这里是API Overview: &lt;a href=&quot;https://developer.android.com/preview/api-overview.html&quot;&gt;API overview&lt;/a&gt;.&lt;br&gt;其中App Shortcuts是新提供的一种快捷访问方式, 形式为长按应用图标出现的长条.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;br&gt;图来自: &lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击快捷方式可以访问应用功能, 并且这种快捷方式也可以被拖拽到桌面单独放置.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/categories/Android/Nougat/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Android 7" scheme="http://mengdd.github.io/tags/Android-7/"/>
    
      <category term="Shortcuts" scheme="http://mengdd.github.io/tags/Shortcuts/"/>
    
  </entry>
  
</feed>
