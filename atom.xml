<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meng&#39;s pages</title>
  <subtitle>Android developer and maybe other intersting things.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mengdd.github.io/"/>
  <updated>2016-12-30T07:41:32.000Z</updated>
  <id>http://mengdd.github.io/</id>
  
  <author>
    <name>Dandan Meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Weekly Notes Issue 237</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/12/30/android-weekly-notes-issue-237/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/12/30/android-weekly-notes-issue-237/</id>
    <published>2016-12-30T07:30:25.000Z</published>
    <updated>2016-12-30T07:41:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-237&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-237&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #237&quot;&gt;&lt;/a&gt;Android Weekly Issue #237&lt;/h1&gt;&lt;p&gt;December 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-237&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #237&lt;/a&gt;&lt;br&gt;这是本年的最后一篇issue, 感谢大家.&lt;br&gt;本期内容包括: ConstraintLayout的使用; Android Things的应用; 如何利用第三方库使得Java具有Kotlin的一些新特性; Firebase是如何利用&lt;code&gt;ContentProvider&lt;/code&gt;进行初始化的; Kotlin上的并发处理; 其他还有一些关于程序架构, 代码优化相关的讨论.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Building-interfaces-with-ConstraintLayout&quot;&gt;&lt;a href=&quot;#Building-interfaces-with-ConstraintLayout&quot; class=&quot;headerlink&quot; title=&quot;Building interfaces with ConstraintLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/building-interfaces-with-constraintlayout-3958fa38a9f7#.al6p1anu7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building interfaces with ConstraintLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文介绍&lt;code&gt;ConstraintLayout&lt;/code&gt;的chains和ratios. 另外还提到很多使用&lt;code&gt;ConstraintLayout&lt;/code&gt;的实现细节.&lt;/p&gt;
&lt;p&gt;所谓chains就是几个View之间建立的双向约束.&lt;/p&gt;
&lt;p&gt;ratios是帮助你设置View的宽高比, 它所做的事情和&lt;a href=&quot;https://developer.android.com/reference/android/support/percent/PercentFrameLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PercentFrameLayout&lt;/a&gt;差不多, 但是不用添加额外的ViewGroup.&lt;/p&gt;
&lt;h2 id=&quot;Electronic-Candle-using-Android-Things&quot;&gt;&lt;a href=&quot;#Electronic-Candle-using-Android-Things&quot; class=&quot;headerlink&quot; title=&quot;Electronic Candle using Android Things&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/+DaveSmithDev/posts/4JN7ZaSKxaM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electronic Candle using Android Things&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用ObjectAnimator和Android Things搭建的一个电子蜡烛.&lt;/p&gt;
&lt;h2 id=&quot;ExoPlayer-2-1-What’s-new&quot;&gt;&lt;a href=&quot;#ExoPlayer-2-1-What’s-new&quot; class=&quot;headerlink&quot; title=&quot;ExoPlayer 2.1 - What’s new&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-exoplayer/exoplayer-2-1-whats-new-2832c09fedab#.po64o4uha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer 2.1 - What’s new&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ExoPlayer 2.1有什么新功能.&lt;br&gt;这是他们的&lt;a href=&quot;https://github.com/google/ExoPlayer/blob/release-v2/RELEASENOTES.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Living-Android-without-Kotlin&quot;&gt;&lt;a href=&quot;#Living-Android-without-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Living (Android) without Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/living-android-without-kotlin-db7391a2b170#.7fm956ryk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Living (Android) without Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你因为种种原因不能在项目中使用kotlin, 这篇文章告诉你如何借助于一些工具和库用Java实现Kotlin的一些features.&lt;/p&gt;
&lt;h2 id=&quot;Christmas-Voice-–-Part-1&quot;&gt;&lt;a href=&quot;#Christmas-Voice-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Christmas Voice – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/christmas-voice-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Christmas Voice – Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者发布了一个改变声音的应用, 并且将其开源了: &lt;a href=&quot;https://github.com/StylingAndroid/ChristmasVoice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChristmasVoice&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;How-does-Firebase-initialize-on-Android&quot;&gt;&lt;a href=&quot;#How-does-Firebase-initialize-on-Android&quot; class=&quot;headerlink&quot; title=&quot;How does Firebase initialize on Android?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://firebase.googleblog.com/2016/12/how-does-firebase-initialize-on-android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How does Firebase initialize on Android?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firebase在Android上是如何初始化的?&lt;/p&gt;
&lt;p&gt;很多SDK在初始化的时候会要求应用传入&lt;code&gt;Context&lt;/code&gt;. Firebase简化了这一步骤. 解决方案就是用了&lt;code&gt;ContentProvider&lt;/code&gt;, 既解决了时间问题, 也得到了sdk需要的&lt;code&gt;Context&lt;/code&gt;. 并且不需要应用的开发者添加任何额外的初始化代码.&lt;/p&gt;
&lt;p&gt;选择&lt;code&gt;ContentProvider&lt;/code&gt;主要有两点原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentProvider&lt;/code&gt;初始化早.&lt;br&gt;当一个Android进程启动的时候, 首先会初始化每一个ContentProvider, 然后是Application, 最后是被Intent启动的组件. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在ContentProvider初始化的时候, 就可以拿到Context了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentProvider&lt;/code&gt;可以merge到最终的manifest里.&lt;br&gt;&lt;a href=&quot;https://developer.android.com/studio/build/manifest-merge.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manifest merge&lt;/a&gt;是在build的时候来定义你的应用最终的manifest. 最终的manifest会包含所有依赖的库的manifest中声明的组件.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你也想选择用&lt;code&gt;ContentProvider&lt;/code&gt;来做应用或库的初始化, 请注意authority的唯一性问题和&lt;code&gt;ContentProvider&lt;/code&gt;只在主进程运行的问题.&lt;/p&gt;
&lt;h2 id=&quot;Seductive-Code&quot;&gt;&lt;a href=&quot;#Seductive-Code&quot; class=&quot;headerlink&quot; title=&quot;Seductive Code&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://publicobject.com/2016/12/19/seductive-code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Seductive Code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当我们在改善代码可读性的时候, 很有可能会影响到性能和可维护性. &lt;/p&gt;
&lt;p&gt;作者举例说明了他在实际编程中遇到的几个问题.&lt;/p&gt;
&lt;h2 id=&quot;Testing-Android-Things-–-Unit-amp-Vendor-tests&quot;&gt;&lt;a href=&quot;#Testing-Android-Things-–-Unit-amp-Vendor-tests&quot; class=&quot;headerlink&quot; title=&quot;Testing Android Things – Unit &amp;amp; Vendor tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.blundellapps.co.uk/testing-android-things-iot-meets-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing Android Things – Unit &amp;amp; Vendor tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何开发Android Things应用, 才能让测试更加容易. 本文以一个很小的LED灯闪烁程序为例.&lt;/p&gt;
&lt;h2 id=&quot;Engineering-the-Architecture-Behind-Uber’s-New-Rider-App&quot;&gt;&lt;a href=&quot;#Engineering-the-Architecture-Behind-Uber’s-New-Rider-App&quot; class=&quot;headerlink&quot; title=&quot;Engineering the Architecture Behind Uber’s New Rider App&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://eng.uber.com/new-rider-app/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Engineering the Architecture Behind Uber’s New Rider App&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Uber团队重新打造了他们的ride app, 提出了一个新的构架模式: Riblets.&lt;/p&gt;
&lt;p&gt;关于架构的选型, 已有的类型可以查看这个&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.tmcojtwgg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS Architecture Patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Rebuilding-the-Buffer-Android-Composer&quot;&gt;&lt;a href=&quot;#Rebuilding-the-Buffer-Android-Composer&quot; class=&quot;headerlink&quot; title=&quot;Rebuilding the Buffer Android Composer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://overflow.buffer.com/2016/12/22/rebuild-android-composer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rebuilding the Buffer Android Composer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者重构了自己应用的代码, 应用了clean architecture, 本文讲述了其过程.&lt;/p&gt;
&lt;h2 id=&quot;Papercut&quot;&gt;&lt;a href=&quot;#Papercut&quot; class=&quot;headerlink&quot; title=&quot;Papercut&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://stu.ie/?page_id=3133&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papercut&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Stuie/papercut&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papercut&lt;/a&gt;是一个库, 用来标记那些我们觉得需要删除或者需要重构的代码.&lt;/p&gt;
&lt;h2 id=&quot;Concurrency-Primitives-in-Kotlin&quot;&gt;&lt;a href=&quot;#Concurrency-Primitives-in-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Concurrency Primitives in Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/concurrency-primitives-in-kotlin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency Primitives in Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者最近看了一本书, 讲Android的并发, 觉得很好, 想要用Kotlin来重写书中的例子, 结果发现:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin中没有&lt;code&gt;synchronized&lt;/code&gt;关键字.&lt;/li&gt;
&lt;li&gt;Kotlin中没有&lt;code&gt;volatile&lt;/code&gt;关键字.&lt;/li&gt;
&lt;li&gt;Kotlin中的&lt;code&gt;Any&lt;/code&gt;, 类比于Java中的&lt;code&gt;Object&lt;/code&gt;, 但是却没有&lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt;和&lt;code&gt;notifyAll()&lt;/code&gt;方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以Kotlin中的并发是怎么处理呢? 这里有个问题: &lt;a href=&quot;https://discuss.kotlinlang.org/t/concurrency-in-kotlin/858&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin forum&lt;/a&gt;, Kotlin语言的开发人员表示这些应该由库来处理, 而不是语言本身.&lt;/p&gt;
&lt;p&gt;尽管Kotlin不支持, 但是它还是提供了一些底层的并发工具.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建线程. 因为Kotlin可以调用Java代码, 所以仍然可以通过两种方法来创建线程.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Synchronized&lt;/code&gt;注解和&lt;code&gt;synchronized()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Volatile&lt;/code&gt;注解.&lt;/li&gt;
&lt;li&gt;没有&lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt;和&lt;code&gt;notifyAll()&lt;/code&gt;方法, 但是可以把&lt;code&gt;Object&lt;/code&gt;对象作为锁, 然后调用锁的这些方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/35520583/why-there-are-no-concurrency-keywords-in-kotlin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;上有一个相关问题, 答案很不错, 列了处理并发的一些有用的库.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;KataScreenshotAndroid&quot;&gt;&lt;a href=&quot;#KataScreenshotAndroid&quot; class=&quot;headerlink&quot; title=&quot;KataScreenshotAndroid&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Karumi/KataScreenshotAndroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KataScreenshotAndroid&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Screen Kata应用, 用来练习做UI测试的.&lt;/p&gt;
&lt;h2 id=&quot;Papercut-1&quot;&gt;&lt;a href=&quot;#Papercut-1&quot; class=&quot;headerlink&quot; title=&quot;Papercut&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Stuie/papercut&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Papercut&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个用来标记需要重构或者移除代码的工具库.&lt;/p&gt;
&lt;h2 id=&quot;Squint&quot;&gt;&lt;a href=&quot;#Squint&quot; class=&quot;headerlink&quot; title=&quot;Squint&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/IntruderShanky/Squint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Squint&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个可以自定义的对角线切割View.&lt;/p&gt;
&lt;h2 id=&quot;Colorful&quot;&gt;&lt;a href=&quot;#Colorful&quot; class=&quot;headerlink&quot; title=&quot;Colorful&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/garretyoder/Colorful&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Colorful&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个动态的主题库, 让你可以方便地修改应用的颜色.&lt;/p&gt;
&lt;h2 id=&quot;scytale&quot;&gt;&lt;a href=&quot;#scytale&quot; class=&quot;headerlink&quot; title=&quot;scytale&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yakivmospan/scytale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scytale&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包装了JCA API和AndroidKeyStore API, 让创建, 加密和管理任何Android API的keys变得更容易.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-237&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-237&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #237&quot;&gt;&lt;/a&gt;Android Weekly Issue #237&lt;/h1&gt;&lt;p&gt;December 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-237&quot;&gt;Android Weekly Issue #237&lt;/a&gt;&lt;br&gt;这是本年的最后一篇issue, 感谢大家.&lt;br&gt;本期内容包括: ConstraintLayout的使用; Android Things的应用; 如何利用第三方库使得Java具有Kotlin的一些新特性; Firebase是如何利用&lt;code&gt;ContentProvider&lt;/code&gt;进行初始化的; Kotlin上的并发处理; 其他还有一些关于程序架构, 代码优化相关的讨论.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="ExoPlayer" scheme="http://mengdd.github.io/tags/ExoPlayer/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/tags/Java/"/>
    
      <category term="Android Things" scheme="http://mengdd.github.io/tags/Android-Things/"/>
    
      <category term="ContentProvider" scheme="http://mengdd.github.io/tags/ContentProvider/"/>
    
      <category term="Architecture" scheme="http://mengdd.github.io/tags/Architecture/"/>
    
      <category term="Concurrency" scheme="http://mengdd.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 236</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/Design/2016/12/21/android-weekly-notes-issue-236/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/Design/2016/12/21/android-weekly-notes-issue-236/</id>
    <published>2016-12-21T02:27:39.000Z</published>
    <updated>2016-12-21T02:42:46.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-236&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-236&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #236&quot;&gt;&lt;/a&gt;Android Weekly Issue #236&lt;/h1&gt;&lt;p&gt;December 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-236&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的物联网平台Android Things; FileProvider; Android Studio的Layout Preview使用; Retrofit2使用; Google Sign-In和SmartLock; 把敏感信息放入NDK的解决方式.&lt;/p&gt;
&lt;p&gt;设计部分讨论了调色板的灵感来源和几个开发app的时候应该注意的问题.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Getting-started-with-Android-Things&quot;&gt;&lt;a href=&quot;#Getting-started-with-Android-Things&quot; class=&quot;headerlink&quot; title=&quot;Getting started with Android Things&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@alexsimo/getting-started-with-android-things-b73be3295b42#.c1arra4ps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting started with Android Things&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Internet of Things (物联网, IoT), 是互联网, 传统电信网等咨询承载体, 让所有能行使独立功能的物品之间实现互联互通的网络.&lt;/p&gt;
&lt;p&gt;2016年12月, Google发布了Android Things的开发者预览版, 这是一个专门为IoT设备定制的Android系统.&lt;/p&gt;
&lt;p&gt;本篇文章一步一步地教你如何写一个IoT的基本程序, 跑在Raspberry Pi 3 Model B上.&lt;/p&gt;
&lt;h2 id=&quot;FileProvider&quot;&gt;&lt;a href=&quot;#FileProvider&quot; class=&quot;headerlink&quot; title=&quot;FileProvider&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/fileprovider/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FileProvider&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上次我们提到了用&lt;code&gt;DownloadManager&lt;/code&gt;下载的东西可以和其他应用分享, 那么如果我们下载的时候没有用&lt;code&gt;DownloadManager&lt;/code&gt;呢? &lt;/p&gt;
&lt;p&gt;比较常见的情况是我们的应用需要分享内容到其他应用, 或者是文件的类型是我们应用不能自己处理的, 需要找一个支持这种文件类型的其他应用来帮我们打开它.&lt;/p&gt;
&lt;p&gt;怎么解决呢? 答案是用&lt;code&gt;FileProvider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;上一期有一篇文章也说过Android 7开始废弃了”file://“, 解决方案就是用&lt;code&gt;FileProvider&lt;/code&gt;, 所以实现是一样的, 这里就不重复了.&lt;/p&gt;
&lt;h2 id=&quot;Working-with-the-Layout-Preview&quot;&gt;&lt;a href=&quot;#Working-with-the-Layout-Preview&quot; class=&quot;headerlink&quot; title=&quot;Working with the Layout Preview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/layout-preview-101/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Working with the Layout Preview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Layout Preview向你展示了你的xml将如何在设备上显示. 你可以用它查看布局在不同的配置下如何显示, 比如可以切换横竖屏, 语言等等.&lt;/p&gt;
&lt;p&gt;但是它同样也有一些问题:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issue #1: Preview显示空白&lt;/strong&gt;&lt;br&gt;当你的布局是由动态获取的数据来填充的, preview不知道如何填充, 所以你看到的是空白的. &lt;/p&gt;
&lt;p&gt;一个好的practice是使用&lt;code&gt;tools&lt;/code&gt;命名空间, 指定一些只在preview阶段使用的属性. 这样你就可以指定一些text或src用来预览.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #2: 使得动态内容在Preview可见&lt;/strong&gt;&lt;br&gt;如果你的图片是动态资源, 你也可以设置一些最大宽高给parent view, 以防真实的图片比期待的大太多或者是比例不对. 你可以设置&lt;code&gt;tools:layout_height&lt;/code&gt; 和&lt;code&gt;tools:layout_width&lt;/code&gt;, 还有&lt;code&gt;tools:background&lt;/code&gt;在preview中查看view占多大.&lt;/p&gt;
&lt;p&gt;本文还推荐了另一个阅读资料: &lt;a href=&quot;https://tips.seebrock3r.me/tools-of-the-trade-part-1-f3c1c73de898#.e038jlqyy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tools of the trade — Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #3: 修复坏掉的Previews&lt;/strong&gt;&lt;br&gt;当你创建一个自定义View的时候, 你需要确保你的View不需要任何外部依赖即可被实例化, 否则Preview可能看不到你的View. 因为Preview不是运行在你的app上的, 它只是运行在IDE的JVM上, 所以View framework之外的东西它是访问不到的.&lt;/p&gt;
&lt;p&gt;解决办法是在你的自定义View中做一些特殊处理, 比如把依赖注入放在&lt;code&gt;!isInEditMode()&lt;/code&gt;里, 或者用&lt;code&gt;tools:&lt;/code&gt;命名空间加一些默认值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #4: &lt;merge&gt; 布局没有被渲染&lt;/merge&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;merge&gt;里面的控件在preview里会被重叠在一起.&lt;br&gt;解决的办法是使用&lt;code&gt;tools:showIn=&amp;quot;layout&amp;quot;&lt;/code&gt;, 指定&lt;merge&gt;具体是显示在哪个布局里. 如果你有多个布局都用到这个&lt;merge&gt;, 你可以选一个.&lt;/merge&gt;&lt;/merge&gt;&lt;/merge&gt;&lt;/p&gt;
&lt;p&gt;从Android Studio 2.2开始, 你可以使用&lt;code&gt;tools:parentTag&lt;/code&gt;来指定parent的类型, 比如&lt;code&gt;tools:parentTag=&amp;quot;LinearLayout&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip #5: 在Preview中显示隐藏的View&lt;/strong&gt;&lt;br&gt;如果你在layout中把view的visibility设置为gone, 那么它是不会在Preview中显示的. &lt;/p&gt;
&lt;p&gt;解决办法: 使用&lt;code&gt;tools:visibility=&amp;quot;visible&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Android-Things-Tutorials&quot;&gt;&lt;a href=&quot;#Android-Things-Tutorials&quot; class=&quot;headerlink&quot; title=&quot;Android Things Tutorials&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.mindorks.com/android-things-tutorials-getting-started-8464c11009ff#.dhacx13kq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things Tutorials&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Things教程.&lt;/p&gt;
&lt;h2 id=&quot;Get-Started-With-Retrofit-2-HTTP-Client&quot;&gt;&lt;a href=&quot;#Get-Started-With-Retrofit-2-HTTP-Client&quot; class=&quot;headerlink&quot; title=&quot;Get Started With Retrofit 2 HTTP Client&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/getting-started-with-retrofit-2--cms-27792&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get Started With Retrofit 2 HTTP Client&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本篇文章以实例讲述如何使用Retrofit, 虽然都是基础内容, 但讲解很详细.&lt;/p&gt;
&lt;h2 id=&quot;Improving-sign-in-experience-with-Google-Sign-In-and-SmartLock&quot;&gt;&lt;a href=&quot;#Improving-sign-in-experience-with-Google-Sign-In-and-SmartLock&quot; class=&quot;headerlink&quot; title=&quot;Improving sign-in experience with Google Sign-In and SmartLock&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@p.tournaris/android-improving-sign-in-experience-with-google-sign-in-and-smartlock-f0bfd789602a#.dqh1aptm4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improving sign-in experience with Google Sign-In and SmartLock&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google提供了两种方式来帮助我们改善用户的登录体验:&lt;br&gt;Google Sign-In(之前被称为Google+ Sign-In)和SmartLock.&lt;/p&gt;
&lt;p&gt;这篇文章举例解释了Google Sign-In和SmartLock的实现.&lt;/p&gt;
&lt;p&gt;Google Sign-In的部分比较简单.&lt;/p&gt;
&lt;p&gt;SmartLock让我们可以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让用户保存credentials.&lt;/li&gt;
&lt;li&gt;在打开应用的时候请求credentials.&lt;/li&gt;
&lt;li&gt;使用存在Chrome上的credentials, 这样我们的网站和app就可以共享credentials.&lt;/li&gt;
&lt;li&gt;显示Email提示, 让用户选择email地址.&lt;/li&gt;
&lt;li&gt;所有的这些信息都保存在Google的server里, 用户可以保存或删除.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Demo app: &lt;a href=&quot;https://github.com/charbgr/AuthManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;charbgr/AuthManager&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Storing-your-secure-information-in-the-NDK&quot;&gt;&lt;a href=&quot;#Storing-your-secure-information-in-the-NDK&quot; class=&quot;headerlink&quot; title=&quot;Storing your secure information in the NDK&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.androidsecurity.info/2016/12/15/storing-your-secure-information-in-the-ndk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Storing your secure information in the NDK&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章说敏感信息放在Java代码里不安全, 很容易被人反编译查看出来, 如果放在NDK里面就好一些, 你打开查看的只能是二进制文件, 很难找到.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Introduction-to-Natural-palettes&quot;&gt;&lt;a href=&quot;#Introduction-to-Natural-palettes&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Natural palettes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stories.uplabs.com/introduction-to-natural-palettes-9503bfeee3d5#.z9y0xf7zc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Natural palettes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者从大自然的图像中得到颜色组合的灵感.&lt;br&gt;文章中举了几个例子, 如何用相关的照片找到相关主题的调色板.&lt;/p&gt;
&lt;p&gt;另推荐一个网站: &lt;a href=&quot;http://color.romanuke.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IN COLOR&lt;br&gt; BALANCE&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Make-your-Android-app-look-better&quot;&gt;&lt;a href=&quot;#Make-your-Android-app-look-better&quot; class=&quot;headerlink&quot; title=&quot;Make your Android app look better&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/make-your-android-app-look-less-shitty-5dd63c4938f1#.4q5ro3ty8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make your Android app look better&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;让你的App看起来更好的几点建议:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用同一个图标集的图标.&lt;br&gt;(这里推荐了一些图片工具和网站.)&lt;/li&gt;
&lt;li&gt;使用Material Design设计的keylines, 使用固定的格子大小.&lt;/li&gt;
&lt;li&gt;使用颜色的时候小心一些. (这里推荐了一些调色板网站)&lt;/li&gt;
&lt;li&gt;选择字体要明智一些.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Material-Components&quot;&gt;&lt;a href=&quot;#Material-Components&quot; class=&quot;headerlink&quot; title=&quot;Material Components&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/material-components&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Components&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;模块化和可定制的Material Design UI组件. Android, iOS, Web.&lt;/p&gt;
&lt;h2 id=&quot;Android-oss-from-Kickstarter&quot;&gt;&lt;a href=&quot;#Android-oss-from-Kickstarter&quot; class=&quot;headerlink&quot; title=&quot;Android-oss from Kickstarter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/kickstarter/android-oss&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-oss from Kickstarter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kickstarter开源了他们的Android应用.&lt;/p&gt;
&lt;h2 id=&quot;stencil&quot;&gt;&lt;a href=&quot;#stencil&quot; class=&quot;headerlink&quot; title=&quot;stencil&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/thoughtbot/stencil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stencil&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个kotlin写的Android库, 实现一种文字路径的动画.&lt;/p&gt;
&lt;h2 id=&quot;AuthManager&quot;&gt;&lt;a href=&quot;#AuthManager&quot; class=&quot;headerlink&quot; title=&quot;AuthManager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/charbgr/AuthManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AuthManager&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包装了Google Sign-In和SmartLock的Manager.&lt;/p&gt;
&lt;h2 id=&quot;FolioReader-Android&quot;&gt;&lt;a href=&quot;#FolioReader-Android&quot; class=&quot;headerlink&quot; title=&quot;FolioReader-Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/FolioReader/FolioReader-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FolioReader-Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个ePub阅读器和解析框架.&lt;/p&gt;
&lt;h2 id=&quot;BufferTextInputLayout&quot;&gt;&lt;a href=&quot;#BufferTextInputLayout&quot; class=&quot;headerlink&quot; title=&quot;BufferTextInputLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/bufferapp/BufferTextInputLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BufferTextInputLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对Support Library中的&lt;code&gt;TextInputLayout&lt;/code&gt;的扩展, 增加了字数统计.&lt;/p&gt;
&lt;h2 id=&quot;TextLayoutBuilder&quot;&gt;&lt;a href=&quot;#TextLayoutBuilder&quot; class=&quot;headerlink&quot; title=&quot;TextLayoutBuilder&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://facebookincubator.github.io/TextLayoutBuilder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextLayoutBuilder&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Builder模式来配置创建一个Layout的属性.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-236&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-236&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #236&quot;&gt;&lt;/a&gt;Android Weekly Issue #236&lt;/h1&gt;&lt;p&gt;December 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-236&quot;&gt;Android Weekly Issue #236&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的物联网平台Android Things; FileProvider; Android Studio的Layout Preview使用; Retrofit2使用; Google Sign-In和SmartLock; 把敏感信息放入NDK的解决方式.&lt;/p&gt;
&lt;p&gt;设计部分讨论了调色板的灵感来源和几个开发app的时候应该注意的问题.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="Design" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Design/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Security" scheme="http://mengdd.github.io/tags/Security/"/>
    
      <category term="Design" scheme="http://mengdd.github.io/tags/Design/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="Android Things" scheme="http://mengdd.github.io/tags/Android-Things/"/>
    
      <category term="IoT" scheme="http://mengdd.github.io/tags/IoT/"/>
    
      <category term="FileProvider" scheme="http://mengdd.github.io/tags/FileProvider/"/>
    
      <category term="IDE" scheme="http://mengdd.github.io/tags/IDE/"/>
    
      <category term="Retrofit2" scheme="http://mengdd.github.io/tags/Retrofit2/"/>
    
      <category term="Sign In" scheme="http://mengdd.github.io/tags/Sign-In/"/>
    
      <category term="SmartLock" scheme="http://mengdd.github.io/tags/SmartLock/"/>
    
      <category term="NDK" scheme="http://mengdd.github.io/tags/NDK/"/>
    
      <category term="Color" scheme="http://mengdd.github.io/tags/Color/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 235</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/12/16/android-weekly-notes-issue-235/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/12/16/android-weekly-notes-issue-235/</id>
    <published>2016-12-16T06:14:34.000Z</published>
    <updated>2016-12-16T06:40:43.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-235&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-235&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #235&quot;&gt;&lt;/a&gt;Android Weekly Issue #235&lt;/h1&gt;&lt;p&gt;December 11th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-235&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #235&lt;/a&gt;&lt;br&gt;本期内容包括: 开发一个自定义View并发布为开源库的完整流程介绍; 用&lt;code&gt;AnimatedVectorDrawable&lt;/code&gt;实现的动画; 什么样的程序是可测试的; &lt;code&gt;DownloadManager&lt;/code&gt;介绍; Okhttp的重试; Android 7取消了&lt;code&gt;file://&lt;/code&gt;; Android Studio即将推出的build cache功能; 支持离线模式的app构架; 如何写自定义的lint规则; Epoxy, 一个处理复杂RecyclerView屏的库; &lt;code&gt;FragmentPagerAdapter&lt;/code&gt;和&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;的比较等. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Make-an-android-custom-view-publish-and-open-source&quot;&gt;&lt;a href=&quot;#Make-an-android-custom-view-publish-and-open-source&quot; class=&quot;headerlink&quot; title=&quot;Make an android custom view, publish and open source &quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/dualcores-studio/make-an-android-custom-view-publish-and-open-source-99a3d86df228#.zc8s14lek&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make an android custom view, publish and open source &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者开发了一个环形的SeekBar, 并把它作为一个库发布到了JCenter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者首先讲了自定义View的实现&lt;/strong&gt;:&lt;br&gt;首先是关于View生命周期的介绍, 在写自定义View的时候有几个关键的生命周期回调需要处理:&lt;br&gt;&lt;img src=&quot;/images/view-lifecycle-diagram-lite-version.png&quot; alt=&quot;view-lifecycle-diagram-lite-version&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者实现的几个关键步骤讲解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义属性并获取.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onMeasure()&lt;/code&gt;中控制尺寸.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onDraw()&lt;/code&gt;中绘制: 避免在&lt;code&gt;onDraw()&lt;/code&gt;中分配内存; 用&lt;code&gt;invalidate()&lt;/code&gt;方法来激发重绘.&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onTouchEvent()&lt;/code&gt;处理用户手势. 在他的环形SeekBar的实现里, 这里涉及到了点击坐标到角度的转换. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;将自定义View库开源到Github&lt;/strong&gt;:&lt;br&gt;开源到Github有个好的README很重要, 这里有几个tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供截图, Gif或者Video.&lt;/li&gt;
&lt;li&gt;提供安装/使用说明.&lt;br&gt;作者自己的库: &lt;a href=&quot;https://github.com/enginebai/SwagPoints&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwagPoints&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;发布库&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去&lt;a href=&quot;https://bintray.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JFrog Bintray&lt;/a&gt;注册.&lt;/li&gt;
&lt;li&gt;创建repository, package, 和版本号.&lt;/li&gt;
&lt;li&gt;生成并上传, 用了&lt;a href=&quot;https://github.com/blundell/release-android-library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;添加到Jcenter.&lt;/li&gt;
&lt;li&gt;被接受之后收到邮件, 就可以使用了.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Animation-Jump-through&quot;&gt;&lt;a href=&quot;#Animation-Jump-through&quot; class=&quot;headerlink&quot; title=&quot;Animation: Jump-through&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/animation-jump-through-861f4f5b3de4#.k238d5tw2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animation: Jump-through&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;AnimatedVectorDrawable&lt;/code&gt;实现的一个很fancy的位置标志动画.&lt;/p&gt;
&lt;h2 id=&quot;What-makes-Android-Apps-Testable&quot;&gt;&lt;a href=&quot;#What-makes-Android-Apps-Testable&quot; class=&quot;headerlink&quot; title=&quot;What makes Android Apps Testable&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.philosophicalhacker.com/post/what-makes-android-apps-testable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What makes Android Apps Testable&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果程序的架构不适合测试, 那么硬要写一些测试很可能就会面临这样的局面: 要么就是发现没法写测试, 要么就是为了写测试而破坏了代码, 做了一些奇怪的事情.&lt;/p&gt;
&lt;p&gt;那么到底是什么样的程序才是适合写测试, 或者是可测试的呢?&lt;/p&gt;
&lt;p&gt;有一个有趣的定义是seam(接缝), 在接缝处你可以改变程序的行为, 而不用编辑当前程序. 如果程序没有接缝, 你将无法设置测试的初始条件和验证测试结果.&lt;/p&gt;
&lt;p&gt;本文中举了一个实际的例子, 开始的时候程序没有seam, 所以导致无法测试, 后来把静态方法改为实例的方法之后, 我们就可以通过Mockito来模拟行为, 设置条件, 最后通过验证某一方法的调用与否来进行验证.&lt;/p&gt;
&lt;h2 id=&quot;DownloadManager-–-Part-3&quot;&gt;&lt;a href=&quot;#DownloadManager-–-Part-3&quot; class=&quot;headerlink&quot; title=&quot;DownloadManager – Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/downloadmanager-part-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DownloadManager – Part 3&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;DownloadManager&lt;/code&gt;来处理下载.&lt;br&gt;首先它在设备上有自己的UI, 还有notification, 还有Downloads app能让用户管理下载文件.&lt;/p&gt;
&lt;p&gt; 我们可以查询到文件的一些信息, 比如MIME type, 文件尺寸, 下载状态等.&lt;/p&gt;
&lt;p&gt; 我们还可以用&lt;code&gt;getUriForDownloadedFile()&lt;/code&gt;方法来获取一个URI, 配合MIME type, 发送Intent, 来打开一个相关的查看程序.&lt;/p&gt;
&lt;p&gt; 关于储存文件的合适地点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件小, 仅app自己使用 -&amp;gt; 私有数据区域(默认行为).&lt;/li&gt;
&lt;li&gt;文件大, 仅app自己使用 -&amp;gt; 外部存储的私有数据区域(不需要权限). &lt;code&gt;setDestinationInExternalFilesDir()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;文件需要被别的应用访问 -&amp;gt; 外部存储的共有区域, 需要&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;权限. &lt;code&gt;setDestinationInExternalPublicDir()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;OkHttp-is-quietly-retrying-requests-Is-your-API-ready&quot;&gt;&lt;a href=&quot;#OkHttp-is-quietly-retrying-requests-Is-your-API-ready&quot; class=&quot;headerlink&quot; title=&quot;OkHttp is quietly retrying requests. Is your API ready?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/inloop/okhttp-is-quietly-retrying-requests-is-your-api-ready-19489ef35ace#.ldxyyly7t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp is quietly retrying requests. Is your API ready?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在网路较慢或不稳定的时候, OkHttp有可能会重复发送请求, 直到成功. &lt;/p&gt;
&lt;p&gt;这个重试的逻辑是通过&lt;a href=&quot;https://github.com/square/okhttp/blob/07309c1c7d9e296014268ebd155ebf7ef8679f6c/okhttp/src/main/java/okhttp3/internal/http/RetryAndFollowUpInterceptor.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RetryAndFollowUpInterceptor.java&lt;/a&gt;实现的.&lt;/p&gt;
&lt;p&gt;那么, 我们可以关掉这个重试行为吗? 有一些issues就在讨论这个问题: &lt;a href=&quot;https://github.com/square/okhttp/issues/1043&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue # 1043&lt;/a&gt;. 后来有两个pull requests:  &lt;a href=&quot;https://github.com/square/okhttp/pull/1259&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR #1259&lt;/a&gt;和&lt;a href=&quot;https://github.com/square/okhttp/pull/2479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR #2479&lt;/a&gt;改进了这个问题, 减少(但并没有消除)了不必要的retry请求.&lt;/p&gt;
&lt;p&gt;全局关闭重试行为: &lt;code&gt;OkHttpClient.Builder .retryOnConnectionFailure()&lt;/code&gt;设置为false. 但是注意这样是很粗暴并具有破坏性的, 消除了retry逻辑带来的好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果Url有多个IP, 失败了一个还可以试另一个.&lt;/li&gt;
&lt;li&gt;连接池中的连接偶尔会time out, 减少这种意外导致的后果.&lt;/li&gt;
&lt;li&gt;可以顺次查找多个代理, 如果都失败了再转向直接连接.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解决真正的问题&lt;/strong&gt;: 关闭静默重试在某些情形下有帮助, 但是其实它隐藏了真正的问题, 就是你的API是否是幂等的&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;idempotent&lt;/a&gt;. server端可以根据客户端的GUID来检测重复, 这样server就不会多次执行操作, 会通知发送者.&lt;/p&gt;
&lt;h2 id=&quot;File-scheme-is-now-not-allowed-with-Intent-on-N&quot;&gt;&lt;a href=&quot;#File-scheme-is-now-not-allowed-with-Intent-on-N&quot; class=&quot;headerlink&quot; title=&quot;File scheme is now not allowed with Intent on N&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;File scheme is now not allowed with Intent on N&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android N (Nougat, API 24)开始, 不再允许发送&lt;code&gt;file://&lt;/code&gt;的Intent, 将会直接抛出&lt;code&gt;FileUriExposedException&lt;/code&gt;异常.&lt;/p&gt;
&lt;p&gt;所以当你把&lt;code&gt;targetSdkVersion&lt;/code&gt;改为24之后, 你必须要确保你修复了这些问题再发布.&lt;/p&gt;
&lt;p&gt;解决方案是什么呢? 用&lt;code&gt;content://&lt;/code&gt;, 结合&lt;code&gt;FileProvider&lt;/code&gt;:&lt;br&gt;首先在manifest里面声明:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;provider&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.support.v4.content.FileProvider&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:authorities&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;applicationId&amp;#125;.provider&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:exported&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:grantUriPermissions&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta-data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.support.FILE_PROVIDER_PATHS&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@xml/provider_paths&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;res\xml\provider_paths.xml&lt;/code&gt;文件里指明路径:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;external-path&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;external_files&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;paths&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后, 把&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Uri photoURI = Uri.fromFile(createImageFile());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改为&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Uri photoURI = FileProvider.getUriForFile(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BuildConfig.APPLICATION_ID + &lt;span class=&quot;string&quot;&gt;&quot;.provider&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        createImageFile());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后放在Intent里发送就好了.&lt;/p&gt;
&lt;p&gt;注意, 如果你的&lt;code&gt;targetSdkVersion&lt;/code&gt;还没有更新到24, 那么即便是在Nougat的手机上&lt;code&gt;file://&lt;/code&gt;也仍然是能正常使用的.&lt;/p&gt;
&lt;h2 id=&quot;Use-Android-Studio-Gradle-Build-Cache-for-faster-builds&quot;&gt;&lt;a href=&quot;#Use-Android-Studio-Gradle-Build-Cache-for-faster-builds&quot; class=&quot;headerlink&quot; title=&quot;Use Android Studio Gradle Build Cache for faster builds&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://zeroturnaround.com/rebellabs/using-build-cache-in-android-studio-makes-gradle-build-faster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Use Android Studio Gradle Build Cache for faster builds&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Studio当前的最新版是2.3 Canary 2. 有一些新的改进, 但是其中最吸引人的是这个&lt;a href=&quot;http://tools.android.com/tech-docs/build-cache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build cache&lt;/a&gt;. 它会使你的clean build更快.&lt;/p&gt;
&lt;p&gt;本文后面解析了build cache的工作原理.&lt;/p&gt;
&lt;h2 id=&quot;Offline-App-Architecture-build-for-the-Next-Billion&quot;&gt;&lt;a href=&quot;#Offline-App-Architecture-build-for-the-Next-Billion&quot; class=&quot;headerlink&quot; title=&quot;Offline App Architecture, build for the Next Billion&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/so-you-want-to-develop-for-the-next-billion-9eb072c26bc8#.1zklimr3o&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Offline App Architecture, build for the Next Billion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个好的应用应该在网络不好甚至离线的时候仍然可以使用, 我们应该做些什么呢?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定连接状况. 可以使用这个&lt;a href=&quot;https://github.com/facebook/network-connection-class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;network-connection-class
&lt;/a&gt;. 如果你使用的是Okhttp, 可以加一个Intercepter来进行采样.&lt;/li&gt;
&lt;li&gt;有效地缓存. 从网络取数据很慢并且昂贵, 所以有效地利用之前取到的数据是很关键的优化. (Cache-Control, Etag).&lt;/li&gt;
&lt;li&gt;在本地操作, 在全局同步. 等网络请求的时候可以先显示本地数据, 而不是loading.&lt;/li&gt;
&lt;li&gt;有效地处理线程.&lt;/li&gt;
&lt;li&gt;优化图片. 网络不好的时候先用RGB_565, 等网络变好了再取高质量图片.&lt;/li&gt;
&lt;li&gt;使用大Cookie. 尽量一次传输更多的数据(big cookie), 而不是频繁发送一些小请求(small cookies).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Writing-custom-lint-rules-and-integrating-them&quot;&gt;&lt;a href=&quot;#Writing-custom-lint-rules-and-integrating-them&quot; class=&quot;headerlink&quot; title=&quot;Writing custom lint rules and integrating them&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@mosesJay/writing-custom-lint-rules-and-integrating-them-with-android-studio-inspections-or-carefulnow-c54d72f00d30#.5y0o98bor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing custom lint rules and integrating them&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何创建自定义的lint规则.&lt;br&gt;事情的由来是作者发现了一个死循环调用, 然后他想做一个什么标记以防以后其他人会犯同样的错误.&lt;/p&gt;
&lt;p&gt;然后他想到的是&lt;a href=&quot;https://developer.android.com/studio/write/annotations.html#adding-nullness&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Nullable注解&lt;/a&gt;, 的检查, 实质是依靠&lt;a href=&quot;https://developer.android.com/studio/write/lint.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lint&lt;/a&gt;来实现的.&lt;/p&gt;
&lt;p&gt;于是他自己写了一个自定义的lint规则, 来提示使用用他的注解&lt;code&gt;@CarefulNow&lt;/code&gt;标记的方法时应当注意.&lt;br&gt;详细的实现方式请看原文.&lt;/p&gt;
&lt;h2 id=&quot;Epoxy-Airbnb’s-View-Architecture-on-Android&quot;&gt;&lt;a href=&quot;#Epoxy-Airbnb’s-View-Architecture-on-Android&quot; class=&quot;headerlink&quot; title=&quot;Epoxy: Airbnb’s View Architecture on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/airbnb-engineering/epoxy-airbnbs-view-architecture-on-android-c3e1af150394#.uyvuayspc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Epoxy: Airbnb’s View Architecture on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/airbnb/epoxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epoxy&lt;/a&gt;是一个Android库, 用来处理复杂的RecyclerView屏. 本文介绍了它在项目中实际的使用.&lt;/p&gt;
&lt;h2 id=&quot;Adventures-with-FragmentStatePagerAdapter&quot;&gt;&lt;a href=&quot;#Adventures-with-FragmentStatePagerAdapter&quot; class=&quot;headerlink&quot; title=&quot;Adventures with FragmentStatePagerAdapter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/inloop/adventures-with-fragmentstatepageradapter-4f56a643f8e0#.qk6aygake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures with FragmentStatePagerAdapter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;可能有很多Android开发者对于&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/FragmentPagerAdapter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentPagerAdapter&lt;/a&gt;和&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/app/FragmentStatePagerAdapter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentStatePagerAdapter&lt;/a&gt;的区别不是太清楚或根本不知道, 本文作者就具体介绍了二者的不同.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;&lt;br&gt;适用于项目个数确定的情形.&lt;br&gt;为什么呢? 因为一旦fragment的实例被创建, 它永远也不会从&lt;code&gt;FragmentManager&lt;/code&gt;中移除, 直到Activity被销毁.&lt;/p&gt;
&lt;p&gt;当Fragment不见的时候, 仅仅是&lt;code&gt;onDestroyView()&lt;/code&gt;被调用, 当fragment再次回来时, 再调用&lt;code&gt;onCreateView()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;&lt;br&gt;当fragment的实例不可达的时候, 实例就会立即从&lt;code&gt;FragmentManager&lt;/code&gt;移除. 被移除的fragment实例的状态由&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;保存, 当你再次回到该项的时候, fragment会重建新实例, 并且状态被恢复. 所以这种adapter适用于项目个数不确定或的情况.&lt;/p&gt;
&lt;p&gt;所以使用&lt;code&gt;FragmentPagerAdapter&lt;/code&gt;的时候需要注意内存问题.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notifyDatasetChanged()的问题&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notifyDataSetChanged()&lt;/code&gt;是用来处理数据集变化的情况, 比如一些项目增删的情况. 这个方法不是用来刷新当前显示的Fragment或其中的Views的.&lt;/p&gt;
&lt;p&gt;文章中还有一些关于数据改变实现以及现有issue的讨论. 为了解决issue作者还发布了一个库&lt;a href=&quot;https://github.com/inloop/UpdatableFragmentStatePagerAdapter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UpdatableFragmentStatePagerAdapter&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;KeepActivitiesTile&quot;&gt;&lt;a href=&quot;#KeepActivitiesTile&quot; class=&quot;headerlink&quot; title=&quot;KeepActivitiesTile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Stocard/KeepActivitiesTile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;KeepActivitiesTile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个quick settings tile来开启”Don’t keep activities”.&lt;/p&gt;
&lt;h2 id=&quot;WaveLoading&quot;&gt;&lt;a href=&quot;#WaveLoading&quot; class=&quot;headerlink&quot; title=&quot;WaveLoading&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/race604/WaveLoading&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WaveLoading&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个波形的loading图, 水面上涨代表loading程度.&lt;/p&gt;
&lt;h2 id=&quot;coordinators&quot;&gt;&lt;a href=&quot;#coordinators&quot; class=&quot;headerlink&quot; title=&quot;coordinators&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/square/coordinators&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coordinators&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Simple MVWhatever for Android.&lt;/p&gt;
&lt;h2 id=&quot;epoxy&quot;&gt;&lt;a href=&quot;#epoxy&quot; class=&quot;headerlink&quot; title=&quot;epoxy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/airbnb/epoxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epoxy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个处理复杂的RecyclerView屏的库.&lt;/p&gt;
&lt;h2 id=&quot;Screen-Record-for-Android&quot;&gt;&lt;a href=&quot;#Screen-Record-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Screen Record for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gist.github.com/tasomaniac/93cefd97af13e2ea2b2f248affb373bd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Screen Record for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;录屏脚本.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-235&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-235&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #235&quot;&gt;&lt;/a&gt;Android Weekly Issue #235&lt;/h1&gt;&lt;p&gt;December 11th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-235&quot;&gt;Android Weekly Issue #235&lt;/a&gt;&lt;br&gt;本期内容包括: 开发一个自定义View并发布为开源库的完整流程介绍; 用&lt;code&gt;AnimatedVectorDrawable&lt;/code&gt;实现的动画; 什么样的程序是可测试的; &lt;code&gt;DownloadManager&lt;/code&gt;介绍; Okhttp的重试; Android 7取消了&lt;code&gt;file://&lt;/code&gt;; Android Studio即将推出的build cache功能; 支持离线模式的app构架; 如何写自定义的lint规则; Epoxy, 一个处理复杂RecyclerView屏的库; &lt;code&gt;FragmentPagerAdapter&lt;/code&gt;和&lt;code&gt;FragmentStatePagerAdapter&lt;/code&gt;的比较等. &lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="AnimatedVectorDrawable" scheme="http://mengdd.github.io/tags/AnimatedVectorDrawable/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="RecyclerView" scheme="http://mengdd.github.io/tags/RecyclerView/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="Android 7" scheme="http://mengdd.github.io/tags/Android-7/"/>
    
      <category term="Custom View" scheme="http://mengdd.github.io/tags/Custom-View/"/>
    
      <category term="JCenter" scheme="http://mengdd.github.io/tags/JCenter/"/>
    
      <category term="DownloadManager" scheme="http://mengdd.github.io/tags/DownloadManager/"/>
    
      <category term="OkHttp" scheme="http://mengdd.github.io/tags/OkHttp/"/>
    
      <category term="Offline Architecture" scheme="http://mengdd.github.io/tags/Offline-Architecture/"/>
    
      <category term="lint" scheme="http://mengdd.github.io/tags/lint/"/>
    
      <category term="FragmentPagerAdapter" scheme="http://mengdd.github.io/tags/FragmentPagerAdapter/"/>
    
      <category term="FragmentStatePagerAdapter" scheme="http://mengdd.github.io/tags/FragmentStatePagerAdapter/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 234</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/React-Native/Java/2016/12/13/android-weekly-notes-issue-234/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/React-Native/Java/2016/12/13/android-weekly-notes-issue-234/</id>
    <published>2016-12-13T03:08:45.000Z</published>
    <updated>2016-12-13T03:16:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-234&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-234&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #234&quot;&gt;&lt;/a&gt;Android Weekly Issue #234&lt;/h1&gt;&lt;p&gt;December 4th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-234&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #234&lt;/a&gt;&lt;br&gt;本期内容包括: ConstraintLayout的使用; React Native教程; fastlane管理模拟器; Android中的任务调度; 文字sticker的实现; 给Android library加flavor; 更好的关键帧动画; SQLDelight的使用; icon Animation; OkLog的使用等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Guide-to-ConstraintLayout&quot;&gt;&lt;a href=&quot;#Guide-to-ConstraintLayout&quot; class=&quot;headerlink&quot; title=&quot;Guide to ConstraintLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@loutry/guide-to-constraintlayout-407cd87bc013#.pdg54u72z&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide to ConstraintLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章教你如何使用&lt;code&gt;ConstraintLayout&lt;/code&gt;, 有很多实际的例子.&lt;/p&gt;
&lt;h2 id=&quot;React-Native-Express&quot;&gt;&lt;a href=&quot;#React-Native-Express&quot; class=&quot;headerlink&quot; title=&quot;React Native Express&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.reactnativeexpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native Express&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一步一步地教你跨平台的Reactive Native, 比官方的文档要深入, 并且提供例子.&lt;/p&gt;
&lt;h2 id=&quot;Managing-Android-Virtual-Devices-during-test-session&quot;&gt;&lt;a href=&quot;#Managing-Android-Virtual-Devices-during-test-session&quot; class=&quot;headerlink&quot; title=&quot;Managing Android Virtual Devices during test session&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/azimolabs/managing-android-virtual-devices-during-test-session-98a403acffc2#.cu4nfhl6u&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing Android Virtual Devices during test session&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们用&lt;a href=&quot;https://github.com/fastlane/fastlane&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fastlane&lt;/a&gt;管理模拟器, 并且开发了一个插件.&lt;/p&gt;
&lt;h2 id=&quot;You-don’t-have-to-use-WeakReference-to-avoid-memory-leaks&quot;&gt;&lt;a href=&quot;#You-don’t-have-to-use-WeakReference-to-avoid-memory-leaks&quot; class=&quot;headerlink&quot; title=&quot;You don’t have to use WeakReference to avoid memory leaks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/weakreference-in-android-dd1e66b9be9d#.vmxu20g30&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;You don’t have to use WeakReference to avoid memory leaks&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;并不是到处都要用&lt;code&gt;WeakReference&lt;/code&gt;来避免内存泄漏.&lt;/p&gt;
&lt;h2 id=&quot;Effective-Java-for-Android&quot;&gt;&lt;a href=&quot;#Effective-Java-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Effective Java for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/rocknnull/effective-java-for-android-cheatsheet-bf4e3433889a#.8t44xdb4t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Effective Java for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个cheat-sheet, Effective Java中提到的内容, 作者列出了他认为在Android开发中最重要的几项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用private来限制不可实例化.&lt;/li&gt;
&lt;li&gt;使用静态工厂方法.&lt;/li&gt;
&lt;li&gt;使用Builders.&lt;/li&gt;
&lt;li&gt;避免互换性.&lt;/li&gt;
&lt;li&gt;静态内部类.&lt;/li&gt;
&lt;li&gt;使用泛型.&lt;/li&gt;
&lt;li&gt;返回空的集合而不是null.&lt;/li&gt;
&lt;li&gt;字符串连接用StringBuilder, 不要用+.&lt;/li&gt;
&lt;li&gt;可恢复的异常.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Scheduling-tasks-in-Android-made-easy&quot;&gt;&lt;a href=&quot;#Scheduling-tasks-in-Android-made-easy&quot; class=&quot;headerlink&quot; title=&quot;Scheduling tasks in Android made easy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.hypertrack.io/2016/12/01/scheduling-tasks-in-android-made-easy/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scheduling tasks in Android made easy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;分发异步任务的时候, 用很多选择: &lt;code&gt;AlarmManager&lt;/code&gt;, &lt;code&gt;Handler&lt;/code&gt;, &lt;code&gt;JobSheduler&lt;/code&gt;, &lt;code&gt;GcmNetworkManager&lt;/code&gt;. 作者他们的库: &lt;a href=&quot;https://github.com/hypertrack/smart-scheduler-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smart-scheduler-android&lt;/a&gt;就是用来有效地处理异步任务调度问题.&lt;/p&gt;
&lt;h2 id=&quot;How-to-create-beautiful-text-stickers-for-Android&quot;&gt;&lt;a href=&quot;#How-to-create-beautiful-text-stickers-for-Android&quot; class=&quot;headerlink&quot; title=&quot;How to create beautiful text stickers for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/uptech-team/how-to-create-beautiful-text-stickers-for-android-10eeea0cee09#.11x8ar94q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to create beautiful text stickers for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前作者有一篇文章讲了如何创建Snapchat一样的图片stickers.&lt;/p&gt;
&lt;p&gt;本篇讲如何创建文字的stickers, 代码: &lt;a href=&quot;https://github.com/uptechteam/MotionViews-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MotionViews-Android&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Elite-Worship&quot;&gt;&lt;a href=&quot;#Elite-Worship&quot; class=&quot;headerlink&quot; title=&quot;Elite Worship&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sqisland.com/2016/12/elite-worship.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elite Worship&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Chiu-Ki Chan分享了一些她的看法, 关于精英崇拜, 和如何让社区更加平等, 鼓励每一个人都参与进来.&lt;/p&gt;
&lt;h2 id=&quot;Product-Flavors-for-Android-Libraries&quot;&gt;&lt;a href=&quot;#Product-Flavors-for-Android-Libraries&quot; class=&quot;headerlink&quot; title=&quot;Product Flavors for Android Libraries&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sahildave/product-flavors-for-android-library-d3b2d240fca2#.ravhhk30a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Product Flavors for Android Libraries&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何给Android Library加上不同的flavor使用.&lt;/p&gt;
&lt;h2 id=&quot;Keyframes-Delivering-scalable-high-quality-animations&quot;&gt;&lt;a href=&quot;#Keyframes-Delivering-scalable-high-quality-animations&quot; class=&quot;headerlink&quot; title=&quot;Keyframes: Delivering scalable, high-quality animations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.facebook.com/posts/354469174916519&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyframes: Delivering scalable, high-quality animations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Facebook分享了一个库&lt;a href=&quot;https://github.com/facebookincubator/Keyframes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyframes&lt;/a&gt;用来导出AE的动画, 并且在移动设备上播放它.&lt;/p&gt;
&lt;h2 id=&quot;SQLDelight-Getting-Started&quot;&gt;&lt;a href=&quot;#SQLDelight-Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;SQLDelight: Getting Started&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@tonyowen/sqldelight-getting-started-67054fe51306#.rske25ore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLDelight: Getting Started&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/square/sqldelight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sqldelight&lt;/a&gt;是一个库, 可以用SQL语句来生成Java Model类.&lt;br&gt;SQLDelight也是一个Intellij插件.&lt;/p&gt;
&lt;p&gt;作者介绍了如何使用SQLDelight, 注意生成models需要结合AutoValue.&lt;/p&gt;
&lt;h2 id=&quot;Your-ViewHolders-are-Dumb-Make-’em-Not-Dumb&quot;&gt;&lt;a href=&quot;#Your-ViewHolders-are-Dumb-Make-’em-Not-Dumb&quot; class=&quot;headerlink&quot; title=&quot;Your ViewHolders are Dumb. Make ’em Not Dumb&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jonfhancock/your-viewholders-are-dumb-make-em-not-dumb-82e6f73f630c#.auaur0y3r&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Your ViewHolders are Dumb. Make ’em Not Dumb&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者举例说明ViewHolder应该如何优化代码, 解放Adapter.&lt;/p&gt;
&lt;h2 id=&quot;An-Introduction-to-Icon-Animation-Techniques&quot;&gt;&lt;a href=&quot;#An-Introduction-to-Icon-Animation-Techniques&quot; class=&quot;headerlink&quot; title=&quot;An Introduction to Icon Animation Techniques&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2016/11/introduction-to-icon-animation-techniques.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Introduction to Icon Animation Techniques&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何创建漂亮的icon动画.&lt;/p&gt;
&lt;h2 id=&quot;OkLog-2-0-—-improved-Android-network-logging&quot;&gt;&lt;a href=&quot;#OkLog-2-0-—-improved-Android-network-logging&quot; class=&quot;headerlink&quot; title=&quot;OkLog 2.0 — improved Android network logging&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@simonpercic/oklog-2-0-improved-android-network-logging-a72b2ffe4c66#.6h8w44eh8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkLog 2.0 — improved Android network logging&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/simonpercic/OkLog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkLog&lt;/a&gt;是一个库, 可以在logcat中打印网络请求和响应, 点击进入页面查看, 本文介绍2.0版本的改进.&lt;/p&gt;
&lt;h2 id=&quot;How-to-Build-an-Android-App-for-Fire-TV-Part-4&quot;&gt;&lt;a href=&quot;#How-to-Build-an-Android-App-for-Fire-TV-Part-4&quot; class=&quot;headerlink&quot; title=&quot;How to Build an Android App for Fire TV (Part 4)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/amazon-appstore/developing-for-the-living-room-how-to-build-an-android-app-for-fire-tv-part-4-cbe572a6f1e6#.zfg39casg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Build an Android App for Fire TV (Part 4)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文是为Fire TV搭建一个Android App系列文章的第四篇.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;android-PageFlip&quot;&gt;&lt;a href=&quot;#android-PageFlip&quot; class=&quot;headerlink&quot; title=&quot;android-PageFlip&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/eschao/android-PageFlip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-PageFlip&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;3D的翻页效果.&lt;/p&gt;
&lt;h2 id=&quot;smart-scheduler-android&quot;&gt;&lt;a href=&quot;#smart-scheduler-android&quot; class=&quot;headerlink&quot; title=&quot;smart-scheduler-android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/hypertrack/smart-scheduler-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;smart-scheduler-android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用于周期性和非周期性任务分发的工具类.&lt;/p&gt;
&lt;h2 id=&quot;PageLoader&quot;&gt;&lt;a href=&quot;#PageLoader&quot; class=&quot;headerlink&quot; title=&quot;PageLoader&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/arieridwan8/pageloader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageLoader&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个简单的可定制化的loading页面库.&lt;/p&gt;
&lt;h2 id=&quot;fastlane-plugin-automated-test-emulator-run&quot;&gt;&lt;a href=&quot;#fastlane-plugin-automated-test-emulator-run&quot; class=&quot;headerlink&quot; title=&quot;fastlane-plugin-automated-test-emulator-run&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/AzimoLabs/fastlane-plugin-automated-test-emulator-run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fastlane-plugin-automated-test-emulator-run&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;fastlane插件, 用于启动模拟器进行自动化测试.&lt;/p&gt;
&lt;h2 id=&quot;Keyframes&quot;&gt;&lt;a href=&quot;#Keyframes&quot; class=&quot;headerlink&quot; title=&quot;Keyframes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/facebookincubator/Keyframes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyframes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;导出AE动画并在移动设备上播放的库.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-234&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-234&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #234&quot;&gt;&lt;/a&gt;Android Weekly Issue #234&lt;/h1&gt;&lt;p&gt;December 4th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-234&quot;&gt;Android Weekly Issue #234&lt;/a&gt;&lt;br&gt;本期内容包括: ConstraintLayout的使用; React Native教程; fastlane管理模拟器; Android中的任务调度; 文字sticker的实现; 给Android library加flavor; 更好的关键帧动画; SQLDelight的使用; icon Animation; OkLog的使用等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="React Native" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/React-Native/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/React-Native/Java/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="React Native" scheme="http://mengdd.github.io/tags/React-Native/"/>
    
      <category term="fastlane" scheme="http://mengdd.github.io/tags/fastlane/"/>
    
      <category term="Effective Java" scheme="http://mengdd.github.io/tags/Effective-Java/"/>
    
      <category term="Sticker" scheme="http://mengdd.github.io/tags/Sticker/"/>
    
      <category term="Flavor" scheme="http://mengdd.github.io/tags/Flavor/"/>
    
      <category term="SQLDelight" scheme="http://mengdd.github.io/tags/SQLDelight/"/>
    
      <category term="OkLog" scheme="http://mengdd.github.io/tags/OkLog/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 233</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/Java/2016/12/01/android-weekly-notes-issue-233/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/Java/2016/12/01/android-weekly-notes-issue-233/</id>
    <published>2016-12-01T10:23:40.000Z</published>
    <updated>2016-12-13T03:16:50.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-233&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-233&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #233&quot;&gt;&lt;/a&gt;Android Weekly Issue #233&lt;/h1&gt;&lt;p&gt;November 27th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-233&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #233&lt;/a&gt;&lt;br&gt;本期内容包括: 用Mockito做RxJava的单元测试; Android开发中的命令行使用; Android 7.1的App Shortcuts; 自定义View的绘制; 用Firebase的Remote Config进行feature逐步分发; APK分析工具的使用, APK瘦身讨论; RxJava处理网络请求和缓存; presenter的设计; 用Firebase发送push notification; transient关键字的使用等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Testing-asynchronous-RxJava-code-using-Mockito&quot;&gt;&lt;a href=&quot;#Testing-asynchronous-RxJava-code-using-Mockito&quot; class=&quot;headerlink&quot; title=&quot;Testing asynchronous RxJava code using Mockito&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@fabioCollini/testing-asynchronous-rxjava-code-using-mockito-8ad831a16877#.yhndxn3y1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing asynchronous RxJava code using Mockito&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲了如何用Mockito给RxJava的异步请求代码写单元测试.&lt;br&gt;内容包括了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何设置Mockito的默认返回值. (通过自定义的&lt;code&gt;MockitoConfiguration&lt;/code&gt;类).&lt;/li&gt;
&lt;li&gt;如何把异步变为同步测试. (1.用&lt;code&gt;blockingGet()&lt;/code&gt;; 2.在RxJava2中, 可以使用&lt;code&gt;TestObserver&lt;/code&gt;的&lt;code&gt;awaitTerminalEvent()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AssertJ&lt;/a&gt;的使用.&lt;/li&gt;
&lt;li&gt;测试异步代码. 使用Rule来替换原来的scheduler.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatMap()&lt;/code&gt;, &lt;code&gt;concatMap()&lt;/code&gt;, &lt;code&gt;concatMapEager()&lt;/code&gt;操作符的使用.&lt;/li&gt;
&lt;li&gt;测试Timeout.&lt;/li&gt;
&lt;li&gt;测试异常和retry逻辑.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好用的工具: &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AssertJ&lt;/a&gt;&lt;br&gt;用来更方便地写Java测试中的assert语句.&lt;/p&gt;
&lt;h2 id=&quot;Mastering-the-Terminal-side-of-Android-development&quot;&gt;&lt;a href=&quot;#Mastering-the-Terminal-side-of-Android-development&quot; class=&quot;headerlink&quot; title=&quot;Mastering the Terminal side of Android development&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@cesarmcferreira/mastering-the-terminal-side-of-android-development-e7520466c521#.5pjzgdn2s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering the Terminal side of Android development&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了在Android开发中他是如何使用命令行的.&lt;/p&gt;
&lt;p&gt;使用更好的命令行程序: &lt;a href=&quot;http://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt;.&lt;br&gt;它有很多有用的&lt;a href=&quot;https://www.iterm2.com/features.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;features&lt;/a&gt;, 比如分屏, 自定义颜色, 粘贴历史等.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;on-my-zsh&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on-my-zsh&lt;/a&gt;内置了一个&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git plugin&lt;/a&gt;, 提供了很多aliases和功能.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zsh-autosuggestions&lt;/a&gt;会在你输入的时候根据历史提供建议.&lt;/p&gt;
&lt;p&gt;你可以用Ctrl + R在命令历史中进行逆向智能搜索(Reverse intelligent search). 你开始输入这个命令, 命令行会在历史中寻找并自动补全. 你可以按Enter来执行这个命令, 或者左右箭头来编辑命令, 或者继续按Ctrl + R在其他可能的命令中寻找.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dryrun&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你在github上看到一个程序, 想要运行一下看看, 你不必再把它下载下来, 导入Android Studio了.&lt;/p&gt;
&lt;p&gt;你只需要用&lt;a href=&quot;https://github.com/cesarferreira/dryrun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dryrun&lt;/a&gt;, 一句命令就可以:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dryrun REMOTE_GIT_URL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build faster, build offline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在build的时候使用–offline可以让所有依赖都使用缓存版本, 不再进行网络请求, 从而加快执行速度.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./gradlew assembleDevelopDebug --offline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./gradlew test --offline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在Android Studio中也可以进行设置.&lt;br&gt;在&lt;code&gt;Settings -&amp;gt; Build, Execution, Deployment -&amp;gt; Build tools -&amp;gt; Gradle&lt;/code&gt;中勾选&lt;code&gt;Offline work&lt;/code&gt;即可.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;alfi&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/cesarferreira/alfi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;alfi&lt;/a&gt;是一个工具, 装了这个工具之后, 用一行命令就可以查到第三方库的依赖语句, 然后你就可以把它拷贝粘贴到&lt;code&gt;build.gradle&lt;/code&gt;中去了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gradle tasks shortcuts&lt;/strong&gt;&lt;br&gt;gradle的task有缩写版的, 比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iDD for installDevelopmentDebug&lt;/li&gt;
&lt;li&gt;aDD for assembleDevelopmentDebug&lt;/li&gt;
&lt;li&gt;cC for connectedCheck&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Android Rocket Launcher&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/cesarferreira/android-rocket-launcher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Rocket Launcher&lt;/a&gt;增加新的tasks, 在命令行启动应用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接在console输出单元测试结果&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  testOptions.unitTests.all &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testLogging &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      events &amp;apos;passed&amp;apos;, &amp;apos;skipped&amp;apos;, &amp;apos;failed&amp;apos;, &amp;apos;standardOut&amp;apos;, &amp;apos;standardError&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      outputs.upToDateWhen &amp;#123; false &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      showStandardStreams = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个工具&lt;a href=&quot;https://github.com/JakeWharton/pidcat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pidcat&lt;/a&gt;可以指定包名显示log.&lt;/p&gt;
&lt;h2 id=&quot;Exploring-Android-Nougat-7-1-App-Shortcuts&quot;&gt;&lt;a href=&quot;#Exploring-Android-Nougat-7-1-App-Shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Exploring Android Nougat 7.1 App Shortcuts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲Android 7.1推出的App Shortcuts如何实现.&lt;/p&gt;
&lt;h2 id=&quot;The-Quirks-of-Supporting-SDK-25&quot;&gt;&lt;a href=&quot;#The-Quirks-of-Supporting-SDK-25&quot; class=&quot;headerlink&quot; title=&quot;The Quirks of Supporting SDK 25&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.zdominguez.com/2016/11/the-quirks-of-supporting-sdk-25.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Quirks of Supporting SDK 25&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了她在适配Nougat, API 25时学到的东西, 包括更换SDK版本, 圆形的启动icon, 还有app shortcuts. (根据文中的图标, 这个app居然是domain).&lt;/p&gt;
&lt;h2 id=&quot;Android-draw-a-custom-view&quot;&gt;&lt;a href=&quot;#Android-draw-a-custom-view&quot; class=&quot;headerlink&quot; title=&quot;Android: draw a custom view&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@romandanylyk96/android-draw-a-custom-view-ef79fe2ff54b#.i4ipiz2u7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android: draw a custom view&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者自定义了一个ViewPager的page indicator: &lt;a href=&quot;https://github.com/romandanylyk/PageIndicatorView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageIndicatorView&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这篇文章讲述了如何自定义View, 首先是View的生命周期, 然后是具体如何实现, 如何避免一些常见的错误, 最后是如何添加View的动画.&lt;br&gt;&lt;img src=&quot;/images/view-lifecycle.png&quot; alt=&quot;view-lifecycle&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各个生命周期中应该干的事情&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数中: 解析自定义属性.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onAttachedToWindow()&lt;/code&gt;中: 可以发现同一布局中相关的其他View, 其id是上一步通过自定义属性传入的.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onMeasure()&lt;/code&gt;: 自定义View尺寸相关, 当覆盖这个方法时, 最后要调用&lt;code&gt;setMeasuredDimension(int width, int height)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onLayout()&lt;/code&gt;: 一般这个方法是给ViewGroup的child指定位置和尺寸的, 对于自定义View来说, 没有child就没有必要覆盖这个方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDraw()&lt;/code&gt;: 这里是画东西的地方. 用canvas和Paint结合绘制. 需要注意的是&lt;code&gt;onDraw()&lt;/code&gt;会被多次调用, 当你有一些变化, 滚动滑动等, 都会重绘, 所以这个方法中不要创建新对象. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;View更新&lt;/strong&gt;&lt;br&gt;有两个方法可以让View重绘:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;invalidate()&lt;/code&gt;: 只是重新绘制, 调用&lt;code&gt;onDraw()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requestLayout()&lt;/code&gt;: 将会从&lt;code&gt;onMeasure()&lt;/code&gt;开始, 可能会改变尺寸, 然后根据新尺寸重新绘制.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Animation&lt;/strong&gt;&lt;br&gt;自定义View的动画是一帧帧进行的, 这就意味着你每一步都要调用&lt;code&gt;invalidate()&lt;/code&gt;来画它.&lt;/p&gt;
&lt;p&gt;在自定义View中你的动画好助手是&lt;code&gt;ValueAnimator&lt;/code&gt;, 它可以让你动画任何值.&lt;/p&gt;
&lt;h2 id=&quot;How-to-Stage-Rollout-Features-using-Firebase-Remote-Config&quot;&gt;&lt;a href=&quot;#How-to-Stage-Rollout-Features-using-Firebase-Remote-Config&quot; class=&quot;headerlink&quot; title=&quot;How to Stage Rollout Features using Firebase Remote Config&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/stage-rollout-features-firebase-remote-config-ios-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Stage Rollout Features using Firebase Remote Config&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/6346149?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Staged Rollout&lt;/a&gt;是Google Play Store的一个feature. 让你可以慢慢地把新版App发布给一部分用户, 并逐渐增大比例. 使用Firebase Remote Config, 我们可以做的更多,  我们可以控制某个feature的发布.&lt;/p&gt;
&lt;h2 id=&quot;Making-the-most-of-the-APK-analyzer&quot;&gt;&lt;a href=&quot;#Making-the-most-of-the-APK-analyzer&quot; class=&quot;headerlink&quot; title=&quot;Making the most of the APK analyzer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/making-the-most-of-the-apk-analyzer-c066cb871ea2#.36ccm5y0c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making the most of the APK analyzer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android Studio中Build菜单有一项是&lt;code&gt;Analyze APK...&lt;/code&gt;, 这是一个很有用的功能.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Raw File Size&lt;/code&gt;是apk在磁盘上的大小.&lt;br&gt;&lt;code&gt;Download size&lt;/code&gt;是估计下载你的应用所需要的数据流量大小, 考虑到了Play Store的压缩.&lt;/p&gt;
&lt;p&gt;文件和文件夹是按照大小降序排列的. 这对于Apk瘦身来说很有用, 很容易发现最占地方的原因.&lt;/p&gt;
&lt;p&gt;比如作者发现了一些png很占地方, 于是就用&lt;a href=&quot;https://developer.android.com/studio/write/vector-asset-studio.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PSD support in the Vector Asset import tool&lt;/a&gt;把它们转成了&lt;code&gt;VectorDrawable&lt;/code&gt;, 后向兼容用&lt;code&gt;VectorDrawableCompat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;有一些没有压缩的WAV可以转成OGG. &lt;/p&gt;
&lt;p&gt;在lib/里面, 发现它们要支持的三个ABI: x86, armeabi-v7a, armeabi, 解决的办法就是利用&lt;a href=&quot;https://developer.android.com/studio/build/configure-apk-splits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk拆分&lt;/a&gt;, 针对每一个ABI有一个不同的版本.&lt;/p&gt;
&lt;p&gt;还有一个优化是把&lt;code&gt;android:extractNativeLibs&lt;/code&gt; 属性设置为false, 这样系统就不会把.so文件在安装的时候从apk中拷贝到文件系统了. 这样应用的增量更新也会小一点.&lt;/p&gt;
&lt;p&gt;这个功能有一个”Compare with”按钮, 利用它你可以比较两个apk的改变.&lt;/p&gt;
&lt;p&gt;可以通过查看DEX文件来查看方法数限制 (Referenced Methods), 类混淆等问题.&lt;/p&gt;
&lt;h2 id=&quot;Rxify-The-Anti-Cache-then-Network-OR-Network-then-Cache-Problem&quot;&gt;&lt;a href=&quot;#Rxify-The-Anti-Cache-then-Network-OR-Network-then-Cache-Problem&quot; class=&quot;headerlink&quot; title=&quot;Rxify : The Anti Cache-then-Network OR Network-then-Cache Problem&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.andevcon.com/news/rxify-the-anti-cache-then-network-or-network-then-cache-problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rxify&lt;/code&gt; : The Anti Cache-then-Network OR Network-then-Cache Problem&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用RxJava处理网络请求和缓存.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果先使用Cache, 没有缓存的时候再进行网络请求. -&amp;gt; 用&lt;code&gt;.concatWith()&lt;/code&gt;和&lt;code&gt;.take(1)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果优先取网络最新数据, 没网的时候才用缓存数据. -&amp;gt; &lt;code&gt;.onErrorReturn()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Your-presenters-don’t-need-all-those-lifecycle-events&quot;&gt;&lt;a href=&quot;#Your-presenters-don’t-need-all-those-lifecycle-events&quot; class=&quot;headerlink&quot; title=&quot;Your presenters don’t need all those lifecycle events&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@anupcowkur/your-presenters-dont-need-all-those-lifecycle-events-721f500eeef4#.f7nupw3jo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Your presenters don’t need all those lifecycle events&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者认为在Presenter中放入太多生命周期的方法不太好, 他觉得最基本的只需要这两个方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Presenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewAttached&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MVPView view)&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewDetached&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然当你需要更多的时候可以加入更多, 但是我们不应该每个生命周期方法都加进去.&lt;/p&gt;
&lt;h2 id=&quot;How-to-send-notifications-using-Android-Firebase&quot;&gt;&lt;a href=&quot;#How-to-send-notifications-using-Android-Firebase&quot; class=&quot;headerlink&quot; title=&quot;How to send notifications using Android Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.survivingwithandroid.com/2016/09/android-firebase-push-notification.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to send notifications using Android Firebase&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Firebase Messaging如何发送push notification.&lt;/p&gt;
&lt;h2 id=&quot;RxRecipes-Wrap-your-way-to-Rx&quot;&gt;&lt;a href=&quot;#RxRecipes-Wrap-your-way-to-Rx&quot; class=&quot;headerlink&quot; title=&quot;RxRecipes: Wrap your way to Rx&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/rxrecipes-wrap-your-way-to-rx-fd40eb5254b6#.hbtcjp4rm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxRecipes: Wrap your way to Rx&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;.fromCallable()&lt;/code&gt;来把一个同步方法包装成一个Observable. &lt;/p&gt;
&lt;p&gt;并比较了和&lt;code&gt;.just()&lt;/code&gt;的区别. (&lt;code&gt;.just()&lt;/code&gt;发射的东西在创建的时候就确定了, 而&lt;code&gt;.fromCallable()&lt;/code&gt;是在subscribe的时候确定的.)&lt;/p&gt;
&lt;h2 id=&quot;Diving-deeper-into-the-Java-transient-modifier&quot;&gt;&lt;a href=&quot;#Diving-deeper-into-the-Java-transient-modifier&quot; class=&quot;headerlink&quot; title=&quot;Diving deeper into the Java transient modifier&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/diving-deeper-into-the-java-transient-modifier-3b16eff68f42#.8pbk9i6fm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Diving deeper into the Java transient modifier&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;transient&lt;/code&gt;修饰符加在字段上时, 在对象被序列化的时候, 这个字段将被排除在外, 反序列化时这个字段将被初始化一个默认值.&lt;/p&gt;
&lt;p&gt;可能的使用场景: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现了Serializable的User对象中的password字段.&lt;/li&gt;
&lt;li&gt;一个Serializable的类中的某个字段是通过其他字段推导或派生出来的, 这些派生的字段没有必要被序列化, 于是把它们标记为&lt;code&gt;transient&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意transient和static是不能并存的, 因为static默认是transient的.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Tinker&quot;&gt;&lt;a href=&quot;#Tinker&quot; class=&quot;headerlink&quot; title=&quot;Tinker&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Tencent/tinker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tinker&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;腾讯的热补丁(hot-fix)解决方案, 支持不重新安装app的dex, library和资源更新.&lt;/p&gt;
&lt;h2 id=&quot;Android-Debug-Database&quot;&gt;&lt;a href=&quot;#Android-Debug-Database&quot; class=&quot;headerlink&quot; title=&quot;Android-Debug-Database&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/Android-Debug-Database&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Debug-Database&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在浏览器里看应用的数据库和shared preferences.&lt;/p&gt;
&lt;h2 id=&quot;blurkit-android&quot;&gt;&lt;a href=&quot;#blurkit-android&quot; class=&quot;headerlink&quot; title=&quot;blurkit-android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/wonderkiln/blurkit-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blurkit-android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;实时模糊布局. 像iOS一样.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-233&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-233&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #233&quot;&gt;&lt;/a&gt;Android Weekly Issue #233&lt;/h1&gt;&lt;p&gt;November 27th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-233&quot;&gt;Android Weekly Issue #233&lt;/a&gt;&lt;br&gt;本期内容包括: 用Mockito做RxJava的单元测试; Android开发中的命令行使用; Android 7.1的App Shortcuts; 自定义View的绘制; 用Firebase的Remote Config进行feature逐步分发; APK分析工具的使用, APK瘦身讨论; RxJava处理网络请求和缓存; presenter的设计; 用Firebase发送push notification; transient关键字的使用等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Java/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Mockito" scheme="http://mengdd.github.io/tags/Mockito/"/>
    
      <category term="Terminal" scheme="http://mengdd.github.io/tags/Terminal/"/>
    
      <category term="Android 7.1" scheme="http://mengdd.github.io/tags/Android-7-1/"/>
    
      <category term="App Shortcuts" scheme="http://mengdd.github.io/tags/App-Shortcuts/"/>
    
      <category term="Custom View" scheme="http://mengdd.github.io/tags/Custom-View/"/>
    
      <category term="Remote Config" scheme="http://mengdd.github.io/tags/Remote-Config/"/>
    
      <category term="APK analyzer" scheme="http://mengdd.github.io/tags/APK-analyzer/"/>
    
      <category term="Cache" scheme="http://mengdd.github.io/tags/Cache/"/>
    
      <category term="push notification" scheme="http://mengdd.github.io/tags/push-notification/"/>
    
      <category term="transient" scheme="http://mengdd.github.io/tags/transient/"/>
    
      <category term="Java" scheme="http://mengdd.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java笔记一 创建和销毁对象</title>
    <link href="http://mengdd.github.io/Java/2016/11/25/effective-java-notes-1/"/>
    <id>http://mengdd.github.io/Java/2016/11/25/effective-java-notes-1/</id>
    <published>2016-11-25T08:50:40.000Z</published>
    <updated>2016-11-25T09:01:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Effective-Java笔记一-创建和销毁对象&quot;&gt;&lt;a href=&quot;#Effective-Java笔记一-创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;Effective Java笔记一 创建和销毁对象&quot;&gt;&lt;/a&gt;Effective Java笔记一 创建和销毁对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第1条 考虑用静态工厂方法代替构造器&lt;/li&gt;
&lt;li&gt;第2条 遇到多个构造器参数时要考虑用构建器&lt;/li&gt;
&lt;li&gt;第3条 用私有构造器或者枚举类型强化Singleton属性&lt;/li&gt;
&lt;li&gt;第4条 通过私有构造器强化不可实例化的能力&lt;/li&gt;
&lt;li&gt;第5条 避免创建不必要的对象&lt;/li&gt;
&lt;li&gt;第6条 消除过期的对象引用&lt;/li&gt;
&lt;li&gt;第7条 避免使用终结方法&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第1条-考虑用静态工厂方法代替构造器&quot;&gt;&lt;a href=&quot;#第1条-考虑用静态工厂方法代替构造器&quot; class=&quot;headerlink&quot; title=&quot;第1条 考虑用静态工厂方法代替构造器&quot;&gt;&lt;/a&gt;第1条 考虑用静态工厂方法代替构造器&lt;/h2&gt;&lt;p&gt;对于类而言, 最常用的获取实例的方法就是提供一个公有的构造器, 还有一种方法, 就是提供一个公有的静态工厂方法(static factory method), 返回类的实例.&lt;/p&gt;
&lt;p&gt;(注意此处的静态工厂方法与设计模式中的工厂方法模式不同.)&lt;/p&gt;
&lt;p&gt;提供静态工厂方法而不是公有构造, 这样做有几大&lt;strong&gt;优势&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态工厂方法&lt;strong&gt;有名称&lt;/strong&gt;. 可以更确切地描述正被返回的对象.&lt;br&gt;当一个类需要多个带有相同签名的构造器时, 可以用静态工厂方法, 并且慎重地选择名称以便突出它们之间的区别.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不必在每次调用它们的时候都创建一个新对象.&lt;/strong&gt; 可以重复利用实例. 如果程序经常请求创建相同的对象, 并且创建对象的代价很高, 这项改动可以提升性能. (不可变类, 单例, 枚举).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以返回原类型的子类型对象.&lt;/strong&gt; 适用于基于接口的框架, 可以隐藏实现类API, 也可以根据参数返回不同的子类型.&lt;br&gt;由于接口不能有静态方法, 因此按照惯例, 接口Type的静态工厂方法被放在一个名为Types的不可实例化的类中.&lt;br&gt;(Java的java.util.Collections). 服务提供者框架(Service Provider Framework, 如JDBC)的基础, 从实现中解耦.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在创建参数化类型实例的时候, 使代码更简洁.&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态工厂方法的&lt;strong&gt;缺点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类如果不含public或者protected的构造器, 就不能被子类化. 对于公有的静态工厂方法所返回的非公有类, 也同样如此.&lt;/li&gt;
&lt;li&gt;静态工厂方法与其他的静态方法没有区别. 在API文档中没有明确标识出来. 可以使用一些惯用的名称来弥补这一劣势:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;valueOf()&lt;/code&gt;: 类型转换方法, 返回的实例与参数具有相同的值.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;of()&lt;/code&gt;: valueOf()的一种更简洁的替代.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getInstance()&lt;/code&gt;: 返回的实例通过参数来描述, 对于单例来说, 该方法没有参数, 返回唯一的实例.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newInstance()&lt;/code&gt;: 像getInstance()一样, 但newInstance()能确保返回的每个实例都与其他实例不同.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getType()&lt;/code&gt;: 像getInstance()一样, Type表示返回的对象类型, 在工厂方法处于不同的类中的时候使用.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;newType()&lt;/code&gt;: 和newInstance()一样, Type表示返回类型, 在工厂方法处于不同的类中的时候使用.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;第2条-遇到多个构造器参数时要考虑用构建器&quot;&gt;&lt;a href=&quot;#第2条-遇到多个构造器参数时要考虑用构建器&quot; class=&quot;headerlink&quot; title=&quot;第2条 遇到多个构造器参数时要考虑用构建器&quot;&gt;&lt;/a&gt;第2条 遇到多个构造器参数时要考虑用构建器&lt;/h2&gt;&lt;p&gt;静态工厂和构造器有一个共同的局限性: 它们都不能很好地扩展到大量的可选参数.&lt;/p&gt;
&lt;p&gt;重载多个构造器方法可行, 但是当有许多参数的时候, 代码会很难写难读.&lt;/p&gt;
&lt;p&gt;第二种替代方法是JavaBeans模式, 即一个无参数构造来创建对象, 然后调用setter方法来设置每个参数. 这种模式也有严重的缺点, 因为构造过程被分到了几个调用中, 在构造过程中JavaBean可能处于不一致的状态.&lt;br&gt;类无法通过检验构造器参数的有效性来保证一致性. 另一点是这种模式阻止了把类做成不可变的可能.&lt;/p&gt;
&lt;p&gt;第三种方法就是&lt;strong&gt;Builder模式&lt;/strong&gt;. 不直接生成想要的对象, 而是利用必要参数调用构造器(或者静态工厂)得到一个builder对象, 然后在builder对象上调用类似setter的方法, 来设置可选参数, 最后调用无参的&lt;code&gt;build()&lt;/code&gt;方法来生成不可变的对象.&lt;/p&gt;
&lt;p&gt;这个Builder是它构建的类的静态成员类.&lt;br&gt;Builder的setter方法返回Builder本身, 可以链式操作.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Builder模式的优势&lt;/strong&gt;: 可读性增强; 可以有多个可变参数;  易于做参数检查和构造约束检查; 比JavaBeans更加安全; 灵活性: 可以利用单个builder构建多个对象, 可以自动填充某些域, 比如自增序列号.&lt;/p&gt;
&lt;p&gt;Builder模式的不足: 为了创建对象必须先创建Builder, 在某些十分注重性能的情况下, 可能就成了问题; Builder模式较冗长, 因此只有参数很多时才使用.&lt;/p&gt;
&lt;h2 id=&quot;第3条-用私有构造器或者枚举类型强化Singleton属性&quot;&gt;&lt;a href=&quot;#第3条-用私有构造器或者枚举类型强化Singleton属性&quot; class=&quot;headerlink&quot; title=&quot;第3条 用私有构造器或者枚举类型强化Singleton属性&quot;&gt;&lt;/a&gt;第3条 用私有构造器或者枚举类型强化Singleton属性&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Singleton(单例)&lt;/code&gt;指仅仅被实例化一次的类. 通常用来代表那些本质上唯一的系统组件. &lt;/p&gt;
&lt;p&gt;使类成为Singleton会使得它的客户端代码测试变得困难, 因为无法给它替换模拟实现, 除非它实现了一个充当其类型的接口.&lt;/p&gt;
&lt;p&gt;单例的实现: 私有构造方法, 类中保留一个字段实例(static, final), 用public直接公开字段或者用一个public static的&lt;code&gt;getInstance()&lt;/code&gt;方法返回该字段.&lt;/p&gt;
&lt;p&gt;为了使单例实现序列化(&lt;code&gt;Serializable&lt;/code&gt;), 仅仅在声明中加上&lt;code&gt;implements Serializable&lt;/code&gt;是不够的, 为了维护并保证单例, 必须声明所有实例域都是&lt;code&gt;transient&lt;/code&gt;的, 并提供一个&lt;code&gt;readResolve()&lt;/code&gt;方法, 返回单例的实例. 否则每次反序列化一个实例时, 都会创建一个新的实例.&lt;/p&gt;
&lt;p&gt;从Java 1.5起, &lt;strong&gt;可以使用枚举来实现单例&lt;/strong&gt;: 只需要编写一个包含单个元素的枚举类型.&lt;br&gt;这种方法无偿地提供了序列化机制, 绝对防止多次实例化.&lt;/p&gt;
&lt;h2 id=&quot;第4条-通过私有构造器强化不可实例化的能力&quot;&gt;&lt;a href=&quot;#第4条-通过私有构造器强化不可实例化的能力&quot; class=&quot;headerlink&quot; title=&quot;第4条 通过私有构造器强化不可实例化的能力&quot;&gt;&lt;/a&gt;第4条 通过私有构造器强化不可实例化的能力&lt;/h2&gt;&lt;p&gt;只包含静态方法和静态域的类名声不太好, 因为有些人会滥用它们来编写过程化的程序. 尽管如此, 它们确实也有特有的用处, 比如:&lt;br&gt;&lt;code&gt;java.lang.Math&lt;/code&gt;, &lt;code&gt;java.util.Arrays&lt;/code&gt;把基本类型的值或数组类型上的相关方法组织起来; &lt;code&gt;java.util.Collections&lt;/code&gt;把实现特定接口的对象上的静态方法组织起来; 还可以利用这种类把final类上的方法组织起来, 以取代扩展该类的做法.&lt;/p&gt;
&lt;p&gt;这种工具类(utility class)不希望被实例化, 然而在缺少显式构造器的情况下, 系统会提供默认构造器, 可能会造成这些类被无意识地实例化.&lt;/p&gt;
&lt;p&gt;通过做成抽象类来强制该类不可被实例化, 这是行不通的, 因为可能会造成”这个类是用来被继承的”的误解, 而继承它的子类又可以被实例化.&lt;/p&gt;
&lt;p&gt;所以只要让这个类包含一个私有的构造器, 它就不能被实例化了. 进一步地, 可以在这个私有构造器中抛出异常. &lt;/p&gt;
&lt;p&gt;这种做法还会导致这个类不能被子类化, 因为子类构造器必须显式或隐式地调用super构造器. 在这种情况下, 子类就没有可访问的超类构造器可调用了.&lt;/p&gt;
&lt;h2 id=&quot;第5条-避免创建不必要的对象&quot;&gt;&lt;a href=&quot;#第5条-避免创建不必要的对象&quot; class=&quot;headerlink&quot; title=&quot;第5条 避免创建不必要的对象&quot;&gt;&lt;/a&gt;第5条 避免创建不必要的对象&lt;/h2&gt;&lt;p&gt;一般来说, 最好能重用对象而不是每次需要的时候创建一个相同功能的新对象. 如果对象是&lt;strong&gt;不可变的(immutable)&lt;/strong&gt;, 它就始终可以被重用.&lt;/p&gt;
&lt;p&gt;比如应该用:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &lt;span class=&quot;string&quot;&gt;&quot;stringette&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而不是:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; String(&lt;span class=&quot;string&quot;&gt;&quot;stringette&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Don&#39;t do this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;包含相同字符串的字面常量对象是会被重用的.&lt;/p&gt;
&lt;p&gt;对于同时提供了静态工厂方法和构造方法的&lt;strong&gt;不可变类&lt;/strong&gt;, 通常可以使用静态工厂方法而不是构造器, 以避免创建不必要的对象.&lt;br&gt;比如&lt;code&gt;Boolean.valueOf()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;除了重用不可变对象以外, 也可以重用那些已知不会被修改的可变对象. 比如把一个方法中需要用到的不变的数据保存成常量对象(&lt;code&gt;static final&lt;/code&gt;), 只在初始化的时候创建一次(&lt;code&gt;用static块&lt;/code&gt;), 这样就不用每次调用方法都重复创建.&lt;/p&gt;
&lt;p&gt;如果该方法永远不会调用, 那也不需要初始化相关的字段, 可以通过延迟初始化(lazily initializing)把这些对象的初始化放到方法第一次被调用的时候. (但是不建议这样做, 没有性能的显著提高, 并且会使方法看起来复杂.)&lt;/p&gt;
&lt;p&gt;前面的例子中, 所讨论的对象显然是能够被重用的, 因为它们被初始化之后不会再改变. 其他有些情形则并不总是这么明显了. (适配器(adapter)模式, Map的接口keySet()方法返回同样的Set实例).&lt;/p&gt;
&lt;p&gt;Java 1.5中加入了自动装箱(autoboxing), 会创建对象. 所以程序中优先使用基本类型而不是装箱基本类型, 要当心无意识的自动装箱. &lt;/p&gt;
&lt;p&gt;小对象的构造器只做很少量的显式工作, 创建和回收都是很廉价的, 所以通过创建附加的对象提升程序的清晰简洁性也是好事.&lt;/p&gt;
&lt;p&gt;通过维护自己的对象池(object pool)来避免创建对象并不是一种好的做法(代码, 内存), 除非池中的对象是非常重量级的. 正确使用的典型: 数据库连接池.&lt;/p&gt;
&lt;h2 id=&quot;第6条-消除过期的对象引用&quot;&gt;&lt;a href=&quot;#第6条-消除过期的对象引用&quot; class=&quot;headerlink&quot; title=&quot;第6条 消除过期的对象引用&quot;&gt;&lt;/a&gt;第6条 消除过期的对象引用&lt;/h2&gt;&lt;p&gt;一个内存泄露的例子: 一个用数组实现的Stack, 依靠size标记来管理栈的深度, 但是这样从栈中弹出来的过期对象并没有被释放. &lt;/p&gt;
&lt;p&gt;称内存泄露为”无意识的对象保持(unintentional object retention)”更为恰当.&lt;/p&gt;
&lt;p&gt;修复方法: 一旦对象引用已经过期, 只需清空这些引用即可.&lt;/p&gt;
&lt;p&gt;清空对象引用应该是一种例外, 而不是一种规范行为. 消除过期引用最好的方法是让包含该引用的变量结束其生命周期. 如果你是在最紧凑的作用域范围内定义变量, 这种情形就会自然发生.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般而言, 只要类是自己管理内存&lt;/strong&gt;, 程序员就应该警惕内存泄露问题. 一旦元素被释放掉, 则该元素中包含的任何对象引用都应该被清空.&lt;/p&gt;
&lt;p&gt;内存泄露的&lt;strong&gt;另一个常见来源是缓存&lt;/strong&gt;. 这个问题有这几种可能的解决方案: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.缓存项的生命周期由该键的外部引用决定 -&amp;gt; &lt;code&gt;WeakHashMap&lt;/code&gt;; &lt;/li&gt;
&lt;li&gt;2.缓存项的生命周期是否有意义并不是很容易确定 -&amp;gt; 随着时间的推移或者新增项的时候删除没用的项.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内存泄露的&lt;strong&gt;第三个常见来源是监听器和其他回调&lt;/strong&gt;.&lt;br&gt;如果你实现了一个API, 客户端注册了回调却没有注销, 就会积聚对象.&lt;br&gt;API端可以只保存对象的弱引用来确保回调对象生命周期结束后会被垃圾回收. &lt;/p&gt;
&lt;h2 id=&quot;第7条-避免使用终结方法&quot;&gt;&lt;a href=&quot;#第7条-避免使用终结方法&quot; class=&quot;headerlink&quot; title=&quot;第7条 避免使用终结方法&quot;&gt;&lt;/a&gt;第7条 避免使用终结方法&lt;/h2&gt;&lt;p&gt;终结方法(finalizer)通常是不可预测的, 也是很危险的, 一般情况下是不必要的.&lt;br&gt;使用终结方法会导致行为不稳定, 降低性能, 以及可移植性问题.&lt;/p&gt;
&lt;p&gt;不要把finalizer当成是C++中的析构器(destructors)的对应物.&lt;br&gt;在Java中, 当一个对象变得不可到达的时候, 垃圾回收器会回收与该对象相关联的存储空间.&lt;/p&gt;
&lt;p&gt;C++的析构器也可以用来回收其他的非内存资源, 而在Java中, 一般用try-finally块来完成类似的工作.&lt;/p&gt;
&lt;p&gt;终结方法的缺点在于不能保证会被及时地执行. 从一个对象变得不可到达开始, 到它的终结方法被执行, 所花费的时间是任意长的. JVM会延迟执行终结方法. &lt;/p&gt;
&lt;p&gt;及时地执行终结方法正是垃圾回收算法的一个主要功能. 这种算法在不同的JVM上不同. &lt;/p&gt;
&lt;p&gt;Java语言规范不仅不保证终结方法会被及时地执行, 而且根本就不保证它们会被执行. 所以不应该依赖于终结方法来更新重要的持久状态. &lt;/p&gt;
&lt;p&gt;不要被&lt;code&gt;System.gc()&lt;/code&gt;和&lt;code&gt;System.runFinalization()&lt;/code&gt;这两个方法所迷惑, 它们确实增加了终结方法被执行的机会, 但是它们并不保证终结方法一定会被执行. &lt;/p&gt;
&lt;p&gt;如果未捕获的异常在终结过程中被抛出来, 那么这种异常可以被忽略, 而且该对象的终结过程也会终止. &lt;/p&gt;
&lt;p&gt;使用终结方法有一个严重的性能损失. &lt;/p&gt;
&lt;p&gt;如果类的对象中封装的资源(例如文件或线程)确实需要终止, 应该怎么做才能不用编写终结方法呢? 只需&lt;strong&gt;提供一个显式的终止方法&lt;/strong&gt;. 并要求该类的客户端在每个实例不再有用的时候调用这个方法. 注意, 该实例必须记录下自己是否已经被终止了, 如果被终止之后再被调用, 要抛出异常.&lt;br&gt;例子: &lt;code&gt;InputStream&lt;/code&gt;, &lt;code&gt;OutputStream&lt;/code&gt;和&lt;code&gt;java.sql.Connection&lt;/code&gt;上的&lt;code&gt;close()&lt;/code&gt;方法; &lt;code&gt;java.util.Timer&lt;/code&gt;的&lt;code&gt;cancel()&lt;/code&gt;方法.&lt;br&gt;&lt;code&gt;Image.flush()&lt;/code&gt;会释放实例相关资源, 但该实例仍处于可用的状态, 如果有必要会重新分配资源. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;显式的终止方法通常与try-finally块结合使用, 以确保及时终止.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;终结方法的好处, 它有两种合法用途:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当显式终止方法被忘记调用时, 终结方法可以充当安全网(safety net). &lt;strong&gt;但是如果终结方法发现资源还未被终止, 应该记录日志警告, 这表示客户端代码中的bug.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对象的本地对等体(native peer), 垃圾回收器不会知道它, 当它的Java对等体被回收的时候, 它不会被回收. 如果本地对等体拥有必须被及时终止的资源, 那么该类就应该有一个显式的终止方法, 如前, 可以是本地方法或者它也可以调用本地方法; 如果本地对等体并不拥有关键资源, 终结方法是执行这项任务最合适的工具. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意, 终结方法链(finalizer chaining)并不会自动执行. 子类覆盖终结方法时, 必须手动调用超类的终结方法. try中终结子类, finally中终结超类. &lt;/p&gt;
&lt;p&gt;为了避免忘记调用超类的终结方法, 还有一种写法, 是在子类中写一个匿名的类, 该匿名类的单个实例被称为&lt;strong&gt;终结方法守卫者(finalizer guardian)&lt;/strong&gt;, 当守卫者被终结的时候, 它执行外围实例的终结行为. 这样外围类并没有覆盖超类的终结方法, 保证了超类的终结方法一定会被执行. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Effective-Java笔记一-创建和销毁对象&quot;&gt;&lt;a href=&quot;#Effective-Java笔记一-创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;Effective Java笔记一 创建和销毁对象&quot;&gt;&lt;/a&gt;Effective Java笔记一 创建和销毁对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;第1条 考虑用静态工厂方法代替构造器&lt;/li&gt;
&lt;li&gt;第2条 遇到多个构造器参数时要考虑用构建器&lt;/li&gt;
&lt;li&gt;第3条 用私有构造器或者枚举类型强化Singleton属性&lt;/li&gt;
&lt;li&gt;第4条 通过私有构造器强化不可实例化的能力&lt;/li&gt;
&lt;li&gt;第5条 避免创建不必要的对象&lt;/li&gt;
&lt;li&gt;第6条 消除过期的对象引用&lt;/li&gt;
&lt;li&gt;第7条 避免使用终结方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://mengdd.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://mengdd.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 232</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/25/android-weekly-notes-issue-232/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/25/android-weekly-notes-issue-232/</id>
    <published>2016-11-25T08:32:57.000Z</published>
    <updated>2016-11-28T06:25:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-232&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-232&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #232&quot;&gt;&lt;/a&gt;Android Weekly Issue #232&lt;/h1&gt;&lt;p&gt;November 20th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #232&lt;/a&gt;&lt;br&gt;本期内容包括: Kotlin的优势讨论; MVVM模式结合RxJava和Retrofit的应用构架实现; Android中传感器使用; 如何给App写单元测试; Reductor的组合使用; Android应用进程被杀死的状态恢复和问题处理; Kotlin中的Anko; 后台任务处理库”Android Job”; VectorDrawable和PNG的使用问题等.&lt;/p&gt;
&lt;p&gt;本期开源库: 给ImageView和RelativeLayout的底部加曲线; 长按弹框; Switch Button控件; 给View加深度/厚度的库.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;How-Kotlin-became-our-primary-language-for-Android&quot;&gt;&lt;a href=&quot;#How-Kotlin-became-our-primary-language-for-Android&quot; class=&quot;headerlink&quot; title=&quot;How Kotlin became our primary language for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/uptech-team/how-kotlin-became-our-primary-language-for-android-3af7fd6a994c#.a50t4ple8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Kotlin became our primary language for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们team想要完全用kotlin开发一个应用.&lt;br&gt;本文是他们的心得体会.&lt;/p&gt;
&lt;p&gt;关于函数式编程的学习, 作者推荐: &lt;a href=&quot;https://www.coursera.org/specializations/scala&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个Scala的课程&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kotlin的优势: 和Java可以互相调用; 函数式语言; function purity; 高阶函数(函数可以作为参数或返回值); 不可变性(val); Null-safety; Anko;  Kotlin Android extensions(移除了ButterKnife); 还有对初学者很友好, 可以摆脱很多第三方的依赖, 函数扩展等等优势.&lt;/p&gt;
&lt;h2 id=&quot;RxJava-2-Android-MVVM-Lifecycle-App-Structure-with-Retrofit-2&quot;&gt;&lt;a href=&quot;#RxJava-2-Android-MVVM-Lifecycle-App-Structure-with-Retrofit-2&quot; class=&quot;headerlink&quot; title=&quot;RxJava 2: Android MVVM Lifecycle App Structure with Retrofit 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@manuelvicnt/rxjava2-android-mvvm-lifecycle-app-structure-with-retrofit-2-cf903849f49e#.jx3vg232m&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 2: Android MVVM Lifecycle App Structure with Retrofit 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者一年多以前写过一个这个文章: &lt;a href=&quot;https://medium.com/@manuelvicnt/rxjava-android-mvvm-app-structure-with-retrofit-a5605fa32c00#.44uq87s6w&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava: Android MVVM App structure with Retrofit&lt;/a&gt;, 介绍MVVM结合Retrofit和RxJava的App架构模式. 此篇文章是一年后作者对此的改进.&lt;/p&gt;
&lt;p&gt;主要内容有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.通过View和ViewModel之间的协议接口, 让ViewModel知道View的生命周期变化.&lt;/li&gt;
&lt;li&gt;2.RxJava2的流式类型: Completable, Maybe, Flowable的使用.&lt;/li&gt;
&lt;li&gt;3.用RxJava操作符组合网络请求: 让不同的网络请求一起发送, 并且都返回以后才得到通知 -&amp;gt; 用&lt;code&gt;.zip()&lt;/code&gt;. 顺序连接不同的网络请求 -&amp;gt; &lt;code&gt;.flatMap()&lt;/code&gt;, &lt;code&gt;.andThen()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;4.后台网络请求和View更新的处理: 不取消网络请求, 等View再次resume的时候检查状态再更新. 这里提供了两种选择, 一种是用前面提到的协议接口中的生命周期方法, 另一种是用&lt;code&gt;AsyncProcessor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;5.Mock Retrofit的网络请求.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Tech-Talks-You-Do-Have-Something-To-Say&quot;&gt;&lt;a href=&quot;#Tech-Talks-You-Do-Have-Something-To-Say&quot; class=&quot;headerlink&quot; title=&quot;Tech Talks - You Do Have Something To Say!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/upday-devs/tech-talks-you-do-have-something-to-say-a1a0ae23fa0#.61m7x6rj8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tech Talks - You Do Have Something To Say!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章鼓励你分享你的知识, 经验, 问题及解决方法,  无论是通过演讲还是写出来的方式.&lt;/p&gt;
&lt;h2 id=&quot;Da-Real-Fragmentation-Sensors&quot;&gt;&lt;a href=&quot;#Da-Real-Fragmentation-Sensors&quot; class=&quot;headerlink&quot; title=&quot;Da Real Fragmentation - Sensors&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pguardiola.com/blog/darealfragmentation-sensors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Da Real Fragmentation - Sensors&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;介绍了Android中传感器的使用.&lt;/p&gt;
&lt;h2 id=&quot;Simple-unit-tests-for-Android&quot;&gt;&lt;a href=&quot;#Simple-unit-tests-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Simple unit tests for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stfalcon.com/en/blog/post/simple-unit-tests-for-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple unit tests for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如何给你的App写简单的单元测试.&lt;/p&gt;
&lt;h2 id=&quot;Reductor-Redux-for-Android-Part-2&quot;&gt;&lt;a href=&quot;#Reductor-Redux-for-Android-Part-2&quot; class=&quot;headerlink&quot; title=&quot;Reductor - Redux for Android. Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yarikx.github.io/Reductor-composition/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor - Redux for Android. Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是系列文章中的一篇, 继续讲&lt;a href=&quot;https://github.com/Yarikx/reductor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor&lt;/a&gt; library – Redux的Android版实现.&lt;/p&gt;
&lt;p&gt;这篇文章结合例子将如何组合使用以及用@CombinedState来生成代码.&lt;/p&gt;
&lt;h2 id=&quot;Android-process-death-—-and-the-big-implications-for-your-app&quot;&gt;&lt;a href=&quot;#Android-process-death-—-and-the-big-implications-for-your-app&quot; class=&quot;headerlink&quot; title=&quot;Android process death — and the (big) implications for your app&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/inloop/android-process-kill-and-the-big-implications-for-your-app-1ecbed4921cb#.iipoq2fne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android process death — and the (big) implications for your app&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文探讨进程被杀死有可能导致的种种问题.&lt;/p&gt;
&lt;p&gt;你的Android应用如果在paused或者stopped状态, 那么它任何时候都有可能会被系统杀死. 这时候你的Activity, Fragment和View状态将被保存, 当你回到应用的时候, 系统会重新启动进程, 重新创建Activity, 存储的状态会在bundle中返回.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个过程存在一个问题&lt;/strong&gt;: 整个进程都被杀死了, 所有单例(或application scope的对象), 临时数据, 还有retained Fragment中的数据, 这些所有都会处于一种全新创建的状态, 但唯有一个不同, 一些在bundle中存储的状态被恢复出来了.&lt;/p&gt;
&lt;p&gt;这样有可能会导致一些异常, 比如你的界面想要恢复一种状态, 但是数据已经被清空了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何测试这种情况呢?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用App, home键把它放进后台, 杀死app, 再恢复.&lt;/li&gt;
&lt;li&gt;打开选项”Don’t Keep Activities”. 这种测试并不会杀死进程, 只会测试Activity的状态恢复.&lt;/li&gt;
&lt;li&gt;设置Developer options中的Background Process Limit为”No background processes”. 这样把应用放在后台, 打开另一个应用, 再回来自己的应用, 将会重启进程.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;相关问题信号&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例&lt;/li&gt;
&lt;li&gt;保存可变数据的共享的实例&lt;/li&gt;
&lt;li&gt;Application类中保存的数据和状态&lt;/li&gt;
&lt;li&gt;可变的静态字段&lt;/li&gt;
&lt;li&gt;Retained fragments(状态恢复了, 但是数据却丢失了)&lt;/li&gt;
&lt;li&gt;基本上任何没有在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;中保存但是你却依赖的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题没有唯一的解决方案, 取决于你的应用.&lt;/p&gt;
&lt;h2 id=&quot;400-faster-layouts-with-Anko&quot;&gt;&lt;a href=&quot;#400-faster-layouts-with-Anko&quot; class=&quot;headerlink&quot; title=&quot;400% faster layouts with Anko&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@vergauwen.simon/400-faster-layouts-with-anko-da17f32c45dd#.bz6a3y8ql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;400% faster layouts with Anko&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者把自己的一个布局改为用Kotlin的Anko, 然后测试性能.&lt;/p&gt;
&lt;p&gt;好处是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.性能提升了, 避免了XML的运行时解析所花费的时间.&lt;/li&gt;
&lt;li&gt;2.可以动态地加入逻辑, 比如版本判断, 屏幕尺寸, 方向判断等.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者用的测试性能的工具是: &lt;a href=&quot;https://github.com/frogermcs/AndroidDevMetrics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDevMetrics&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Background-Work-with-Android-Job-and-Dagger&quot;&gt;&lt;a href=&quot;#Background-Work-with-Android-Job-and-Dagger&quot; class=&quot;headerlink&quot; title=&quot;Background Work with Android Job and Dagger&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.adavis.info/2016/11/background-work-with-android-job-and.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Background Work with Android Job and Dagger&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Android上的后台工作, 你可以选择&lt;code&gt;Alarm Manager&lt;/code&gt;, &lt;code&gt;Job Scheduler&lt;/code&gt;或&lt;code&gt;GCM Network Manager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;为了帮开发者从每种实现中抽象出来, Evernote开源了一个库: Android Job. 本文介绍了这个库如何使用.&lt;/p&gt;
&lt;h2 id=&quot;VectorDrawable-PNG&quot;&gt;&lt;a href=&quot;#VectorDrawable-PNG&quot; class=&quot;headerlink&quot; title=&quot;VectorDrawable PNG&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/vectordrawable-png/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VectorDrawable PNG&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的应用中有VectorDrawable的版本兼容问题, 用support library中的Compat版本也不好使, 于是他们在旧版本决定使用自动生成的png.&lt;/p&gt;
&lt;p&gt;然后发现了生成png的颜色设置问题, 在旧版本生成的图片用的是fillColor而不是tintColor. 把fillColor设置成想要的颜色即可.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Depth-Library-by-Daniel-Zeller&quot;&gt;&lt;a href=&quot;#Depth-Library-by-Daniel-Zeller&quot; class=&quot;headerlink&quot; title=&quot;Depth Library by Daniel Zeller&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.androidexperiments.com/experiment/depth-library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth Library by Daniel Zeller&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个应用, 展示了&lt;a href=&quot;https://github.com/danielzeller/Depth-LIB-Android-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth-LIB-Android-&lt;/a&gt;的功能.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Crescento&quot;&gt;&lt;a href=&quot;#Crescento&quot; class=&quot;headerlink&quot; title=&quot;Crescento&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/developer-shivam/crescento/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crescento&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;ImageView&lt;/code&gt;和&lt;code&gt;RelativeLayout&lt;/code&gt;底部加上曲线的库.&lt;/p&gt;
&lt;h2 id=&quot;LongPressPopup&quot;&gt;&lt;a href=&quot;#LongPressPopup&quot; class=&quot;headerlink&quot; title=&quot;LongPressPopup&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RiccardoMoro/LongPressPopup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LongPressPopup&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;长按出现弹框的库.&lt;/p&gt;
&lt;h2 id=&quot;RMSwitch&quot;&gt;&lt;a href=&quot;#RMSwitch&quot; class=&quot;headerlink&quot; title=&quot;RMSwitch&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RiccardoMoro/RMSwitch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RMSwitch&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Switch Button的库, 带有更多自定义扩展功能.&lt;/p&gt;
&lt;h2 id=&quot;Depth-LIB-Android&quot;&gt;&lt;a href=&quot;#Depth-LIB-Android&quot; class=&quot;headerlink&quot; title=&quot;Depth-LIB-Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/danielzeller/Depth-LIB-Android-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Depth-LIB-Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个库给View加上深度/厚度.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-232&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-232&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #232&quot;&gt;&lt;/a&gt;Android Weekly Issue #232&lt;/h1&gt;&lt;p&gt;November 20th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-232&quot;&gt;Android Weekly Issue #232&lt;/a&gt;&lt;br&gt;本期内容包括: Kotlin的优势讨论; MVVM模式结合RxJava和Retrofit的应用构架实现; Android中传感器使用; 如何给App写单元测试; Reductor的组合使用; Android应用进程被杀死的状态恢复和问题处理; Kotlin中的Anko; 后台任务处理库”Android Job”; VectorDrawable和PNG的使用问题等.&lt;/p&gt;
&lt;p&gt;本期开源库: 给ImageView和RelativeLayout的底部加曲线; 长按弹框; Switch Button控件; 给View加深度/厚度的库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="RxJava2" scheme="http://mengdd.github.io/tags/RxJava2/"/>
    
      <category term="Redux" scheme="http://mengdd.github.io/tags/Redux/"/>
    
      <category term="Reductor" scheme="http://mengdd.github.io/tags/Reductor/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Sensor" scheme="http://mengdd.github.io/tags/Sensor/"/>
    
      <category term="Testing" scheme="http://mengdd.github.io/tags/Testing/"/>
    
      <category term="Unit Test" scheme="http://mengdd.github.io/tags/Unit-Test/"/>
    
      <category term="Process" scheme="http://mengdd.github.io/tags/Process/"/>
    
      <category term="State" scheme="http://mengdd.github.io/tags/State/"/>
    
      <category term="Anko" scheme="http://mengdd.github.io/tags/Anko/"/>
    
      <category term="VectorDrawable" scheme="http://mengdd.github.io/tags/VectorDrawable/"/>
    
      <category term="PNG" scheme="http://mengdd.github.io/tags/PNG/"/>
    
      <category term="Switch" scheme="http://mengdd.github.io/tags/Switch/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 231</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/17/android-weekly-notes-issue-231/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/17/android-weekly-notes-issue-231/</id>
    <published>2016-11-17T10:25:37.000Z</published>
    <updated>2016-11-17T10:42:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-231&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-231&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #231&quot;&gt;&lt;/a&gt;Android Weekly Issue #231&lt;/h1&gt;&lt;p&gt;November 13th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-231&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #231&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Weekly阅读笔记, Issue #231, 本期内容包括: MVP中的View做成passive响应式的, 返回Observable; Android Studio使用技巧; &lt;code&gt;BottomNavigationView&lt;/code&gt;的使用; App tracking; Kotlin; 用Kotlin实现的Filter Animation效果; Dagger2的&lt;code&gt;Scope&lt;/code&gt;和&lt;code&gt;Subcomponent&lt;/code&gt;使用; Espresso测试中mock dagger注入; Android和Java中的Reference和内存泄露; MVVM + RxJava构架实际使用的经验分享; 还有TV以及Audio相关的内容等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Reactive-Views-retrying-errors&quot;&gt;&lt;a href=&quot;#Reactive-Views-retrying-errors&quot; class=&quot;headerlink&quot; title=&quot;Reactive Views: retrying errors&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/xing-engineering/reactive-views-retrying-errors-a59fffbd827f#.m2n2c6v6i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Views: retrying errors&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的app近来重构采用了RxJava和Clean Architecture, 进而想要使用&lt;a href=&quot;http://martinfowler.com/eaaDev/PassiveScreen.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;passive view&lt;/a&gt;, 然后他们就发现了关于Reactive Views的一系列文章, 尤其是这一篇: &lt;a href=&quot;https://artemzin.com/blog/rxui-talking-to-android-view-layer-in-a-reactive-way/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxUi: Talking to Android View layer in a Reactive way&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;他们的主要工作就是把View也改成响应式的, 即View返回Observable. 在Presenter初始化的时候和View的Observable绑定, 所以事件发生的时候会trigger到presenter.&lt;/p&gt;
&lt;p&gt;这项工作主要需要依赖于&lt;a href=&quot;https://github.com/JakeWharton/RxBinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxBinding&lt;/a&gt;, 由于RxBinding没有提供长按RecyclerView item的bind, 所以他们自己写了&lt;a href=&quot;https://gist.github.com/Shyish/92257b6348312b541aa4f6b205eb14e4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一个&lt;/a&gt;.&lt;br&gt;Snackbar也是: &lt;a href=&quot;https://gist.github.com/Shyish/8af4cd774320c57ced0ec21f8840797e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnackbarActionOnSubscribe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者采用这种方式重构了他们的代码, 使得view变成完全passive的.&lt;/p&gt;
&lt;p&gt;并且其中还有一个&lt;code&gt;retryWhen()&lt;/code&gt;使用的解释: &lt;a href=&quot;http://blog.danlew.net/2016/01/25/rxjavas-repeatwhen-and-retrywhen-explained/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava’s repeatWhen and retryWhen, explained&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;50-Android-Studio-Tips-Tricks-amp-Resources&quot;&gt;&lt;a href=&quot;#50-Android-Studio-Tips-Tricks-amp-Resources&quot; class=&quot;headerlink&quot; title=&quot;50 Android Studio Tips, Tricks &amp;amp; Resources&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@mmbialas/50-android-studio-tips-tricks-resources-you-should-be-familiar-with-as-an-android-developer-af86e7cf56d2#.gzyghprf0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;50 Android Studio Tips, Tricks &amp;amp; Resources&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;设置Logcat的颜色; 使用&lt;a href=&quot;https://medium.com/google-developers/writing-more-code-by-writing-less-code-with-android-studio-live-templates-244f648d17c7#.2p54ef8jr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Live Templates&lt;/a&gt;; 快捷键使用; Android Studio的插件; 还有一些资源分享.&lt;/p&gt;
&lt;h2 id=&quot;BottomNavigationView&quot;&gt;&lt;a href=&quot;#BottomNavigationView&quot; class=&quot;headerlink&quot; title=&quot;BottomNavigationView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/bottomnavigationview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BottomNavigationView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Design support library 25.0.0推出了BottomNavigationView, 本文介绍其使用.&lt;/p&gt;
&lt;h2 id=&quot;The-key-concepts-of-app-tracking-for-developers&quot;&gt;&lt;a href=&quot;#The-key-concepts-of-app-tracking-for-developers&quot; class=&quot;headerlink&quot; title=&quot;The key concepts of app tracking for developers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sergii/the-key-concepts-of-app-tracking-for-developers-a11bebf1e65e#.mhdpwt9x9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The key concepts of app tracking for developers&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章主要讲移动应用数据追踪和分析的几个原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么你需要tracking;  &lt;/li&gt;
&lt;li&gt;什么时候需要收集数据; &lt;/li&gt;
&lt;li&gt;用什么Analytics tool; &lt;/li&gt;
&lt;li&gt;用户隐私相关; &lt;/li&gt;
&lt;li&gt;代码设计模式以及挑战; &lt;/li&gt;
&lt;li&gt;如何debug和测试输出;&lt;/li&gt;
&lt;li&gt;如何分析数据;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Why-You-Must-Try-Kotlin-For-Android-Development&quot;&gt;&lt;a href=&quot;#Why-You-Must-Try-Kotlin-For-Android-Development&quot; class=&quot;headerlink&quot; title=&quot;Why You Must Try Kotlin For Android Development?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@amitshekhar/why-you-must-try-kotlin-for-android-development-e14d00c8084b#.z0xt70upu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why You Must Try Kotlin For Android Development?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;为什么要使用Kotlin来做Android开发? 简洁, 安全, 灵活, 和Java可互相操作.&lt;/p&gt;
&lt;p&gt;文中介绍了Null Safety, Smart Casting, Default Arguments, Named Arguments, Functional Programming, Concise Code.&lt;/p&gt;
&lt;h2 id=&quot;Implementing-Filter-Animation-in-Kotlin&quot;&gt;&lt;a href=&quot;#Implementing-Filter-Animation-in-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Implementing Filter Animation in Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yalantis.com/blog/develop-filter-animation-kotlin-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Implementing Filter Animation in Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们搞了一个应用FIT, 为女性IT工作者提供社区和交流平台, 想要成为Quora加上Linkedin.&lt;/p&gt;
&lt;p&gt;为了让用户选择分类和过滤器tag进行搜索, 他们开发了一个组件: &lt;a href=&quot;https://github.com/Yalantis/SearchFilter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SearchFilter&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;文中讨论了这种设计的动画实现, 库是用Kotlin写的.&lt;/p&gt;
&lt;h2 id=&quot;DI-101-—-Part-3&quot;&gt;&lt;a href=&quot;#DI-101-—-Part-3&quot; class=&quot;headerlink&quot; title=&quot;DI 101 — Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/di-101/di-101-part-3-f0136e67db8#.rdp4e4fwc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DI 101 — Part 3&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文讲什么是Scope, 如何定义Scope, 如何使用Scope和@Subcomponent.&lt;/p&gt;
&lt;p&gt;Subcomponent会继承父类的所有bindings.&lt;/p&gt;
&lt;p&gt;作者定义了一个Activity的Scope, 然后定义了一个Subcomponent专门给这个Activity用, 这个Subcomponent只在这个Activity的生命周期里存活. 代码例子比较简洁易懂.&lt;/p&gt;
&lt;h2 id=&quot;How-Dagger-2-Helps-In-Android-Espresso-Tests&quot;&gt;&lt;a href=&quot;#How-Dagger-2-Helps-In-Android-Espresso-Tests&quot; class=&quot;headerlink&quot; title=&quot;How Dagger 2 Helps In Android Espresso Tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ottodroid.net/?p=514&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Dagger 2 Helps In Android Espresso Tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章介绍了如何在写Espresso测试的时候, 使用一个测试用的Dagger Component.&lt;/p&gt;
&lt;h2 id=&quot;Finally-understanding-how-references-work-in-Android-and-Java&quot;&gt;&lt;a href=&quot;#Finally-understanding-how-references-work-in-Android-and-Java&quot; class=&quot;headerlink&quot; title=&quot;Finally understanding how references work in Android and Java&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/finally-understanding-how-references-work-in-android-and-java-26a0d9c92f83#.95piwft68&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Finally understanding how references work in Android and Java&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲了Java中的引用类型和Android中的内存泄露.&lt;/p&gt;
&lt;p&gt;Java中的引用类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strong reference&lt;/li&gt;
&lt;li&gt;WeakReference&lt;/li&gt;
&lt;li&gt;SoftReference&lt;/li&gt;
&lt;li&gt;PhantomReference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者详细介绍了每一种引用并用例子说明了使用场景. &lt;/p&gt;
&lt;h2 id=&quot;MVVM-RxJava-Learnings&quot;&gt;&lt;a href=&quot;#MVVM-RxJava-Learnings&quot; class=&quot;headerlink&quot; title=&quot;MVVM + RxJava: Learnings&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/upday-devs/mvvm-rxjava-learnings-1819423f9592#.3rat89dq5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVVM + RxJava: Learnings&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的新闻应用采用MVVM + RxJava架构, 本文总结了他们遇到的问题和学到的两点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;暴露状态, 而不是事件;&lt;/li&gt;
&lt;li&gt;所有的事情都应该通过ViewModel.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Adding-TV-Channels-to-Your-App-with-the-TIF-Companion-Library&quot;&gt;&lt;a href=&quot;#Adding-TV-Channels-to-Your-App-with-the-TIF-Companion-Library&quot; class=&quot;headerlink&quot; title=&quot;Adding TV Channels to Your App with the TIF Companion Library&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/11/adding-tv-channels-to-your-app-with-the-tif-companion-library.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adding TV Channels to Your App with the TIF Companion Library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;TV Input Framework(TIF)和Android TV让第三方应用开发者可以很容易地创建自己的电视频道. &lt;/p&gt;
&lt;h2 id=&quot;Background-Audio-in-Android-With-MediaSessionCompat&quot;&gt;&lt;a href=&quot;#Background-Audio-in-Android-With-MediaSessionCompat&quot; class=&quot;headerlink&quot; title=&quot;Background Audio in Android With MediaSessionCompat&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/background-audio-in-android-with-mediasessioncompat--cms-27030&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Background Audio in Android With MediaSessionCompat&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android support library中的&lt;code&gt;MediaSessionCompat&lt;/code&gt;使用, 以及如何用它来做一个背景音乐.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;FirebaseUI-Android&quot;&gt;&lt;a href=&quot;#FirebaseUI-Android&quot; class=&quot;headerlink&quot; title=&quot;FirebaseUI-Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/firebase/FirebaseUI-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FirebaseUI-Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;FirebaseUI for Android — UI Bindings for Firebase.&lt;/p&gt;
&lt;h2 id=&quot;ChipsLayoutManager&quot;&gt;&lt;a href=&quot;#ChipsLayoutManager&quot; class=&quot;headerlink&quot; title=&quot;ChipsLayoutManager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/BelooS/ChipsLayoutManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChipsLayoutManager&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个自定义的RecyclerView的layout manager, 流式地显示很多小块的TextView.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-231&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-231&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #231&quot;&gt;&lt;/a&gt;Android Weekly Issue #231&lt;/h1&gt;&lt;p&gt;November 13th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-231&quot;&gt;Android Weekly Issue #231&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Weekly阅读笔记, Issue #231, 本期内容包括: MVP中的View做成passive响应式的, 返回Observable; Android Studio使用技巧; &lt;code&gt;BottomNavigationView&lt;/code&gt;的使用; App tracking; Kotlin; 用Kotlin实现的Filter Animation效果; Dagger2的&lt;code&gt;Scope&lt;/code&gt;和&lt;code&gt;Subcomponent&lt;/code&gt;使用; Espresso测试中mock dagger注入; Android和Java中的Reference和内存泄露; MVVM + RxJava构架实际使用的经验分享; 还有TV以及Audio相关的内容等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="TV" scheme="http://mengdd.github.io/tags/TV/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Tools" scheme="http://mengdd.github.io/tags/Tools/"/>
    
      <category term="Memory Leak" scheme="http://mengdd.github.io/tags/Memory-Leak/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="BottomNavigationView" scheme="http://mengdd.github.io/tags/BottomNavigationView/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Audio" scheme="http://mengdd.github.io/tags/Audio/"/>
    
      <category term="Passive View" scheme="http://mengdd.github.io/tags/Passive-View/"/>
    
      <category term="RxBinding" scheme="http://mengdd.github.io/tags/RxBinding/"/>
    
      <category term="Tracking" scheme="http://mengdd.github.io/tags/Tracking/"/>
    
      <category term="Analytics" scheme="http://mengdd.github.io/tags/Analytics/"/>
    
      <category term="Scope" scheme="http://mengdd.github.io/tags/Scope/"/>
    
      <category term="Subcomponent" scheme="http://mengdd.github.io/tags/Subcomponent/"/>
    
      <category term="Reference" scheme="http://mengdd.github.io/tags/Reference/"/>
    
      <category term="Media" scheme="http://mengdd.github.io/tags/Media/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 230</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/11/android-weekly-notes-issue-230/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/11/android-weekly-notes-issue-230/</id>
    <published>2016-11-11T04:57:21.000Z</published>
    <updated>2016-11-13T02:57:01.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-230&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-230&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #230&quot;&gt;&lt;/a&gt;Android Weekly Issue #230&lt;/h1&gt;&lt;p&gt;November 6th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-230&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #230&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Android Weekly笔记, 本期内容包括: Mockito的扩展; ConstraintLayout的链式约束; Kotlin的Async-Await; RxJava2.0; 屏幕旋转导致的Activity重建; Throwable类的设计问题; Espresso测试中如何等待异步请求返回; Kotlin的扩展和运算符重载; Android KeyStore实现用户验证.&lt;/p&gt;
&lt;p&gt;代码部分有proguard的库, mvp的库和WifiManager, ConfigurationManager的包装库.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Extending-Mockito&quot;&gt;&lt;a href=&quot;#Extending-Mockito&quot; class=&quot;headerlink&quot; title=&quot;Extending Mockito&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2016/10/31/mockitomatchers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Extending Mockito&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲了如何扩展Mockito, 简化对参数的验证.&lt;/p&gt;
&lt;p&gt;首先作者举了之前验证参数的例子, 用的是ArgumentCaptor, 写起来很麻烦, 用了自定义的matcher之后简化了很多.&lt;/p&gt;
&lt;h2 id=&quot;ConstraintLayout-Chains-–-Part-2&quot;&gt;&lt;a href=&quot;#ConstraintLayout-Chains-–-Part-2&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout Chains – Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/constraintlayout-chains-part-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout Chains – Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上一篇文章讲过在ConstraintLayout中如何创建对称的链式约束, 本篇文章介绍chainStyle的不同设置和比较.&lt;/p&gt;
&lt;p&gt;默认的spread chain: 均匀分布;&lt;br&gt;inside spread chain: 边缘元素顶边, 中间均匀分布.&lt;/p&gt;
&lt;p&gt;如果指定了权重, 将会按照权重布局. 那么spread chain和inside spread chain就没有区别了.&lt;/p&gt;
&lt;p&gt;packed chain: 默认会把所有元素都放在一起放在中间, 可以指定bias来定义偏移基准, 默认bias是0.5, bias设置为0.25的意思就是往左偏. &lt;/p&gt;
&lt;h2 id=&quot;A-glimpse-of-Async-Await-on-Android&quot;&gt;&lt;a href=&quot;#A-glimpse-of-Async-Await-on-Android&quot; class=&quot;headerlink&quot; title=&quot;A glimpse of Async-Await on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@haarman.niek/async-await-in-android-f0202cf31088#.bdf3jarxd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A glimpse of Async-Await on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kotlin 1.1推出了&lt;a href=&quot;https://github.com/Kotlin/kotlin-coroutines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coroutines&lt;/a&gt;, 这是一个让计算可以在某个点暂停然后之后又恢复的功能, 例子是几年前C#的&lt;a href=&quot;http://blog.stephencleary.com/2012/02/async-and-await.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Async-Await&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者先举例说明了异步操作的几种常见实现, 最后结合自己的库用Async-Await做了一个例子.&lt;/p&gt;
&lt;h2 id=&quot;What’s-different-in-2-0&quot;&gt;&lt;a href=&quot;#What’s-different-in-2-0&quot; class=&quot;headerlink&quot; title=&quot;What’s different in 2.0&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/wiki/What&amp;#39;s-different-in-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s different in 2.0&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;RxJava2.0.0已经发布了. 这是它的wiki page来介绍2.0有什么不同.&lt;/p&gt;
&lt;h2 id=&quot;Activity-Revival-and-the-case-of-the-Rotating-Device&quot;&gt;&lt;a href=&quot;#Activity-Revival-and-the-case-of-the-Rotating-Device&quot; class=&quot;headerlink&quot; title=&quot;Activity Revival and the case of the Rotating Device&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developers/activity-revival-and-the-case-of-the-rotating-device-167e34f9a30d#.fwrqz8nit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity Revival and the case of the Rotating Device&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本篇文章讲configuration变化(比如屏幕旋转)导致的Activity重建.&lt;/p&gt;
&lt;p&gt;为什么configuration变化的时候要重建Activity呢? 因为系统想要尽力地做一些helpful的事情, 希望在这种时候能重新加载正确的资源.&lt;/p&gt;
&lt;p&gt;怎么处理呢?&lt;/p&gt;
&lt;p&gt;方法一: 让系统自动处理. 在屏幕旋转时, &lt;code&gt;onSaveInstanceState()&lt;/code&gt;会在Activity销毁前调用, 可以存储一些状态, 之后重建的时候从bundle中拿出来恢复.&lt;/p&gt;
&lt;p&gt;方法二: 自己处理. 如果你想要获取更多控制, 那么你可以在manifest中声明&lt;code&gt;configChanges&lt;/code&gt;类型, 然后在Activity中覆写&lt;code&gt;onConfigurationChanged()&lt;/code&gt;方法, 来自己做处理.&lt;/p&gt;
&lt;p&gt;另外文章中还讨论了网络请求, 屏幕方向设置, retained fragment的使用等.&lt;/p&gt;
&lt;h2 id=&quot;RxJava-and-Retrofit-Throwing-a-Tantrum&quot;&gt;&lt;a href=&quot;#RxJava-and-Retrofit-Throwing-a-Tantrum&quot; class=&quot;headerlink&quot; title=&quot;RxJava and Retrofit Throwing a Tantrum&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/square-corner-blog/no-cause-for-concern-rxjava-and-retrofit-throwing-a-tantrum-96c9e4ba8a6c#.p1ck4zijo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava and Retrofit Throwing a Tantrum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讨论了他们在项目中遇到的一个问题.&lt;br&gt;他们用&lt;code&gt;RxJavaHooks.enableAssemblyTracking();&lt;/code&gt;来收集RxJava崩溃栈信息, 可以显示出到底是哪一个Observable崩了.&lt;br&gt;使用这个工具以后发现了一个问题, 进而研究了JDK的&lt;code&gt;Throwable&lt;/code&gt;类.&lt;/p&gt;
&lt;p&gt;原来cause不存在(this)和cause未知(null)是两种不同的情况, 但是&lt;code&gt;Throwable&lt;/code&gt;的&lt;code&gt;getCause()&lt;/code&gt;方法都会返回null.&lt;/p&gt;
&lt;h2 id=&quot;Retrofitting-Espresso&quot;&gt;&lt;a href=&quot;#Retrofitting-Espresso&quot; class=&quot;headerlink&quot; title=&quot;Retrofitting Espresso&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://collectiveidea.com/blog/archives/2016/10/13/retrofitting-espresso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofitting Espresso&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用Espresso做测试, 如何等待网络请求结束再验证UI.&lt;/p&gt;
&lt;h2 id=&quot;Composing-functions-in-Kotlin-with-extensions-and-operators&quot;&gt;&lt;a href=&quot;#Composing-functions-in-Kotlin-with-extensions-and-operators&quot; class=&quot;headerlink&quot; title=&quot;Composing functions in Kotlin with extensions and operators&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/composing-functions-in-kotlin-with-extensions-and-operators/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Composing functions in Kotlin with extensions and operators&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;结合Kotlin的extensions和operator overloading功能, 改善function, 让代码变得更优雅.&lt;/p&gt;
&lt;h2 id=&quot;Authentication-sucks-Bad-security-too&quot;&gt;&lt;a href=&quot;#Authentication-sucks-Bad-security-too&quot; class=&quot;headerlink&quot; title=&quot;Authentication sucks. Bad security too&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@flschweiger/authentication-sucks-bad-security-too-345ed20463d4#.yl40vbtgd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Authentication sucks. Bad security too&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个例子, 说明为什么老的验证方法用户体验不好, 我们如何在仍然考虑用户安全的情况下进行改善.&lt;/p&gt;
&lt;p&gt;解决方案是用Android 6.0推出的Android Keystore.&lt;br&gt;作者展示了如何实现并提供了&lt;a href=&quot;https://github.com/flschweiger/SafeApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Design&quot;&gt;&lt;a href=&quot;#Design&quot; class=&quot;headerlink&quot; title=&quot;Design&quot;&gt;&lt;/a&gt;Design&lt;/h1&gt;&lt;h2 id=&quot;Eight-don’ts-for-your-Material-Design-app&quot;&gt;&lt;a href=&quot;#Eight-don’ts-for-your-Material-Design-app&quot; class=&quot;headerlink&quot; title=&quot;Eight don’ts for your Material Design app&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.prototypr.io/common-material-design-bad-practices-to-avoid-b7995f251329#.ij9u38lu7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eight don’ts for your Material Design app&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Material Design app需要避免的8个点.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Android-proguards&quot;&gt;&lt;a href=&quot;#Android-proguards&quot; class=&quot;headerlink&quot; title=&quot;Android-proguards&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yongjhih/android-proguards&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-proguards&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用一行就可以加上所有流行库的proguard.&lt;/p&gt;
&lt;h2 id=&quot;Moxy&quot;&gt;&lt;a href=&quot;#Moxy&quot; class=&quot;headerlink&quot; title=&quot;Moxy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Arello-Mobile/Moxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Moxy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个MVP的库.&lt;/p&gt;
&lt;h2 id=&quot;WiseFy&quot;&gt;&lt;a href=&quot;#WiseFy&quot; class=&quot;headerlink&quot; title=&quot;WiseFy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/isuPatches/WiseFy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WiseFy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包装了Android的WifiManager和ConnectivityManager的一个库.&lt;/p&gt;
&lt;h1 id=&quot;VIDEOS-amp-PODCASTS&quot;&gt;&lt;a href=&quot;#VIDEOS-amp-PODCASTS&quot; class=&quot;headerlink&quot; title=&quot;VIDEOS &amp;amp; PODCASTS&quot;&gt;&lt;/a&gt;VIDEOS &amp;amp; PODCASTS&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLnVy79PaFHMXJha06t6pWfkYcATV4oPvC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droidcon NYC 2016&lt;/a&gt;&lt;br&gt;所有Droidcon NYC 2016的视频资源.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-230&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-230&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #230&quot;&gt;&lt;/a&gt;Android Weekly Issue #230&lt;/h1&gt;&lt;p&gt;November 6th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-230&quot;&gt;Android Weekly Issue #230&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Android Weekly笔记, 本期内容包括: Mockito的扩展; ConstraintLayout的链式约束; Kotlin的Async-Await; RxJava2.0; 屏幕旋转导致的Activity重建; Throwable类的设计问题; Espresso测试中如何等待异步请求返回; Kotlin的扩展和运算符重载; Android KeyStore实现用户验证.&lt;/p&gt;
&lt;p&gt;代码部分有proguard的库, mvp的库和WifiManager, ConfigurationManager的包装库.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Mockito" scheme="http://mengdd.github.io/tags/Mockito/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Async-Await" scheme="http://mengdd.github.io/tags/Async-Await/"/>
    
      <category term="RxJava2.0" scheme="http://mengdd.github.io/tags/RxJava2-0/"/>
    
      <category term="Activity" scheme="http://mengdd.github.io/tags/Activity/"/>
    
      <category term="Rotation" scheme="http://mengdd.github.io/tags/Rotation/"/>
    
      <category term="JDK" scheme="http://mengdd.github.io/tags/JDK/"/>
    
      <category term="Authentication" scheme="http://mengdd.github.io/tags/Authentication/"/>
    
      <category term="KeyStore" scheme="http://mengdd.github.io/tags/KeyStore/"/>
    
      <category term="proguard" scheme="http://mengdd.github.io/tags/proguard/"/>
    
      <category term="WifiManager" scheme="http://mengdd.github.io/tags/WifiManager/"/>
    
      <category term="ConfigurationManager" scheme="http://mengdd.github.io/tags/ConfigurationManager/"/>
    
      <category term="Material Design" scheme="http://mengdd.github.io/tags/Material-Design/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit结合RxJava使用指南</title>
    <link href="http://mengdd.github.io/Android/Retrofit/RxJava/2016/11/08/hello-retrofit-with-rxjava/"/>
    <id>http://mengdd.github.io/Android/Retrofit/RxJava/2016/11/08/hello-retrofit-with-rxjava/</id>
    <published>2016-11-08T02:36:59.000Z</published>
    <updated>2016-11-09T09:15:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;a href=&quot;#Retrofit结合RxJava使用指南&quot; class=&quot;headerlink&quot; title=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;/a&gt;Retrofit结合RxJava使用指南&lt;/h1&gt;&lt;p&gt;Retrofit是一个当前很流行的网络请求库, 官网的介绍是: “Type-safe HTTP client for Android and Java”. 本文介绍Retrofit的使用.&lt;br&gt;先介绍单独使用Retrofit进行网络请求, 后面主要介绍和RxJava结合的请求, 有实例代码.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Retrofit单独使用&quot;&gt;&lt;a href=&quot;#Retrofit单独使用&quot; class=&quot;headerlink&quot; title=&quot;Retrofit单独使用&quot;&gt;&lt;/a&gt;Retrofit单独使用&lt;/h2&gt;&lt;h3 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h3&gt;&lt;p&gt;首先在manifest中加上网络权限:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;app/build.gradle&lt;/code&gt;中加上依赖:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.google.code.gson:gson:2.8.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;准备API和model类&quot;&gt;&lt;a href=&quot;#准备API和model类&quot; class=&quot;headerlink&quot; title=&quot;准备API和model类&quot;&gt;&lt;/a&gt;准备API和model类&lt;/h3&gt;&lt;p&gt;本例子中使用&lt;a href=&quot;https://developer.github.com/v3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github API&lt;/a&gt;做请求.&lt;/p&gt;
&lt;p&gt;以Github的Root Endpoint为例:&lt;br&gt;&lt;code&gt;https://api.github.com&lt;/code&gt;.&lt;br&gt;首先, 我们在命令行发送:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://api.github.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者在Postman发送这个请求, 两种方法都可以得到结果.&lt;/p&gt;
&lt;p&gt;这个请求返回的是一个json.&lt;/p&gt;
&lt;p&gt;利用这个网站: &lt;a href=&quot;http://www.jsonschema2pojo.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsonschema2pojo&lt;/a&gt;, 可以用json生成一个java类, 比如上面这个, 我们给它起名字叫&lt;code&gt;Endpoints.java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;之后例子中的API都是这种方式, 先发送请求得到json, 然后转成java的model类.&lt;/p&gt;
&lt;h3 id=&quot;利用Retrofit发送请求并得到结果&quot;&gt;&lt;a href=&quot;#利用Retrofit发送请求并得到结果&quot; class=&quot;headerlink&quot; title=&quot;利用Retrofit发送请求并得到结果&quot;&gt;&lt;/a&gt;利用Retrofit发送请求并得到结果&lt;/h3&gt;&lt;p&gt;首先写一个&lt;code&gt;ServiceGenerator&lt;/code&gt;类, 用于生成service:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String API_BASE_URL = &lt;span class=&quot;string&quot;&gt;&quot;https://api.github.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; OkHttpClient.Builder httpClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OkHttpClient.Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Retrofit.Builder builder =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Retrofit.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .baseUrl(API_BASE_URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .addConverterFactory(GsonConverterFactory.create());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;S&amp;gt; &lt;span class=&quot;function&quot;&gt;S &lt;span class=&quot;title&quot;&gt;createService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;S&amp;gt; serviceClass)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Retrofit retrofit = builder.client(httpClient.build()).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retrofit.create(serviceClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里指定了我们的base url.&lt;br&gt;&lt;code&gt;createService()&lt;/code&gt;方法返回的是一个泛型.&lt;/p&gt;
&lt;p&gt;然后我们创建&lt;code&gt;GithubService&lt;/code&gt;, 注意这是一个&lt;strong&gt;接口&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.ddmeng.helloretrofit.data.models.Endpoints;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; retrofit2.Call;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; retrofit2.http.GET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; retrofit2.http.Url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GitHubService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;Endpoints&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllEndpoints&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Url String url)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里&lt;code&gt;@GET&lt;/code&gt;指定了是一个GET请求, 因为我们请求的就是base url, 所以是这样写的.&lt;br&gt;&lt;code&gt;Endpoints&lt;/code&gt;类是这个请求所返回的json转化的java类.&lt;/p&gt;
&lt;p&gt;好了, 准备工作做完了, 现在就可以请求并得到结果:&lt;br&gt;请求github api的root url, 得到所有的endpoints:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHubService gitHubService = ServiceGenerator.createService(GitHubService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;Endpoints&amp;gt; endpointsCall = gitHubService.getAllEndpoints(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endpointsCall.enqueue(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;Endpoints&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;Endpoints&amp;gt; call, Response&amp;lt;Endpoints&amp;gt; response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Endpoints endpoints = response.body();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String repositoryUrl = endpoints.getRepositoryUrl();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LogUtils.i(repositoryUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Toast.makeText(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;repository url: &quot;&lt;/span&gt; + repositoryUrl, Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;Endpoints&amp;gt; call, Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明:&lt;br&gt;首先利用前面的ServiceGenerator来创建Service, 然后调用接口中定义的&lt;code&gt;getAllEndpoints()&lt;/code&gt;方法, 此处传入了空字符串, 因为我请求的就是base url.&lt;/p&gt;
&lt;h3 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;&lt;/a&gt;同步和异步&lt;/h3&gt;&lt;p&gt;这里注意用Retrofit请求的返回值是&lt;code&gt;Call&amp;lt;T&amp;gt;&lt;/code&gt; (后面我们还会介绍用RxJava的情形), 泛型T是model类型, 它有两个方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execute()&lt;/code&gt;是同步方法, 返回&lt;code&gt;Response&amp;lt;T&amp;gt;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enqueue()&lt;/code&gt;是异步方法, 在上面的例子中用的就是这个, 在回调&lt;code&gt;onResponse()&lt;/code&gt;中返回了&lt;code&gt;Response&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Converter&quot;&gt;&lt;a href=&quot;#Converter&quot; class=&quot;headerlink&quot; title=&quot;Converter&quot;&gt;&lt;/a&gt;Converter&lt;/h3&gt;&lt;p&gt;Converter的作用: 如果不指定Converter, 默认情况下Retrofit只能返回&lt;code&gt;ResponseBody&lt;/code&gt;类型, 加了Converter之后就可以返回我们定义的Model类型了.&lt;br&gt;所以Converter替我们做了json -&amp;gt; model的工作.&lt;/p&gt;
&lt;p&gt;本例子中ConverterFactory指定的是&lt;code&gt;GsonConverterFactory&lt;/code&gt;. 这里我们选的是Gson Converter, 所以依赖的是&lt;code&gt;com.squareup.retrofit2:converter-gson&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Retrofit支持多种converters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gson: com.squareup.retrofit2:converter-gson&lt;/li&gt;
&lt;li&gt;Jackson: com.squareup.retrofit2:converter-jackson&lt;/li&gt;
&lt;li&gt;Moshi: com.squareup.retrofit2:converter-moshi&lt;/li&gt;
&lt;li&gt;Protobuf: com.squareup.retrofit2:converter-protobuf&lt;/li&gt;
&lt;li&gt;Wire: com.squareup.retrofit2:converter-wire&lt;/li&gt;
&lt;li&gt;Simple XML: com.squareup.retrofit2:converter-simplexml&lt;/li&gt;
&lt;li&gt;Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Path和参数&quot;&gt;&lt;a href=&quot;#Path和参数&quot; class=&quot;headerlink&quot; title=&quot;Path和参数&quot;&gt;&lt;/a&gt;Path和参数&lt;/h3&gt;&lt;p&gt;从上面返回的endpoints可以看到, user_url是: &lt;code&gt;https://api.github.com/users/{user}&lt;/code&gt;&lt;br&gt;这是一个带path参数的url, 我们发请求的时候在{user}处写一个github用户名, 即可得到该用户的信息, 比如:&lt;br&gt;&lt;code&gt;https://api.github.com/users/mengdd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;那么用Retrofit如何处理呢?&lt;br&gt;只需要在&lt;code&gt;GithubService&lt;/code&gt;中增加一个方法, 这样写:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GitHubService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;Endpoints&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllEndpoints&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Url String url)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;users/&amp;#123;user&amp;#125;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Call&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Path(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt; String user)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用时的方法完全一样, 不再赘述, 同理, 如果要在后面加参数, 可以用&lt;code&gt;@Query&lt;/code&gt;.&lt;br&gt;更多注解的例子见官方网站: &lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Retrofit-RxJava&quot;&gt;&lt;a href=&quot;#Retrofit-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Retrofit + RxJava&quot;&gt;&lt;/a&gt;Retrofit + RxJava&lt;/h2&gt;&lt;p&gt;RxJava近年来很流行, 主要优势是流式操作, 可以处理并行发送请求, 使用灵活, 线程切换容易.&lt;br&gt;当你要处理的逻辑比较复杂时, 就会发现使用RxJava的优势.&lt;/p&gt;
&lt;p&gt;以我们的例子来说, 当前我们利用一个请求可以得到一个用户的信息并显示出来.&lt;br&gt;如果我们想得到这个用户的所有repo的所有者或者其他信息, 所有他follow的人的信息, 以及他们的repo的信息呢?&lt;/p&gt;
&lt;p&gt;这就需要发很多个请求, 并且其中有些请求是并行发送的, 如果按照前面的方法, 不断地在callback里面嵌套, 那就太难看了.&lt;/p&gt;
&lt;h3 id=&quot;Setup-with-RxJava&quot;&gt;&lt;a href=&quot;#Setup-with-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Setup with RxJava&quot;&gt;&lt;/a&gt;Setup with RxJava&lt;/h3&gt;&lt;h4 id=&quot;添加RxJava依赖&quot;&gt;&lt;a href=&quot;#添加RxJava依赖&quot; class=&quot;headerlink&quot; title=&quot;添加RxJava依赖&quot;&gt;&lt;/a&gt;添加RxJava依赖&lt;/h4&gt;&lt;p&gt;首先, 添加RxJava和RxAndroid的依赖:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxjava:1.2.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxandroid:1.2.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注: 虽然在我写这篇文章的时候(2016.11.4)RxJava2.0刚刚release, 但是我们还是先用RxJava1来写这个demo.&lt;/p&gt;
&lt;p&gt;然后添加retrofit的adapter-rxjava:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以现在我们的依赖总的看起来是这样:&lt;br&gt;&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dependencies&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;fileTree&lt;/span&gt;(dir: &lt;span class=&quot;string&quot;&gt;&#39;libs&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&#39;*.jar&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    androidTestCompile(&lt;span class=&quot;string&quot;&gt;&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;exclude&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;com.android.support&#39;&lt;/span&gt;, module: &lt;span class=&quot;string&quot;&gt;&#39;support-annotations&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;com.android.support:appcompat-v7:$&amp;#123;supportLibVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;com.android.support:design:$&amp;#123;supportLibVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;com.jakewharton:butterknife:$&amp;#123;butterKnifeVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &lt;span class=&quot;string&quot;&gt;&quot;com.jakewharton:butterknife-compiler:$&amp;#123;butterKnifeVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.google.code.gson:gson:2.8.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxjava:1.2.2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxandroid:1.2.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &lt;span class=&quot;string&quot;&gt;&#39;junit:junit:4.12&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Retrofit结合RxJava&quot;&gt;&lt;a href=&quot;#Retrofit结合RxJava&quot; class=&quot;headerlink&quot; title=&quot;Retrofit结合RxJava&quot;&gt;&lt;/a&gt;Retrofit结合RxJava&lt;/h4&gt;&lt;p&gt;Retrofit.Builder()中加入这一行:&lt;br&gt;&lt;code&gt;.addCallAdapterFactory(RxJavaCallAdapterFactory.create());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ServiceGenerator变成这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServiceGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String API_BASE_URL = &lt;span class=&quot;string&quot;&gt;&quot;https://api.github.com&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; OkHttpClient.Builder httpClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OkHttpClient.Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Retrofit.Builder builder =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Retrofit.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .baseUrl(API_BASE_URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .addConverterFactory(GsonConverterFactory.create())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;S&amp;gt; &lt;span class=&quot;function&quot;&gt;S &lt;span class=&quot;title&quot;&gt;createService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;S&amp;gt; serviceClass)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Retrofit retrofit = builder.client(httpClient.build()).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retrofit.create(serviceClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们在&lt;code&gt;GithubService&lt;/code&gt;中定义的接口方法, 既可以像原来一样返回&lt;code&gt;Call&lt;/code&gt;, 也可以返回&lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Retrofit-RxJava请求实例&quot;&gt;&lt;a href=&quot;#Retrofit-RxJava请求实例&quot; class=&quot;headerlink&quot; title=&quot;Retrofit + RxJava请求实例&quot;&gt;&lt;/a&gt;Retrofit + RxJava请求实例&lt;/h3&gt;&lt;p&gt;以单个请求为例,&lt;br&gt;&lt;strong&gt;不用RxJava的时候&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;users/&amp;#123;user&amp;#125;/following&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; getUserFollowing(&lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;) String user);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;请求的时候是这样的:&lt;br&gt;请求指定用户follow的所有人:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHubService service = ServiceGenerator.createService(GitHubService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; userFollowing = service.getUserFollowing(inputUserNameView.getText().toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userFollowing.enqueue(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; call, Response&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;User&amp;gt; followingUsers = response.body();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        peopleListAdapter.setUsers(followingUsers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; call, Throwable t)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在改用RxJava了, 返回的不是Call而是Observable:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GET&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;users/&amp;#123;user&amp;#125;/following&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; getUserFollowingObservable(&lt;span class=&quot;meta&quot;&gt;@Path&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;) String user);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结合RxJava请求的时候变为这样:&lt;br&gt;还是请求用户follow的所有人:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHubService service = ServiceGenerator.createService(GitHubService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String username = inputUserNameView.getText().toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;onNext: &quot;&lt;/span&gt; + users.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.setUsers(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用RxJava实现后, 请求返回的是一个Observable, 用&lt;code&gt;subscribe()&lt;/code&gt;添加一个订阅者, 即它的观察者.&lt;br&gt;当请求返回后, 回到主线程, 更新UI.&lt;br&gt;这是单个请求的例子, 所以RxJava的优势不是很明显, 如果我们有多个请求, 用RxJava进行变换组合显然就是更好的选择.&lt;/p&gt;
&lt;h4 id=&quot;用RxJava进行线程切换&quot;&gt;&lt;a href=&quot;#用RxJava进行线程切换&quot; class=&quot;headerlink&quot; title=&quot;用RxJava进行线程切换&quot;&gt;&lt;/a&gt;用RxJava进行线程切换&lt;/h4&gt;&lt;p&gt;上个例子中&lt;code&gt;.subscribeOn(Schedulers.io())&lt;/code&gt;指定Observable的工作, 在我们的例子中Observable的工作即发送请求, 在io线程做, 指定了被观察者的处理线程;&lt;br&gt;&lt;code&gt;.observeOn(AndroidSchedulers.mainThread())&lt;/code&gt;指定最后onNext()回调在主线程, 即指定了通知后续观察者的线程.&lt;br&gt;关于这两个操作符的更多说明请看官方文档: &lt;a href=&quot;http://reactivex.io/documentation/operators/subscribeon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;subscribeOn&lt;/a&gt;和&lt;a href=&quot;http://reactivex.io/documentation/operators/observeon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;observeOn&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;RxJava处理多个请求的例子&quot;&gt;&lt;a href=&quot;#RxJava处理多个请求的例子&quot; class=&quot;headerlink&quot; title=&quot;RxJava处理多个请求的例子&quot;&gt;&lt;/a&gt;RxJava处理多个请求的例子&lt;/h3&gt;&lt;p&gt;设计这样一个场景, 我们现在取到了一个用户follow的所有人, 但是取回的信息中并不包含每个人拥有的repo个数, 只有一个url可用户查看所有repo.&lt;/p&gt;
&lt;p&gt;接下来我们要取其中每一个人的详细信息, 就要查询另一个API, 重新查询这个人的完整信息.&lt;br&gt;查询用户follow的所有人, 然后查询每一个人的详细信息:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;subscription = service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;List&amp;lt;User&amp;gt;, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service.getUserObservable(user.getLogin());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.setUsers(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到我们加了两个&lt;code&gt;flatMap()&lt;/code&gt;和一个&lt;code&gt;toList()&lt;/code&gt;来做这个事情.&lt;/p&gt;
&lt;p&gt;首先, 第一步我们用&lt;code&gt;getUserFollowingObservable()&lt;/code&gt;得到的是一个&lt;code&gt;Observable&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;&lt;/code&gt;;&lt;br&gt;我们之后用&lt;code&gt;.flatMap()&lt;/code&gt;, 它的输入是&lt;code&gt;List&amp;lt;User&amp;gt;&lt;/code&gt;, 返回的是&lt;code&gt;Observable&amp;lt;User&amp;gt;&lt;/code&gt;. 我们在其中用了一个&lt;code&gt;.from()&lt;/code&gt;来生成一个发射一组User的&lt;code&gt;Observable&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;之后第二个&lt;code&gt;.flatMap()&lt;/code&gt;里, 输入是前一个&lt;code&gt;Observable&lt;/code&gt;的输出, 即User, 调用了&lt;code&gt;getUserObservable()&lt;/code&gt;, 返回的结果是&lt;code&gt;Observable&amp;lt;User&amp;gt;&lt;/code&gt;, 之后加一个&lt;code&gt;.toList()&lt;/code&gt;, 把输出的结果从单个的User变为List&lt;user&gt;, 即和我们最初的例子一样. &lt;/user&gt;&lt;/p&gt;
&lt;p&gt;只不过此时得到的用户信息是更详细的用户信息, 包含了他的repo数据和follow数据. 因为它们是通过单独查询每一个人得到的.&lt;/p&gt;
&lt;p&gt;运行, 虽然可以得到我们想要的结果, 但是这个例子仍然是有问题的.&lt;/p&gt;
&lt;h4 id=&quot;线程问题处理&quot;&gt;&lt;a href=&quot;#线程问题处理&quot; class=&quot;headerlink&quot; title=&quot;线程问题处理&quot;&gt;&lt;/a&gt;线程问题处理&lt;/h4&gt;&lt;p&gt;上面多个请求的例子, 发现虽然实现了我们的需求, 但是结果回来得很慢.&lt;br&gt;我们加上一个&lt;code&gt;.map&lt;/code&gt;操作符来加上log:&lt;br&gt;(这里省略了一些前后的代码, 只是在&lt;code&gt;.flatMap()&lt;/code&gt;里加了一个&lt;code&gt;.map()&lt;/code&gt;)&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subscription = service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;List&amp;lt;User&amp;gt;, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service.getUserObservable(user.getLogin())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;// this .map is used to output log information to check the threads&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;getUserObservable: &quot;&lt;/span&gt; + user.getLogin());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由Log可以发现(log中的线程号是一样的)单独取每一个用户详细信息的请求都发生在同一个线程, 是顺次进行的.&lt;/p&gt;
&lt;p&gt;查看代码:&lt;br&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloRetrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/HelloRetrofit&lt;/a&gt;.&lt;br&gt;&lt;code&gt;git checkout multiple-requests-in-single-thread&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;回头梳理一下我们的需求, 请求一个所有follow的人, 返回一个follow的人的List, 然后对List中的每一个人, 单独请求详细信息.&lt;/p&gt;
&lt;p&gt;那么按理来说, 第二个批量的请求是可以同时发送, 并行进行的.&lt;br&gt;所以我们想要的行为其实是平行发送多个请求, 然后最后统一结果到UI线程. &lt;/p&gt;
&lt;p&gt;改动如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;subscription = service.getUserFollowingObservable(username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;// 从io线程开始, 取用户follow的所有人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;List&amp;lt;User&amp;gt;, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;from&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, Observable&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; service.getUserObservable(user.getLogin()) &lt;span class=&quot;comment&quot;&gt;// 取每个人的详细信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .subscribeOn(Schedulers.io()) &lt;span class=&quot;comment&quot;&gt;// 指定取每个人详细信息的工作都在单独的io线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .map(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;User, User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; User &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;// this map operation is just used for showing log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;getUserObservable: &quot;&lt;/span&gt; + user.getLogin());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .toList()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .observeOn(AndroidSchedulers.mainThread()) &lt;span class=&quot;comment&quot;&gt;// 最后返回到主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Subscriber&amp;lt;List&amp;lt;User&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;User&amp;gt; users)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;onNext: &quot;&lt;/span&gt; + users.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.setUsers(users);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                peopleListAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给改动的部分加上了注释, 这样更清楚一些.&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;subscribeOn()&lt;/code&gt;指定的是当前的这个Observable的工作在什么线程进行.&lt;br&gt;所以在本例子中, &lt;code&gt;subscribeOn(Schedulers.io())&lt;/code&gt;的位置放在&lt;code&gt;.flatMap()&lt;/code&gt;里面才会产生多个请求并行的效果.&lt;/p&gt;
&lt;p&gt;这样一改, 我们的显示时间不再是所有请求时间之和, 而是只取决于最慢的那个请求时间.&lt;/p&gt;
&lt;p&gt;查看代码:&lt;br&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloRetrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/HelloRetrofit&lt;/a&gt;&lt;br&gt;&lt;code&gt;git checkout multiple-requests-in-multiple-threads&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;取消订阅&quot;&gt;&lt;a href=&quot;#取消订阅&quot; class=&quot;headerlink&quot; title=&quot;取消订阅&quot;&gt;&lt;/a&gt;取消订阅&lt;/h3&gt;&lt;p&gt;正常情况下, 行为结束之后, 到达&lt;code&gt;onComplete()&lt;/code&gt;或者&lt;code&gt;onError()&lt;/code&gt;, RxJava的订阅会自动取消.&lt;br&gt;但是在处理网络请求的时候, 很可能会出现请求还没有返回, 界面就已经结束了的情况.&lt;/p&gt;
&lt;p&gt;上面的代码中已经出现了, 订阅方法&lt;code&gt;subscribe()&lt;/code&gt;的返回值是一个&lt;code&gt;Subscription&lt;/code&gt;对象, 我们保存了这个对象的引用, 然后在&lt;code&gt;onPause()&lt;/code&gt;的时候取消了请求, 防止内存泄露.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (subscription != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; subscription.isUnsubscribed()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscription.unsubscribe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然也可以选别的生命周期回调, 比如&lt;code&gt;onDestroyView()&lt;/code&gt;或者&lt;code&gt;onDestroy()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;如果有多个请求, 可以用:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CompositeSubscription compositeSubscription = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CompositeSubscription();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在发请求的地方, 返回subscription&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compositeSubscription.add(subscription);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 选一个生命周期注销所有请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compositeSubscription.unsubscribe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Demo说明&quot;&gt;&lt;a href=&quot;#Demo说明&quot; class=&quot;headerlink&quot; title=&quot;Demo说明&quot;&gt;&lt;/a&gt;Demo说明&lt;/h2&gt;&lt;p&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloRetrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/HelloRetrofit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本Demo只用于展示Retrofit和RxJava结合的使用, 为了清晰起见所以没有采用MVP构架, 也没有用Dagger进行依赖注入, 有的请求也没有在生命周期结束时取消, 也没有UI的loading效果和没网情况的处理等, 大家使用时请根据实际需要做一些处理.&lt;/p&gt;
&lt;p&gt;这些没有的东西会在我最近在做一个应用repo中出现: &lt;a href=&quot;https://github.com/mengdd/GithubClient&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/GithubClient&lt;/a&gt;, 还在开发中, 可以关注一下. &lt;/p&gt;
&lt;p&gt;另, Demo使用有时候用着用着请求就返回了:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;message&amp;quot;:&amp;quot;API rate limit exceeded for xxx ip...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是因为没授权的用户每小时最多只能发60个请求:&lt;a href=&quot;https://developer.github.com/v3/#rate-limiting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.github.com/v3/#rate-limiting&lt;/a&gt;&lt;br&gt;解决办法就是..查following的人时, 不要查那种follow了很多人的账号. orz.&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Consuming-APIs-with-Retrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath- Consuming APIs with Retrofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://futurestud.io/tutorials/retrofit-getting-started-and-android-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Future Studio 系列教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/56e80c2c677659311bed9841&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 与 Retrofit 结合的最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;a href=&quot;#Retrofit结合RxJava使用指南&quot; class=&quot;headerlink&quot; title=&quot;Retrofit结合RxJava使用指南&quot;&gt;&lt;/a&gt;Retrofit结合RxJava使用指南&lt;/h1&gt;&lt;p&gt;Retrofit是一个当前很流行的网络请求库, 官网的介绍是: “Type-safe HTTP client for Android and Java”. 本文介绍Retrofit的使用.&lt;br&gt;先介绍单独使用Retrofit进行网络请求, 后面主要介绍和RxJava结合的请求, 有实例代码.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/categories/Android/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/categories/Android/Retrofit/RxJava/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 229</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/11/01/android-weekly-notes-issue-229/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/11/01/android-weekly-notes-issue-229/</id>
    <published>2016-11-01T10:01:50.000Z</published>
    <updated>2016-11-01T10:18:13.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-229&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-229&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #229&quot;&gt;&lt;/a&gt;Android Weekly Issue #229&lt;/h1&gt;&lt;p&gt;October 30th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-229&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #229&lt;/a&gt;&lt;br&gt;Android Weekly笔记, 本期内容包括: 性能库Pury的插件化; 一种新的多选设计和实现; 音频播放; Dagger的测试mock方案; ConstraintLayout的链式约束; Mobile Vision API的二维码扫描功能; RxJava的使用缺陷讨论; SOLID原则图解.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Get-access-to-raw-profiling-results-with-plugins-for-Pury&quot;&gt;&lt;a href=&quot;#Get-access-to-raw-profiling-results-with-plugins-for-Pury&quot; class=&quot;headerlink&quot; title=&quot;Get access to raw profiling results with plugins for Pury&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@nikita.kozlov/get-access-to-raw-profiling-results-with-plugins-for-pury-f9a7cc5e8345#.y26lx22wo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get access to raw profiling results with plugins for Pury&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Pury是一个做profile的工具, 前面有过一篇文章介绍: &lt;a href=&quot;https://medium.com/@nikita.kozlov/pury-new-way-to-profile-your-android-application-7e248b5f615e#.57ggfep5p&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文是作者的另一篇文章, 讲Pury的插件化和扩展.&lt;/p&gt;
&lt;p&gt;另外, 作者最近正在集成Google Analytics到Pury中.&lt;/p&gt;
&lt;h2 id=&quot;Building-a-Multiselection-Solution-for-Android-in-Kotlin&quot;&gt;&lt;a href=&quot;#Building-a-Multiselection-Solution-for-Android-in-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Building a Multiselection Solution for Android in Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yalantis.com/blog/how-we-created-a-multiselection-solution-for-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a Multiselection Solution for Android in Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在移动应用上的多选设计很难, 通常不是很灵活, 用起来也不舒服. &lt;/p&gt;
&lt;p&gt;本文推荐了一种全新的多选设计: 把屏幕分为两部分: 包括主要的列表和选中列表. 选中的项目自动移动到选中列表中去.&lt;/p&gt;
&lt;p&gt;这个设计概念的实现: &lt;code&gt;ViewPager&lt;/code&gt; + 两个&lt;code&gt;RecyclerView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;作者选用了kotlin来实现. 列举了几个kotlin的features: Extension functions, Null safety, Collections, Better syntax.&lt;/p&gt;
&lt;p&gt;作者的库: &lt;a href=&quot;https://github.com/Yalantis/Multi-Selection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Multi-Selection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文中还介绍了如何使用这个库.&lt;/p&gt;
&lt;h2 id=&quot;Audio-not-playing-in-Android&quot;&gt;&lt;a href=&quot;#Audio-not-playing-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Audio (not) playing in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/uptech-team/audio-not-playing-in-android-cde9a0fdfafd#.kp7qsjuha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Audio (not) playing in Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于Android上的音频播放, 作者的总结文章. &lt;/p&gt;
&lt;p&gt;音频播放的方式有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaPlayer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MediaPlayer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/SoundPool.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SoundPool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/AudioTrack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AudioTrack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/ExoPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于&lt;code&gt;MediaPlayer&lt;/code&gt;的使用, 官方文档: &lt;a href=&quot;https://developer.android.com/guide/topics/media/mediaplayer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Media Playback&lt;/a&gt;, 本文中有一张图是&lt;code&gt;MediaPlayer&lt;/code&gt;的生命周期图.&lt;/p&gt;
&lt;p&gt;作者逐个列举了实际使用这些API时可能会遇到的一些issues. 并且最终选择的最佳解决方案是Google的&lt;a href=&quot;https://github.com/google/ExoPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer&lt;/a&gt;, 2.0版本已经解决了她之前遇到的所有issues.&lt;/p&gt;
&lt;h2 id=&quot;Providing-test-doubles-with-Dagger-1-and-Dagger-2&quot;&gt;&lt;a href=&quot;#Providing-test-doubles-with-Dagger-1-and-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Providing test doubles with Dagger 1 and Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/providing-test-doubles-with-dagger-1-and-dagger-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Providing test doubles with Dagger 1 and Dagger 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章讲在使用Dagger1和Dagger2的项目中, 如何为测试mock依赖.&lt;/p&gt;
&lt;h2 id=&quot;ConstraintLayout-Chains-–-Part-1&quot;&gt;&lt;a href=&quot;#ConstraintLayout-Chains-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout Chains – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/constraintlayout-chains-spread-chains/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout Chains – Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讲了&lt;code&gt;ConstraintLayout&lt;/code&gt;的一个重要特性: chains, 链.&lt;br&gt;chains是一个机制, 把一些独立的Views链起来, 然后我们可以对这一个集合来采取一些行为.&lt;/p&gt;
&lt;p&gt;比如选中一个parent下的两个TextView(这两个本来是分别对齐parent的左右), 然后选择”Center Horizontally”, 就是建立了一个链.&lt;br&gt;在xml中实际上给这两个view都各自加上了一条限制条件, 限制它们在对方的(左/右)边, 这两条对称性的限制条件就构成了一个链.&lt;/p&gt;
&lt;p&gt;这种链叫spread chains, 是默认的style.&lt;/p&gt;
&lt;h2 id=&quot;Machine-Learning-with-the-Mobile-Vision-API-—-Part-2&quot;&gt;&lt;a href=&quot;#Machine-Learning-with-the-Mobile-Vision-API-—-Part-2&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning with the Mobile Vision API — Part 2 &quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/machine-learning-for-android-developers-with-the-mobile-vision-api-part-2-barcode-detection-61e84c858518#.3dy9fgj56&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Machine Learning with the Mobile Vision API — Part 2 &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;a href=&quot;https://developers.google.com/vision/barcodes-overview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mobile Vision的Barcode API&lt;/a&gt;来进行二维码检测.&lt;br&gt;Code: &lt;a href=&quot;https://github.com/moyheen/barcode-detector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;barcode-detector&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Reactive-Frustrations&quot;&gt;&lt;a href=&quot;#Reactive-Frustrations&quot; class=&quot;headerlink&quot; title=&quot;Reactive Frustrations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://upday.github.io/blog/reactive_frustrations_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive Frustrations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;大多数Rx相关的文章都说优点, 本篇不同, 作者分享了在使用RxJava过程中碰到的一些烦人的事情.&lt;br&gt;不过尽管有这些挫折, RxJava仍然是一个很棒的工具.&lt;/p&gt;
&lt;h3 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;p&gt;RxJava的文档有时候对初学者来说会很具迷惑性.&lt;br&gt;推荐看: &lt;a href=&quot;http://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxMarbles&lt;/a&gt;, 有操作符图解.&lt;/p&gt;
&lt;h3 id=&quot;匿名类&quot;&gt;&lt;a href=&quot;#匿名类&quot; class=&quot;headerlink&quot; title=&quot;匿名类&quot;&gt;&lt;/a&gt;匿名类&lt;/h3&gt;&lt;p&gt;RxJava的使用中会构建很多匿名类.&lt;br&gt;推荐使用: &lt;a href=&quot;https://github.com/orfjackal/retrolambda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrolambda&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin&lt;/a&gt;, 或&lt;a href=&quot;https://source.android.com/source/jack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jack&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;忘记subscribe&quot;&gt;&lt;a href=&quot;#忘记subscribe&quot; class=&quot;headerlink&quot; title=&quot;忘记subscribe&quot;&gt;&lt;/a&gt;忘记subscribe&lt;/h3&gt;&lt;p&gt;这是一个常见的错误, 如果只写好了Observable但没有触发, 通常是没有subscribe, 因为Observable是被动的, 只有当被订阅的时候才会触发.&lt;/p&gt;
&lt;h3 id=&quot;代码的推理&quot;&gt;&lt;a href=&quot;#代码的推理&quot; class=&quot;headerlink&quot; title=&quot;代码的推理&quot;&gt;&lt;/a&gt;代码的推理&lt;/h3&gt;&lt;p&gt;有时候很难看见一块代码就知道执行结果, 必须往上游排查.&lt;/p&gt;
&lt;p&gt;所以作者在他们的项目中规定了一项对于Observable的命名规范:&lt;br&gt;&lt;code&gt;...Once&lt;/code&gt;表示只发射一次; &lt;code&gt;...Stream&lt;/code&gt;表示会发射值, 或者不发射, 但是不会completes; &lt;code&gt;...OnceAndStream&lt;/code&gt;订阅时会发射值, 之后可能会继续发射, 但是不会停止.&lt;/p&gt;
&lt;h3 id=&quot;map操作符&quot;&gt;&lt;a href=&quot;#map操作符&quot; class=&quot;headerlink&quot; title=&quot;...map操作符&quot;&gt;&lt;/a&gt;&lt;code&gt;...map&lt;/code&gt;操作符&lt;/h3&gt;&lt;p&gt;有一些比较容易混淆的操作符:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;: 并行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switchMap&lt;/code&gt;: 中断前一个, 串行;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concatMap&lt;/code&gt;: 等待前一个结束, 串行;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Designing-something-S-O-L-I-D&quot;&gt;&lt;a href=&quot;#Designing-something-S-O-L-I-D&quot; class=&quot;headerlink&quot; title=&quot;Designing something S.O.L.I.D&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.novoda.com/blog/designing-something-solid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Designing something S.O.L.I.D&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt;是软件开发的五项原则:&lt;/p&gt;
&lt;p&gt;SOLID (single responsibility, open-closed, Liskov substitution, interface segregation and dependency inversion).&lt;/p&gt;
&lt;p&gt;这里是&lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wiki&lt;/a&gt;)的解释.&lt;/p&gt;
&lt;p&gt;这篇文章图形化地解释了SOLID, 配图和例子都很有趣.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Design-Is-Never-Done&quot;&gt;&lt;a href=&quot;#Design-Is-Never-Done&quot; class=&quot;headerlink&quot; title=&quot;Design Is Never Done&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://design.google.com/articles/design-is-never-done/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Is Never Done&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Material Design的新工具套件和开源项目.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;EasyMVP&quot;&gt;&lt;a href=&quot;#EasyMVP&quot; class=&quot;headerlink&quot; title=&quot;EasyMVP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://6thsolution.github.io/EasyMVP/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EasyMVP&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个MVP库. 比较特别的几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用注解来注入Presenter(可以和Dagger2结合使用, 否则只能注入无参构造), 绑定Presenter和View的生命周期;&lt;/li&gt;
&lt;li&gt;使用Loaders来字啊configurations changes时保存Presenter;&lt;/li&gt;
&lt;li&gt;加上&lt;code&gt;easymvp-rx&lt;/code&gt;插件后, 遵循Clean Architecture原则, 加入了domain层, 提供了UseCase的基类;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Input-Mask&quot;&gt;&lt;a href=&quot;#Input-Mask&quot; class=&quot;headerlink&quot; title=&quot;Input Mask&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/RedMadRobot/input-mask-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Input Mask&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个小的工具库, 可以按格式显示用户的输入. 比如在输入上加括号, 每三位数字空一格之类的.&lt;/p&gt;
&lt;h2 id=&quot;sdk-artifact-sync&quot;&gt;&lt;a href=&quot;#sdk-artifact-sync&quot; class=&quot;headerlink&quot; title=&quot;sdk-artifact-sync&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JakeWharton/sdk-artifact-sync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sdk-artifact-sync&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个脚本, 同步你local Android SDK中的所有artifacts到一个remote的Maven artifact host上.&lt;/p&gt;
&lt;h2 id=&quot;material-remixer&quot;&gt;&lt;a href=&quot;#material-remixer&quot; class=&quot;headerlink&quot; title=&quot;material-remixer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/material-foundation/material-remixer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material-remixer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;material-remixer是一个工具, 利用它可以实时调整产品的UI参数. 目标平台: Android, iOS和Web都能用的工具.&lt;/p&gt;
&lt;h1 id=&quot;News&quot;&gt;&lt;a href=&quot;#News&quot; class=&quot;headerlink&quot; title=&quot;News&quot;&gt;&lt;/a&gt;News&lt;/h1&gt;&lt;h2 id=&quot;ConstraintLayout-beta-2-is-now-available&quot;&gt;&lt;a href=&quot;#ConstraintLayout-beta-2-is-now-available&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout beta 2 is now available&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sites.google.com/a/android.com/tools/recent/constraintlayoutbeta2isnowavailable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout beta 2 is now available&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ConstraintLayout beta 2发布啦, 修改了一些issues并改善了性能.&lt;/p&gt;
&lt;h2 id=&quot;Google-Play-Services-Release-Notes&quot;&gt;&lt;a href=&quot;#Google-Play-Services-Release-Notes&quot; class=&quot;headerlink&quot; title=&quot;Google Play Services Release Notes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/android/guides/releases#october_2016_-_v98&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Play Services Release Notes&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Play Service 9.8发布了.&lt;/p&gt;
&lt;h2 id=&quot;Some-new-Firebase-libraries&quot;&gt;&lt;a href=&quot;#Some-new-Firebase-libraries&quot; class=&quot;headerlink&quot; title=&quot;Some new Firebase libraries&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://firebase.googleblog.com/2016/10/start-your-week-off-with-some-new-firebase-libraries.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Some new Firebase libraries&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firebase也发了新版.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-229&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-229&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #229&quot;&gt;&lt;/a&gt;Android Weekly Issue #229&lt;/h1&gt;&lt;p&gt;October 30th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-229&quot;&gt;Android Weekly Issue #229&lt;/a&gt;&lt;br&gt;Android Weekly笔记, 本期内容包括: 性能库Pury的插件化; 一种新的多选设计和实现; 音频播放; Dagger的测试mock方案; ConstraintLayout的链式约束; Mobile Vision API的二维码扫描功能; RxJava的使用缺陷讨论; SOLID原则图解.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Mobile Vision" scheme="http://mengdd.github.io/tags/Mobile-Vision/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Dagger" scheme="http://mengdd.github.io/tags/Dagger/"/>
    
      <category term="Pury" scheme="http://mengdd.github.io/tags/Pury/"/>
    
      <category term="Multiselection" scheme="http://mengdd.github.io/tags/Multiselection/"/>
    
      <category term="Audio" scheme="http://mengdd.github.io/tags/Audio/"/>
    
      <category term="Barcode Detection" scheme="http://mengdd.github.io/tags/Barcode-Detection/"/>
    
      <category term="SOLID" scheme="http://mengdd.github.io/tags/SOLID/"/>
    
  </entry>
  
  <entry>
    <title>用Android Studio开发最常用到的快捷键</title>
    <link href="http://mengdd.github.io/Android/Tools/IDE/2016/10/27/android-studio-shortcuts-used-frequently/"/>
    <id>http://mengdd.github.io/Android/Tools/IDE/2016/10/27/android-studio-shortcuts-used-frequently/</id>
    <published>2016-10-27T14:23:45.000Z</published>
    <updated>2016-10-28T07:09:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Studio常用快捷键&quot;&gt;&lt;a href=&quot;#Android-Studio常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;Android Studio常用快捷键&quot;&gt;&lt;/a&gt;Android Studio常用快捷键&lt;/h1&gt;&lt;p&gt;Android Studio日常开发常用快捷键.&lt;br&gt;快捷键版本: Mac OS X 10.5+&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;搜索查看类&quot;&gt;&lt;a href=&quot;#搜索查看类&quot; class=&quot;headerlink&quot; title=&quot;搜索查看类&quot;&gt;&lt;/a&gt;搜索查看类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索所有文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;double Shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索类文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;搜索符号&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开最近的文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开最近编辑过的文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + E&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在文件内搜索&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全文搜索&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示结构, 类中方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳到当前文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从以上查找中途退出&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;ESC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;发现引用&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F7(显示在下面)/ Opt + Cmd + F7(显示在当前)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查找定义&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + B/ Cmd + 单击, 找到定义后再次点击会显示所有引用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;找子类/实现&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;找基类/接口&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;高亮Usages&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + F7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查找Action&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示文件在项目中的位置&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F1, 再加Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制当前文件的路径&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + C&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;编辑类&quot;&gt;&lt;a href=&quot;#编辑类&quot; class=&quot;headerlink&quot; title=&quot;编辑类&quot;&gt;&lt;/a&gt;编辑类&lt;/h2&gt;&lt;h3 id=&quot;编辑&quot;&gt;&lt;a href=&quot;#编辑&quot; class=&quot;headerlink&quot; title=&quot;编辑&quot;&gt;&lt;/a&gt;编辑&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;剪切&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;粘贴&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;从剪切板粘贴&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;复制当前行或当前选中块&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;以光标位置向前, 删除一个词&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除一行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + delete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;把代码包起来: try-catch等&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查看方法的参数信息&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + P&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;生成&quot;&gt;&lt;a href=&quot;#生成&quot; class=&quot;headerlink&quot; title=&quot;生成&quot;&gt;&lt;/a&gt;生成&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;生成方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;生成未定义的方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Override方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;实现(implement)方法&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + I&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;自动补全&quot;&gt;&lt;a href=&quot;#自动补全&quot; class=&quot;headerlink&quot; title=&quot;自动补全&quot;&gt;&lt;/a&gt;自动补全&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;加import语句&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Warning信息并采用快捷修复&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;重构&quot;&gt;&lt;a href=&quot;#重构&quot; class=&quot;headerlink&quot; title=&quot;重构&quot;&gt;&lt;/a&gt;重构&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;重命名&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + F6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更改签名(重构方法)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;提取方法M,变量V,字段F,常量C,参数P&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + M,V,F,C,P&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;内联&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;选择-移动&quot;&gt;&lt;a href=&quot;#选择-移动&quot; class=&quot;headerlink&quot; title=&quot;选择, 移动&quot;&gt;&lt;/a&gt;选择, 移动&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动到某一行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;选中行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + 方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;选中词&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + 上下方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;按词移动光标&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + 左右方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;返回上/下一次光标所在的地方&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + 左右方向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动当前行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + 上下方向&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;格式化&quot;&gt;&lt;a href=&quot;#格式化&quot; class=&quot;headerlink&quot; title=&quot;格式化&quot;&gt;&lt;/a&gt;格式化&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;格式化代码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;优化imports&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Opt + O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;行注释&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;块注释&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Opt + /&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;运行调试类&quot;&gt;&lt;a href=&quot;#运行调试类&quot; class=&quot;headerlink&quot; title=&quot;运行调试类&quot;&gt;&lt;/a&gt;运行调试类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行…&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Opt + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调试&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调试…&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Opt + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;设置断点&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;单步执行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跑到光标处&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;看表达式&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Resume&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Opt + Cmd + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查看所有断点&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Cmd + F8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;测试类&quot;&gt;&lt;a href=&quot;#测试类&quot; class=&quot;headerlink&quot; title=&quot;测试类&quot;&gt;&lt;/a&gt;测试类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;生成或打开测试类&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;运行测试&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + R&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;调试测试&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;版本控制类&quot;&gt;&lt;a href=&quot;#版本控制类&quot; class=&quot;headerlink&quot; title=&quot;版本控制类&quot;&gt;&lt;/a&gt;版本控制类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示版本控制窗口&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + 9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Diff&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + D&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;下一个Diff&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;在Diff中打开文件&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;窗口类&quot;&gt;&lt;a href=&quot;#窗口类&quot; class=&quot;headerlink&quot; title=&quot;窗口类&quot;&gt;&lt;/a&gt;窗口类&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;用途&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Mac快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Android Monitor&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;代码全屏或退出&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + Shift + F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开Preferences&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + ,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开项目结构窗口&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Cmd + ;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;快速切换scheme&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + `&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Resources&quot;&gt;&lt;a href=&quot;#Resources&quot; class=&quot;headerlink&quot; title=&quot;Resources&quot;&gt;&lt;/a&gt;Resources&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://saulmm.github.io/the-powerful-android-studio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The powerful Android Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Studio常用快捷键&quot;&gt;&lt;a href=&quot;#Android-Studio常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;Android Studio常用快捷键&quot;&gt;&lt;/a&gt;Android Studio常用快捷键&lt;/h1&gt;&lt;p&gt;Android Studio日常开发常用快捷键.&lt;br&gt;快捷键版本: Mac OS X 10.5+&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Tools" scheme="http://mengdd.github.io/categories/Android/Tools/"/>
    
      <category term="IDE" scheme="http://mengdd.github.io/categories/Android/Tools/IDE/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 228</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/Nougat/Design-Support-Library/2016/10/26/android-weekly-notes-issue-228/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/Nougat/Design-Support-Library/2016/10/26/android-weekly-notes-issue-228/</id>
    <published>2016-10-26T04:00:24.000Z</published>
    <updated>2016-10-26T04:11:58.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-228&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-228&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #228&quot;&gt;&lt;/a&gt;Android Weekly Issue #228&lt;/h1&gt;&lt;p&gt;October 23rd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-228&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #228&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Android 7.1的App Shortcuts; Searchbar的设计讨论; Nougat的Direct Reply; Alarms API讨论; Support Library的BottomNavigationView; MVVM模式; Dagger2的subcomponent实现; Test Rules介绍等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Android-7-1-Static-Shortcut&quot;&gt;&lt;a href=&quot;#Android-7-1-Static-Shortcut&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 Static Shortcut&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@tonyowen/android-7-1-static-shortcut-6c42d81ba11b#.8emk7ssh1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 Static Shortcut&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Exploring-Android-Nougat-7-1-App-Shortcuts&quot;&gt;&lt;a href=&quot;#Exploring-Android-Nougat-7-1-App-Shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Exploring Android Nougat 7.1 App Shortcuts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这两篇文章都在介绍Android 7.1的App Shortcuts.&lt;/p&gt;
&lt;p&gt;本博客相关文章: &lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5996665.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 App Shortcuts使用
&lt;/a&gt; .&lt;/p&gt;
&lt;h2 id=&quot;Exposing-the-Searchbar&quot;&gt;&lt;a href=&quot;#Exposing-the-Searchbar&quot; class=&quot;headerlink&quot; title=&quot;Exposing the Searchbar&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@alexstyl/https-medium-com-alexstyl-animating-the-toolbar-7a8f1aab39dd#.283nz252o&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exposing the Searchbar&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;比起点击一个search icon, 然后进入搜索屏, 用户更喜欢一个search bar, 然后直接就可以在主屏上进行搜索.&lt;/p&gt;
&lt;p&gt;作者对于他们的应用想到的解决方式就是, 在主屏上放一个search bar,然后 用一个transition, 把主屏和搜索屏(两个Activity)衔接起来, 这样用户在点击search bar之后, 不会感觉到他们打开了一个新屏.&lt;/p&gt;
&lt;p&gt;另一个效果就是, 在点击search bar之后, 当前屏fade away, search bar展开, 在第二屏直接打开键盘, 用户可以进行搜索.&lt;/p&gt;
&lt;p&gt;Code: &lt;a href=&quot;https://github.com/alexstyl/Material-SearchTransition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material-SearchTransition&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Nougat-Direct-Reply&quot;&gt;&lt;a href=&quot;#Nougat-Direct-Reply&quot; class=&quot;headerlink&quot; title=&quot;Nougat - Direct Reply&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/nougat-direct-reply/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nougat - Direct Reply&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Direct Reply是指用户可以直接回复Notification, 而不用打开app.&lt;br&gt;这篇文章作者示例了如何实现在message app中用Direct Reply清除消息和直接回复.&lt;/p&gt;
&lt;h2 id=&quot;Da-Real-Fragmentation-Alarms&quot;&gt;&lt;a href=&quot;#Da-Real-Fragmentation-Alarms&quot; class=&quot;headerlink&quot; title=&quot;Da Real Fragmentation - Alarms&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pguardiola.com/blog/darealfragmentation-alarms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Da Real Fragmentation - Alarms&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者这篇文章先是详细介绍了Alarm的各个选项和使用情形, 以及它的API版本变化.&lt;/p&gt;
&lt;h2 id=&quot;Bottom-Navigation-View-in-the-Design-Support-Library&quot;&gt;&lt;a href=&quot;#Bottom-Navigation-View-in-the-Design-Support-Library&quot; class=&quot;headerlink&quot; title=&quot;Bottom Navigation View in the Design Support Library&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.autsoft.hu/now-you-can-use-the-bottom-navigation-view-in-the-design-support-library/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom Navigation View in the Design Support Library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Design Support Library 25.0.0中, Google发布了Bottom Navigation的官方实现: &lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BottomNavigationView&lt;/a&gt;.&lt;br&gt;这篇文章写了如何使用这个View, 并且最后列出了一些第三方库.&lt;/p&gt;
&lt;h2 id=&quot;Shades-of-MVVM&quot;&gt;&lt;a href=&quot;#Shades-of-MVVM&quot; class=&quot;headerlink&quot; title=&quot;Shades of MVVM&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.bignerdranch.com/blog/shades-of-mvvm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shades of MVVM&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讨论了MVVM模式及它的几种变形.&lt;/p&gt;
&lt;h2 id=&quot;Activities-Subcomponents-Multibinding-in-Dagger-2&quot;&gt;&lt;a href=&quot;#Activities-Subcomponents-Multibinding-in-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Activities Subcomponents Multibinding in Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/azimolabs/activities-subcomponents-multibinding-in-dagger-2-85d6053d6a95#.p9bh8bjoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activities Subcomponents Multibinding in Dagger 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger/releases/tag/dagger-2.7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger-2.7&lt;/a&gt; 添加了&lt;code&gt;@Modules.subcomponents&lt;/code&gt;.&lt;br&gt;本文演示了如何用这个更好地添加子ActivityComponent. 而不用每次都借助AppComponent. 这样做除了解耦之外, 对于测试时很有帮助.&lt;/p&gt;
&lt;p&gt;例子代码: &lt;a href=&quot;https://github.com/frogermcs/Dagger2Recipes-ActivitiesMultibinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2Recipes-ActivitiesMultibinding&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Experimenting-with-TensorFlow-on-Android-Part-1&quot;&gt;&lt;a href=&quot;#Experimenting-with-TensorFlow-on-Android-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Experimenting with TensorFlow on Android Part 1 &quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@mgazar/experimenting-with-tensorflow-on-android-pt-1-362683b31838#.ylwet4d3p&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Experimenting with TensorFlow on Android Part 1 &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow&lt;/a&gt;是一个Machine Intelligence开源库, 主要的用途是数据计算, deep learning等.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bazel.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bazel&lt;/a&gt;是一个build tool, 功能类似于gradle.&lt;/p&gt;
&lt;p&gt;本文讲了如何setup.&lt;/p&gt;
&lt;h2 id=&quot;Understanding-Test-Rules&quot;&gt;&lt;a href=&quot;#Understanding-Test-Rules&quot; class=&quot;headerlink&quot; title=&quot;Understanding Test Rules&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.egorand.me/understanding-test-rules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding Test Rules&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Espresso中的Rule是如何工作的呢?&lt;br&gt;之前有一个文章: &lt;a href=&quot;http://cwd.dhemery.com/2010/12/junit-rules/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Rules To Influence JUnit Test Execution&lt;/a&gt;说明JUnit中的Rule是如何工作的.&lt;/p&gt;
&lt;p&gt;然后作者讲了如何自定义一个TestRule.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Sketch-template-for-app-shortcuts&quot;&gt;&lt;a href=&quot;#Sketch-template-for-app-shortcuts&quot; class=&quot;headerlink&quot; title=&quot;Sketch template for app shortcuts&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/+RomanNurik/posts/3HMBgjn546j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch template for app shortcuts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了为Android 7.1的app shortcuts功能而准备的sketch模板.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;PageIndicatorView&quot;&gt;&lt;a href=&quot;#PageIndicatorView&quot; class=&quot;headerlink&quot; title=&quot;PageIndicatorView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/romandanylyk/PageIndicatorView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageIndicatorView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Page Indicator, 结合Android ViewPager使用的, 转换时有点点连接的功能.&lt;/p&gt;
&lt;h2 id=&quot;PermissionUtil&quot;&gt;&lt;a href=&quot;#PermissionUtil&quot; class=&quot;headerlink&quot; title=&quot;PermissionUtil&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/kayvannj/PermissionUtil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PermissionUtil&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android 6.0 permission请求的库.&lt;/p&gt;
&lt;h2 id=&quot;DeviceAnimationTestRule&quot;&gt;&lt;a href=&quot;#DeviceAnimationTestRule&quot; class=&quot;headerlink&quot; title=&quot;DeviceAnimationTestRule&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/VictorAlbertos/DeviceAnimationTestRule&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DeviceAnimationTestRule&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个JUnit rule, 用来disable和enable设备动画.&lt;/p&gt;
&lt;h2 id=&quot;DiagonalLayout&quot;&gt;&lt;a href=&quot;#DiagonalLayout&quot; class=&quot;headerlink&quot; title=&quot;DiagonalLayout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/florent37/DiagonalLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DiagonalLayout&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对角线布局, 感觉怪怪的.&lt;/p&gt;
&lt;h1 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h1&gt;&lt;h2 id=&quot;Android-7-1-Developer-Preview&quot;&gt;&lt;a href=&quot;#Android-7-1-Developer-Preview&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 Developer Preview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/10/android71-dev-preview-available.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 Developer Preview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android 7.1发了Developer Preview啦.&lt;br&gt;官网Overview在这里: &lt;a href=&quot;https://developer.android.com/preview/api-overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.1 for Developers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ConstraintLayout-beta-1-is-now-available&quot;&gt;&lt;a href=&quot;#ConstraintLayout-beta-1-is-now-available&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout beta 1 is now available&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sites.google.com/a/android.com/tools/recent/constraintlayoutbeta1isnowavailable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout beta 1 is now available&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;ConstraintLayout beta 1发布啦.&lt;/p&gt;
&lt;h1 id=&quot;TOOLS&quot;&gt;&lt;a href=&quot;#TOOLS&quot; class=&quot;headerlink&quot; title=&quot;TOOLS&quot;&gt;&lt;/a&gt;TOOLS&lt;/h1&gt;&lt;h2 id=&quot;Learn-You-a-Git&quot;&gt;&lt;a href=&quot;#Learn-You-a-Git&quot; class=&quot;headerlink&quot; title=&quot;Learn You a Git&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://karumi.github.io/learnyougit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn You a Git&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;教你学习Git的工具.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-228&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-228&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #228&quot;&gt;&lt;/a&gt;Android Weekly Issue #228&lt;/h1&gt;&lt;p&gt;October 23rd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-228&quot;&gt;Android Weekly Issue #228&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Android 7.1的App Shortcuts; Searchbar的设计讨论; Nougat的Direct Reply; Alarms API讨论; Support Library的BottomNavigationView; MVVM模式; Dagger2的subcomponent实现; Test Rules介绍等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Nougat/"/>
    
      <category term="Design Support Library" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/Nougat/Design-Support-Library/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Android 7" scheme="http://mengdd.github.io/tags/Android-7/"/>
    
      <category term="Shortcuts" scheme="http://mengdd.github.io/tags/Shortcuts/"/>
    
      <category term="Alarm" scheme="http://mengdd.github.io/tags/Alarm/"/>
    
      <category term="BottomNavigationView" scheme="http://mengdd.github.io/tags/BottomNavigationView/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Dagger" scheme="http://mengdd.github.io/tags/Dagger/"/>
    
      <category term="TensorFlow" scheme="http://mengdd.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Android 7.1 App Shortcuts使用</title>
    <link href="http://mengdd.github.io/Android/Nougat/2016/10/25/nougat-app-shortcuts/"/>
    <id>http://mengdd.github.io/Android/Nougat/2016/10/25/nougat-app-shortcuts/</id>
    <published>2016-10-25T06:00:01.000Z</published>
    <updated>2016-10-31T03:30:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-7-1-App-Shortcuts使用&quot;&gt;&lt;a href=&quot;#Android-7-1-App-Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 App Shortcuts使用&quot;&gt;&lt;/a&gt;Android 7.1 App Shortcuts使用&lt;/h1&gt;&lt;p&gt;Android 7.1已经发了预览版, 这里是API Overview: &lt;a href=&quot;https://developer.android.com/preview/api-overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API overview&lt;/a&gt;.&lt;br&gt;其中App Shortcuts是新提供的一种快捷访问方式, 形式为长按应用图标出现的长条.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;br&gt;图来自: &lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击快捷方式可以访问应用功能, 并且这种快捷方式也可以被拖拽到桌面单独放置.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;App-Shortcuts-是什么&quot;&gt;&lt;a href=&quot;#App-Shortcuts-是什么&quot; class=&quot;headerlink&quot; title=&quot;App Shortcuts 是什么&quot;&gt;&lt;/a&gt;App Shortcuts 是什么&lt;/h2&gt;&lt;p&gt;其中App Shortcuts是指在桌面长按app图标而出现的快捷方式, 可以为你的app的关键功能添加更快速的入口而不用先打开app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts-doc.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击快捷方式可以访问应用功能, 并且这种快捷方式也可以被拖拽到桌面单独放置, 变成单独的桌面快捷方式(pinned shortcuts).&lt;/p&gt;
&lt;p&gt;有两种shortcuts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态的: 在xml中定义, 适用于一些通用的动作.&lt;/li&gt;
&lt;li&gt;动态的: 由&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/ShortcutManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShortcutManager&lt;/a&gt;发布, 可以根据用户的行为或者偏好添加, 可以动态更新.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个应用目前最多可以有5个shortcuts(静态 + 动态).&lt;/p&gt;
&lt;p&gt;运行条件:&lt;br&gt;应用添加App Shortcuts是Android 7.1(API 25)的API, 所以只能在Android 7.1的设备上显示, 同时需要launcher支持, 比如Pixel launcher(Pixel设备的默认launcher), Now launcher(Nexus设备上的launcher)现在就支持, 其他launcher也可以提供支持.&lt;/p&gt;
&lt;h2 id=&quot;静态Shortcuts使用&quot;&gt;&lt;a href=&quot;#静态Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;静态Shortcuts使用&quot;&gt;&lt;/a&gt;静态Shortcuts使用&lt;/h2&gt;&lt;p&gt;静态的Shortcuts是写在xml中的, 直到下一次应用升级, 不能被改变.&lt;br&gt;要添加静态shortcuts只需两步:&lt;br&gt;首先, 在应用的Manifest中启动Activity上添加&lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta-data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.app.shortcuts&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:resource&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@xml/shortcuts&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;code&gt;res/xml/&lt;/code&gt;目录下创建&lt;code&gt;shortcuts.xml&lt;/code&gt;文件, 里面包含静态的shortcuts:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shortcuts&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:enabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_check_circle_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutDisabledMessage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_disabled_message&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutId&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;static&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutLongLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_long_label_1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutShortLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_short_label_1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.VIEW&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetClass&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.shortcuts.StaticShortcutActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetPackage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:enabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_android_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutDisabledMessage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_disabled_message&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutId&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;static_2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutLongLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_long_label_2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:shortcutShortLabel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/static_shortcut_short_label_2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetClass&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.MainActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetPackage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.action.STATIC_SHORTCUT_2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetClass&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat.shortcuts.StaticShortcutActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:targetPackage&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.ddmeng.hellonougat&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shortcut&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;shortcuts&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这就好了, 这个文件添加了两个shortcuts, 点击都将打开指定的Activity, 本例子中是&lt;code&gt;StaticShortcutActivity&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;用多个Intent构建back-stack&quot;&gt;&lt;a href=&quot;#用多个Intent构建back-stack&quot; class=&quot;headerlink&quot; title=&quot;用多个Intent构建back stack&quot;&gt;&lt;/a&gt;用多个Intent构建back stack&lt;/h3&gt;&lt;p&gt;上面这个文件里添加了两个静态的shortcuts, 第一个关联了一个Activity, 点击shortcut将直接打开这个Activity, 回退的时候回到桌面.&lt;/p&gt;
&lt;p&gt;如果你想要的效果是点击back键回到应用里的某个界面, 那么可以利用多个intents来构建back stack, 比如在第二个shortcut里面, 点击shortcut还是打开目标Activity, 这个指定目标Activity的Intent放在最后, 但是回退会返回到MainActivity, 即之前的那个Intent.&lt;/p&gt;
&lt;h2 id=&quot;动态Shortcuts使用&quot;&gt;&lt;a href=&quot;#动态Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;动态Shortcuts使用&quot;&gt;&lt;/a&gt;动态Shortcuts使用&lt;/h2&gt;&lt;p&gt;动态的shortcuts可以在用户使用app的过程中构建, 更新, 或者删除.&lt;br&gt;使用&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/ShortcutManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShortcutManager&lt;/a&gt;可以对动态shortcuts完成下面几种操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publish发布: &lt;code&gt;setDynamicShortcuts()&lt;/code&gt;, &lt;code&gt;addDynamicShortcuts(List)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Update更新: &lt;code&gt;updateShortcuts(List)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Remove删除: &lt;code&gt;removeDynamicShortcuts(List)&lt;/code&gt;, &lt;code&gt;removeAllDynamicShortcuts()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如添加一个动态shortcut:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShortcutManager shortcutManager = getSystemService(ShortcutManager.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ShortcutInfo shortcut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;id1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setShortLabel(&lt;span class=&quot;string&quot;&gt;&quot;Web site&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setLongLabel(&lt;span class=&quot;string&quot;&gt;&quot;Open the web site&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setIcon(Icon.createWithResource(context, R.drawable.icon_website))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setIntent(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_VIEW,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   Uri.parse(&lt;span class=&quot;string&quot;&gt;&quot;https://www.mysite.example.com/&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shortcutManager.setDynamicShortcuts(Arrays.asList(shortcut));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击这个shortcut会发出一个打开网页的Intent, 让你选择浏览器, 从而打开网址.&lt;/p&gt;
&lt;h3 id=&quot;多个Intent构建back-stack&quot;&gt;&lt;a href=&quot;#多个Intent构建back-stack&quot; class=&quot;headerlink&quot; title=&quot;多个Intent构建back stack&quot;&gt;&lt;/a&gt;多个Intent构建back stack&lt;/h3&gt;&lt;p&gt;动态的shortcut仍然可以用多个Intent来指定一个back stack, 那么打开目标Activity之后就可以返回到应用中的指定界面而不是回到launcher:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ShortcutInfo dynamicShortcut2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;shortcut_dynamic&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setShortLabel(&lt;span class=&quot;string&quot;&gt;&quot;Dynamic Shortcut&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setLongLabel(&lt;span class=&quot;string&quot;&gt;&quot;Open Dynamic shortcut 2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setIcon(Icon.createWithResource(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, R.drawable.ic_favorite_border_black_24dp))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setIntents(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// this dynamic shortcut set up a back stack using Intents, when pressing back, will go to MainActivity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// the last Intent is what the shortcut really opened&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent[]&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Intent.ACTION_MAIN, Uri.EMPTY, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, MainActivity.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(DynamicShortcutActivity.ACTION_OPEN_DYNAMIC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;comment&quot;&gt;// intent&#39;s action must be set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;和静态一样, 最后一个Intent对应的是shortcut打开的界面&lt;code&gt;DynamicShortcutActivity&lt;/code&gt;, 前面的都是用来构建back stack, 即back退回到MainActivity.&lt;br&gt;注意这里的Intent必须指定Action, 否则会抛出异常.&lt;/p&gt;
&lt;h2 id=&quot;Shortcuts的个数限制&quot;&gt;&lt;a href=&quot;#Shortcuts的个数限制&quot; class=&quot;headerlink&quot; title=&quot;Shortcuts的个数限制&quot;&gt;&lt;/a&gt;Shortcuts的个数限制&lt;/h2&gt;&lt;p&gt;Shortcuts的总数不能超过5个, 即静态和动态shortcuts加起来总数最多是五个.&lt;br&gt;当我们尝试添加第六个shortcut时, 应用会抛出异常: &lt;code&gt;java.lang.IllegalArgumentException: Max number of dynamic shortcuts exceeded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;虽然总数限制是5个, 但是当我正好有5个(2个静态 + 3个动态)的时候, 长按只显示了4个shortcuts.&lt;br&gt;如图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts-demo-screenshot.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文完整代码见: Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloNougat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloNougat&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Shortcuts的次序&quot;&gt;&lt;a href=&quot;#Shortcuts的次序&quot; class=&quot;headerlink&quot; title=&quot;Shortcuts的次序&quot;&gt;&lt;/a&gt;Shortcuts的次序&lt;/h2&gt;&lt;p&gt;当我们有多个Shortcuts之后, 默认它们是按照添加顺序排列的, 即按照添加顺序rank递增.&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;setRank()&lt;/code&gt;来改变长按时它们显示的排序:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@TargetApi&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateDynamicShortcuts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ShortcutInfo webShortcut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;shortcut_blog&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .setRank(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ShortcutInfo dynamicShortcut = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ShortcutInfo.Builder(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;shortcut_dynamic&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .setRank(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the rank value can not be set to negative, otherwise will throw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// java.lang.IllegalArgumentException: Rank cannot be negative or bigger than MAX_RANK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the static shortcuts have the rank 0, so they will always be closest to launcher icon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shortcutManager.updateShortcuts(Arrays.asList(webShortcut, dynamicShortcut));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样更改之后, 原先排在最远端的&lt;code&gt;shortcut_dynamic&lt;/code&gt;被移到了第三个, &lt;code&gt;shortcut_blog&lt;/code&gt;被移到了它的后面.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setRank()&lt;/code&gt;不接受负值, 会抛出异常.&lt;/p&gt;
&lt;p&gt;我们只能改变动态shortcuts的排序, 静态的shortcuts等级为0, 它们是按照xml中写定的先后顺序排的, 所以:&lt;br&gt;&lt;code&gt;静态的shortcuts永远离应用icon最近, 动态shortcuts在其之上排序, rank越大的离应用icon越远.&lt;/code&gt;&lt;br&gt;如果没有指定rank, 则按生成的顺序递增.&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;App Shortcuts的官方文档: &lt;a href=&quot;https://developer.android.com/preview/shortcuts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;App Shortcuts&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloNougat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloNougat&lt;/a&gt;.&lt;br&gt;近期考虑加入更多Android 7 Nougat特性sample.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-7-1-App-Shortcuts使用&quot;&gt;&lt;a href=&quot;#Android-7-1-App-Shortcuts使用&quot; class=&quot;headerlink&quot; title=&quot;Android 7.1 App Shortcuts使用&quot;&gt;&lt;/a&gt;Android 7.1 App Shortcuts使用&lt;/h1&gt;&lt;p&gt;Android 7.1已经发了预览版, 这里是API Overview: &lt;a href=&quot;https://developer.android.com/preview/api-overview.html&quot;&gt;API overview&lt;/a&gt;.&lt;br&gt;其中App Shortcuts是新提供的一种快捷访问方式, 形式为长按应用图标出现的长条.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/app-shortcuts.png&quot; alt=&quot;app shortcuts&quot;&gt;&lt;br&gt;图来自: &lt;a href=&quot;https://catinean.com/2016/10/20/exploring-android-nougat-7-1-app-shortcuts/&quot;&gt;Exploring Android Nougat 7.1 App Shortcuts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击快捷方式可以访问应用功能, 并且这种快捷方式也可以被拖拽到桌面单独放置.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/categories/Android/Nougat/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Android 7" scheme="http://mengdd.github.io/tags/Android-7/"/>
    
      <category term="Shortcuts" scheme="http://mengdd.github.io/tags/Shortcuts/"/>
    
  </entry>
  
  <entry>
    <title>Android MVP模式 谷歌官方代码解读</title>
    <link href="http://mengdd.github.io/Android/Architecture/2016/10/22/android-architecture-google-samples-analysis/"/>
    <id>http://mengdd.github.io/Android/Architecture/2016/10/22/android-architecture-google-samples-analysis/</id>
    <published>2016-10-22T11:11:27.000Z</published>
    <updated>2016-10-31T03:30:24.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Google官方MVP-Sample代码解读&quot;&gt;&lt;a href=&quot;#Google官方MVP-Sample代码解读&quot; class=&quot;headerlink&quot; title=&quot;Google官方MVP Sample代码解读&quot;&gt;&lt;/a&gt;Google官方MVP Sample代码解读&lt;/h1&gt;&lt;p&gt;关于Android程序的构架, 当前(2016.10)最流行的模式即为MVP模式, Google官方提供了Sample代码来展示这种模式的用法.&lt;br&gt;Repo地址: &lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-architecture&lt;/a&gt;.&lt;br&gt;本文为阅读官方sample代码的阅读笔记和分析.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;官方Android Architecture Blueprints [beta]:&lt;br&gt;Android在如何组织和构架一个app方面提供了很大的灵活性, 但是同时这种自由也可能会导致app在测试, 维护, 扩展方面变得困难.&lt;/p&gt;
&lt;p&gt;Android Architecture Blueprints展示了可能的解决方案. 在这个项目里, 我们用各种不同的构架概念和工具实现了同一个应用(&lt;a href=&quot;https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;To Do App&lt;/a&gt;). 主要的关注点在于代码结构, 构架, 测试和维护性.&lt;br&gt;但是请记住, 用这些模式构架app的方式有很多种, 要根据你的需要, 不要把这些当做绝对的典范.&lt;/p&gt;
&lt;h2 id=&quot;MVP模式-概念&quot;&gt;&lt;a href=&quot;#MVP模式-概念&quot; class=&quot;headerlink&quot; title=&quot;MVP模式 概念&quot;&gt;&lt;/a&gt;MVP模式 概念&lt;/h2&gt;&lt;p&gt;之前有一个MVC模式: Model-View-Controller.&lt;br&gt;MVC模式 有两个主要的缺点: 首先, View持有Controller和Model的引用; 第二, 它没有把对UI逻辑的操作限制在单一的类里, 这个职能被Controller和View或者Model共享.&lt;br&gt;所以后来提出了MVP模式来克服这些缺点.&lt;/p&gt;
&lt;p&gt;MVP(Model-View-Presenter)模式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model: 数据层. 负责与网络层和数据库层的逻辑交互.&lt;/li&gt;
&lt;li&gt;View: UI层. 显示数据, 并向Presenter报告用户行为.&lt;/li&gt;
&lt;li&gt;Presenter: 从Model拿数据, 应用到UI层, 管理UI的状态, 决定要显示什么, 响应用户的行为.&lt;br&gt;MVP模式的最主要优势就是耦合降低, Presenter变为纯Java的代码逻辑, 不再与Android Framework中的类如Activity, Fragment等关联, 便于写单元测试.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;todo-mvp-基本的Model-View-Presenter架构&quot;&gt;&lt;a href=&quot;#todo-mvp-基本的Model-View-Presenter架构&quot; class=&quot;headerlink&quot; title=&quot;todo-mvp 基本的Model-View-Presenter架构&quot;&gt;&lt;/a&gt;todo-mvp 基本的Model-View-Presenter架构&lt;/h2&gt;&lt;p&gt;app中有四个功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tasks&lt;/li&gt;
&lt;li&gt;TaskDetail&lt;/li&gt;
&lt;li&gt;AddEditTask&lt;/li&gt;
&lt;li&gt;Statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个功能都有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个定义View和Presenter接口的&lt;code&gt;Contract&lt;/code&gt;接口;&lt;/li&gt;
&lt;li&gt;一个Activity用来管理fragment和presenter的创建;&lt;/li&gt;
&lt;li&gt;一个实现了View接口的Fragment;&lt;/li&gt;
&lt;li&gt;一个实现了Presenter接口的presenter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/mvp.png&quot; alt=&quot;mvp&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;基类&quot;&gt;&lt;a href=&quot;#基类&quot; class=&quot;headerlink&quot; title=&quot;基类&quot;&gt;&lt;/a&gt;基类&lt;/h3&gt;&lt;p&gt;Presenter基类:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasePresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例子中这个&lt;code&gt;start()&lt;/code&gt;方法都在Fragment的&lt;code&gt;onResume()&lt;/code&gt;中调用.&lt;/p&gt;
&lt;p&gt;View基类:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseView&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPresenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T presenter)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;View实现&quot;&gt;&lt;a href=&quot;#View实现&quot; class=&quot;headerlink&quot; title=&quot;View实现&quot;&gt;&lt;/a&gt;View实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fragment作为每一个View接口的实现, 主要负责数据显示和在用户交互时调用Presenter, 但是例子代码中也是有一些直接操作的部分, 比如点击开启另一个Activity, 点击弹出菜单(菜单项的点击仍然是调用presenter的方法).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View接口中定义的方法多为&lt;code&gt;showXXX()&lt;/code&gt;方法. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fragment作为View实现, 接口中定义了方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isAdded();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Presenter中数据回调的方法中, 先检查View.isActive()是否为true, 来保证对Fragment的操作安全.&lt;/p&gt;
&lt;h3 id=&quot;Presenter实现&quot;&gt;&lt;a href=&quot;#Presenter实现&quot; class=&quot;headerlink&quot; title=&quot;Presenter实现&quot;&gt;&lt;/a&gt;Presenter实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Presenter的&lt;code&gt;start()&lt;/code&gt;方法在&lt;code&gt;onResume()&lt;/code&gt;的时候调用, 这时候取初始数据; 其他方法均对应于用户在UI上的交互操作. &lt;/li&gt;
&lt;li&gt;New Presenter的操作是在每一个Activity的&lt;code&gt;onCreate()&lt;/code&gt;里做的: 先添加了Fragment(View), 然后把它作为参数传给了Presenter. 这里并没有存Presenter的引用.&lt;/li&gt;
&lt;li&gt;Presenter的构造函数有两个参数, 一个是Model(Model类一般叫XXXRepository), 一个是View. 构造中先用guava的&lt;code&gt;checkNotNull()&lt;/code&gt;&lt;br&gt;检查两个参数是否为null, 然后赋值到字段; 之后再调用View的&lt;code&gt;setPresenter()&lt;/code&gt;方法把Presenter传回View中引用.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Model实现细节&quot;&gt;&lt;a href=&quot;#Model实现细节&quot; class=&quot;headerlink&quot; title=&quot;Model实现细节&quot;&gt;&lt;/a&gt;Model实现细节&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Model只有一个类, 即&lt;code&gt;TasksRepository&lt;/code&gt;. 它还是一个单例. 因为在这个应用的例子中, 我们操作的数据就这一份.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它由手动实现的注入类&lt;code&gt;Injection&lt;/code&gt;类提供:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Injection&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TasksRepository &lt;span class=&quot;title&quot;&gt;provideTasksRepository&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        checkNotNull(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TasksRepository.getInstance(FakeTasksRemoteDataSource.getInstance(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                TasksLocalDataSource.getInstance(context));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;构造如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TasksRepository&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull TasksDataSource tasksRemoteDataSource,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        @NonNull TasksDataSource tasksLocalDataSource)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mTasksRemoteDataSource = checkNotNull(tasksRemoteDataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mTasksLocalDataSource = checkNotNull(tasksLocalDataSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据分为local和remote两大部分. local部分负责数据库的操作, remote部分负责网络. Model类中还有一个内存缓存.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TasksDataSource&lt;/code&gt;是一个接口. 接口中定义了Presenter查询数据的回调接口, 还有一些增删改查的方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h3&gt;&lt;p&gt;MVP模式的主要优势就是便于为业务逻辑加上单元测试.&lt;br&gt;本例子中的单元测试是给&lt;code&gt;TasksRepository&lt;/code&gt;和四个feature的Presenter加的.&lt;br&gt;Presenter的单元测试, Mock了View和Model, 测试调用逻辑, 如:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddEditTaskPresenterTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Mock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TasksRepository mTasksRepository;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Mock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; AddEditTaskContract.View mAddEditTaskView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; AddEditTaskPresenter mAddEditTaskPresenter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setupMocksAndView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MockitoAnnotations.initMocks(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        when(mAddEditTaskView.isActive()).thenReturn(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveNewTaskToRepository_showsSuccessMessageUi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAddEditTaskPresenter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AddEditTaskPresenter(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, mTasksRepository, mAddEditTaskView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAddEditTaskPresenter.saveTask(&lt;span class=&quot;string&quot;&gt;&quot;New Task Title&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Some Task Description&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verify(mTasksRepository).saveTask(any(Task.class)); &lt;span class=&quot;comment&quot;&gt;// saved to the model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verify(mAddEditTaskView).showTasksList(); &lt;span class=&quot;comment&quot;&gt;// shown in the UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;todo-mvp-loaders-用Loader取数据的MVP&quot;&gt;&lt;a href=&quot;#todo-mvp-loaders-用Loader取数据的MVP&quot; class=&quot;headerlink&quot; title=&quot;todo-mvp-loaders 用Loader取数据的MVP&quot;&gt;&lt;/a&gt;todo-mvp-loaders 用Loader取数据的MVP&lt;/h2&gt;&lt;p&gt;基于上一个例子todo-mvp, 只不过这里改为用Loader来从Repository得到数据.&lt;br&gt;&lt;img src=&quot;/images/mvp-loaders.png&quot; alt=&quot;todo-mvp-loaders&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用Loader的优势:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去掉了回调, 自动实现数据的异步加载;&lt;/li&gt;
&lt;li&gt;当内容改变时回调出新数据;&lt;/li&gt;
&lt;li&gt;当应用因为configuration变化而重建loader时, 自动重连到上一个loader.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Diff-with-todo-mvp&quot;&gt;&lt;a href=&quot;#Diff-with-todo-mvp&quot; class=&quot;headerlink&quot; title=&quot;Diff with todo-mvp&quot;&gt;&lt;/a&gt;Diff with todo-mvp&lt;/h3&gt;&lt;p&gt;既然是基于todo-mvp, 那么之前说过的那些就不再重复, 我们来看一下都有什么改动:&lt;br&gt;&lt;code&gt;git difftool -d todo-mvp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加了两个类:&lt;br&gt;&lt;code&gt;TaskLoader&lt;/code&gt;和&lt;code&gt;TasksLoader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;在Activity中new Loader类, 然后传入Presenter的构造方法.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Contract&lt;/code&gt;中View接口删掉了&lt;code&gt;isActive()&lt;/code&gt;方法, Presenter删掉了&lt;code&gt;populateTask()&lt;/code&gt;方法.&lt;/p&gt;
&lt;h3 id=&quot;数据获取&quot;&gt;&lt;a href=&quot;#数据获取&quot; class=&quot;headerlink&quot; title=&quot;数据获取&quot;&gt;&lt;/a&gt;数据获取&lt;/h3&gt;&lt;p&gt;添加的两个新类是&lt;code&gt;TaskLoader&lt;/code&gt;和&lt;code&gt;TasksLoader&lt;/code&gt;, 都继承于&lt;code&gt;AsyncTaskLoader&lt;/code&gt;, 只不过数据的类型一个是单数, 一个是复数.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AsyncTaskLoader&lt;/code&gt;是基于&lt;code&gt;ModernAsyncTask&lt;/code&gt;, 类似于&lt;code&gt;AsyncTask&lt;/code&gt;,&lt;br&gt;把load数据的操作放在&lt;code&gt;loadInBackground()&lt;/code&gt;里即可, &lt;code&gt;deliverResult()&lt;/code&gt;方法会将结果返回到主线程, 我们在listener的&lt;code&gt;onLoadFinished()&lt;/code&gt;里面就可以接到返回的数据了, (在这个例子中是几个Presenter实现了这个接口).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TasksDataSource&lt;/code&gt;接口的这两个方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;List&amp;lt;Task&amp;gt; &lt;span class=&quot;title&quot;&gt;getTasks&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Task &lt;span class=&quot;title&quot;&gt;getTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull String taskId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;都变成了同步方法, 因为它们是在&lt;code&gt;loadInBackground()&lt;/code&gt;方法里被调用.&lt;/p&gt;
&lt;p&gt;Presenter中保存了&lt;code&gt;Loader&lt;/code&gt;和&lt;code&gt;LoaderManager&lt;/code&gt;, 在&lt;code&gt;start()&lt;/code&gt;方法里&lt;code&gt;initLoader&lt;/code&gt;, 然后&lt;code&gt;onCreateLoader&lt;/code&gt;返回构造传入的那个loader.&lt;br&gt;&lt;code&gt;onLoadFinished()&lt;/code&gt;里面调用View的方法. 此时Presenter实现&lt;code&gt;LoaderManager.LoaderCallbacks&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;数据改变监听&quot;&gt;&lt;a href=&quot;#数据改变监听&quot; class=&quot;headerlink&quot; title=&quot;数据改变监听&quot;&gt;&lt;/a&gt;数据改变监听&lt;/h3&gt;&lt;p&gt;&lt;code&gt;TasksRepository&lt;/code&gt;类中定义了observer的接口, 保存了一个listener的list:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;TasksRepositoryObserver&amp;gt; mObservers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;TasksRepositoryObserver&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TasksRepositoryObserver&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTasksChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每次有数据改动需要刷新UI时就调用:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notifyContentObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (TasksRepositoryObserver observer : mObservers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        observer.onTasksChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在两个Loader里注册和注销自己为&lt;code&gt;TasksRepository&lt;/code&gt;的listener: 在&lt;code&gt;onStartLoading()&lt;/code&gt;里add, &lt;code&gt;onReset()&lt;/code&gt;里面remove方法.&lt;br&gt;这样每次&lt;code&gt;TasksRepository&lt;/code&gt;有数据变化, 作为listener的两个Loader都会收到通知, 然后force load:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTasksChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isStarted()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forceLoad();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样&lt;code&gt;onLoadFinished()&lt;/code&gt;方法就会被调用.&lt;/p&gt;
&lt;h2 id=&quot;todo-databinding&quot;&gt;&lt;a href=&quot;#todo-databinding&quot; class=&quot;headerlink&quot; title=&quot;todo-databinding&quot;&gt;&lt;/a&gt;todo-databinding&lt;/h2&gt;&lt;p&gt;基于todo-mvp, 使用&lt;a href=&quot;http://developer.android.com/tools/data-binding/guide.html#data_objects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data Binding library&lt;/a&gt;来显示数据, 把UI和动作绑定起来.&lt;/p&gt;
&lt;p&gt;说到ViewModel, 还有一种模式叫MVVM(Model-View-ViewModel)模式.&lt;br&gt;这个例子并没有严格地遵循&lt;code&gt;Model-View-ViewModel&lt;/code&gt;模式或者&lt;code&gt;Model-View-Presenter&lt;/code&gt;模式, 因为它既用了ViewModel又用了Presenter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mvp-databinding.png&quot; alt=&quot;todo-databinding&quot;&gt;&lt;/p&gt;
&lt;p&gt;Data Binding Library让UI元素和数据模型绑定:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;layout文件用来绑定数据和UI元素;&lt;/li&gt;
&lt;li&gt;事件和action handler绑定;&lt;/li&gt;
&lt;li&gt;数据变为可观察的, 需要的时候可以自动更新.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Diff-with-todo-mvp-1&quot;&gt;&lt;a href=&quot;#Diff-with-todo-mvp-1&quot; class=&quot;headerlink&quot; title=&quot;Diff with todo-mvp&quot;&gt;&lt;/a&gt;Diff with todo-mvp&lt;/h3&gt;&lt;p&gt;添加了几个类:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StatisticsViewModel&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwipeRefreshLayoutDataBinding&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TasksItemActionHandler&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TasksViewModel&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从几个View的接口可以看出方法数减少了, 原来需要多个showXXX()方法, 现在只需要一两个方法就可以了.&lt;/p&gt;
&lt;h3 id=&quot;数据绑定&quot;&gt;&lt;a href=&quot;#数据绑定&quot; class=&quot;headerlink&quot; title=&quot;数据绑定&quot;&gt;&lt;/a&gt;数据绑定&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;TasksDetailFragment&lt;/code&gt;为例:&lt;br&gt;以前在todo-mvp里需要这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mDetailDescription = (TextView)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root.findViewById(R.id.task_detail_description);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showDescription&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String description)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mDetailDescription.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mDetailDescription.setText(description);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在只需要这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;onCreateView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View view = inflater.inflate(R.layout.taskdetail_frag, container, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mViewDataBinding = TaskdetailFragBinding.bind(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Task task)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mViewDataBinding.setTask(task);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为所有数据绑定的操作都写在了xml里:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/task_detail_description&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@&amp;#123;task.description&amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; title=&quot;事件绑定&quot;&gt;&lt;/a&gt;事件绑定&lt;/h3&gt;&lt;p&gt;数据绑定省去了&lt;code&gt;findViewById()&lt;/code&gt;和&lt;code&gt;setText()&lt;/code&gt;, 事件绑定则是省去了&lt;code&gt;setOnClickListener()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;比如&lt;code&gt;taskdetail_frag.xml&lt;/code&gt;中的&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;CheckBox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/task_detail_complete&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@&amp;#123;task.completed&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:onCheckedChanged&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@&amp;#123;(cb, isChecked) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    presenter.completeChanged(task, isChecked)&amp;#125;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中Presenter是这时候传入的:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onActivityCreated(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mViewDataBinding.setPresenter(mPresenter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据监听&quot;&gt;&lt;a href=&quot;#数据监听&quot; class=&quot;headerlink&quot; title=&quot;数据监听&quot;&gt;&lt;/a&gt;数据监听&lt;/h3&gt;&lt;p&gt;在显示List数据的界面&lt;code&gt;TasksFragment&lt;/code&gt;, 仅需要知道数据是否为空, 所以它使用了&lt;code&gt;TasksViewModel&lt;/code&gt;来给layout提供信息, 当尺寸设定的时候, 只有一些相关的属性被通知, 和这些属性绑定的UI元素被更新.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setTaskListSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; taskListSize)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mTaskListSize = taskListSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyPropertyChanged(BR.noTaskIconRes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyPropertyChanged(BR.noTasksLabel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyPropertyChanged(BR.currentFilteringLabel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyPropertyChanged(BR.notEmpty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    notifyPropertyChanged(BR.tasksAddViewVisible);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他实现细节&quot;&gt;&lt;a href=&quot;#其他实现细节&quot; class=&quot;headerlink&quot; title=&quot;其他实现细节&quot;&gt;&lt;/a&gt;其他实现细节&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Adapter中的Data Binding, 见&lt;code&gt;TasksFragment&lt;/code&gt;中的&lt;code&gt;TasksAdapter&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i, View view, ViewGroup viewGroup)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Task task = getItem(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TaskItemBinding binding;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (view == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Inflate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LayoutInflater inflater = LayoutInflater.from(viewGroup.getContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Create the binding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binding = TaskItemBinding.inflate(inflater, viewGroup, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        binding = DataBindingUtil.getBinding(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// We might be recycling the binding for another task, so update it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Create the action handler for the view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TasksItemActionHandler itemActionHandler =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TasksItemActionHandler(mUserActionsListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    binding.setActionHandler(itemActionHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    binding.setTask(task);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    binding.executePendingBindings();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; binding.getRoot();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Presenter可能会被包在ActionHandler中, 比如&lt;code&gt;TasksItemActionHandler&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ViewModel也可以作为View接口的实现, 比如&lt;code&gt;StatisticsViewModel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwipeRefreshLayoutDataBinding&lt;/code&gt;类定义的&lt;code&gt;onRefresh()&lt;/code&gt;动作绑定.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;todo-mvp-clean&quot;&gt;&lt;a href=&quot;#todo-mvp-clean&quot; class=&quot;headerlink&quot; title=&quot;todo-mvp-clean&quot;&gt;&lt;/a&gt;todo-mvp-clean&lt;/h2&gt;&lt;p&gt;这个例子是基于Clean Architecture的原则:&lt;br&gt;&lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Clean Architecture&lt;/a&gt;.&lt;br&gt;关于Clean Architecture, 还可以看这个Sample App: &lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-CleanArchitecture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这个例子在todo-mvp的基础上, 加了一层domain层, 把应用分为了三层:&lt;br&gt;&lt;img src=&quot;/images/mvp-clean.png&quot; alt=&quot;mvp-clean&quot;&gt;&lt;/p&gt;
&lt;p&gt;Domain: 盛放了业务逻辑, domain层包含use cases或者interactors, 被应用的presenters使用. 这些use cases代表了所有从presentation层可能进行的行为.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键概念&lt;/strong&gt;&lt;br&gt;和基本的mvp sample最大的不同就是domain层和use cases. 从presenters中抽离出来的domain层有助于避免presenter中的代码重复.&lt;/p&gt;
&lt;p&gt;Use cases定义了app需要的操作, 这样增加了代码的可读性, 因为类名反映了目的.&lt;/p&gt;
&lt;p&gt;Use cases对于操作的复用来说也很好. 比如&lt;code&gt;CompleteTask&lt;/code&gt;在两个Presenter中都用到了.&lt;/p&gt;
&lt;p&gt;Use cases的执行是在后台线程, 使用&lt;a href=&quot;http://www.oodesign.com/command-pattern.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;command pattern&lt;/a&gt;. 这样domain层对于Android SDK和其他第三方库来说都是完全解耦的.&lt;/p&gt;
&lt;h3 id=&quot;Diff-with-todo-mvp-2&quot;&gt;&lt;a href=&quot;#Diff-with-todo-mvp-2&quot; class=&quot;headerlink&quot; title=&quot;Diff with todo-mvp&quot;&gt;&lt;/a&gt;Diff with todo-mvp&lt;/h3&gt;&lt;p&gt;每一个feature的包下都新增了domain层, 里面包含了子目录model和usecase等.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UseCase&lt;/code&gt;是一个抽象类, 定义了domain层的基础接口点.&lt;br&gt;&lt;code&gt;UseCaseHandler&lt;/code&gt;用于执行use cases, 是一个单例, 实现了command pattern.&lt;br&gt;&lt;code&gt;UseCaseThreadPoolScheduler&lt;/code&gt;实现了&lt;code&gt;UseCaseScheduler&lt;/code&gt;接口, 定义了use cases执行的线程池, 在后台线程异步执行, 最后把结果返回给主线程.&lt;br&gt;&lt;code&gt;UseCaseScheduler&lt;/code&gt;通过构造传给&lt;code&gt;UseCaseHandler&lt;/code&gt;.&lt;br&gt;测试中用了&lt;code&gt;UseCaseScheduler&lt;/code&gt;的另一个实现&lt;code&gt;TestUseCaseScheduler&lt;/code&gt;, 所有的执行变为同步的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Injection&lt;/code&gt;类中提供了多个Use cases的依赖注入, 还有&lt;code&gt;UseCaseHandler&lt;/code&gt;用来执行use cases.&lt;/p&gt;
&lt;p&gt;Presenter的实现中, 多个use cases和&lt;code&gt;UsseCaseHandler&lt;/code&gt;都由构造传入, 执行动作, 比如更新一个task:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String title, String description)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mTaskId == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;string&quot;&gt;&quot;updateTask() was called but task is new.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Task newTask = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(title, description, mTaskId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mUseCaseHandler.execute(mSaveTask, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SaveTask.RequestValues(newTask),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UseCase.UseCaseCallback&amp;lt;SaveTask.ResponseValue&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SaveTask.ResponseValue response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// After an edit, go back to the list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mAddTaskView.showTasksList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    showSaveError();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;todo-mvp-dagger&quot;&gt;&lt;a href=&quot;#todo-mvp-dagger&quot; class=&quot;headerlink&quot; title=&quot;todo-mvp-dagger&quot;&gt;&lt;/a&gt;todo-mvp-dagger&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关键概念&lt;/strong&gt;:&lt;br&gt;&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2&lt;/a&gt; 是一个静态的编译期依赖注入框架.&lt;br&gt;这个例子中改用dagger2实现依赖注入. 这样做的主要好处就是在测试的时候我们可以用替代的modules. 这在编译期间通过flavors就可以完成, 或者在运行期间使用一些调试面板来设置.&lt;/p&gt;
&lt;h3 id=&quot;Diff-with-todo-mvp-3&quot;&gt;&lt;a href=&quot;#Diff-with-todo-mvp-3&quot; class=&quot;headerlink&quot; title=&quot;Diff with todo-mvp&quot;&gt;&lt;/a&gt;Diff with todo-mvp&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Injection&lt;/code&gt;类被删除了.&lt;br&gt;添加了5个Component, 四个feature各有一个, 另外数据对应一个: &lt;code&gt;TasksRepositoryComponent&lt;/code&gt;, 这个Component被保存在Application里.&lt;/p&gt;
&lt;p&gt;数据的module: &lt;code&gt;TasksRepositoryModule&lt;/code&gt;在&lt;code&gt;mock&lt;/code&gt;和&lt;code&gt;prod&lt;/code&gt;目录下各有一个.&lt;/p&gt;
&lt;p&gt;对于每一个feature的Presenter的注入是这样实现的:&lt;br&gt;首先, 把Presenter的构造函数标记为@Inject, 然后在Activity中构造component并注入到字段:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt; AddEditTaskPresenter mAddEditTasksPresenter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.addtask_act);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Create the presenter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DaggerAddEditTaskComponent.builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .addEditTaskPresenterModule(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AddEditTaskPresenterModule(addEditTaskFragment, taskId))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .tasksRepositoryComponent(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ((ToDoApplication) getApplication()).getTasksRepositoryComponent()).build()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .inject(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个module里provide了view和taskId:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddEditTaskPresenterModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; AddEditTaskContract.View mView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String mTaskId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AddEditTaskPresenterModule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(AddEditTaskContract.View view, @Nullable String taskId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mView = view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mTaskId = taskId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AddEditTaskContract.&lt;span class=&quot;function&quot;&gt;View &lt;span class=&quot;title&quot;&gt;provideAddEditTaskContractView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;provideTaskId&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mTaskId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意原来构造方法里调用的setPresenter方法改为用方法注入实现:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Method injection is used here to safely reference &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; this&amp;#125; after the object is created.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * For more information, see Java Concurrency in Practice.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setupListeners&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mAddTaskView.setPresenter(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;todo-mvp-contentproviders&quot;&gt;&lt;a href=&quot;#todo-mvp-contentproviders&quot; class=&quot;headerlink&quot; title=&quot;todo-mvp-contentproviders&quot;&gt;&lt;/a&gt;todo-mvp-contentproviders&lt;/h2&gt;&lt;p&gt;这个例子是基于todo-mvp-loaders的, 用content provider来获取repository中的数据.&lt;br&gt;&lt;img src=&quot;/images/mvp-contentproviders.png&quot; alt=&quot;mvp-contentproviders&quot;&gt;&lt;br&gt;使用&lt;a href=&quot;https://developer.android.com/guide/topics/providers/content-providers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Content Provider&lt;/a&gt;的优势是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理了结构化数据的访问;&lt;/li&gt;
&lt;li&gt;Content Provider是跨进程访问数据的标准接口.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Diff-with-todo-mvp-loaders&quot;&gt;&lt;a href=&quot;#Diff-with-todo-mvp-loaders&quot; class=&quot;headerlink&quot; title=&quot;Diff with todo-mvp-loaders&quot;&gt;&lt;/a&gt;Diff with todo-mvp-loaders&lt;/h3&gt;&lt;p&gt;注意这个例子是唯一一个不基于最基本的todo-mvp, 而是基于todo-mvp-loaders. (但是我觉得也可以认为是直接从todo-mvp转化的.)&lt;br&gt;看diff: &lt;code&gt;git difftool -d todo-mvp-loaders&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;去掉了&lt;code&gt;TaskLoader&lt;/code&gt;和&lt;code&gt;TasksLoader&lt;/code&gt;. (回归到了基本的todo-mvp).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TasksRepository&lt;/code&gt;中的方法不是同步方法, 而是异步加callback的形式. (回归到了基本的todo-mvp). &lt;/p&gt;
&lt;p&gt;&lt;code&gt;TasksLocalDataSource&lt;/code&gt;中的读方法都变成了空实现, 因为Presenter现在可以自动收到数据更新.&lt;/p&gt;
&lt;p&gt;新增&lt;code&gt;LoaderProvider&lt;/code&gt;用来创建Cursor Loaders, 有两个方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回特定fiter下或全部的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Loader&amp;lt;Cursor&amp;gt; &lt;span class=&quot;title&quot;&gt;createFilteredTasksLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TaskFilter taskFilter)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回特定id的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Loader&amp;lt;Cursor&amp;gt; &lt;span class=&quot;title&quot;&gt;createTaskLoader&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String taskId)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中第一个方法的参数&lt;code&gt;TaskFilter&lt;/code&gt;, 用来指定过滤的selection条件, 也是新增类.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LoaderManager&lt;/code&gt;和&lt;code&gt;LoaderProvider&lt;/code&gt;都是由构造传入Presenter, 在回调&lt;code&gt;onTaskLoaded()&lt;/code&gt;和&lt;code&gt;onTasksLoaded()&lt;/code&gt;中init loader. &lt;/p&gt;
&lt;p&gt;在&lt;code&gt;TasksPresenter&lt;/code&gt;中还做了判断, 是init loader还是restart loader:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTasksLoaded&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Task&amp;gt; tasks)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// we don&#39;t care about the result since the CursorLoader will load the data for us&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mLoaderManager.getLoader(TASKS_LOADER) == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLoaderManager.initLoader(TASKS_LOADER, mCurrentFiltering.getFilterExtras(), &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mLoaderManager.restartLoader(TASKS_LOADER, mCurrentFiltering.getFilterExtras(), &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;其中initLoader()和restartLoader()时传入的第二个参数是一个bundle, 用来指明过滤类型, 即是带selection条件的数据库查询.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;同样是在onLoadFinshed()的时候做View处理, 以`TaskDetailPresenter`为例:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLoadFinished&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Loader&amp;lt;Cursor&amp;gt; loader, Cursor data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data.moveToLast()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onDataLoaded(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onDataEmpty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onDataNotAvailable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数据类Task中新增了静态方法从Cursor转为Task, 这个方法在Presenter的&lt;code&gt;onLoadFinished()&lt;/code&gt;和测试中都用到了.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Task &lt;span class=&quot;title&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Cursor cursor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String entryId = cursor.getString(cursor.getColumnIndexOrThrow(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TasksPersistenceContract.TaskEntry.COLUMN_NAME_ENTRY_ID));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String title = cursor.getString(cursor.getColumnIndexOrThrow(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TasksPersistenceContract.TaskEntry.COLUMN_NAME_TITLE));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String description = cursor.getString(cursor.getColumnIndexOrThrow(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TasksPersistenceContract.TaskEntry.COLUMN_NAME_DESCRIPTION));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; completed = cursor.getInt(cursor.getColumnIndexOrThrow(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            TasksPersistenceContract.TaskEntry.COLUMN_NAME_COMPLETED)) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task(title, description, entryId, completed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外一些细节:&lt;br&gt;数据库中的内存cache被删了.&lt;br&gt;Adapter改为继承于&lt;code&gt;CursorAdapter&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;单元测试-1&quot;&gt;&lt;a href=&quot;#单元测试-1&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h3&gt;&lt;p&gt;新增了&lt;code&gt;MockCursorProvider&lt;/code&gt;类, 用于在单元测试中提供数据.&lt;br&gt;其内部类&lt;code&gt;TaskMockCursor&lt;/code&gt; mock了Cursor数据.&lt;br&gt;Presenter的测试中仍然mock了所有构造传入的参数, 然后准备了mock数据, 测试的逻辑主要还是拿到数据后的view操作, 比如:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadAllTasksFromRepositoryAndLoadIntoView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// When the loader finishes with tasks and filter is set to all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    when(mBundle.getSerializable(TaskFilter.KEY_TASK_FILTER)).thenReturn(TasksFilterType.ALL_TASKS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TaskFilter taskFilter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TaskFilter(mBundle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mTasksPresenter.setFiltering(taskFilter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mTasksPresenter.onLoadFinished(mock(Loader.class), mAllTasksCursor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Then progress indicator is hidden and all tasks are shown in UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    verify(mTasksView).setLoadingIndicator(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    verify(mTasksView).showTasks(mShowTasksArgumentCaptor.capture());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;todo-mvp-rxjava&quot;&gt;&lt;a href=&quot;#todo-mvp-rxjava&quot; class=&quot;headerlink&quot; title=&quot;todo-mvp-rxjava&quot;&gt;&lt;/a&gt;todo-mvp-rxjava&lt;/h2&gt;&lt;p&gt;关于这个例子, 之前看过作者的文章: &lt;a href=&quot;https://upday.github.io/blog/model-view-presenter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Architecture Patterns Part 2:&lt;br&gt;Model-View-Presenter&lt;/a&gt;,&lt;br&gt;这个文章上过Android Weekly Issue #226.&lt;/p&gt;
&lt;p&gt;这个例子也是基于todo-mvp, 使用RxJava处理了presenter和数据层之间的通信.&lt;/p&gt;
&lt;h3 id=&quot;MVP基本接口改变&quot;&gt;&lt;a href=&quot;#MVP基本接口改变&quot; class=&quot;headerlink&quot; title=&quot;MVP基本接口改变&quot;&gt;&lt;/a&gt;MVP基本接口改变&lt;/h3&gt;&lt;p&gt;BasePresenter接口改为:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasePresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;View在&lt;code&gt;onResume()&lt;/code&gt;的时候调用Presenter的&lt;code&gt;subscribe()&lt;/code&gt;; 在onPause()的时候调用presenter的&lt;code&gt;unsubscribe()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;如果View接口的实现不是Fragment或Activity, 而是Android的自定义View, 那么在Android View的&lt;code&gt;onAttachedToWindow()&lt;/code&gt;和&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;方法里分别调用这两个方法.&lt;/p&gt;
&lt;p&gt;Presenter中保存了:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CompositeSubscription mSubscriptions;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;subscribe()&lt;/code&gt;的时候, &lt;code&gt;mSubscriptions.add(subscription);&lt;/code&gt;;&lt;br&gt;在&lt;code&gt;unsubscribe()&lt;/code&gt;的时候, &lt;code&gt;mSubscriptions.clear();&lt;/code&gt; .&lt;/p&gt;
&lt;h3 id=&quot;Diff-with-todo-mvp-4&quot;&gt;&lt;a href=&quot;#Diff-with-todo-mvp-4&quot; class=&quot;headerlink&quot; title=&quot;Diff with todo-mvp&quot;&gt;&lt;/a&gt;Diff with todo-mvp&lt;/h3&gt;&lt;p&gt;数据层暴露了RxJava的&lt;code&gt;Observable&lt;/code&gt;流作为获取数据的方式, &lt;code&gt;TasksDataSource&lt;/code&gt;接口中的方法变成了这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt; getTasks();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Observable&amp;lt;Task&amp;gt; &lt;span class=&quot;title&quot;&gt;getTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull String taskId)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;callback接口被删了, 因为不需要了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TasksLocalDataSource&lt;/code&gt;中的实现用了&lt;a href=&quot;https://github.com/square/sqlbrite&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SqlBrite&lt;/a&gt;, 从数据库中查询出来的结果很容易地变成了流:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt; getTasks() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mDatabaseHelper.createQuery(TaskEntry.TABLE_NAME, sql)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .mapToList(mTaskMapperFunction);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TasksRepository&lt;/code&gt;中整合了local和remote的data, 最后把&lt;code&gt;Observable&lt;/code&gt;返回给消费者(Presenters和Unit Tests). 这里用了&lt;code&gt;.concat()&lt;/code&gt;和&lt;code&gt;.first()&lt;/code&gt;操作符.&lt;/p&gt;
&lt;p&gt;Presenter订阅TasksRepository的Observable, 然后决定View的操作, 而且Presenter也负责线程的调度.&lt;br&gt;简单的比如&lt;code&gt;AddEditTaskPresenter&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;populateTask&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mTaskId == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;string&quot;&gt;&quot;populateTask() was called but task is new.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Subscription subscription = mTasksRepository&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .getTask(mTaskId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .subscribeOn(mSchedulerProvider.computation())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .observeOn(mSchedulerProvider.ui())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observer&amp;lt;Task&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Throwable e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mAddTaskView.isActive()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mAddTaskView.showEmptyTaskError();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Task task)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mAddTaskView.isActive()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mAddTaskView.setTitle(task.getTitle());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mAddTaskView.setDescription(task.getDescription());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mSubscriptions.add(subscription);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StatisticsPresenter&lt;/code&gt;负责统计数据的显示, &lt;code&gt;TasksPresenter&lt;/code&gt;负责过滤显示所有数据, 里面的RxJava操作符运用比较多, 可以看到链式操作的特点.&lt;/p&gt;
&lt;p&gt;关于线程调度, 定义了&lt;code&gt;BaseSchedulerProvider&lt;/code&gt;接口, 通过构造函数传给Presenter, 然后实现用&lt;code&gt;SchedulerProvider&lt;/code&gt;, 测试用&lt;code&gt;ImmediateSchedulerProvider&lt;/code&gt;. 这样方便测试.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Google官方MVP-Sample代码解读&quot;&gt;&lt;a href=&quot;#Google官方MVP-Sample代码解读&quot; class=&quot;headerlink&quot; title=&quot;Google官方MVP Sample代码解读&quot;&gt;&lt;/a&gt;Google官方MVP Sample代码解读&lt;/h1&gt;&lt;p&gt;关于Android程序的构架, 当前(2016.10)最流行的模式即为MVP模式, Google官方提供了Sample代码来展示这种模式的用法.&lt;br&gt;Repo地址: &lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot;&gt;android-architecture&lt;/a&gt;.&lt;br&gt;本文为阅读官方sample代码的阅读笔记和分析.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Architecture" scheme="http://mengdd.github.io/categories/Android/Architecture/"/>
    
    
      <category term="Content Provider" scheme="http://mengdd.github.io/tags/Content-Provider/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Data Binding" scheme="http://mengdd.github.io/tags/Data-Binding/"/>
    
      <category term="MVVM" scheme="http://mengdd.github.io/tags/MVVM/"/>
    
      <category term="Dagger" scheme="http://mengdd.github.io/tags/Dagger/"/>
    
      <category term="MVC" scheme="http://mengdd.github.io/tags/MVC/"/>
    
      <category term="Clean Architecture" scheme="http://mengdd.github.io/tags/Clean-Architecture/"/>
    
      <category term="Loader" scheme="http://mengdd.github.io/tags/Loader/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 227</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/21/android-weekly-notes-issue-227/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/21/android-weekly-notes-issue-227/</id>
    <published>2016-10-21T06:52:53.000Z</published>
    <updated>2016-10-21T07:57:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-227&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-227&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #227&quot;&gt;&lt;/a&gt;Android Weekly Issue #227&lt;/h1&gt;&lt;p&gt;October 16th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-227&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #227&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的Mobile Vision API 人脸检测; Firebase的Remote Config; 与HashMap有关的优化; 提高RecyclerView帧率的优化; 使用AutoValue生成model代码; 开源库中抽象类和接口的使用讨论; Bottom Sheet的使用; Android Studio中的版本控制系统; ConstraintLayout的使用; 应用换Bottom Navigation; Nougat的Messaging Style Notification; 自定义字体; Reductor的使用等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Face-Detection-Concepts-Overview&quot;&gt;&lt;a href=&quot;#Face-Detection-Concepts-Overview&quot; class=&quot;headerlink&quot; title=&quot;Face Detection Concepts Overview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/vision/face-detection-concepts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Face Detection Concepts Overview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章来自Mobile Vision, 讲人脸检测及相关概念.&lt;br&gt;API使用&lt;a href=&quot;https://developers.google.com/vision/android/detect-faces-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;.&lt;br&gt;&lt;a href=&quot;https://github.com/googlesamples/android-vision&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sample&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Exploring-Firebase-on-Android-amp-iOS-Remote-Config&quot;&gt;&lt;a href=&quot;#Exploring-Firebase-on-Android-amp-iOS-Remote-Config&quot; class=&quot;headerlink&quot; title=&quot;Exploring Firebase on Android &amp;amp; iOS: Remote Config&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@hitherejoe/exploring-firebase-on-android-ios-remote-config-3e1407b088f6#.ozr0s8s5q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Firebase on Android &amp;amp; iOS: Remote Config&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Remote config是Firebase提供的一个feature, 让我们可以定义参数, 在firebase的console管理, 从而在server端控制应用的UI或者行为, 并且可以选择生效的用户范围.&lt;/p&gt;
&lt;p&gt;之前还有这个文章是关于&lt;a href=&quot;https://medium.com/exploring-android/exploring-firebase-on-android-ios-analytics-8484b61a21ba#.lu7cv7ejz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase Analytics&lt;/a&gt;的.&lt;/p&gt;
&lt;p&gt;本篇文章介绍了Firebase的Remote Config可以干什么, 以及怎么做, 解说很详细.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;br&gt;我们用Remote Config定义的键值对叫参数(parameters).  它提供了这个参数相关的what信息(key, the identifier), 和how信息(value, the configuration).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;&lt;br&gt;条件值(conditional value)也是一个键值对, 其中condition指定了需要满足的条件, value指定了满足条件时需要返回的值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优先级&lt;/strong&gt;&lt;br&gt;如果单个条件被满足, 那么返回对应的值; 如果多个条件都被满足, 那么返回主导条件(list上方的条件)对应的值; 如果没有条件满足, 则返回默认值; 如果没有定义默认值, 则什么也不返回.&lt;/p&gt;
&lt;p&gt;文中还详细介绍了Android和iOS端的实现, 以及console的配置.&lt;/p&gt;
&lt;h2 id=&quot;Android-App-Optimization-Using-ArrayMap-and-SparseArray&quot;&gt;&lt;a href=&quot;#Android-App-Optimization-Using-ArrayMap-and-SparseArray&quot; class=&quot;headerlink&quot; title=&quot;Android App Optimization Using ArrayMap and SparseArray&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@amitshekhar/android-app-optimization-using-arraymap-and-sparsearray-f2b4e2e3dc47#.29qai8u8j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android App Optimization Using ArrayMap and SparseArray&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当我们需要存储键值对的时候, 我们总是首先想到用&lt;code&gt;HashMap&lt;/code&gt;, 然而IDE(Android Studio)有时候会警告提醒你, 应该用&lt;code&gt;ArrayMap&lt;/code&gt;或&lt;code&gt;SparseArray&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;HashMap-vs-ArrayMap&quot;&gt;&lt;a href=&quot;#HashMap-vs-ArrayMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap vs ArrayMap&quot;&gt;&lt;/a&gt;HashMap vs ArrayMap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ArrayMap&lt;/code&gt;比传统的&lt;code&gt;HashMap&lt;/code&gt;更节省内存, 因为它把自己的映射放在数组结构中: 一个整型数组放每一个item的hash code, 一个Object数组放key/value对. 这样避免了为每一个entry创建额外的对象, 而且数组增长也好控制.&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;ArrayMap&lt;/code&gt;并不是为很大的数据集设计的, 并且它会比&lt;code&gt;HashMap&lt;/code&gt;慢一些, 以为查找需要二分查找, 增删需要在数组中操作.&lt;/p&gt;
&lt;h3 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;是一个&lt;code&gt;HashMap.Entry&lt;/code&gt;的数组, 其组成是key, value, HashCode, 还有一个指针.&lt;/p&gt;
&lt;p&gt;当进行插入时: 首先计算出key的HashCode, 然后用这个hashCode找到对应的bucket, 如果已经存了元素, 则把旧元素的指针指向新元素, 即把bucket变为一个&lt;code&gt;LinkedList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当进行查询时: 复杂度为O(1), 但是这样是牺牲了更多的空间复杂度得到的.&lt;/p&gt;
&lt;p&gt;HashMap的缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为key和value都不能是原生类型, 所以插入时可能会有自动装箱, 导致创建额外的对象.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap.Entry&lt;/code&gt;本身就是一层额外的对象.&lt;/li&gt;
&lt;li&gt;每次HashMap的收缩或者扩张, Buckets都要重新排列, 随着对象变多, 这个操作变得越发昂贵.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ArrayMap&quot;&gt;&lt;a href=&quot;#ArrayMap&quot; class=&quot;headerlink&quot; title=&quot;ArrayMap&quot;&gt;&lt;/a&gt;ArrayMap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ArrayMap&lt;/code&gt;使用两个数组:&lt;br&gt;&lt;code&gt;int[] mHashes&lt;/code&gt;用来存哈希值; &lt;code&gt;Object[] mArray&lt;/code&gt;来存对象.&lt;/p&gt;
&lt;p&gt;当插入键值对时: Key/Value被自动装箱, Key被插入到&lt;code&gt;mArray[]&lt;/code&gt;数组的下一个位置, Value也被插入到&lt;code&gt;mArray[]&lt;/code&gt;, 在Key的下一个位置.&lt;br&gt;计算出的哈希值被放在&lt;code&gt;mHashes[]&lt;/code&gt;的下一个位置.&lt;/p&gt;
&lt;p&gt;当查询一个Key时: 首先计算出Key的哈希值, 在&lt;code&gt;mHashes&lt;/code&gt;中二分查找这个hashCode(时间复杂度(logN)), 当得到hash的index之后, 我们就知道&lt;code&gt;mArray&lt;/code&gt;中&lt;code&gt;2*index&lt;/code&gt;和&lt;code&gt;2*index+1&lt;/code&gt;的位置对应的是查找的key和value.&lt;/p&gt;
&lt;p&gt;虽然时间复杂度提升了, 但是这样却更省空间.&lt;/p&gt;
&lt;h3 id=&quot;推荐的数据结构&quot;&gt;&lt;a href=&quot;#推荐的数据结构&quot; class=&quot;headerlink&quot; title=&quot;推荐的数据结构:&quot;&gt;&lt;/a&gt;推荐的数据结构:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayMap&amp;lt;K,V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArraySet&amp;lt;K,V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashSet&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseArray&amp;lt;V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseBooleanArray&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,Boolean&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseIntArray&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,Integer&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseLongArray&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,Long&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LongSparseArray&amp;lt;V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Long,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RecyclerView-How-we-achieved-60-FPS-in-Workable’s-Android-App&quot;&gt;&lt;a href=&quot;#RecyclerView-How-we-achieved-60-FPS-in-Workable’s-Android-App&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView: How we achieved 60 FPS in Workable’s Android App&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@p.tournaris/recyclerview-how-we-achieved-60-fps-tips-in-workables-android-app-recyclerviews-c646c796473c#.h4gimmdkp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RecyclerView: How we achieved 60 FPS in Workable’s Android App&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们经常会用RecyclerView来显示一个list的数据.&lt;br&gt;作者他们做的是一个招聘应用: Workable, 其中会用list来显示candidates.&lt;br&gt;他们还使用了DataBinding.&lt;br&gt;本文是作者他们关于RecyclerView的帧率所做的一些优化.&lt;/p&gt;
&lt;p&gt;首先他们使用了Android Studio的Allocation Tracking, 然后上下滚动, 从报告发现, 他们布局中使用的&lt;code&gt;TableLayout&lt;/code&gt;花费了很多资源, 于是后来他们改为&lt;code&gt;LinearLayout&lt;/code&gt;加权重的方式来解决, 摆脱了耗费资源的&lt;code&gt;TableLayout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;另一个引起很多资源分配的问题是, 对于需要大写的文字, xml中的:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;android:textAllCaps&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TextView&lt;/code&gt;的代码中会为此生成一个对象:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (allCaps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTransformationMethod(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AllCapsTransformationMethod(getContext()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个在静态的布局中可能没有问题, 但是在一个滚动的list中可能会有些影响.&lt;/p&gt;
&lt;p&gt;改进方法是改为用java String的&lt;code&gt;.toUpperCase()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;然后他们使用了RecyclerView的&lt;code&gt;.onViewRecycled()&lt;/code&gt;方法. 这个方法让我们知道了RecyclerView中的一行何时被回收, 这样我们就可以释放一些不需要的资源.&lt;br&gt;他们使用了DataBinding, 所以这是一个合适的时机来删除ViewModel中的&lt;code&gt;OnPropertyChangedCallbacks&lt;/code&gt;, 然后清理ViewModel自身, 我们还可以清理之前用Glide load到ImageView中的图片.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewRecycled&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Candidates holder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(holder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.getCandidateVM().removePropertyChangedCallback();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setCandidateVM(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setHighlightTerm(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setShowJobTitle(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setShowStage(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.executePendingBindings();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Glide.clear(holder.binding.candidateBrowserAvatar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.candidateBrowserAvatar.setImageDrawable(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onViewRecycled(holder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作者他们的应用还有一些cache设置:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;binding.fragmentCandidateBrowseList.setItemViewCacheSize(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binding.fragmentCandidateBrowseList.setDrawingCacheEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binding.fragmentCandidateBrowseList.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后作者测量了他们的FPS, 显示是60 FPS, 并且发现去掉这些cache设置仍然是60.&lt;/p&gt;
&lt;p&gt;测量帧率FPS的工具: &lt;a href=&quot;https://github.com/friendlyrobotnyc/TinyDancer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TinyDancer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;No-more-value-classes-boilerplate-—-The-power-of-AutoValue&quot;&gt;&lt;a href=&quot;#No-more-value-classes-boilerplate-—-The-power-of-AutoValue&quot; class=&quot;headerlink&quot; title=&quot;No more value classes boilerplate — The power of AutoValue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/rocknnull/no-more-value-classes-boilerplate-the-power-of-autovalue-bbaf36cf8bbe#.r72rsbe34&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;No more value classes boilerplate — The power of AutoValue&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Java/Android编程中经常需要写model对象来存放一些数据, 使用Google的库&lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;可以帮你自动生成这些类, 你需要做的就是定义你的字段, 然后给类加上注解.&lt;/p&gt;
&lt;h3 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h3&gt;&lt;p&gt;在project的&lt;code&gt;build.gradle&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在app的&lt;code&gt;build.gradle&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.neenbedankt.android-apt&amp;apos; // At the beginning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    provided &amp;quot;com.google.auto.value:auto-value:1.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &amp;quot;com.google.auto.value:auto-value:1.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;p&gt;比如要创建Film类, 你可以写一个这样的抽象类:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Film&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Film &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; year)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AutoValue_Film(name, year);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每一个字段都对应一个抽象方法.&lt;br&gt;build一下, &lt;code&gt;AutoValue_Film&lt;/code&gt;类就会自动生成, 加上静态工厂方法(上面的&lt;code&gt;create()&lt;/code&gt;方法) 然后就可以使用工厂方法来得到model:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Film matrix = Film.create(&lt;span class=&quot;string&quot;&gt;&quot;The Matrix&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1999&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点进自动生成的类&lt;code&gt;AutoValue_Film&lt;/code&gt;里可以看到, 连&lt;code&gt;hashCode()&lt;/code&gt;和&lt;code&gt;equals()&lt;/code&gt;方法都生成了.&lt;/p&gt;
&lt;h3 id=&quot;用builder模式&quot;&gt;&lt;a href=&quot;#用builder模式&quot; class=&quot;headerlink&quot; title=&quot;用builder模式&quot;&gt;&lt;/a&gt;用builder模式&lt;/h3&gt;&lt;p&gt;上面的例子随着字段的增多, &lt;code&gt;create()&lt;/code&gt;方法的参数会变得很多, 用起来不方便, 那么此时就需要用Builder模式:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Film&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AutoValue_Film.Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;.Builder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Film &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以很方便地加参数了:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Film matrix = Film.builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setName(&lt;span class=&quot;string&quot;&gt;&quot;The Matrix&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setYear(&lt;span class=&quot;number&quot;&gt;1999&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setCategory(Category.FANTASY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setRating(&lt;span class=&quot;number&quot;&gt;8.7f&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setDuration(&lt;span class=&quot;number&quot;&gt;136&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setReleaseDate(releasedDate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setDirectors(directorsList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setCast(castList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;AutoValue扩展-Parcelable&quot;&gt;&lt;a href=&quot;#AutoValue扩展-Parcelable&quot; class=&quot;headerlink&quot; title=&quot;AutoValue扩展 Parcelable&quot;&gt;&lt;/a&gt;AutoValue扩展 Parcelable&lt;/h3&gt;&lt;p&gt;有时候你需要在Activity之间传数据, 需要你的model是&lt;code&gt;Parcelable&lt;/code&gt;的, 此时你就可以用这个&lt;a href=&quot;https://github.com/rharter/auto-value-parcel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;auto-value-parcel&lt;/a&gt;, 在代码里也只需要实现这个接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Film&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parcelable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有很多的扩展库: &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cauto-value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;extensions for AutoValue&lt;/a&gt;, 比如AutoValue-Gson, AutoValue-Cursor, AutoValue-With, AutoValue-Redacted等.&lt;/p&gt;
&lt;h2 id=&quot;Consider-abstract-class-instead-of-interface&quot;&gt;&lt;a href=&quot;#Consider-abstract-class-instead-of-interface&quot; class=&quot;headerlink&quot; title=&quot;Consider abstract class instead of interface&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hannesdorfmann.com/android/library-abstract-class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Consider abstract class instead of interface&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章的作者说, 在library开发中, 应该考虑用抽象类而不是接口. 他的库是&lt;a href=&quot;https://github.com/sockeqwe/AdapterDelegates&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdapterDelegates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者先介绍了通用的概念比较:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class vs. interface&lt;br&gt;接口更解耦, 更灵活, 只是定义了一个协议, 不限制实现.&lt;/li&gt;
&lt;li&gt;interface vs. abstract class&lt;br&gt;抽象类会有继承的问题, 基类和子类会共享一些实现, 所以子类的编写者最好能清楚基类的实现, 这样才不会在写子类实现抽象方法的时候打破了基类作者的意图. 另外就是基类作者仍然可能会更新基类, 所以得时刻检查子类是否还是符合基类的设计意图.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是为什么作者还是要把自己库中的接口改为抽象类呢? 这是因为作者的库依赖于Android的库, Android的库中相关代码改了, 作者就得改自己的public接口, 加一个方法, 导致所有新版的使用者也都必须实现这个方法.&lt;/p&gt;
&lt;p&gt;还有一个情况就是比如一个开发者使用了2.1版本, 但是他项目里依赖的另一个第三方库使用了2.0版本. 编译不会出错, 最终的apk中打包的是2.1版本. 然后在这个第三方库的组件里调用2.1才有的新方法时就会抛出错误.&lt;/p&gt;
&lt;p&gt;为了解决这个问题, Jake Wharton建议在库的主要更新(major update)中更改发布的package name和group id: &lt;a href=&quot;http://jakewharton.com/java-interoperability-policy-for-major-version-updates/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jakewharton.com/java-interoperability-policy-for-major-version-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者觉得那每次Android RecyclerView的Adapter更新都会导致自己的库major update, 所以他决定把自己的&lt;code&gt;AdapterDelegate&lt;/code&gt;接口改为抽象类. 这样他就可以对新增的方法提供默认空实现.&lt;/p&gt;
&lt;p&gt;这样定义的抽象类只有抽象方法和一些空实现的方法, 并没有状态和行为的共享可能会传播给子类, 其实和接口是一样的.&lt;/p&gt;
&lt;h2 id=&quot;Android-BottomSheetDialog&quot;&gt;&lt;a href=&quot;#Android-BottomSheetDialog&quot; class=&quot;headerlink&quot; title=&quot;Android BottomSheetDialog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@anitas3791/android-bottomsheetdialog-3871a6e9d538#.462vjndmp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android BottomSheetDialog&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;实现bottom sheet的时候, 有三种选择: container view + &lt;code&gt;BottomSheetBehavior&lt;/code&gt;,  &lt;code&gt;BottomSheetDialogFragment&lt;/code&gt;, &lt;code&gt;BottomSheetDialog&lt;/code&gt;. 前两种的例子比较多, 作者要介绍的是第三种.&lt;/p&gt;
&lt;p&gt;如何选择取决你的用途, container view + &lt;code&gt;BottomSheetBehavior&lt;/code&gt; 适用于&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html#bottom-sheets-persistent-bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;persistent bottom sheet&lt;/a&gt;, 而&lt;code&gt;BottomSheetDialogFragment&lt;/code&gt;和&lt;code&gt;BottomSheetDialog&lt;/code&gt;适用于&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html#bottom-sheets-modal-bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modal bottom sheets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;之后作者提供了实现代码, 附有theme定制和状态callback的设置.&lt;/p&gt;
&lt;h2 id=&quot;The-VCS-client-of-Android-Studio&quot;&gt;&lt;a href=&quot;#The-VCS-client-of-Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;The VCS client of Android Studio&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://saulmm.github.io/vcs-android-studio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The VCS client of Android Studio&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章介绍Android Studio的版本控制系统.&lt;/p&gt;
&lt;p&gt;在Android Studio 2.2开始, 加入了一个&lt;code&gt;Create command line launcher&lt;/code&gt;, 这样你就可以在命令行或者第三方的版本控制客户端使用Android Studio的diff/merge tool了.&lt;br&gt;作者使用的客户端是&lt;a href=&quot;https://www.sourcetreeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceTree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;cmd + shift + A&lt;/code&gt;可以用来find action, 然后就可以找到&lt;code&gt;Compare with branch&lt;/code&gt;:  可以比较当前文件和某个分支上的文件的diff;&lt;br&gt;另外还可以&lt;code&gt;Compare with...&lt;/code&gt;, 来比较和之前某一个特定提交的diff;  以及&lt;code&gt;Compare with Clipboard&lt;/code&gt;来和剪贴板做比较.&lt;/p&gt;
&lt;p&gt;还有一些其他有用的快捷键, 请看原文吧.&lt;/p&gt;
&lt;h2 id=&quot;Constraint-Layout-Icon-Label-Text&quot;&gt;&lt;a href=&quot;#Constraint-Layout-Icon-Label-Text&quot; class=&quot;headerlink&quot; title=&quot;Constraint Layout: Icon Label Text&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sqisland.com/2016/10/constraint-layout-icon-label-text.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Constraint Layout: Icon Label Text&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者想做这样一个UI, 左边是一个icon, 右边是两行字, icon的top和bottom分别和第一行字的top和bottom对齐.&lt;br&gt;&lt;img src=&quot;/images/icon-label-text.jpg&quot; alt=&quot;ConstraintLayout: Icon Label Text&quot;&gt;&lt;br&gt;怎么做呢? 她想到了用&lt;a href=&quot;https://developer.android.com/training/constraint-layout/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout&lt;/a&gt;.&lt;br&gt;代码在这里: &lt;a href=&quot;https://github.com/chiuki/iconlabeltext&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iconlabeltext&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Bye-Bye-Burger&quot;&gt;&lt;a href=&quot;#Bye-Bye-Burger&quot; class=&quot;headerlink&quot; title=&quot;Bye, Bye Burger&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/startup-grind/bye-bye-burger-5bd963806015#.emir2u5kv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bye, Bye Burger&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的应用从burger menu改为bottom navigation, 此篇为心得分享和他们改版时设计中的一些细节讨论.&lt;/p&gt;
&lt;p&gt;其中状态保存是一个最主要的技术问题.&lt;/p&gt;
&lt;p&gt;改版之后, 作者他们的应用数据表明有以下几个好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户参与度提升了;&lt;/li&gt;
&lt;li&gt;在底部导航有入口的功能使用率提高了;&lt;/li&gt;
&lt;li&gt;并没有用户反馈说新的导航不好.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Nougat-–-Messaging-Style-Notifications&quot;&gt;&lt;a href=&quot;#Nougat-–-Messaging-Style-Notifications&quot; class=&quot;headerlink&quot; title=&quot;Nougat – Messaging Style Notifications&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/nougat-messaging-style-notifications/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nougat – Messaging Style Notifications&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Messaging Style Notifications是为信息应用特殊设计的, 提供了一个像对话一样的view.&lt;/p&gt;
&lt;p&gt;Messaging-style notifications和Bundled notifications的主要区别是, Bundled notifications中我们持续创建新的notification, 然后它们被grouped together. 但是用Messaging-style notifications的时候, 我们只有一个notification, 然后我们把所有的信息添加进去.&lt;/p&gt;
&lt;p&gt;作者展示了实现代码和效果, 注意这个Messaging style并不是后项兼容的, 只在Nougat及以后的版本才支持.&lt;/p&gt;
&lt;h2 id=&quot;Bottom-sheet-everything&quot;&gt;&lt;a href=&quot;#Bottom-sheet-everything&quot; class=&quot;headerlink&quot; title=&quot;Bottom sheet everything&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.hidroh.com/2016/06/17/bottom-sheet-everything/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom sheet everything&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者介绍了他的应用中对于Bottom sheet的使用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deep linking with bottom sheet Activity&lt;/strong&gt;&lt;br&gt;作者用它处理Deep linking, 这样用户就不用每次都全屏打开, 只先提供一个peek, 如果真的感兴趣再打开.&lt;/p&gt;
&lt;p&gt;实现是用一个透明的Activity, 还有状态栏处理的细节.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom sheet settings menu&lt;/strong&gt;&lt;br&gt;关于Settings, 为了节省用户的trip, 作者它们的应用用了options menu的弹出菜单. 后来他们改用bottom sheet来实现, 并且结合了&lt;code&gt;PreferenceFragmentCompat&lt;/code&gt;, 省去了一些SharedPreferences的读写操作.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supporting tablet users&lt;/strong&gt;&lt;br&gt;bottom sheet在平板上使用, 尤其是横屏的时候, 看起来不太好.&lt;br&gt;所以作者定制了Bottom sheet的宽度, 在平板上时是一个指定宽度, 在手机上维持原状.&lt;/p&gt;
&lt;h2 id=&quot;Machine-Learning-for-with-the-Mobile-Vision-API—-Part-1&quot;&gt;&lt;a href=&quot;#Machine-Learning-for-with-the-Mobile-Vision-API—-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning for with the Mobile Vision API— Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/machine-learning-for-android-developers-with-the-mobile-vision-api-part-1-face-detection-e7e24a3e472f?gi=e6e15107d4d6#.8kmih1fyd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Machine Learning for with the Mobile Vision API— Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;基于Google的Mobile Vision APIs现在Android开发者可以在应用里用上机器学习了.  现在这个Mobile Vision API包括三种类型Face Detection API, Barcode Detection API和Text API.&lt;/p&gt;
&lt;p&gt;本文主要讲人脸检测部分, 后面会讲二维码检测和文字的API.&lt;/p&gt;
&lt;p&gt;作者的demo展示了如何从一个静态照片中检测出人脸区域, 并且标记出landmark(眼睛, 鼻子, 嘴巴等), 之后可以根据这些特征位置加上一些覆盖标记.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/moyheen/face-detector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Custom-fonts-formatting-the-simple-way&quot;&gt;&lt;a href=&quot;#Custom-fonts-formatting-the-simple-way&quot; class=&quot;headerlink&quot; title=&quot;Custom fonts formatting, the simple way&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@andrei.rosca/custom-fonts-formatting-the-simple-way-c1a0e4f6687f#.kjv5uaaix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Custom fonts formatting, the simple way&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Android中自定义字体的一个库: &lt;a href=&quot;https://github.com/chrisjenx/Calligraphy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calligraphy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;如果你的输入是html文字, 你想自动处理里面的tag(比如&lt;b&gt;), 用另一种字体, 怎么处理呢, 作者给出了代码.&lt;br&gt;&lt;img src=&quot;/images/custom-fonts-in-one-textview.png&quot; alt=&quot;custom font in one textview&quot;&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;完整的例子代码见: &lt;a href=&quot;https://github.com/andrei-egeniq/android-tibits/tree/master/StyleSpan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Reductor-Redux-for-Android-Part-1-Introduction&quot;&gt;&lt;a href=&quot;#Reductor-Redux-for-Android-Part-1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Reductor - Redux for Android. Part 1: Introduction&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yarikx.github.io/Reductor-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor - Redux for Android. Part 1: Introduction&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前这个&lt;a href=&quot;https://yarikx.github.io/Reductor-prologue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;介绍过Reductor, 在Android Weekly之前也出现过, 我的笔记: &lt;a href=&quot;http://mengdd.github.io/Android/Android-Weekly/2016/10/02/android-weekly-notes-issue-224/#Reductor-Redux-for-Android&quot;&gt;Android Weekly Notes Issue 224&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Yarikx/reductor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor&lt;/a&gt;是一个状态管理的库, 用Java重新实现了JavaScript的库Redux.&lt;br&gt;它的中心思想:&lt;br&gt;&lt;img src=&quot;/images/redux-idea.png&quot; alt=&quot;redux idea&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前的一篇文章做了一个TODO app, 然后作者发现这种mutable的数据会导致失控的数据改变, 然后可能会出现无法预测的行为. 做了一些改动之后, 我们发现可以通过只保存一个immutable的对象和mutable的reference来避免这个问题.&lt;/p&gt;
&lt;p&gt;这篇文章用Reductor来重新实现应用, 文中详细说明了代码实现.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;ImageTransition&quot;&gt;&lt;a href=&quot;#ImageTransition&quot; class=&quot;headerlink&quot; title=&quot;ImageTransition&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/vikramkakkar/ImageTransition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageTransition&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个很小的库, Activity直接的shared element transition动画, 把一个圆形的ImageView变换到下一个Activity的方形ImageView.&lt;/p&gt;
&lt;h2 id=&quot;Design-Patterns-In-Kotlin&quot;&gt;&lt;a href=&quot;#Design-Patterns-In-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Design-Patterns-In-Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dbacinski/Design-Patterns-In-Kotlin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design-Patterns-In-Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用Kotlin实现的设计模式.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-227&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-227&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #227&quot;&gt;&lt;/a&gt;Android Weekly Issue #227&lt;/h1&gt;&lt;p&gt;October 16th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-227&quot;&gt;Android Weekly Issue #227&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的Mobile Vision API 人脸检测; Firebase的Remote Config; 与HashMap有关的优化; 提高RecyclerView帧率的优化; 使用AutoValue生成model代码; 开源库中抽象类和接口的使用讨论; Bottom Sheet的使用; Android Studio中的版本控制系统; ConstraintLayout的使用; 应用换Bottom Navigation; Nougat的Messaging Style Notification; 自定义字体; Reductor的使用等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Bottom Navigation" scheme="http://mengdd.github.io/tags/Bottom-Navigation/"/>
    
      <category term="Bottom Sheet" scheme="http://mengdd.github.io/tags/Bottom-Sheet/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="AutoValue" scheme="http://mengdd.github.io/tags/AutoValue/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Redux" scheme="http://mengdd.github.io/tags/Redux/"/>
    
      <category term="Reductor" scheme="http://mengdd.github.io/tags/Reductor/"/>
    
      <category term="Mobile Vision" scheme="http://mengdd.github.io/tags/Mobile-Vision/"/>
    
      <category term="Face Detection" scheme="http://mengdd.github.io/tags/Face-Detection/"/>
    
      <category term="Optimization" scheme="http://mengdd.github.io/tags/Optimization/"/>
    
      <category term="HashMap" scheme="http://mengdd.github.io/tags/HashMap/"/>
    
      <category term="ArrayMap" scheme="http://mengdd.github.io/tags/ArrayMap/"/>
    
      <category term="RecyclerView" scheme="http://mengdd.github.io/tags/RecyclerView/"/>
    
      <category term="FPS" scheme="http://mengdd.github.io/tags/FPS/"/>
    
      <category term="Abstract class" scheme="http://mengdd.github.io/tags/Abstract-class/"/>
    
      <category term="Interface" scheme="http://mengdd.github.io/tags/Interface/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Notification" scheme="http://mengdd.github.io/tags/Notification/"/>
    
      <category term="font" scheme="http://mengdd.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 226</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/12/android-weekly-notes-issue-226/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/12/android-weekly-notes-issue-226/</id>
    <published>2016-10-12T09:46:27.000Z</published>
    <updated>2016-10-12T09:58:43.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-226&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-226&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #226&quot;&gt;&lt;/a&gt;Android Weekly Issue #226&lt;/h1&gt;&lt;p&gt;October 9th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-226&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #226&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: 用Firebase做A/B Test; 用RxJava做动画; MVP; proguardFiles; RxJava和Android Data Binding的结合; Mockito的更新; Gradle configurations等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;用Firebase做A-B-Test-A-B-Test-your-App-using-Firebase-Remote-Config&quot;&gt;&lt;a href=&quot;#用Firebase做A-B-Test-A-B-Test-your-App-using-Firebase-Remote-Config&quot; class=&quot;headerlink&quot; title=&quot;用Firebase做A/B Test A/B Test your App using Firebase Remote Config&quot;&gt;&lt;/a&gt;用Firebase做A/B Test &lt;a href=&quot;https://riggaroo.co.za/ab-test-app-firebase-remote-config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A/B Test your App using Firebase Remote Config&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讲了如何用Firebase的Remote Config做A/B Test.&lt;/p&gt;
&lt;h2 id=&quot;用RxJava做动画-Android-animations-powered-by-RxJava&quot;&gt;&lt;a href=&quot;#用RxJava做动画-Android-animations-powered-by-RxJava&quot; class=&quot;headerlink&quot; title=&quot;用RxJava做动画 Android animations powered by RxJava&quot;&gt;&lt;/a&gt;用RxJava做动画 &lt;a href=&quot;https://pspdfkit.com/blog/2016/android-animations-powered-by-rx-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android animations powered by RxJava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;动画基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/view/ViewPropertyAnimator.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewPropertyAnimator&lt;/a&gt; 操作View的属性动画很容易也很方便.&lt;/p&gt;
&lt;p&gt;本文讲的内容主要用&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorCompat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewPropertyAnimatorCompat&lt;/a&gt;, 它是通过这个方法获得的: &lt;a href=&quot;https://developer.android.com/reference/android/support/v4/view/ViewCompat.html#animate(android.view.View&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewCompat.animate(targetView)&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;它是这样用的:&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ViewCompat.animate(someButton)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .scaleX(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;f)                         &lt;span class=&quot;comment&quot;&gt;// Scale to 0 horizontally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .scaleY(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;f)                         &lt;span class=&quot;comment&quot;&gt;// Scale to 0 vertically&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setDuration(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;)                   &lt;span class=&quot;comment&quot;&gt;// Duration of the animation in milliseconds.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .withEndAction &amp;#123; removeView(view) &amp;#125; &lt;span class=&quot;comment&quot;&gt;// Called when the animation ends successfully.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Completable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Completable&lt;/a&gt; 是RxJava1.1.1加入的.&lt;/p&gt;
&lt;p&gt;作者通过RxJava来做他们的动画效果.&lt;br&gt;这在链式连接多个动画和其他操作的时候很有用.&lt;/p&gt;
&lt;h2 id=&quot;Android-Architecture-Patterns-Part-2-MVP&quot;&gt;&lt;a href=&quot;#Android-Architecture-Patterns-Part-2-MVP&quot; class=&quot;headerlink&quot; title=&quot;Android Architecture Patterns Part 2: MVP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://upday.github.io/blog/model-view-presenter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Architecture Patterns Part 2: MVP&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于Android程序的架构, google提供了&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Architecture Blueprints&lt;/a&gt;, 其中作者他们合作于&lt;a href=&quot;https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVP &amp;amp; RxJava&lt;/a&gt;的sample.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVP(Model-View-Presenter)模式&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model: 数据层. 负责与网络层和数据库层的逻辑交互.&lt;/li&gt;
&lt;li&gt;View: UI层. 显示数据, 并向Presenter报告用户行为.&lt;/li&gt;
&lt;li&gt;Presenter: 从Model拿数据, 应用到UI层, 管理UI的状态, 决定要显示什么以及响应用户的行为.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V和P联系紧密, 所以它们通常会持有对方的引用. 为了给P做单元测试, V是一个抽象的接口. P和对应的V的关系定义在一个&lt;code&gt;Contract&lt;/code&gt;接口里, 这样可以让代码可读性更好, 更容易发现二者的联系.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVP模式 &amp;amp; RxJava在Android Architecture Blueprints里的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google blueprint的Sample是一个&lt;a href=&quot;https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;To Do应用&lt;/a&gt;. 它让用户可以创建, 阅读, 更新和删除to do task, 也可以过滤显示. RxJava主要是用来进行一些非主线程的异步操作.&lt;/p&gt;
&lt;p&gt;然后作者详细说明了代码实现.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt;中用RxJava在本地和网络取数据.&lt;br&gt;(他们的单元测试里是下划线和驼峰结合的方法命名方式.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;有一个base接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseView&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPresenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T presenter)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;View在&lt;code&gt;onResume()&lt;/code&gt;的时候调用Presenter的&lt;code&gt;subscribe()&lt;/code&gt;, &lt;code&gt;onPause()&lt;/code&gt;的时候调用Presenter的&lt;code&gt;unsubscribe()&lt;/code&gt;. 如果View接口的实现不是Fragment或Activity, 而是Android的自定义View, 那么在&lt;code&gt;onAttachedToWindow()&lt;/code&gt;和&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;方法里分别调用这两个方法.&lt;/p&gt;
&lt;p&gt;View的测试是用Espresso写的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Presenter&lt;/strong&gt;也有一个base接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasePresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;View和Model都通过构造函数传入Presenter, 在Presenter构造里还要调用View的&lt;code&gt;setPresetner()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;每一个Presenter还要暴露一些其他的方法, 对应View中用户的行为.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVP模式的缺点&lt;/strong&gt;:&lt;br&gt;MVP模式很好地分离了概念, 当然这是好的. 但是当开发很小的app或者只是做一个原型时, 确实感觉过度设计了. 为了减少所用的接口, 有一些开发者省去了&lt;code&gt;Contract&lt;/code&gt;接口类, 也删掉了Presenter的接口.&lt;/p&gt;
&lt;p&gt;当把UI的逻辑移到Presenter中时, 它就变成了一个全能的类, 代码很长. 为了解决这个问题, 可以进一步拆分代码, 并且记得创建单一职能, 并且可以被单元测试的类.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;:&lt;br&gt;&lt;a href=&quot;https://upday.github.io/blog/model-view-controller/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Model-View-Controller MVC模式&lt;/a&gt; 有两个主要的缺点: 首先, View持有Controller和Model的引用; 第二, 它没有把对UI逻辑的操作限制在单一的类里, 这个职能被Controller和View或者Model共享.&lt;/p&gt;
&lt;p&gt;MVP模式解决了这两个问题: 砍断了View和Model之间的联系, 用Presenter来管理所有和View显示相关的逻辑(handles everything related to the presentation of the View), 并且这个类是很容易被单元测试的.&lt;/p&gt;
&lt;h2 id=&quot;proguardFiles-A-Cautionary-Tale&quot;&gt;&lt;a href=&quot;#proguardFiles-A-Cautionary-Tale&quot; class=&quot;headerlink&quot; title=&quot;proguardFiles: A Cautionary Tale&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stkent.github.io/2016/10/07/proguardfiles-a-cautionary-tale.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proguardFiles: A Cautionary Tale&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者有三个buildTypes: debug, beta, release.&lt;/p&gt;
&lt;p&gt;其中beta用了initWith(buildTypes.debug).&lt;br&gt;他想给不同的type加上不同的proguard files. 让debug不混淆(&lt;code&gt;-dontobfuscate&lt;/code&gt;), beta和release混淆.&lt;br&gt;结果却发现beta没有混淆.&lt;/p&gt;
&lt;p&gt;查看代码发现&lt;code&gt;proguardFiles&lt;/code&gt;其实是将proguard files叠加.&lt;br&gt;作者找到的解决方式是用&lt;code&gt;setProguardFiles()&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;, &amp;apos;proguard-debug.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  beta &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initWith(buildTypes.debug)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // New!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setProguardFiles([getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;评论区有人指出还可以这样:&lt;br&gt;在&lt;code&gt;defaultConfig&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;debug&lt;/code&gt;中: 加&lt;code&gt;proguardFile &amp;#39;proguard-debug.pro&lt;/code&gt;, 这样更简洁一些.&lt;/p&gt;
&lt;p&gt;相关文档: &lt;a href=&quot;https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BuildType&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;RxJava-meets-Android-Data-Binding&quot;&gt;&lt;a href=&quot;#RxJava-meets-Android-Data-Binding&quot; class=&quot;headerlink&quot; title=&quot;RxJava meets Android Data Binding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/tangoagency/rxjava-meets-android-data-binding-4ca5e1144107#.p13x1zwkc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava meets Android Data Binding&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者使用例子介绍了如何将RxJava和Android的Data Binding结合起来使用.&lt;/p&gt;
&lt;h2 id=&quot;Mocking-Kotlin-with-Mockito&quot;&gt;&lt;a href=&quot;#Mocking-Kotlin-with-Mockito&quot; class=&quot;headerlink&quot; title=&quot;Mocking Kotlin with Mockito&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocking Kotlin with Mockito&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;因为Kotlin默认类和方法都是final的, 如果你想要继承, 必须显式声明&lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当你想要在测试中Mock一些行为时, Mockito可能会报错, 因为它无法mock一个final的class/method.&lt;/p&gt;
&lt;p&gt;于是你可能要修改源代码, 加&lt;code&gt;open&lt;/code&gt;或者是接口, 仅仅是为了测试.&lt;/p&gt;
&lt;p&gt;Mockito 2解决了这个问题: &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What&amp;#39;s-new-in-Mockito-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s new in Mockito 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;你只需要在&lt;code&gt;resources/mockito-extensions&lt;/code&gt;目录下创建一个文件: &lt;code&gt;org.mockito.plugins.MockMaker&lt;/code&gt;.&lt;br&gt;里面只包含一行内容:&lt;br&gt;&lt;code&gt;mock-maker-inline&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Droidcon-NYC-2016-Victor-Nascimento&quot;&gt;&lt;a href=&quot;#Droidcon-NYC-2016-Victor-Nascimento&quot; class=&quot;headerlink&quot; title=&quot;Droidcon NYC 2016 - Victor Nascimento&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@victor.nascimento/droidcon-ny-2016-e037cb81559#.4ncx0xcgg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droidcon NYC 2016 - Victor Nascimento&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Droidcon-NYC-2016-Florina-Muntenescu&quot;&gt;&lt;a href=&quot;#Droidcon-NYC-2016-Florina-Muntenescu&quot; class=&quot;headerlink&quot; title=&quot;Droidcon NYC 2016 - Florina Muntenescu&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://upday.github.io/blog/droidcon_nyc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droidcon NYC 2016 - Florina Muntenescu&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这两篇是关于Droidcon NYC 2016的感想.&lt;/p&gt;
&lt;h2 id=&quot;Android-Gradle-configurations&quot;&gt;&lt;a href=&quot;#Android-Gradle-configurations&quot; class=&quot;headerlink&quot; title=&quot;Android Gradle configurations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.thedroidsonroids.com/blog/android/android-gradle-configurations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Gradle configurations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gradle中的configuration是:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	annotationProcessor &amp;apos;com.jakewharton:butterknife-compiler:8.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	compile &amp;apos;com.jakewharton:butterknife:8.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	compile project(&amp;apos;:api&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	debugCompile &amp;apos;com.squareup.leakcanary:leakcanary-android:1.4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	releaseCompile &amp;apos;com.squareup.leakcanary:leakcanary-android-no-op:1.4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	androidTestCompile &amp;apos;com.android.support.test:runner:0.5&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testCompile &amp;apos;org.robolectric:robolectric:3.1.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testAnnotationProcessor &amp;apos;org.robolectric:robolectric-processor:3.1.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;模式是&lt;code&gt;configuationName dependencyNotation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Configuration names由两部分组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选的前缀, 指定build variant, product flavor或者build type.&lt;/li&gt;
&lt;li&gt;必需的后缀, 指定scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如在&lt;code&gt;debugCompile&lt;/code&gt;中, debug就是一个build type.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile&lt;/code&gt;没有前缀, 就表示它应用到所有的build类型里.&lt;/p&gt;
&lt;p&gt;每一个正常的configuration都有一个相应的unit test版, 比如&lt;code&gt;testCompile&lt;/code&gt;, &lt;code&gt;testDebugCompile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;对于功能测试来说是&lt;code&gt;androidTest&lt;/code&gt;, 只有这一种.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Scope是和configuration应用的阶段有关:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;annotationProcessor/kapt: 注解处理;&lt;/li&gt;
&lt;li&gt;provided/compileOnly: 编译期;&lt;/li&gt;
&lt;li&gt;compile: 编译 + 执行;&lt;/li&gt;
&lt;li&gt;apk: 执行期.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;继承&lt;/strong&gt;&lt;br&gt;Configuration可以继承, 意味着子类包含父类所有包含的项目.&lt;br&gt;比如&lt;code&gt;testCompile&lt;/code&gt;就继承了&lt;code&gt;compile&lt;/code&gt;.&lt;br&gt;但是注意继承必须显式声明, 并不是由名字看出来的, 比如&lt;code&gt;testAnnotationProcessor&lt;/code&gt;没有继承&lt;code&gt;annotationProcessor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;利用继承可以定义单元测试和公共测试的基类, 这样它们的共享依赖就可以只声明一次.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;configurations &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [androidTestCompile, testCompile].each &amp;#123; it.extendsFrom commonTestCompile &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;android-data-binding-rxjava&quot;&gt;&lt;a href=&quot;#android-data-binding-rxjava&quot; class=&quot;headerlink&quot; title=&quot;android-data-binding-rxjava&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TangoAgency/android-data-binding-rxjava&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-data-binding-rxjava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;例子代码, 展示如何结合RxJava和Android data binding.&lt;/p&gt;
&lt;h2 id=&quot;AnimatorDurationTile&quot;&gt;&lt;a href=&quot;#AnimatorDurationTile&quot; class=&quot;headerlink&quot; title=&quot;AnimatorDurationTile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nickbutcher/AnimatorDurationTile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatorDurationTile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Quick Settings tile, 用于控制动画的duration scale.&lt;/p&gt;
&lt;h2 id=&quot;DateTimeSeer&quot;&gt;&lt;a href=&quot;#DateTimeSeer&quot; class=&quot;headerlink&quot; title=&quot;DateTimeSeer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/p-v/DateTimeSeer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DateTimeSeer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个关于日期和时间的自动提示输入框.&lt;/p&gt;
&lt;h2 id=&quot;A-list-of-all-Android-permissions&quot;&gt;&lt;a href=&quot;#A-list-of-all-Android-permissions&quot; class=&quot;headerlink&quot; title=&quot;A list of all Android permissions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gist.github.com/Arinerron/1bcaadc7b1cbeae77de0263f4e15156f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A list of all Android permissions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android所有权限的列表.&lt;/p&gt;
&lt;h1 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h1&gt;&lt;h2 id=&quot;What’s-new-in-Mockito-2&quot;&gt;&lt;a href=&quot;#What’s-new-in-Mockito-2&quot; class=&quot;headerlink&quot; title=&quot;What’s new in Mockito 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s new in Mockito 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Mockito 2发布了, 有什么新东西呢?&lt;/p&gt;
&lt;h2 id=&quot;Kotlin-1-0-5-EAP&quot;&gt;&lt;a href=&quot;#Kotlin-1-0-5-EAP&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 1.0.5 EAP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://discuss.kotlinlang.org/t/kotlin-1-0-5-eap/2023&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin 1.0.5 EAP&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kotlin 1.0.5 EAP (Early Access Program).&lt;/p&gt;
&lt;h2 id=&quot;What’s-next-for-android-apt&quot;&gt;&lt;a href=&quot;#What’s-next-for-android-apt&quot; class=&quot;headerlink&quot; title=&quot;What’s next for android-apt?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.littlerobots.nl/blog/Whats-next-for-android-apt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s next for android-apt?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;android-apt将不会再开发了, 因为它的功能已经被包含进了Android Gradle plugin.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-226&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-226&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #226&quot;&gt;&lt;/a&gt;Android Weekly Issue #226&lt;/h1&gt;&lt;p&gt;October 9th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-226&quot;&gt;Android Weekly Issue #226&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: 用Firebase做A/B Test; 用RxJava做动画; MVP; proguardFiles; RxJava和Android Data Binding的结合; Mockito的更新; Gradle configurations等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="Proguard" scheme="http://mengdd.github.io/tags/Proguard/"/>
    
      <category term="Data Binding" scheme="http://mengdd.github.io/tags/Data-Binding/"/>
    
      <category term="Mockito" scheme="http://mengdd.github.io/tags/Mockito/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 225</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/09/android-weekly-notes-issue-225/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/09/android-weekly-notes-issue-225/</id>
    <published>2016-10-09T02:32:42.000Z</published>
    <updated>2016-10-09T04:48:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-225&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-225&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #225&quot;&gt;&lt;/a&gt;Android Weekly Issue #225&lt;/h1&gt;&lt;p&gt;October 2nd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-225&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Android 7.0的Quick Settings; Firebase; 兼容旧版本的shared element transition; Wear; ORM: 用ActiveAndroid做数据库存储; 崩溃报告工具对比; Google Cast API介绍; Google的播放器库ExoPlayer 2.x发布; 项目的包结构整理; Task API的使用等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Android-7-0的快速设置-Quick-Settings-Tiles&quot;&gt;&lt;a href=&quot;#Android-7-0的快速设置-Quick-Settings-Tiles&quot; class=&quot;headerlink&quot; title=&quot;Android 7.0的快速设置 Quick Settings Tiles&quot;&gt;&lt;/a&gt;Android 7.0的快速设置 &lt;a href=&quot;https://medium.com/google-developers/quick-settings-tiles-e3c22daf93a8#.4q0cxslwd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick Settings Tiles&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;从Android 7.0 (API 24)开始, 任何app都可以创建一个quick settings tile, 快速访问关键功能.&lt;br&gt;它除了是一个展示最新信息的UI, 点击一个片还可以trigger后台任务, 打开dialog或activity.&lt;/p&gt;
&lt;p&gt;一个好的quick settings tile:&lt;br&gt;决定是否要建立这样一个tile时, 主要考虑紧急性和频繁性两个方面.&lt;/p&gt;
&lt;p&gt;每一个tile和一个&lt;a href=&quot;https://developer.android.com/reference/android/service/quicksettings/TileService.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TileService&lt;/a&gt;关联. 和其他service一样, 它需要在manifest中注册, 它的label和icon就是显示在quick settings上的文字和图片.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TileService的生命周期&lt;/strong&gt;:&lt;br&gt;TileService是一个&lt;a href=&quot;https://developer.android.com/guide/components/bound-services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bound service&lt;/a&gt;, 它的生命周期主要由系统控制. 主要有三个阶段: being added, listening, being removed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onTileAdded()&lt;/code&gt;: 当用户添加这个tile到quick settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onStartListening()&lt;/code&gt;: tile变为可见.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onStopListening()&lt;/code&gt;: tile变为不可见.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onTileRemoved()&lt;/code&gt;: 用户移除这个tile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这是默认模式, 如果你准确地知道何时更新, 你可以使用&lt;a href=&quot;https://developer.android.com/reference/android/service/quicksettings/TileService.html#META_DATA_ACTIVE_TILE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;active mode&lt;/a&gt;.&lt;br&gt;此时更新的回调&lt;code&gt;onStartListening()&lt;/code&gt;是通过静态方法主动触发的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新UI&lt;/strong&gt;:&lt;br&gt;UI是&lt;a href=&quot;https://developer.android.com/reference/android/service/quicksettings/Tile.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tile&lt;/a&gt;, 主要包含icon, label, description和state. 最后必须调用&lt;code&gt;updateTile()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理点击&lt;/strong&gt;:&lt;br&gt;在&lt;code&gt;onClick()&lt;/code&gt;回调触发的时候, 我们可以启动一些后台工作, 或者&lt;code&gt;showDialog()&lt;/code&gt;, 或者&lt;code&gt;startActivityAndCollapse()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;对于锁屏的机器有一些限制, 不能打开dialog, 并且activity需要有一个特定的flag, 有一个&lt;code&gt;unlockAndRun()&lt;/code&gt;方法可以让用户先解锁后做一些工作.&lt;/p&gt;
&lt;p&gt;长按tile默认会打开app的app info屏, 当然这个行为也可以override. 只要给你想打开的activity加上&lt;code&gt;ACTION_QS_TILE_PREFERENCES&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Android开发最佳实践-Android-Development-Best-Practices&quot;&gt;&lt;a href=&quot;#Android开发最佳实践-Android-Development-Best-Practices&quot; class=&quot;headerlink&quot; title=&quot;Android开发最佳实践 Android Development Best Practices&quot;&gt;&lt;/a&gt;Android开发最佳实践 &lt;a href=&quot;https://medium.freecodecamp.com/android-development-best-practices-83c94b027fd3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Development Best Practices&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于性能:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/best-performance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best Practices for Performance&lt;/a&gt;;&lt;br&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/awesome-android-complete-reference#performance-and-optimization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance and Optimization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于架构:&lt;br&gt;&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写单元测试和UI测试.&lt;/p&gt;
&lt;p&gt;使用Proguard, Stetho.&lt;br&gt;复用布局, 使用&lt;merge&gt;标签.&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/improving-layouts/reusing-layouts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reusing-layouts&lt;/a&gt;.&lt;/merge&gt;&lt;/p&gt;
&lt;p&gt;把launcher icons放在mipmap文件夹下.&lt;/p&gt;
&lt;p&gt;多用shape和selector而不是图片.&lt;/p&gt;
&lt;p&gt;避免深层次的布局.&lt;/p&gt;
&lt;p&gt;向Intent或Bundler传数据时, 使用&lt;code&gt;Parcelable&lt;/code&gt;而不是&lt;code&gt;Serializable&lt;/code&gt;. 因为后者使用反射而比较慢.&lt;/p&gt;
&lt;p&gt;不要在UI线程进行文件操作.&lt;/p&gt;
&lt;p&gt;明白Bitmaps. 因为它们占用很多memory. &lt;a href=&quot;https://developer.android.com/training/displaying-bitmaps/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Displaying Bitmaps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用style来避免重复的属性设置.&lt;/p&gt;
&lt;p&gt;需要时使用Fragment.&lt;/p&gt;
&lt;p&gt;明白Activity的生命周期.&lt;/p&gt;
&lt;p&gt;使用得到公认的libraries而不是自己的实现.&lt;/p&gt;
&lt;p&gt;在各种机器上测试.&lt;/p&gt;
&lt;h2 id=&quot;Recap-Of-Google-Launchpad-Build-Lagos-All-About-Firebase&quot;&gt;&lt;a href=&quot;#Recap-Of-Google-Launchpad-Build-Lagos-All-About-Firebase&quot; class=&quot;headerlink&quot; title=&quot;Recap Of Google Launchpad Build Lagos : All About Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://chikemgbemena.com/2016/09/27/recap-lagos-launchpad-developers-conference-all-about-firebase/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Recap Of Google Launchpad Build Lagos : All About Firebase&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者参加了一个叫Google Launchpad Build的会议, 这篇文章是总结, 全部是关于Firebase的.&lt;/p&gt;
&lt;h2 id=&quot;Android-Shared-Element-Transitions-for-all&quot;&gt;&lt;a href=&quot;#Android-Shared-Element-Transitions-for-all&quot; class=&quot;headerlink&quot; title=&quot;Android Shared-Element Transitions for all&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@aitorvs/android-shared-element-transitions-for-all-b90e9361507d#.rlu4u7kmy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Shared-Element Transitions for all&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Lollipop+的设备上, shared element的transition动画很好实现, 但是在旧的版本上该怎么办呢? 作者展示了他的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity A捕捉origin view的初始值, 通过Intent把它们传给Activity B;&lt;/li&gt;
&lt;li&gt;Activity B完全透明地启动;&lt;/li&gt;
&lt;li&gt;Activity B读取bundle中的值, 准备场景;&lt;/li&gt;
&lt;li&gt;Acitivty B运行shared element动画.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个实现细节:&lt;/p&gt;
&lt;p&gt;需要知道View在B中的位置, 时机是layout之后, 但是draw之前, 即&lt;code&gt;onPreDraw()&lt;/code&gt;.&lt;br&gt;返回时只需要把这个动画反向播放即可.&lt;/p&gt;
&lt;h2 id=&quot;Writing-Better-Adapters&quot;&gt;&lt;a href=&quot;#Writing-Better-Adapters&quot; class=&quot;headerlink&quot; title=&quot;Writing Better Adapters&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@dpreussler/writing-better-adapters-1b09758407d2#.c5av797rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Better Adapters&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;(这个上一期刚讲过, 不知道为什么重复了. )&lt;/p&gt;
&lt;p&gt;就是关于RecyclerView的Adapter, 作者认为多种View类型时, Adapter中太多的instance of和强制类型转换不是一种好做法, 于是提出了他的做法. &lt;/p&gt;
&lt;h2 id=&quot;Android-Wear-Accessing-the-Data-Layer-API&quot;&gt;&lt;a href=&quot;#Android-Wear-Accessing-the-Data-Layer-API&quot; class=&quot;headerlink&quot; title=&quot;Android Wear: Accessing the Data Layer API&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@manuelvicnt/android-wear-accessing-the-data-layer-api-d64fd55982e3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Wear: Accessing the Data Layer API&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Data Layer API是Google Play services的一部分, 用于不同设备(手机和手表)间的数据交换.&lt;/p&gt;
&lt;p&gt;作者先提供了代码, 发送和存储数据, 监听数据变化.&lt;/p&gt;
&lt;p&gt;问题是, 如果Wear第二次向mobile请求数据, mobile发送了和上一次一样的数据, Wear并不会进入&lt;code&gt;onDataChanged()&lt;/code&gt;, 因为数据并没有变化.&lt;/p&gt;
&lt;p&gt;所以作者想知道如何从Data Layer API来获取数据, 并展示了他的方法在不同情形下的应用.&lt;/p&gt;
&lt;h2 id=&quot;Espresso-Tests-For-TextSwitcher&quot;&gt;&lt;a href=&quot;#Espresso-Tests-For-TextSwitcher&quot; class=&quot;headerlink&quot; title=&quot;Espresso Tests For TextSwitcher&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ottodroid.net/?p=493&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Espresso Tests For TextSwitcher&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者想给TextSwitcher写Espresso测试.&lt;/p&gt;
&lt;p&gt;从Android Studio 2.2开始, 你可以录制你的操作, IDE将会自动为你生成Espresso测试代码. 但是作者录了一个有关TextSwitcher的测试之后, 跑失败了.&lt;/p&gt;
&lt;p&gt;这是因为&lt;code&gt;TextSwitcher&lt;/code&gt;继承了&lt;code&gt;ViewSwitcher&lt;/code&gt;, 其实现其实是把两个TextView加到了布局里.&lt;br&gt;所以Espresso抛出了&lt;code&gt;AmbiguousViewMatcherException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以作者根据可见性区分了它俩, 修复了测试.&lt;br&gt;还可以根据child view的index来区分.&lt;/p&gt;
&lt;h2 id=&quot;Animating-Android-Activities-and-Views-with-Slide-Animations&quot;&gt;&lt;a href=&quot;#Animating-Android-Activities-and-Views-with-Slide-Animations&quot; class=&quot;headerlink&quot; title=&quot;Animating Android Activities and Views with Slide Animations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kylewbanks.com/blog/left-and-right-slide-animations-on-android-activity-or-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animating Android Activities and Views with Slide Animations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者展示了如何给Activity和View加上左右滑动的动画.&lt;/p&gt;
&lt;h2 id=&quot;Guide-to-ORM-using-ActiveAndroid-Part-1&quot;&gt;&lt;a href=&quot;#Guide-to-ORM-using-ActiveAndroid-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Guide to ORM using ActiveAndroid: Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.rscottcarson.com/2016/09/22/the-ultimate-guide-to-orm-in-android-using-activeandroid-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide to ORM using ActiveAndroid: Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是一个系列教程, 相关的代码在: &lt;a href=&quot;https://github.com/rscottcarson/ActiveAndroid-Tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActiveAndroid-Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么是ORM(Object-Relational Mapping)呢?&lt;br&gt;a technique to convert between incompatible type-systems in an object-oriented programming language.&lt;br&gt;在面向对象的语言中, 转换不兼容的类型的技术.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.activeandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActiveAndroid&lt;/a&gt;是一个ORM(object relational mapper), 让你不用写SQL语句, 就可以读写数据库.&lt;/p&gt;
&lt;p&gt;其他类似的工具还有&lt;a href=&quot;https://realm.io/docs/java/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt;和&lt;a href=&quot;http://ormlite.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OrmLite&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;A-Comparison-of-Android-Crash-Reporting-Tools&quot;&gt;&lt;a href=&quot;#A-Comparison-of-Android-Crash-Reporting-Tools&quot; class=&quot;headerlink&quot; title=&quot;A Comparison of Android Crash Reporting Tools&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.captechconsulting.com/blogs/a-comparison-of-android-crash-reporting-tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Comparison of Android Crash Reporting Tools&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者对比了几种崩溃报告工具, 并介绍了如何使用.&lt;br&gt;包括: Firebase, &lt;a href=&quot;https://fabric.io/kits/android/crashlytics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crashlytics&lt;/a&gt;, &lt;a href=&quot;https://www.apteligent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apteligent&lt;/a&gt;, &lt;a href=&quot;https://bugsnag.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bugsnag&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Google-Play-Services-Google-Cast-v3-and-Media&quot;&gt;&lt;a href=&quot;#Google-Play-Services-Google-Cast-v3-and-Media&quot; class=&quot;headerlink&quot; title=&quot;Google Play Services: Google Cast v3 and Media&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/google-play-services-google-cast-v3-and-media--cms-26893&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Play Services: Google Cast v3 and Media&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Cast是一个让用户把网上的内容发送到设备上的技术. 通常用来和TV交换内容.&lt;/p&gt;
&lt;p&gt;作者详细地介绍了如何使用Google Cast SDK来创建应用.&lt;/p&gt;
&lt;p&gt;注: 要建造客户端程序, 首先需要注册: &lt;a href=&quot;https://cast.google.com/publish/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cast.google.com/publish/&lt;/a&gt;.&lt;br&gt;这是收费的.&lt;/p&gt;
&lt;h2 id=&quot;ExoPlayer-2-x-It’s-here-plus-FAQs&quot;&gt;&lt;a href=&quot;#ExoPlayer-2-x-It’s-here-plus-FAQs&quot; class=&quot;headerlink&quot; title=&quot;ExoPlayer 2.x - It’s here (plus FAQs)!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-exoplayer/exoplayer-2-x-its-here-plus-faqs-cce34b0d4c7b#.h6m9czs7y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer 2.x - It’s here (plus FAQs)!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google的库&lt;a href=&quot;https://github.com/google/ExoPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google/ExoPlayer&lt;/a&gt;升级到v2.x了.&lt;br&gt;(它是一个Media Player, YouTube用的就是它.)&lt;br&gt;这次是个重大更新, 添加了很多新功能, 推荐大家以后用新版.&lt;/p&gt;
&lt;h2 id=&quot;How-We-Rethought-our-Complete-Package-Structure-for-Buffer-on-Android&quot;&gt;&lt;a href=&quot;#How-We-Rethought-our-Complete-Package-Structure-for-Buffer-on-Android&quot; class=&quot;headerlink&quot; title=&quot;How We Rethought our Complete Package Structure for Buffer on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://overflow.buffer.com/2016/09/26/android-rethinking-package-structure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How We Rethought our Complete Package Structure for Buffer on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们重新整理了项目的包结构, 总结了整个过程还有从中学到的东东.&lt;/p&gt;
&lt;p&gt;作者他们之前的包结构是按类型的, 有activities, fragments, adapters等包. 因为类名以类型终结, 所以索性就按整个分组.&lt;/p&gt;
&lt;p&gt;当app变得越来越大, 这种组织方式发现就不太好, 感觉很难找东西, 并且感觉没什么结构.&lt;/p&gt;
&lt;p&gt;经过改变之后, 作者他们采用了一种更加整洁并且易于导航的结构.&lt;/p&gt;
&lt;p&gt;新结构中, 当添加一个新的feature, 就保持在同一个目录中, 这样就不用来回切换目录.&lt;/p&gt;
&lt;p&gt;作者他们的新结构有四个总目录: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;ui&lt;/li&gt;
&lt;li&gt;injection&lt;/li&gt;
&lt;li&gt;util&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;中包含网络请求及相关的models, preferences, database, data models, 还有其他和数据直接关联的东西.&lt;/p&gt;
&lt;p&gt;其中和不同API关联的models又分别组织在子目录下.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ui&lt;/strong&gt;目录中包含所有和UI相关的组件, 在这个包中按照功能又拆分了子目录. 其中有base包, 用来盛放Fragment, Activity和MVP的基类, 接口等; 还有common包, 用来盛放公共控件.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;injection&lt;/strong&gt;中包含所有依赖注入的类, 分component, module和scope的子目录.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;util&lt;/strong&gt;中含有Helper和Utility类.&lt;/p&gt;
&lt;h2 id=&quot;Become-a-Firebase-Taskmaster-Part-3&quot;&gt;&lt;a href=&quot;#Become-a-Firebase-Taskmaster-Part-3&quot; class=&quot;headerlink&quot; title=&quot;Become a Firebase Taskmaster! (Part 3)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://firebase.googleblog.com/2016/09/become-a-firebase-taskmaster-part-3_29.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Become a Firebase Taskmaster! (Part 3)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是系列文章的第三篇, 这个系列是关于Play services的&lt;a href=&quot;https://developers.google.com/android/guides/tasks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Task API&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;如果项目里已经依赖了Firebase, 变自动包含了Task API, 如果不想用Firebase, 可以单独添加依赖:&lt;br&gt;&lt;code&gt;compile &amp;#39;com.google.android.gms:play-services-tasks:9.6.1&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建新的Task可以用下面这两个方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Task&amp;lt;TResult&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Callable&amp;lt;TResult&amp;gt; callable)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task&amp;lt;TResult&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Executor executor, Callable&amp;lt;TResult&amp;gt; callable)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一个&lt;code&gt;call()&lt;/code&gt;方法在主线程执行任务, 第二个&lt;code&gt;call()&lt;/code&gt;方法可以把工作提交给一个&lt;code&gt;Executor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/java/util/concurrent/Callable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Callable&lt;/a&gt;有点类似于Runnable:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CarlyCallable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Call me maybe&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数制定了方法的返回值的类型, 进而也是创建出Task的类型.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Task&amp;lt;String&amp;gt; task = Tasks.call(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CarlyCallable());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要链式执行, 进行后续操作, 可以用&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Continuation&lt;/a&gt;.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SeparateWays&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Continuation&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Task&amp;lt;String&amp;gt; task)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Arrays.asList(task.getResult().split(&lt;span class=&quot;string&quot;&gt;&quot; +&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它继承接口时指定了输入和输出的类型, 它的输入来自于Task的输出.&lt;/p&gt;
&lt;p&gt;可以多写几个Continuation类然后连起来:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Task&amp;lt;String&amp;gt; playlist = Tasks.call(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CarlyCallable())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .continueWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SeparateWays())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .continueWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AllShookUp())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .continueWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComeTogether());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;playlist.addOnSuccessListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSuccessListener&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The final String with all the words randomized is here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;LIBRIARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRIARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRIARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRIARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;groupie&quot;&gt;&lt;a href=&quot;#groupie&quot; class=&quot;headerlink&quot; title=&quot;groupie&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Genius/groupie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;groupie&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;显示和管理复杂的RecyclerView布局, 把你的items按照逻辑分组管理.&lt;/p&gt;
&lt;h2 id=&quot;android-junit5&quot;&gt;&lt;a href=&quot;#android-junit5&quot; class=&quot;headerlink&quot; title=&quot;android-junit5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/aurae/android-junit5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-junit5&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gradle插件, 用JUnit5做Android的单元测试.&lt;/p&gt;
&lt;h2 id=&quot;epoxy&quot;&gt;&lt;a href=&quot;#epoxy&quot; class=&quot;headerlink&quot; title=&quot;epoxy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/airbnb/epoxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epoxy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用来构建复杂的RecyclerView屏.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-225&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-225&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #225&quot;&gt;&lt;/a&gt;Android Weekly Issue #225&lt;/h1&gt;&lt;p&gt;October 2nd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-225&quot;&gt;Android Weekly Issue #225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Android 7.0的Quick Settings; Firebase; 兼容旧版本的shared element transition; Wear; ORM: 用ActiveAndroid做数据库存储; 崩溃报告工具对比; Google Cast API介绍; Google的播放器库ExoPlayer 2.x发布; 项目的包结构整理; Task API的使用等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="Android 7.0" scheme="http://mengdd.github.io/tags/Android-7-0/"/>
    
      <category term="Quick Settings" scheme="http://mengdd.github.io/tags/Quick-Settings/"/>
    
      <category term="Shared-Element Transtion" scheme="http://mengdd.github.io/tags/Shared-Element-Transtion/"/>
    
      <category term="ORM" scheme="http://mengdd.github.io/tags/ORM/"/>
    
      <category term="ActiveAndroid" scheme="http://mengdd.github.io/tags/ActiveAndroid/"/>
    
      <category term="Crash Reporting" scheme="http://mengdd.github.io/tags/Crash-Reporting/"/>
    
      <category term="Google Cast" scheme="http://mengdd.github.io/tags/Google-Cast/"/>
    
      <category term="ExoPlayer" scheme="http://mengdd.github.io/tags/ExoPlayer/"/>
    
      <category term="Packages" scheme="http://mengdd.github.io/tags/Packages/"/>
    
      <category term="Task" scheme="http://mengdd.github.io/tags/Task/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 224</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/02/android-weekly-notes-issue-224/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/02/android-weekly-notes-issue-224/</id>
    <published>2016-10-02T04:17:13.000Z</published>
    <updated>2016-10-02T04:35:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-224&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-224&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #224&quot;&gt;&lt;/a&gt;Android Weekly Issue #224&lt;/h1&gt;&lt;p&gt;September 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-224&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google Play的pre-launch报告; Wear的Complications API; Android Handler解析; RxAndroid; 测量性能的库: Pury; 方法数限制; APK内容分析; Redux for Android; 一种view造成的泄露; 注解处理; 更好的Adapter; Intro屏等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Apk的pre-launch报告-Awesome-pre-launch-reports-for-Alpha-Beta-APK’s&quot;&gt;&lt;a href=&quot;#Apk的pre-launch报告-Awesome-pre-launch-reports-for-Alpha-Beta-APK’s&quot; class=&quot;headerlink&quot; title=&quot;Apk的pre-launch报告 Awesome pre-launch reports for Alpha/Beta APK’s&quot;&gt;&lt;/a&gt;Apk的pre-launch报告 &lt;a href=&quot;https://medium.com/@AruLNadhaN/awesome-pre-launch-reports-for-alpha-beta-apks-9960ac5c403c#.5qhy3bbqc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Awesome pre-launch reports for Alpha/Beta APK’s&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Play team在I/O 2016的时候宣布了很多新features, 其中有一个pre-launch report.&lt;/p&gt;
&lt;p&gt;这个report是干什么的呢, 它会报告在一些设备上测试你的应用的时候发现的issues.&lt;/p&gt;
&lt;p&gt;要生成这种报告, 你应该在Developer console上enable它. 然后&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/3131213&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上传alpha/beta apk&lt;/a&gt;. 上传到beta channel之后, 5-10分钟就会生成报告.&lt;/p&gt;
&lt;p&gt;报告主要包括三个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crashes&lt;/li&gt;
&lt;li&gt;Screenshots&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档: &lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/7002270#sources&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pre-launch&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Wear-Complications-API&quot;&gt;&lt;a href=&quot;#Wear-Complications-API&quot; class=&quot;headerlink&quot; title=&quot;Wear Complications API&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@danybony_/wear-complications-api-16ab65290aa1#.w6lt2q3rx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wear Complications API&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在钟表的定义里, complications是指表上除了小时和分钟指示之外其他的东西.&lt;/p&gt;
&lt;p&gt;在Android Wear里面我们已经有一些complications的例子, 比如向用户显示计步器, 天气预报, 下一个会议时间等等.&lt;/p&gt;
&lt;p&gt;但是之前有一个很大的限制就是每一个小应用都必须实现自己的逻辑来取数据, 比如有两个应用都取了今天的天气预报信息, 将会有两套机制取同样的数据, 这明显是一种浪费.&lt;/p&gt;
&lt;p&gt;Android Wear 2.0推出了Complications API解决了这个问题.&lt;/p&gt;
&lt;p&gt;通信主要是&lt;strong&gt;Data providers&lt;/strong&gt;和&lt;strong&gt;Watch faces&lt;/strong&gt;之间的, 前者包含取数据的逻辑, 后者负责显示.&lt;/p&gt;
&lt;p&gt;Complications API定义了一些Complications Types, 见&lt;a href=&quot;https://developer.android.com/wear/preview/features/complications.html#using_complication_types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者在他朋友的开源应用里用了新的API: &lt;a href=&quot;https://github.com/alexstyl/Memento-Namedays&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memento-Namedays&lt;/a&gt;, 这个应用是生日或者日期提醒类的.&lt;/p&gt;
&lt;p&gt;首先, 作者用&lt;a href=&quot;https://developer.android.com/training/wearables/data-layer/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wearable Data Layer API&lt;/a&gt;同步了手机和手表的数据. 然后在Wear module里继承&lt;code&gt;ComplicationProviderService&lt;/code&gt;创建了complication data provider, 这里就提供了&lt;code&gt;onComplicationActivated&lt;/code&gt;, &lt;code&gt;onComplicationDeactivated&lt;/code&gt;, &lt;code&gt;onComplicationUpdate&lt;/code&gt;等回调. &lt;/p&gt;
&lt;p&gt;用户也可以点击Complications, 可以用&lt;code&gt;setTapAction()&lt;/code&gt;指定点击后要启动的Activity.&lt;/p&gt;
&lt;p&gt;可以指定&lt;code&gt;ComplicationProviderService&lt;/code&gt;的更新频率, 是在manifest里用这个key:&lt;br&gt;&lt;code&gt;android.support.wearable.complications.UPDATE_PERIOD_SECONDS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;更新得太频繁会比较费电.&lt;br&gt;需要注意的是这并不是一个常量, 因为系统也会根据手机的状况进行一些调节, 不必要的时候就不需要频繁更新.&lt;/p&gt;
&lt;p&gt;本文作者采用的方式是用&lt;code&gt;ProviderUpdateRequester&lt;/code&gt;. 在manifest里面设置0.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ComponentName providerComponentName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComponentName(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyComplicationProviderService.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ProviderUpdateRequester providerUpdateRequester = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProviderUpdateRequester(context, providerComponentName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;providerUpdateRequester.requestUpdateAll();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后, 这里是官网文档:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/wear/preview/features/complications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Complications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这里是作者PR: &lt;a href=&quot;https://github.com/alexstyl/Memento-Namedays/pull/40&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-Handler-Internals&quot;&gt;&lt;a href=&quot;#Android-Handler-Internals&quot; class=&quot;headerlink&quot; title=&quot;Android Handler Internals&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jagsaund/android-handler-internals-b5d49eba6977#.xuogmm2c0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Handler Internals&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先, 作者举了一个简单的例子, 用两种方法, 用Handler来实现下载图片并显示到ImageView上的过程.&lt;/p&gt;
&lt;p&gt;主要是因为网络请求需要在非UI线程, 而View操作需要在UI线程. Handler就用来在这两种线程之间切换调度.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handler的组成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handler&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;li&gt;Message Queue&lt;/li&gt;
&lt;li&gt;Looper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Handler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Handler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handler&lt;/a&gt;是线程间消息传递的直接接口, 生产者和消费者线程都是通过调用下面的操作和Handler交互:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creating, inserting, removing Messages from Message Queue.&lt;/li&gt;
&lt;li&gt;processing Messages on the consumer thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个Handler都是和一个Looper和一个Message Queue关联的. 有两种方法来创建一个Handler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用默认构造器, 将会使用当前线程的Looper.&lt;/li&gt;
&lt;li&gt;显式地指明要用的Looper.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Handler不能没有Looper, 如果构造时没有指明Looper, 当前线程也没有Looper, 那么将会抛出异常.&lt;/p&gt;
&lt;p&gt;因为Handler需要Looper中的消息队列.&lt;/p&gt;
&lt;p&gt;一个线程上的多个Handler共享同一个消息队列, 因为它们共享同一个Looper.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Message.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Message&lt;/a&gt;是一个包含任意数据的容器, 它包含的数据信息是callback, data bundle和obj/arg1/arg2, 还有三个附加数据what, time和target.&lt;/p&gt;
&lt;p&gt;可以调用Handler的&lt;code&gt;obtainMessage()&lt;/code&gt;方法来创建Message, 这样message是从message pool中取出的, target会自动设置成Handler自己. 所以直接可以在后面调用&lt;code&gt;sendToTarget()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;Message pool是一个最大尺寸为50的LinkedList. 当消息被处理完之后, 会放回pool, 并且重置所有字段.&lt;/p&gt;
&lt;p&gt;当我们使用Handler来&lt;code&gt;post(Runnable)&lt;/code&gt;的时候, 实际上是隐式地创建一个Message, 它的callback存这个Runnable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Message Queue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/MessageQueue.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Message Queue&lt;/a&gt; 是一个无边界的LinkedList, 元素是Message对象. 它按照时间顺序来插入Message, 所以timestamp最小的最先分发. &lt;/p&gt;
&lt;p&gt;MessageQueue中有一个&lt;code&gt;dispatch barrier&lt;/code&gt;表示当前时间, 当message的timestamp小于当前时间时, 被分发和处理.&lt;/p&gt;
&lt;p&gt;Handler提供了一些方法在发message的时候设置不同的时间戳:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendMessageDelayed()&lt;/code&gt;: 当前时间 + delay时间.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendMessageAtFrontOfQueue()&lt;/code&gt;: 把时间戳设为0, 不建议使用.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendMessageAtTime()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Handler经常需要和UI交互, 可能会引用Activity, 所以也经常会引起内存泄漏.&lt;br&gt;作者举了两个例子, 略.&lt;/p&gt;
&lt;p&gt;需要注意:&lt;br&gt;非静态内部类会持有外部类实例引用.&lt;br&gt;Message会持有Handler引用, 主线程的Looper和MessageQueue在程序运行期间是一直存在的.&lt;/p&gt;
&lt;p&gt;建议的是, 内部类用static修饰, 另用WeakReference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debug Tips&lt;/strong&gt;&lt;br&gt;显示Looper中dispatched的Messages:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Looper looper = getMainLooper();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;looper.setMessageLogging(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogPrinter(Log.DEBUG, &lt;span class=&quot;string&quot;&gt;&quot;Looper&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显示MessageQueue中和handler相关的pending messages:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handler.dump(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogPrinter(Log.DEBUG, &lt;span class=&quot;string&quot;&gt;&quot;Handler&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Looper.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Looper&lt;/a&gt; 从消息队列中读取消息, 然后分发给target handler. 每当一个Message穿过了&lt;code&gt;dispatch barrier&lt;/code&gt;, 它就可以在下一个消息循环中被Looper读.&lt;/p&gt;
&lt;p&gt;一个线程只能关联一个Looper. 因为Looper类中有一个静态的ThreadLocal对象保证了只有一个Looper和线程关联, 企图再加一个就会抛出异常.&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;Looper.quit()&lt;/code&gt;会立即终止Looper, 丢弃所有消息.&lt;br&gt;而&lt;code&gt;Looper.quitSafely()&lt;/code&gt;会将已经通过&lt;code&gt;dispatch barrier&lt;/code&gt;的消息处理了, 只丢弃pending的消息.&lt;/p&gt;
&lt;p&gt;Looper是在Thread的&lt;code&gt;run()&lt;/code&gt;方法里setup的, &lt;code&gt;Looper.prepare()&lt;/code&gt;会检查是否之前存在一个&lt;code&gt;Looper&lt;/code&gt;和这个线程关联, 如果有则抛异常, 没有则建立一个新的&lt;code&gt;Looper&lt;/code&gt;对象, 创建一个新的MessageQueue. 见&lt;a href=&quot;https://github.com/android/platform_frameworks_base/blob/e71ecb2c4df15f727f51a0e1b65459f071853e35/core/java/android/os/Looper.java#L83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;现在&lt;code&gt;Handler&lt;/code&gt;可以接收或者发送消息到&lt;code&gt;MessageQueue&lt;/code&gt;了. 执行&lt;code&gt;Looper.loop()&lt;/code&gt;方法将会开始从队列读出消息. 每一个loop迭代都会取出下一个消息.&lt;/p&gt;
&lt;h2 id=&quot;Crunching-RxAndroid-Part-10-细细咀嚼RxAndroid&quot;&gt;&lt;a href=&quot;#Crunching-RxAndroid-Part-10-细细咀嚼RxAndroid&quot; class=&quot;headerlink&quot; title=&quot;Crunching RxAndroid - Part 10  细细咀嚼RxAndroid&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/crunching-rxandroid/crunching-rxandroid-part-10-cc0c33108ee2#.ri2xoc35c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crunching RxAndroid - Part 10 &lt;/a&gt; 细细咀嚼RxAndroid&lt;/h2&gt;&lt;p&gt;作者这个是个系列文章, 本文是part 10.&lt;/p&gt;
&lt;p&gt;Android的listener很多, 我们可以通过RxJava把listener都变成发射信息的源, 然后我们subscribe.&lt;/p&gt;
&lt;p&gt;本文举例讲了&lt;code&gt;Observable.fromCallable()&lt;/code&gt;和&lt;code&gt;Observable.fromAsync()&lt;/code&gt;方法的用法.&lt;/p&gt;
&lt;h2 id=&quot;Pury-a-new-way-to-profile-your-Android-application&quot;&gt;&lt;a href=&quot;#Pury-a-new-way-to-profile-your-Android-application&quot; class=&quot;headerlink&quot; title=&quot;Pury a new way to profile your Android application&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@nikita.kozlov/pury-new-way-to-profile-your-android-application-7e248b5f615e#.a7a9lsexj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury a new way to profile your Android application&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在做任何优化之前我们都应该先定位问题. 首先是收集性能数据, 如果收集到的信息超过了可以接受的阈值, 我们再进一步深究, 找到引起问题的方法或者API.&lt;/p&gt;
&lt;p&gt;幸运的是, 有一些工具可以帮我们profiling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JakeWharton/hugo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hugo&lt;/a&gt; 用&lt;code&gt;@DebugLog&lt;/code&gt;注解来标记方法, 然后参数, 返回值, 执行时间都会log出来.&lt;/li&gt;
&lt;li&gt;Android Studio toolset. 比如System Trace, 非常准确, 提供了很多信息, 但是需要你花时间来收集和分析数据.&lt;/li&gt;
&lt;li&gt;后台解决方案, 比如&lt;a href=&quot;https://jmeter.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JMeter&lt;/a&gt;, 它们提供了很多功能, 需要花时间来学习如何使用, 第二就是高并发profile也不是常见的需求.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Missing tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于我们关心的应用的速度问题, 大多数可以分为两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特定方法和API的执行时间, 这个可以被Hugo cover.&lt;/li&gt;
&lt;li&gt;两个事件之间的时间, 这可能是独立的两段代码, 但是在逻辑上关联. Android Studio toolset可以cover这种, 但是你需要花很多时间来做profile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者意识到下面的需求没有被满足:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始和结束profiling应该是被两个独立的事件触发的, 这样才可以满足我们灵活性的需求.&lt;/li&gt;
&lt;li&gt;如果我们想监控performance, 仅仅开始和结束事件是不够的. 有时候我们需要知道这之间发生了什么, 这些阶段信息应该被放在一个报告里, 让我们更容易明白和分享数据.&lt;/li&gt;
&lt;li&gt;有时候我们需要做重复操作, 比如loading RecyclerView的下一页, 那么一个回合的操作显然是不够的, 我们需要进行多次操作, 然后显示统计数据, 比如平均值, 最小最大值.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于上面的需求, 作者创建了Pury.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction to Pury&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pury是一个profiling的库, 用于测量多个独立事件之间的时间.&lt;br&gt;事件可以通过注解或者方法调用来触发, 一个scenario的所有事件被放在同一个报告里.&lt;/p&gt;
&lt;p&gt;然后作者举了两个例子, 一个用来测量启动时间, 另一个用来测量loading pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inner structure and limitations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;性能测量是&lt;code&gt;Profilers&lt;/code&gt;做的, 每一个&lt;code&gt;Profiler&lt;/code&gt;包含一个list, 里面是&lt;code&gt;Runs&lt;/code&gt;. 多个&lt;code&gt;Profilers&lt;/code&gt;可以并行运行, 但是每个&lt;code&gt;Profiler&lt;/code&gt;中只有一个&lt;code&gt;Run&lt;/code&gt;是active的. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Profiling with Pury&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pury可以测量多个独立事件之间的时间, 事件可以用注解或者方法调用触发.&lt;br&gt;基本的注解有: &lt;code&gt;@StartProfiling&lt;/code&gt;, &lt;code&gt;@StopProfiling&lt;/code&gt;, &lt;code&gt;@MethodProfiling&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pury.startProfiling();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pury.stopProfiling();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后作者介绍了一些使用细节.&lt;br&gt;项目地址: &lt;a href=&quot;https://github.com/NikitaKozlov/Pury&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;处理方法数限制问题-Dealing-With-the-65K-Methods-limit-on-Android&quot;&gt;&lt;a href=&quot;#处理方法数限制问题-Dealing-With-the-65K-Methods-limit-on-Android&quot; class=&quot;headerlink&quot; title=&quot;处理方法数限制问题 Dealing With the 65K Methods limit on Android&quot;&gt;&lt;/a&gt;处理方法数限制问题 &lt;a href=&quot;http://bytes.schibsted.com/dealing-65k-methods-limit-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dealing With the 65K Methods limit on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作为Android开发, 你可能会看到过这种信息:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Too many field references: 88974; max is 65536.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You may try using –multi-dex option.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先, 为什么会存在65k的方法数限制呢?&lt;/p&gt;
&lt;p&gt;Android应用是放在APK文件里的, 这里面包含了可执行的二进制码文件(DEX - Dalvik Executable), 里面包含了让app工作的代码.&lt;/p&gt;
&lt;p&gt;DEX规范限制了单个的DEX文件中的方法总数最大为65535, 包括了Android framework方法, library方法, 还有你自己代码中的方法. 如果超过了这个限制你将不得不配置你的app来生成多个DEX文件(multidex configuration). &lt;/p&gt;
&lt;p&gt;但是开启了multidex配置之后有一些随机性的兼容问题, 所以我们在决定开启multidex之前, 首先采取的第一步是减少方法数来避免这个问题.&lt;/p&gt;
&lt;p&gt;在我们开始改动之前, 先提出了这些问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们有多少方法?&lt;/li&gt;
&lt;li&gt;这些方法都是从哪里来?&lt;/li&gt;
&lt;li&gt;主要的方法来源是谁?&lt;/li&gt;
&lt;li&gt;我们真的需要所有这些方法吗?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在搜寻这些问题的答案的过程中, 我们发现了一些有用的工具和tips:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.methodscount.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MethodsCount.com&lt;/a&gt; 将会告诉你一个库有多少方法, 还提供了每个方法的依赖.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/dex-method-list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JakeWharton/dex-method-list utility&lt;/a&gt; 可以显示.apk, .aar, .dex, .jar或.class文件中的所有方法引用. 这可以用来发现一个库中到底有多少方法是被你的app使用了.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mihaip/dex-method-counts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mihaip/dex-method-counts&lt;/a&gt; 这个工具可以按包来输出方法, 计算出一个DEX文件中的方法数然后按包来分组输出. 这有利于我们明白哪些库是方法数的主要来源.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle build system&lt;/a&gt; 提供了关于项目结构很有价值的信息. 一个有用的task是&lt;code&gt;dependencies&lt;/code&gt;, 让你看到库的依赖树, 这样你就可以看到重复的依赖, 进而删除它们来减少方法数.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://classyshark.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Classyshark&lt;/a&gt; 是一个Android可执行文件的浏览器. 用这个工具你可以打开Android的可执行文件(.jar, .class, .apk, .dex, .so, .aar, 和Android XML)来分析它的内容.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://inloop.github.io/apk-method-count/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk-method-count&lt;/a&gt; 这是一个工具, 用来快速地查apk中的方法数, 拖拽apk之后就会得到结果.&lt;/p&gt;
&lt;h2 id=&quot;What’s-in-the-APK-APK中有什么&quot;&gt;&lt;a href=&quot;#What’s-in-the-APK-APK中有什么&quot; class=&quot;headerlink&quot; title=&quot;What’s in the APK APK中有什么&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://crushingcode.co/whats-in-the-apk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s in the APK&lt;/a&gt; APK中有什么&lt;/h2&gt;&lt;p&gt;APK: Android application package 是Android系统的一种文件格式, 实际上是一种压缩文件, 如果把.apk重命名为.zip, 就可以取出其内容.&lt;/p&gt;
&lt;p&gt;但是此时我们直接在文本编辑器打开AndroidManifest.xml的时候看到的全是机器码.&lt;/p&gt;
&lt;p&gt;当然是有工具来帮我们分析这些东西的, 这个工具从一开始就有, 那就是aapt, 它是Android Build Tool的一部分.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;aapt - Android Asset Packaging Tool&lt;/strong&gt; 这个工具可以用来查看和增删apk中的文件, 打包资源, 研究PNG文件等等.&lt;/p&gt;
&lt;p&gt;它的位置在: &lt;code&gt;&amp;lt;path_to_android_sdk&amp;gt;/build-tools/&amp;lt;build_tool_version_such_as_24.0.2&amp;gt;/aapt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;aapt能做的事情, 从man可以看出:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aapt list - Listing contents of a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;aapt dump - Dumping specific information from an APK file.&lt;/li&gt;
&lt;li&gt;aapt package - Packaging Android resources.&lt;/li&gt;
&lt;li&gt;aapt remove - Removing files from a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;aapt add - Adding files to a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;aapt crunch - Crunching PNG files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用这个工具来分析我们的apk:&lt;/p&gt;
&lt;p&gt;输出基本信息:&lt;br&gt;&lt;code&gt;aapt dump badging app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出声明的权限:&lt;br&gt;&lt;code&gt;aapt dump permissions app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出配置:&lt;br&gt;&lt;code&gt;aapt dump configurations app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还有其他这些:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Print the resource table from the APK.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt dump resources app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Print the compiled xmls in the given assets.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt dump xmltree app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Print the strings of the given compiled xml assets.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt dump xmlstrings app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# List contents of Zip-compatible archive.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt list -v -a  app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reductor-Redux-for-Android&quot;&gt;&lt;a href=&quot;#Reductor-Redux-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Reductor - Redux for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yarikx.github.io/Reductor-prologue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor - Redux for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Redux是一个当前JavaScript中很火的构架模式. Reductor把它的概念借鉴到了Java和Android中.&lt;/p&gt;
&lt;p&gt;关于状态管理到底有什么好方法呢, 作者想到了前端开发中的SPA(Single-page application), 和Android应用很像, 有没有什么可借鉴的呢? 答案是有.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux&lt;/a&gt; 是一个JavaScript应用的可预测的状态容器, 可以用下面三个基本原则来描述:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一的真相来源&lt;/li&gt;
&lt;li&gt;状态只读&lt;/li&gt;
&lt;li&gt;变化是纯函数造成的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redux的灵感来源有&lt;a href=&quot;http://facebook.github.io/flux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux&lt;/a&gt;和&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elm Architecture&lt;/a&gt;.&lt;br&gt;强烈建议阅读一下它的&lt;a href=&quot;http://redux.js.org/docs/introduction/Motivation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Yarikx/reductor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor&lt;/a&gt;是作者用Java又实现了一次Redux.&lt;/p&gt;
&lt;p&gt;作者用了一个Todo app的例子来说明如何使用, 以及它的好处.&lt;/p&gt;
&lt;p&gt;作者先写了一个naive的实现, 然后不断地举出它的缺点, 然后改进它.&lt;/p&gt;
&lt;p&gt;其中作者用到了&lt;a href=&quot;https://github.com/hrldcpr/pcollections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pcollection&lt;/a&gt;来实现persistent/immutable的集合.&lt;/p&gt;
&lt;p&gt;最后还把代码改为对测试友好的.&lt;/p&gt;
&lt;h2 id=&quot;Android-leak-pattern-subscriptions-in-views&quot;&gt;&lt;a href=&quot;#Android-leak-pattern-subscriptions-in-views&quot; class=&quot;headerlink&quot; title=&quot;Android leak pattern: subscriptions in views&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@pyricau/android-leak-pattern-subscriptions-in-views-18f0860aa74c?swoff=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android leak pattern: subscriptions in views&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;开始作者举了一个例子, 一个自定义View, subscribe了Authenticator单例的username变化事件, 从而更新UI.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeaderView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FrameLayout&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Authenticator authenticator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeaderView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, AttributeSet attrs)&lt;/span&gt; &lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFinishInflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; TextView usernameView = (TextView) findViewById(R.id.username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    authenticator.username().subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String username)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usernameView.setText(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是代码存在一个主要的问题: 我们从来没有unsubscribe. 这样匿名内部类对象就持有外部类对象, 整个view hierarchy就泄露了, 不能被GC.&lt;/p&gt;
&lt;p&gt;为了解决这个问题, 在View的&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;回调里调用&lt;code&gt;unsubscribe()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;作者以为这样解决了问题, 但是并没有, 还是检测出了泄露, 并且作者发现View的&lt;code&gt;onAttachedToWindow()&lt;/code&gt;和&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;都没有被调用.&lt;/p&gt;
&lt;p&gt;作者研究了&lt;code&gt;onAttachedToWindow()&lt;/code&gt;的调用时机:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a view is added to a parent view with a window, onAttachedToWindow() is called immediately, from addView().&lt;/li&gt;
&lt;li&gt;When a view is added to a parent view with no window, onAttachedToWindow() will be called when that parent is attached to a window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而作者的布局是在Activity的&lt;code&gt;onCreate()&lt;/code&gt;里面&lt;code&gt;setContentView()&lt;/code&gt;设置的.&lt;br&gt;这时候每一个View都收到了&lt;code&gt;View.onFinishInflate()&lt;/code&gt;回调, 却没有调&lt;code&gt;View.onAttachedToWindow()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;View.onAttachedToWindow()&lt;/code&gt; is called on the first view traversal, sometime after &lt;code&gt;Activity.onStart()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;onStart()&lt;/code&gt;方法是不是每次都会调用呢? 不是的, 如果我们在&lt;code&gt;onCreate()&lt;/code&gt;里面调用了&lt;code&gt;finish()&lt;/code&gt;, &lt;code&gt;onDestroy()&lt;/code&gt;会立即执行, 而不经过其中的其他生命周期回调.&lt;/p&gt;
&lt;p&gt;明白了这个原理之后, 作者的改进是把订阅放在了&lt;code&gt;View.onAttachedToWindow()&lt;/code&gt;里, 这样就不会泄露了. 对称总是好的.&lt;/p&gt;
&lt;h2 id=&quot;Annotation-Processing-in-Android-Studio-注解和其处理器&quot;&gt;&lt;a href=&quot;#Annotation-Processing-in-Android-Studio-注解和其处理器&quot; class=&quot;headerlink&quot; title=&quot;Annotation Processing in Android Studio 注解和其处理器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@aitorvs/annotation-processing-in-android-studio-7042ccb83024#.khjikdf51&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Annotation Processing in Android Studio&lt;/a&gt; 注解和其处理器&lt;/h2&gt;&lt;p&gt;作者用例子说明了如何自定义注解和其处理器, 让被标记的类自动成为Parcelable的.&lt;br&gt;看了这个有助于理解各种依赖和了解相关的目录结构.&lt;/p&gt;
&lt;p&gt;建议使用: &lt;a href=&quot;https://bitbucket.org/hvisser/android-apt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-apt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Parcelable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parcelable&lt;/a&gt;.&lt;br&gt;相关库代码: &lt;a href=&quot;https://github.com/aitorvs/auto-parcel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aitorvs/auto-parcel&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Writing-Better-Adapters-写出更好的Adapter&quot;&gt;&lt;a href=&quot;#Writing-Better-Adapters-写出更好的Adapter&quot; class=&quot;headerlink&quot; title=&quot;Writing Better Adapters 写出更好的Adapter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@dpreussler/writing-better-adapters-1b09758407d2#.ngas0y7j1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Better Adapters&lt;/a&gt; 写出更好的Adapter&lt;/h2&gt;&lt;p&gt;在Android应用中, 经常需要展示List, 那就需要一个Adapter来持有数据.&lt;/p&gt;
&lt;p&gt;RecyclerView的基本操作是: 创建一个view, 然后这个ViewHolder显示view数据; 把这个ViewHolder和adapter持有的数据绑定, 通常是一个model classes的list.&lt;/p&gt;
&lt;p&gt;当数据类型只有一种时, 实现很简单, 不容易出错. 但是当要显示的数据有很多种时, 就变得复杂起来.&lt;/p&gt;
&lt;p&gt;首先你需要覆写:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun getItemViewType(position: Int) : Int&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;默认是返回0, 实现以后把不同的type转换为不同的整型值.&lt;/p&gt;
&lt;p&gt;然后你需要覆写:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为每一种type创建一个ViewHolder.&lt;/p&gt;
&lt;p&gt;第三步是:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun onBindViewHolder(holder: ViewHolder, position: Int): Any&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里没有type参数.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Uglyness&lt;/strong&gt;&lt;br&gt;好像看起来没有什么问题?&lt;br&gt;让我们重新看&lt;code&gt;getItemViewType()&lt;/code&gt;这个方法. 系统需要给每一个position都对应一个type, 所以你可能会写出这样的代码:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (things.get(position) is Duck) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TYPE_DUCK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (things.get(position) is Mouse) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TYPE_MOUSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这很丑不是吗?&lt;/p&gt;
&lt;p&gt;如果你的ViewHolder没有一个共同的基类, 在binding的时候也是这么丑:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val thing = things.get(position)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (thing is Animal) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (holder as AnimalViewHolder).bind(thing as Animal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (thing is Car) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (holder as CarViewHolder).bind(thing as Car)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很多的instance-of和强制类型转换, 它们都是code smells. 违反了很多软件设计的原则, 并且当我们想要新添一种类型时, 需要改动很多方法. 我们的目标是添加新类型的时候不用更改Adapter之前的代码.&lt;br&gt;开闭原则: Open for Extension, Closed for Modification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s Fix It&lt;/strong&gt;&lt;br&gt;用一个map来查询? 不好.&lt;br&gt;把type放在model里? 不好.&lt;/p&gt;
&lt;p&gt;解决问题的一种办法是: 加入ViewModel, 作为中间层.&lt;/p&gt;
&lt;p&gt;但是如果你不想创建很多的ViewModel类, 还有其他的办法: &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visitor模式&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface Visitable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(typeFactory: TypeFactory) : Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface Animal : Visitable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface Car : Visitable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Mouse: Animal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(typeFactory: TypeFactory) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        = typeFactory.type(this)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;工厂:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface TypeFactory &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(duck: Duck): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(mouse: Mouse): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(dog: Dog): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(car: Car): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回对应的id:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TypeFactoryForList : TypeFactory &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(duck: Duck) = R.layout.duck&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(mouse: Mouse) = R.layout.mouse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(dog: Dog) = R.layout.dog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(car: Car) = R.layout.car&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Material-Intro-Screen-for-Android-Apps&quot;&gt;&lt;a href=&quot;#Material-Intro-Screen-for-Android-Apps&quot; class=&quot;headerlink&quot; title=&quot;Material Intro Screen for Android Apps&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/tangoagency/material-intro-screen-for-android-apps-c4317fbac923?source=latest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Intro Screen for Android Apps&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;现在有两个主流的libraries为Android 应用提供了好看的intro screens, 但是感觉并不是很好用, 所以作者他们发布了一个新的欢迎界面的库&lt;a href=&quot;https://github.com/TangoAgency/material-intro-screen/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TangoAgency/material-intro-screen
&lt;/a&gt;, 好用易扩展.&lt;/p&gt;
&lt;h2 id=&quot;Testing-Legacy-Code-Hidden-Dependencies&quot;&gt;&lt;a href=&quot;#Testing-Legacy-Code-Hidden-Dependencies&quot; class=&quot;headerlink&quot; title=&quot;Testing Legacy Code: Hidden Dependencies&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@corneliu/testing-legacy-code-hidden-dependencies-9b8cd617953f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing Legacy Code: Hidden Dependencies&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文讨论&lt;a href=&quot;https://en.wikipedia.org/wiki/God_object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;God Object&lt;/a&gt;, &lt;a href=&quot;https://sourcemaking.com/antipatterns/the-blob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blob&lt;/a&gt;, 这种很大的类和方法, 做了很多事情. 如果你想要重构, 先加点测试, 也发现很难, 因为它的依赖太多了, 做了太多事情.&lt;/p&gt;
&lt;p&gt;首先, 实例化:&lt;br&gt;加set方法, 让数据库依赖抽离出来, 这样测试的时候可以传一个Fake的进去.&lt;/p&gt;
&lt;p&gt;第二, 更多依赖:&lt;br&gt;把UserManger和网络请求等依赖也抽为成员变量, 加上set方法或者构造参数, 这样在测试的时候易于把mock的东西传进去.&lt;/p&gt;
&lt;p&gt;第三, 清理: 要牢记&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单一职能原则&lt;/a&gt;, 进行职能拆分.&lt;/p&gt;
&lt;p&gt;最后, 现实: 清理是一个持续化的过程, 得一步一步来, 有时候小步的改动会帮助你发现另外需要改动的地方. &lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;EncryptedPreferences&quot;&gt;&lt;a href=&quot;#EncryptedPreferences&quot; class=&quot;headerlink&quot; title=&quot;EncryptedPreferences&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/PDDStudio/EncryptedPreferences&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EncryptedPreferences&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AES-256加密的SharedPreferences.&lt;/p&gt;
&lt;h2 id=&quot;Pury&quot;&gt;&lt;a href=&quot;#Pury&quot; class=&quot;headerlink&quot; title=&quot;Pury&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/NikitaKozlov/Pury&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;报告多个不同事件之间的时间, 可用于性能测量.&lt;/p&gt;
&lt;h2 id=&quot;Floating-Navigation-View&quot;&gt;&lt;a href=&quot;#Floating-Navigation-View&quot; class=&quot;headerlink&quot; title=&quot;Floating-Navigation-View&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/andremion/Floating-Navigation-View&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Floating-Navigation-View&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Floating Action Button, 展开后是一个NavigationView.&lt;/p&gt;
&lt;h2 id=&quot;Material-Intro-Screen&quot;&gt;&lt;a href=&quot;#Material-Intro-Screen&quot; class=&quot;headerlink&quot; title=&quot;Material Intro Screen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TangoAgency/material-intro-screen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Intro Screen&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;易用易扩展的欢迎界面.&lt;/p&gt;
&lt;h1 id=&quot;SPECIALS&quot;&gt;&lt;a href=&quot;#SPECIALS&quot; class=&quot;headerlink&quot; title=&quot;SPECIALS&quot;&gt;&lt;/a&gt;SPECIALS&lt;/h1&gt;&lt;h2 id=&quot;Huge-list-of-useful-resources-for-Android-development&quot;&gt;&lt;a href=&quot;#Huge-list-of-useful-resources-for-Android-development&quot; class=&quot;headerlink&quot; title=&quot;Huge list of useful resources for Android development&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.anysoftwaretools.com/best-android-development-resources/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Huge list of useful resources for Android development&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;资源分享, 包括博客论坛Video社区等等.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-224&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-224&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #224&quot;&gt;&lt;/a&gt;Android Weekly Issue #224&lt;/h1&gt;&lt;p&gt;September 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-224&quot;&gt;Android Weekly Issue #224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google Play的pre-launch报告; Wear的Complications API; Android Handler解析; RxAndroid; 测量性能的库: Pury; 方法数限制; APK内容分析; Redux for Android; 一种view造成的泄露; 注解处理; 更好的Adapter; Intro屏等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Annotation" scheme="http://mengdd.github.io/tags/Annotation/"/>
    
      <category term="Memory Leak" scheme="http://mengdd.github.io/tags/Memory-Leak/"/>
    
      <category term="pre-launch" scheme="http://mengdd.github.io/tags/pre-launch/"/>
    
      <category term="Handler" scheme="http://mengdd.github.io/tags/Handler/"/>
    
      <category term="RxAndroid" scheme="http://mengdd.github.io/tags/RxAndroid/"/>
    
      <category term="Profile" scheme="http://mengdd.github.io/tags/Profile/"/>
    
      <category term="Methods Count" scheme="http://mengdd.github.io/tags/Methods-Count/"/>
    
      <category term="APK" scheme="http://mengdd.github.io/tags/APK/"/>
    
      <category term="Redux" scheme="http://mengdd.github.io/tags/Redux/"/>
    
      <category term="Reductor" scheme="http://mengdd.github.io/tags/Reductor/"/>
    
      <category term="Adapter" scheme="http://mengdd.github.io/tags/Adapter/"/>
    
      <category term="Intro Screen" scheme="http://mengdd.github.io/tags/Intro-Screen/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 223</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/09/22/android-weekly-notes-issue-223/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/09/22/android-weekly-notes-issue-223/</id>
    <published>2016-09-22T09:34:27.000Z</published>
    <updated>2016-09-22T10:08:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-223&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-223&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #223&quot;&gt;&lt;/a&gt;Android Weekly Issue #223&lt;/h1&gt;&lt;p&gt;September 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-223&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #223&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Offline时间戳处理;  Accessibility的安全问题可能并不是个问题; 如何在单元测试和UI测试之间共享代码; Android中的指纹认证; 编译时间Kotlin vs Java; MVP结合RxJava, 让View来处理生命周期; RxJava2预览; 内存泄露处理; Gradle相关等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Offline-First-Introducing-TrueTime-for-Android&quot;&gt;&lt;a href=&quot;#Offline-First-Introducing-TrueTime-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Offline First: Introducing TrueTime for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://tech.instacart.com/truetime/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Offline First: Introducing TrueTime for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;TrueTime是一个NTP library for &lt;a href=&quot;https://github.com/instacart/truetime.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift&lt;/a&gt; and &lt;a href=&quot;https://github.com/instacart/truetime-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;其中NTP是Network Time Protocol.&lt;/p&gt;
&lt;p&gt;作者他们有一个购物app, 但是时断时续的网络降低了用户体验, 所以他们进行了离线迁移, 准备出一系列文章分享相关的想法和在此过程中学到的东西.&lt;/p&gt;
&lt;p&gt;本文是第一篇, 关于时间.&lt;/p&gt;
&lt;p&gt;由于在设置里可以设置设备的日期和时间, 所以设备的时间并不一定是真实的时间, 我们在程序里&lt;code&gt;new Date()&lt;/code&gt;得到的其实是设备时间.&lt;/p&gt;
&lt;p&gt;关于真实时间的计算, 他们开源了TrueTime库, Android和iOS都能用.&lt;/p&gt;
&lt;p&gt;TrueTime如何计算真实时间的呢? 它其实是向NTP的server发了请求, 然后计算出的.&lt;/p&gt;
&lt;p&gt;文中和库都说明了用法.&lt;/p&gt;
&lt;h2 id=&quot;Android-Security-and-Accessibility&quot;&gt;&lt;a href=&quot;#Android-Security-and-Accessibility&quot; class=&quot;headerlink&quot; title=&quot;Android Security and Accessibility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@ataulm/a-few-weeks-ago-android-weekly-promoted-a-post-highlighting-a-security-issue-with-the-android-5eae7ff6b8aa#.p25cbw2wl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Security and Accessibility&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前有一个&lt;a href=&quot;https://android.jlelse.eu/android-accessibility-75fdc5810025#.94tpbl6z2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;说Accessiblity存在安全隐患, 这个服务可能可以访问到一些隐私信息, 比如密码.&lt;/p&gt;
&lt;p&gt;但是这篇文章的作者觉得前一篇文章作者的解决方案不是很好.&lt;/p&gt;
&lt;p&gt;因为当用户开启Accessibility权限的时候, Android就已经给出了警告, 说明敏感信息可能会被观察到. 第三方的keyboard也可以访问这些信息, Android也是在开启的时候给出了警告.&lt;/p&gt;
&lt;p&gt;另外对于前一篇文章作者提出的解决方案: &lt;code&gt;View.IMPORTANT_FOR_ACCESSIBILITY_NO&lt;/code&gt;&lt;br&gt;这样真正有视觉障碍的那部分用户也无法看到密码, 可能就无法登陆了.&lt;/p&gt;
&lt;p&gt;所以本文作者建议的解决方案是, 可以弹一个对话框来提醒用户, 如果用户允许了, 再继续输入.&lt;/p&gt;
&lt;h2 id=&quot;Sharing-code-between-UI-amp-unit-tests&quot;&gt;&lt;a href=&quot;#Sharing-code-between-UI-amp-unit-tests&quot; class=&quot;headerlink&quot; title=&quot;Sharing code between UI &amp;amp; unit tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://trickyandroid.com/android-test-tricks-sharing-code-between-unit-ui-tests/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sharing code between UI &amp;amp; unit tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android的测试分两种:&lt;/p&gt;
&lt;p&gt;一种是Unit tests. 单元测试, 在JVM上跑.&lt;/p&gt;
&lt;p&gt;另一种是UI测试, 需要Android设备.&lt;/p&gt;
&lt;p&gt;在Android Studio中对应&lt;code&gt;test&lt;/code&gt;和&lt;code&gt;androidTest&lt;/code&gt;文件夹.&lt;/p&gt;
&lt;p&gt;这两个测试文件夹之间是不共享代码的, 即一个文件夹里不能访问另一个里面的代码.&lt;/p&gt;
&lt;p&gt;但是如果我们想要共用一些代码, 是有办法解决的.&lt;/p&gt;
&lt;p&gt;首先在app/src下新建一个文件夹, 比如叫&lt;code&gt;testShared&lt;/code&gt;. 里面添加要共享的代码.&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;app/build.gradle&lt;/code&gt;里面添加这个:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android.sourceSets &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs += &amp;quot;$projectDir/src/testShared&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    androidTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs += &amp;quot;$projectDir/src/testShared&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以在UI测试和单元测试中共享同一份代码了.&lt;/p&gt;
&lt;h2 id=&quot;Synchronously-Animating-Colors-on-Android&quot;&gt;&lt;a href=&quot;#Synchronously-Animating-Colors-on-Android&quot; class=&quot;headerlink&quot; title=&quot;Synchronously Animating Colors on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kylewbanks.com/blog/animating-toolbar-tablayout-floatingactionbutton-and-statusbar-background-color-on-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Synchronously Animating Colors on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者想做的一个效果是, 在切换tab的时候, 把&lt;code&gt;Toolbar&lt;/code&gt;, &lt;code&gt;TabLayout&lt;/code&gt;, &lt;code&gt;FloatingActionButton&lt;/code&gt;还有&lt;code&gt;StatusBar&lt;/code&gt;的颜色都动画地改变到另一个颜色.&lt;/p&gt;
&lt;p&gt;实现很简单, 首先用当前颜色和目标颜色建立一个&lt;code&gt;ValueAnimator&lt;/code&gt;, 然后&lt;code&gt;addUpdateListener()&lt;/code&gt;在更新的过程中把值set给相应的控件:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;colorAnimation.addUpdateListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ValueAnimator.AnimatorUpdateListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onAnimationUpdate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ValueAnimator animator)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; color = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) animator.getAnimatedValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toolbar.setBackgroundColor(color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tabLayout.setBackgroundColor(color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        floatingActionButton.setBackgroundTintList(ColorStateList.valueOf(color));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.LOLLIPOP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getWindow().setStatusBarColor(color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;colorAnimation.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中FloatingActionButton要用&lt;code&gt;setBackgroundTintList()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;StatusBar在21及以上才支持&lt;code&gt;getWindow().setStatusBarColor(color);&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-Fingerprint-Authentication&quot;&gt;&lt;a href=&quot;#Android-Fingerprint-Authentication&quot; class=&quot;headerlink&quot; title=&quot;Android Fingerprint Authentication&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@aitorvs/android-fingerprint-authentication-44c047179d9a#.3og72boir&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Fingerprint Authentication&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;其实用户都不喜欢验证, 因为用户都比较懒, 不喜欢一次又一次地输入密码或者手势pattern, 但是不锁屏又不安全.&lt;/p&gt;
&lt;p&gt;指纹验证&lt;a href=&quot;https://developer.android.com/about/versions/marshmallow/android-6.0.html#fingerprint-authentication&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fingerprint Authentication&lt;/a&gt;是Android M (Android 6.0, API 23)引入的. 它就是为了解决这个问题, 提升用户体验. 这种non-disturbing和easy的方式, 让我们不用在安全和用户体验之间做出妥协.&lt;/p&gt;
&lt;p&gt;如果你的应用需要做一些关键操作, 比如支付, 你需要用户在操作前授权, 那么指纹验证会很有帮助.&lt;/p&gt;
&lt;p&gt;然后作者介绍了实现的细节.&lt;/p&gt;
&lt;p&gt;最后作者附上了自己的相关库: &lt;a href=&quot;https://github.com/aitorvs/fingerlock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fingerlock&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Kotlin-vs-Java-Compilation-Speed&quot;&gt;&lt;a href=&quot;#Kotlin-vs-Java-Compilation-Speed&quot; class=&quot;headerlink&quot; title=&quot;Kotlin vs Java: Compilation Speed&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d#.nep65secf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin vs Java: Compilation Speed&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是作者关于Kotlin的第三篇文章, 作者在这篇文章里测试了Kotlin和Java的编译时间.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clean build with No Gradle daemon&lt;/strong&gt;&lt;br&gt;Java编译比Kotlin快17%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clean build + Gradle daemon&lt;/strong&gt;&lt;br&gt;&lt;code&gt;org.gradle.daemon=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Java编译比Kotlin快13%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Incremental builds&lt;/strong&gt;&lt;br&gt;&lt;code&gt;kotlin.incremental=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在clean build的时候, Java可能快10-15%, 但是在增量build + gradle daemon时, kotlin和Java一样快, 甚至可能比Java更快一些.&lt;/p&gt;
&lt;h2 id=&quot;Let-the-view-handle-the-lifecycle-in-MVP-by-using-RxJava&quot;&gt;&lt;a href=&quot;#Let-the-view-handle-the-lifecycle-in-MVP-by-using-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Let the view handle the lifecycle in MVP by using RxJava&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@ferhatparmak/let-the-view-handle-the-lifecycle-in-mvp-by-using-rxjava-694d67923871#.vt21pzfr0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let the view handle the lifecycle in MVP by using RxJava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;问题:&lt;br&gt;作者举了一个例子, 在Fragment作为View的MVP中, 如果P从service取一些数据, 然后调用View的显示方法, 则还需要知道&lt;code&gt;onViewCreated()&lt;/code&gt;是不是已经调用过了.&lt;/p&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;p&gt;首先创建一个Lifecycle的BehaviorSubject, 在&lt;code&gt;onViewCreated()&lt;/code&gt;的时候调用&lt;code&gt;onNext(null)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;把View的方法改成返回一个Observable, presenter的方法调用View的方法时实际上是subscribe了一下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsFragment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsView&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ProductsPresenter presenter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//Lifecycle subject. It is BehaviourSubject because it can be subscribed after onViewCreated call.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BehaviorSubject&amp;lt;Void&amp;gt; onViewCreatedSubject = BehaviorSubject.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Void&amp;gt; &lt;span class=&quot;title&quot;&gt;showProducts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Product&amp;gt; productList)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; onViewCreatedSubject. &lt;span class=&quot;comment&quot;&gt;// Wait for onViewCreated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doOnNext(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Object&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//Updates recyclerview adapter items&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewCreated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view, @Nullable Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onViewCreated(view, savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onViewCreatedSubject.onNext(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Presenter:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsFragmentPresenter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsPresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ProductsView view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadProducts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    productsService.getProducts()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Object, Observable&amp;lt;Void&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Void&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Product&amp;gt; productList)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//Return the view&#39;s observable to show products. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//No need to check if the view is created!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view.showProducts(productList); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .subscribe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然这并不是一个完整的例子, 完整的例子还需要考虑&lt;code&gt;onDestroyView()&lt;/code&gt;还有注销等情况的处理.&lt;/p&gt;
&lt;h2 id=&quot;Nougat-GCM-Network-Manager&quot;&gt;&lt;a href=&quot;#Nougat-GCM-Network-Manager&quot; class=&quot;headerlink&quot; title=&quot;Nougat - GCM Network Manager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/nougat-gcm-network-manager/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nougat - GCM Network Manager&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者搞了一个message app来研究Android 7的新特性.&lt;/p&gt;
&lt;p&gt;他用到了&lt;a href=&quot;http://ryanharter.com/blog/2016/03/22/autovalue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;关于Android 7的另一篇文章: &lt;a href=&quot;https://commonsware.com/blog/2016/03/09/random-musings-n-developer-preview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Random Musings on the N Developer Preview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他们的应用首先需要周期性地生产一些消息, 关于生产消息的实现, 作者没有用&lt;code&gt;AlarmManager&lt;/code&gt;, 也没有用&lt;code&gt;JobScheduler&lt;/code&gt;(因为只支持API 21及以上), 而是选用了&lt;code&gt;GCMNetworkManager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;具体实现见原文, 有详细说明.&lt;br&gt;另: &lt;a href=&quot;https://github.com/StylingAndroid/Nougat/tree/GCMNetworkManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这只是系列文章的第一篇, 后续应该会写更多.&lt;/p&gt;
&lt;h2 id=&quot;TransactionTooLargeException-crashes-on-Nougat&quot;&gt;&lt;a href=&quot;#TransactionTooLargeException-crashes-on-Nougat&quot; class=&quot;headerlink&quot; title=&quot;TransactionTooLargeException crashes on Nougat&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sqisland.com/2016/09/transactiontoolargeexception-crashes-nougat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TransactionTooLargeException crashes on Nougat&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者自己的应用在Activity转换的时候遇到了一个crash: &lt;code&gt;java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 700848 bytes.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前应用里有相关的Warning log, 但是&lt;br&gt;Android 7 Nougat (API 24)把它作为异常抛出来了.&lt;/p&gt;
&lt;p&gt;产生这个问题的原因是在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;里面存了太多数据. 作者做了一个测试, 想看看这个限制大概是多少, 大概是500K左右. &lt;/p&gt;
&lt;p&gt;所以这里是不应该用来存储太多数据的, 应该只存状态.&lt;/p&gt;
&lt;p&gt;底下回复说每个进程都有1M的buffer来接收transactions, 但是是在没有任何其他IPC的情况下. 所以建议存储的状态数据少于100K或者50K, 当然越少越好.&lt;/p&gt;
&lt;h2 id=&quot;Building-a-blazing-fast-ETC2-compressor&quot;&gt;&lt;a href=&quot;#Building-a-blazing-fast-ETC2-compressor&quot; class=&quot;headerlink&quot; title=&quot;Building a blazing fast ETC2 compressor&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@duhroach/building-a-blazing-fast-etc2-compressor-307f3e9aad99#.ixumn3e2v&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a blazing fast ETC2 compressor&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者是Google的, 以前做游戏的, 所以致力于Performances, GPU, 数据压缩等内容.&lt;/p&gt;
&lt;p&gt;作者关注VR, 但是VR中要提升体验, 必定会增加图像的大小和质量.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ericsson_Texture_Compression&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ETC textures&lt;/a&gt; 是OpenGLES 3.0的一种标准格式.&lt;/p&gt;
&lt;p&gt;编码一个高质量的ETC2 texture会花费很多时间.&lt;br&gt;以在游戏界最流行的压缩工具&lt;a href=&quot;http://malideveloper.arm.com/resources/tools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mali GPU Texture Compression tool&lt;/a&gt;为例, 作者做了实验, 证明确实要花费很多时间(平均10分钟)来encode一个图.&lt;/p&gt;
&lt;p&gt;所以作者他们开发了一个新的库: &lt;a href=&quot;https://github.com/google/etc2comp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;etc2comp&lt;/a&gt;, 一个很快的texture encoder.&lt;/p&gt;
&lt;p&gt;然后和之前的工具做了比较, 平均时间提高到了10秒.&lt;/p&gt;
&lt;p&gt;后来他说的技术细节我就看不懂了. 文后还有其他图像格式(JPG, PNG, WebP)相关的文章链接.&lt;/p&gt;
&lt;h2 id=&quot;Low-Coupling-With-Rx-and-Dagger2-in-Android&quot;&gt;&lt;a href=&quot;#Low-Coupling-With-Rx-and-Dagger2-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Low Coupling With Rx and Dagger2 in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ottodroid.net/?p=479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Low Coupling With Rx and Dagger2 in Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者举例展示Android程序的解耦.&lt;/p&gt;
&lt;p&gt;首先, 他展示一个高度耦合的Android程序, 然后加入Rx, 最后加入Dagger2, 从而一步一步地解耦这个项目.&lt;/p&gt;
&lt;p&gt;项目的内容是发现Network中的Services. 这里有官方的Training: &lt;a href=&quot;https://developer.android.com/training/connect-devices-wirelessly/nsd.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Network Service Discovery&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;RxJava2-An-Early-Preview&quot;&gt;&lt;a href=&quot;#RxJava2-An-Early-Preview&quot; class=&quot;headerlink&quot; title=&quot;RxJava2: An Early Preview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@theMikhail/rxjava2-an-early-preview-5b05de46b07#.ftflhi48n&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava2: An Early Preview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近RxJava2有了第一个Release Candidate. 所以作者在这里先预览一下有哪些有趣的更新和新加的功能:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Dependency&lt;/strong&gt;:&lt;br&gt;添加了依赖: &lt;a href=&quot;http://www.reactive-streams.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveStreams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imports&lt;/strong&gt;:&lt;br&gt;RxJava2放在了一个不同的package下:&lt;/p&gt;
&lt;p&gt;RxJava:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile ‘io.reactivex:rxjava:1.0.y-SNAPSHOT’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RxJava2:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile ‘io.reactivex.rxjava2:rxjava:x.y.z’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这意味着, 你可以同时用两个版本的库. 如果你要完全迁移的话, 你需要把所有的import都改到新包.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Null Emissions No Longer Permitted&lt;/strong&gt;:&lt;br&gt;不允许再发送null值了, 会直接抛出空指针异常.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//don’t do this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//don’t do this either&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Under(Back)Pressure&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Backpressure&lt;/code&gt;是当&lt;code&gt;Observable&lt;/code&gt;发射值的速度比&lt;code&gt;Observer&lt;/code&gt;能处理的速度快时发生的.&lt;/p&gt;
&lt;p&gt;RxJava2引入了一个新的Observable类&lt;code&gt;Flowable&lt;/code&gt;, with backpressure support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Single Old and New&lt;/strong&gt;:&lt;br&gt;订阅一个Single现在可以用这个:&lt;br&gt;&lt;code&gt;SingleObserver&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hit Me Maybe One More Type&lt;/strong&gt;:&lt;br&gt;一个新的类型叫&lt;code&gt;Maybe&lt;/code&gt;, 它是&lt;code&gt;Single&lt;/code&gt;和&lt;code&gt;Completable&lt;/code&gt;的混合体. 用来发射0或1个值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New BackPressured Subject: Processor&lt;/strong&gt;:&lt;br&gt;引入了一个新类型, &lt;code&gt;Processor&lt;/code&gt;, 它是一个有backpressure support的&lt;code&gt;Subject&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Names for Function and Action&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Func1&lt;/code&gt; -&amp;gt; &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func2&lt;/code&gt; -&amp;gt; &lt;code&gt;BiFunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FuncN&lt;/code&gt; -&amp;gt; &lt;code&gt;Function&amp;lt;Object[], R&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func1&amp;lt;T, Boolean&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;Predicate&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Action0&lt;/code&gt; -&amp;gt; &lt;code&gt;Consumer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Action1&lt;/code&gt; -&amp;gt; &lt;code&gt;BiConsumer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ActionN&lt;/code&gt; -&amp;gt; &lt;code&gt;Consumer&amp;lt;Object[]&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subscriber is Now Disposable&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;因为和Reactive-Streams的命名冲突, 所以&lt;code&gt;Subscriber&lt;/code&gt;改名为&lt;code&gt;Disposable&lt;/code&gt;. 它有一个&lt;code&gt;.dispose()&lt;/code&gt;方法, 类似于&lt;code&gt;Subscription&lt;/code&gt;的&lt;code&gt;.unsubscribe()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;onCompleted()&lt;/code&gt;也将变为&lt;code&gt;onComplete()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Composite Subscriptions Changes&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CompositeSubscription&lt;/code&gt; + &lt;code&gt;subscribe()&lt;/code&gt;-&amp;gt; &lt;code&gt;CompositeDisposable&lt;/code&gt; + &lt;code&gt;subscribeWith()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blocking Calls&lt;/strong&gt;:&lt;br&gt;RxJava2加了一些新的操作符来变异步为同步.&lt;br&gt;&lt;code&gt;.toBlocking.first()&lt;/code&gt; -&amp;gt; &lt;code&gt;.blockingFirst()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Better Hooks for Plugins&lt;/strong&gt;:&lt;br&gt;plugin系统被重写了. 现在你可以覆写内置schedulers返回的值了. 这样你就可以在做单元测试的时候覆写&lt;code&gt;Schedulers.io()&lt;/code&gt;来返回同步的值, 甚至debug Schedulers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目标Release日期: October 29.&lt;/p&gt;
&lt;p&gt;Retrofit已经支持RxJava2了:&lt;br&gt;&lt;a href=&quot;https://github.com/JakeWharton/retrofit2-rxjava2-adapter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;retrofit-rxjava2-adapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里还有一个Library用来把RxJava1转换到RxJava2: &lt;a href=&quot;https://github.com/akarnokd/RxJava2Interop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava2Interop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sources:&lt;br&gt;&lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 2.x javadoc&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Wiki: What’s different in 2.0&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38423079/differences-between-rxjava1-and-rxjava2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Eight-Ways-Your-Android-App-Can-STOP-Leaking-Memory&quot;&gt;&lt;a href=&quot;#Eight-Ways-Your-Android-App-Can-STOP-Leaking-Memory&quot; class=&quot;headerlink&quot; title=&quot;Eight Ways Your Android App Can STOP Leaking Memory&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.nimbledroid.com/2016/09/06/stop-memory-leaks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eight Ways Your Android App Can STOP Leaking Memory&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前作者有个文章叫&lt;a href=&quot;http://blog.nimbledroid.com/2016/05/23/memory-leaks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eight Ways Your Android App Can Leak Memory&lt;/a&gt;, 讲的是Android应用中8种内存泄露的原因, 主要是泄露了Activity.&lt;/p&gt;
&lt;p&gt;这篇文章主要讲解决方法:&lt;/p&gt;
&lt;h3 id=&quot;Static-Activities&quot;&gt;&lt;a href=&quot;#Static-Activities&quot; class=&quot;headerlink&quot; title=&quot;Static Activities&quot;&gt;&lt;/a&gt;Static Activities&lt;/h3&gt;&lt;p&gt;错误原因: 把Activity存在一个静态引用里, Activity生命周期结束后仍然持有.&lt;/p&gt;
&lt;p&gt;解决方法:&lt;br&gt;使用&lt;a href=&quot;https://developer.android.com/reference/java/lang/ref/WeakReference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WeakReference&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Static-Views&quot;&gt;&lt;a href=&quot;#Static-Views&quot; class=&quot;headerlink&quot; title=&quot;Static Views&quot;&gt;&lt;/a&gt;Static Views&lt;/h3&gt;&lt;p&gt;错误原因: 静态引用了View, 因为attached View引用了Activity, 所以等于间接引用了Activity.&lt;/p&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用WeakReference;&lt;/li&gt;
&lt;li&gt;在onDestroy()里面把引用置为null.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Inner-Classes&quot;&gt;&lt;a href=&quot;#Inner-Classes&quot; class=&quot;headerlink&quot; title=&quot;Inner Classes&quot;&gt;&lt;/a&gt;Inner Classes&lt;/h3&gt;&lt;p&gt;内部类分两种, 静态内部类和非静态内部类: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nested Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;错误原因: 在Activity里有一个内部类(非静态), 创建内部类的对象, 然后静态引用之. 因为内部类持有外部类的应用, 所以会造成内存泄露.&lt;/p&gt;
&lt;p&gt;解决方法:&lt;br&gt;尽量不要存static引用.&lt;/p&gt;
&lt;h3 id=&quot;匿名内部类-AsyncTask-Handler-Thread-TimerTask&quot;&gt;&lt;a href=&quot;#匿名内部类-AsyncTask-Handler-Thread-TimerTask&quot; class=&quot;headerlink&quot; title=&quot;匿名内部类 AsyncTask, Handler, Thread, TimerTask&quot;&gt;&lt;/a&gt;匿名内部类 AsyncTask, Handler, Thread, TimerTask&lt;/h3&gt;&lt;p&gt;错误原因:&lt;/p&gt;
&lt;p&gt;如果你不在超出生命周期的地方引用它, 匿名内部类的对象是无害的.&lt;/p&gt;
&lt;p&gt;但是上面的这些内部类对象全都是用来产生一些线程的, 这些线程是app全局的, 而且会引用创建它们的对象.&lt;/p&gt;
&lt;p&gt;解决方法: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把上面的这些类改成静态内部类, 静态的内部类对象不会引用外部类的对象.&lt;/li&gt;
&lt;li&gt;如果你坚持使用匿名内部类, 可以在Activity的onDestroy()里面终止线程.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Sensor-Manager&quot;&gt;&lt;a href=&quot;#Sensor-Manager&quot; class=&quot;headerlink&quot; title=&quot;Sensor Manager&quot;&gt;&lt;/a&gt;Sensor Manager&lt;/h3&gt;&lt;p&gt;错误原因:&lt;/p&gt;
&lt;p&gt;把Activity作为listener注册给了系统服务, 但是在Activity生命周期结束之前没有注销listener.&lt;/p&gt;
&lt;p&gt;解决方法: 在生命周期结束前注销listener.&lt;/p&gt;
&lt;h2 id=&quot;Auto-rename-Android-versionName-in-Gradle&quot;&gt;&lt;a href=&quot;#Auto-rename-Android-versionName-in-Gradle&quot; class=&quot;headerlink&quot; title=&quot;Auto rename Android versionName in Gradle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jagonzalez.develop/auto-rename-android-versionname-by-creating-custom-gradle-plugin-2922bbaaaed6#.cds2wvd05&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto rename Android versionName in Gradle&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在应用release的时候, 版本号是确定的, 这没问题. 在应用开发的时候, 如果每一个apk也有一个特定的版本号, 将会非常有帮助.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义Gradle Plugin&lt;/strong&gt;:&lt;br&gt;&lt;code&gt;com.android.application&lt;/code&gt;就是一个gradle plugin.&lt;/p&gt;
&lt;p&gt;有三种方式可以创建gradle plugin: &lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html#sec:packaging_a_plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;doc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文作者选择了&lt;code&gt;buildSrc&lt;/code&gt;的方式, 因为这很容易, 而且可以被加到repo里, 但是这样将依附于你的project, 不能复用.&lt;/p&gt;
&lt;p&gt;具体代码见原文.&lt;/p&gt;
&lt;p&gt;这么做了之后, 每一次build的apk都自带了分支信息, Jira卡号, 或者任何你想带的信息.&lt;/p&gt;
&lt;h2 id=&quot;Is-your-custom-view-interactive-aware&quot;&gt;&lt;a href=&quot;#Is-your-custom-view-interactive-aware&quot; class=&quot;headerlink&quot; title=&quot;Is your custom view interactive aware?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://renaudcerrato.github.io/2016/09/15/is-your-custom-view-interactive-aware/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is your custom view interactive aware?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;什么是&lt;strong&gt;Interactive View&lt;/strong&gt;?&lt;br&gt;当View是可见的, 即可以和用户交互, 即为interactive.&lt;/p&gt;
&lt;p&gt;当你的自定义View做一些很重的工作, 比如循环的动画或者loading, 或者依赖于传感器, 当这种View变为不可见时,你需要做一些工作来节约电量.&lt;/p&gt;
&lt;p&gt;作者写了一个辅助类: &lt;a href=&quot;https://gist.github.com/renaudcerrato/746e039700ac5eeaaea40808666e239f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;InteractiveViewHelper&lt;/a&gt; 来做这个.&lt;/p&gt;
&lt;p&gt;具体利用了View的这几个回调:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onVisibilityChanged(View, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onWindowVisibilityChanged()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onAttachedToWindow()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onDetachedFromWindow()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有两个ACTION:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent.ACTION_SCREEN_ON&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent.ACTION_SCREEN_OFF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Beta-Testing-Your-Android-App-With-Build-Variants&quot;&gt;&lt;a href=&quot;#Beta-Testing-Your-Android-App-With-Build-Variants&quot; class=&quot;headerlink&quot; title=&quot;Beta Testing Your Android App With Build Variants&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://chikemgbemena.com/2016/09/16/beta-testing-your-app-with-build-variants/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beta Testing Your Android App With Build Variants&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;讲了如何用Build Variants, 添加不同的Flavors.&lt;/p&gt;
&lt;h2 id=&quot;Make-your-build-gradle-great-again&quot;&gt;&lt;a href=&quot;#Make-your-build-gradle-great-again&quot; class=&quot;headerlink&quot; title=&quot;Make your build.gradle great again&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sergii/make-your-build-gradle-great-again-c84cc172a654#.y66yudcxc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make your build.gradle great again&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-把你的build-gradle分成小份-更加模块化-用apply应用&quot;&gt;&lt;a href=&quot;#1-把你的build-gradle分成小份-更加模块化-用apply应用&quot; class=&quot;headerlink&quot; title=&quot;1. 把你的build.gradle分成小份, 更加模块化, 用apply应用.&quot;&gt;&lt;/a&gt;1. 把你的build.gradle分成小份, 更加模块化, 用&lt;code&gt;apply&lt;/code&gt;应用.&lt;/h3&gt;&lt;h3 id=&quot;2-在build-file里指明application-id&quot;&gt;&lt;a href=&quot;#2-在build-file里指明application-id&quot; class=&quot;headerlink&quot; title=&quot;2. 在build file里指明application id.&quot;&gt;&lt;/a&gt;2. 在build file里指明application id.&lt;/h3&gt;&lt;p&gt;applicationId是apk最终会用的包名.&lt;br&gt;packageName是用来找代码中的R, 和activity/service组件的相对路径.&lt;br&gt;如果不在build文件里指明applicationId可能会有一些问题.&lt;/p&gt;
&lt;h3 id=&quot;3-给debug版使用一个不同的applicationId&quot;&gt;&lt;a href=&quot;#3-给debug版使用一个不同的applicationId&quot; class=&quot;headerlink&quot; title=&quot;3. 给debug版使用一个不同的applicationId.&quot;&gt;&lt;/a&gt;3. 给debug版使用一个不同的applicationId.&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        applicationIdSuffix &amp;quot;.debug&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好处是同一个机器上可以同时安装debug和release版.&lt;/p&gt;
&lt;h3 id=&quot;4-统计build时间&quot;&gt;&lt;a href=&quot;#4-统计build时间&quot; class=&quot;headerlink&quot; title=&quot;4. 统计build时间.&quot;&gt;&lt;/a&gt;4. 统计build时间.&lt;/h3&gt;&lt;p&gt;用–profile命令. 或&lt;a href=&quot;https://scans.gradle.com/get-started?type=project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build Scans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还可以用&lt;a href=&quot;https://github.com/passy/build-time-tracker-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build-time-tracker-plugin&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-配置release&quot;&gt;&lt;a href=&quot;#5-配置release&quot; class=&quot;headerlink&quot; title=&quot;5. 配置release.&quot;&gt;&lt;/a&gt;5. 配置release.&lt;/h3&gt;&lt;p&gt;Proguard在Java层面工作, 对于资源是不管的, 只把R中的id删了.&lt;br&gt;如果想进一步处理不用的资源, 需要加:&lt;br&gt;&lt;code&gt;shrinkResources true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;更深一步的居然还可以拆分apk: &lt;a href=&quot;https://developer.android.com/studio/build/configure-apk-splits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;config-apk-splits&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-发现一些有用的tasks-或者自己开发-Reddit-page&quot;&gt;&lt;a href=&quot;#6-发现一些有用的tasks-或者自己开发-Reddit-page&quot; class=&quot;headerlink&quot; title=&quot;6. 发现一些有用的tasks, 或者自己开发. Reddit page.&quot;&gt;&lt;/a&gt;6. 发现一些有用的tasks, 或者自己开发. &lt;a href=&quot;https://www.reddit.com/r/androiddev/comments/3ig3gm/show_us_your_gradle_tasks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reddit page&lt;/a&gt;.&lt;/h3&gt;&lt;h3 id=&quot;7-把依赖的版本号抽出来&quot;&gt;&lt;a href=&quot;#7-把依赖的版本号抽出来&quot; class=&quot;headerlink&quot; title=&quot;7. 把依赖的版本号抽出来.&quot;&gt;&lt;/a&gt;7. 把依赖的版本号抽出来.&lt;/h3&gt;&lt;h3 id=&quot;8-使用jcenter-响应更快&quot;&gt;&lt;a href=&quot;#8-使用jcenter-响应更快&quot; class=&quot;headerlink&quot; title=&quot;8. 使用jcenter, 响应更快.&quot;&gt;&lt;/a&gt;8. 使用jcenter, 响应更快.&lt;/h3&gt;&lt;h3 id=&quot;9-在开发时把最小sdk设为21或以上-会build得更快&quot;&gt;&lt;a href=&quot;#9-在开发时把最小sdk设为21或以上-会build得更快&quot; class=&quot;headerlink&quot; title=&quot;9. 在开发时把最小sdk设为21或以上, 会build得更快.&quot;&gt;&lt;/a&gt;9. 在开发时把最小sdk设为21或以上, 会build得更快.&lt;/h3&gt;&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Android-Amazing-Open-Source-Apps&quot;&gt;&lt;a href=&quot;#Android-Amazing-Open-Source-Apps&quot; class=&quot;headerlink&quot; title=&quot;Android Amazing Open Source Apps&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@amitshekhar/android-amazing-open-source-apps-e44f520593cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Amazing Open Source Apps&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章列举了一些好的开源app.&lt;br&gt;包括&lt;a href=&quot;https://github.com/google/iosched&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google/iosched&lt;/a&gt;, &lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-architecture&lt;/a&gt;, &lt;a href=&quot;https://github.com/DrKLO/Telegram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Telegram&lt;/a&gt;, &lt;a href=&quot;https://github.com/nickbutcher/plaid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Plaid&lt;/a&gt;, &lt;a href=&quot;https://github.com/wireapp/wire-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wire-android&lt;/a&gt;, &lt;a href=&quot;https://github.com/ribot/ribot-app-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ribot/ribot-app-android&lt;/a&gt;, &lt;a href=&quot;https://github.com/pockethub/PocketHub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PocketHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;DoorSignView&quot;&gt;&lt;a href=&quot;#DoorSignView&quot; class=&quot;headerlink&quot; title=&quot;DoorSignView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/renaudcerrato/DoorSignView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DoorSignView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个自定义View, 显示门牌. AnimatedDoorSignView可以根据传感器进行动画.&lt;/p&gt;
&lt;h2 id=&quot;Java-Error-Handler&quot;&gt;&lt;a href=&quot;#Java-Error-Handler&quot; class=&quot;headerlink&quot; title=&quot;Java Error Handler&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Workable/java-error-handler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Error Handler&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个统一的错误处理器. 为每一种错误建立全局默认的处理方式.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-223&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-223&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #223&quot;&gt;&lt;/a&gt;Android Weekly Issue #223&lt;/h1&gt;&lt;p&gt;September 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-223&quot;&gt;Android Weekly Issue #223&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Offline时间戳处理;  Accessibility的安全问题可能并不是个问题; 如何在单元测试和UI测试之间共享代码; Android中的指纹认证; 编译时间Kotlin vs Java; MVP结合RxJava, 让View来处理生命周期; RxJava2预览; 内存泄露处理; Gradle相关等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Accessibility" scheme="http://mengdd.github.io/tags/Accessibility/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Fingerprint" scheme="http://mengdd.github.io/tags/Fingerprint/"/>
    
      <category term="RxJava2" scheme="http://mengdd.github.io/tags/RxJava2/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="GCM" scheme="http://mengdd.github.io/tags/GCM/"/>
    
      <category term="Memory Leak" scheme="http://mengdd.github.io/tags/Memory-Leak/"/>
    
  </entry>
  
</feed>
