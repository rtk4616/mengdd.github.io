<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meng&#39;s pages</title>
  <subtitle>Android developer and maybe other intersting things.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mengdd.github.io/"/>
  <updated>2016-08-31T10:18:20.000Z</updated>
  <id>http://mengdd.github.io/</id>
  
  <author>
    <name>Dandan Meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>commit(), commitNow()和commitAllowingStateLoss()</title>
    <link href="http://mengdd.github.io/Android/2016/08/31/commit-commitNow-and-commitAllowingStateLoss/"/>
    <id>http://mengdd.github.io/Android/2016/08/31/commit-commitNow-and-commitAllowingStateLoss/</id>
    <published>2016-08-31T09:44:35.000Z</published>
    <updated>2016-08-31T10:18:20.000Z</updated>
    
    <content type="html">&lt;p&gt;关于FragmentTransaction的各种提交方法: &lt;code&gt;commit()&lt;/code&gt;,&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;,&lt;code&gt;commitNow()&lt;/code&gt;和&lt;code&gt;commitNowAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;作者Bryan Herbst发了一个blog &lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The many flavors of commit()&lt;/a&gt;讨论这几个方法的特点和用途.&lt;br&gt;下文是中文摘要.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;FragmentTransaction的提交方法&quot;&gt;&lt;a href=&quot;#FragmentTransaction的提交方法&quot; class=&quot;headerlink&quot; title=&quot;FragmentTransaction的提交方法&quot;&gt;&lt;/a&gt;FragmentTransaction的提交方法&lt;/h1&gt;&lt;p&gt;support library的&lt;code&gt;FragmentTransaction&lt;/code&gt;现在提供了四种不同的方法来commit一个transaction:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commit%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commit()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitAllowingStateLoss%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitAllowingStateLoss()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitNow%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitNow()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitNowAllowingStateLoss%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitNowAllowingStateLoss()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章分析了这四个方法的不同.&lt;/p&gt;
&lt;h2 id=&quot;commit-vs-commitAllowingStateLoss&quot;&gt;&lt;a href=&quot;#commit-vs-commitAllowingStateLoss&quot; class=&quot;headerlink&quot; title=&quot;commit() vs commitAllowingStateLoss()&quot;&gt;&lt;/a&gt;commit() vs commitAllowingStateLoss()&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;commit()&lt;/code&gt;提交有时候会遇到&lt;code&gt;IllegalStateException&lt;/code&gt;, 说你在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;之后提交, 这里有另一个文章很好地分析了这个问题:&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragment Transactions &amp;amp; Activity State Loss&lt;/a&gt;&lt;br&gt;&lt;code&gt;commit()&lt;/code&gt;和&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;在实现上唯一的不同就是当你调用&lt;code&gt;commit()&lt;/code&gt;的时候, FragmentManger会检查是否已经存储了它自己的状态, 如果已经存了, 就抛出&lt;code&gt;IllegalStateException&lt;/code&gt;.&lt;br&gt;那么如果你调用的是&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;, 并且是在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;之后, 你可能会丢失掉什么状态呢?&lt;br&gt;答案是你&lt;strong&gt;可能&lt;/strong&gt;会丢掉FragmentManager的状态, 即save之后任何被添加或被移除的Fragments.&lt;br&gt;举例说明:&lt;br&gt;1.在Activity里显示一个FragmentA;&lt;br&gt;2.然后Activity被后台, &lt;code&gt;onStop()&lt;/code&gt;和&lt;code&gt;onSaveInstanceState()&lt;/code&gt;被调用;&lt;br&gt;3.在某个事件触发下, 你用FragmentB replace FragmentA , 使用的是 &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;这时候, 用户再返回应用, 可能会有两种情况发生:&lt;br&gt;1.如果系统杀死了你的activity, 你的activity将会重建, 使用了上述步骤2保存的状态, 所以A会显示, B不会显示;&lt;br&gt;2.如果系统没有杀死你的activity, 它会被提到前台, FragmentB就会显示出来, 到下次Activity stop的时候, 这个包含了B的状态就会被存下来.&lt;br&gt;(上述测试可以利用开发者选项中的”Don’t Keep Activities”选项).&lt;br&gt;那么你要选择哪一种呢? 这就取决于你提交的是什么, 还有你是否能接受丢失.&lt;/p&gt;
&lt;h2 id=&quot;commit-commitNow-和-executePendingTransactions&quot;&gt;&lt;a href=&quot;#commit-commitNow-和-executePendingTransactions&quot; class=&quot;headerlink&quot; title=&quot;commit(), commitNow() 和 executePendingTransactions()&quot;&gt;&lt;/a&gt;commit(), commitNow() 和 executePendingTransactions()&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;commit()&lt;/code&gt;的时候, 一旦调用, 这个commit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行.&lt;br&gt;&lt;code&gt;popBackStack()&lt;/code&gt;的工作也是这样, 发送到主线程任务队列中去. 也即说它们都是异步的.&lt;/p&gt;
&lt;p&gt;但是有时候你希望你的操作是立即执行的, 之前的开发者会在&lt;code&gt;commit()&lt;/code&gt;调用之后加上 &lt;code&gt;executePendingTransactions()&lt;/code&gt;来保证立即执行, 即变异步为同步.&lt;br&gt;support library从v24.0.0开始提供了 &lt;code&gt;commitNow()&lt;/code&gt;方法, 之前用&lt;code&gt;executePendingTransactions()&lt;/code&gt;会将所有pending在队列中还有你新提交的transactions都执行了, 而&lt;code&gt;commitNow()&lt;/code&gt;将只会执行你当前要提交的transaction. 所以&lt;code&gt;commitNow()&lt;/code&gt;避免你会不小心执行了那些你可能并不想执行的transactions.&lt;/p&gt;
&lt;p&gt;但是你不能对要加在back stack中的transaction使用&lt;code&gt;commitNow()&lt;/code&gt;, 即&lt;code&gt;addToBackStack()&lt;/code&gt;和&lt;code&gt;commitNow()&lt;/code&gt;不能同时使用.&lt;br&gt;为什么呢?&lt;br&gt;想想一下, 如果你有一个提交使用了&lt;code&gt;commit()&lt;/code&gt;, 紧接着又有另一个提交使用了&lt;code&gt;commitNow()&lt;/code&gt;, 两个都想加入back stack, 那back stack会变成什么样呢? 到底是哪个transaction在上, 哪个在下? 答案将是一种不确定的状态, 因为系统并没有提供任何保证来确保顺序, 所以系统决定干脆不支持这个操作.&lt;/p&gt;
&lt;p&gt;前面提过&lt;code&gt;popBackStack()&lt;/code&gt;是异步的, 所以它同样也有一个同步的兄弟&lt;code&gt;popBackStackImmediate()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以实际应用的时候怎么选择呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果你需要同步的操作, 并且你不需要加到back stack里, 使用&lt;code&gt;commitNow()&lt;/code&gt;.&lt;br&gt;support library在FragmentPagerAdapter里就使用了commitNow()来保证在更新结束的时候, 正确的页面被加上或移除.&lt;/li&gt;
&lt;li&gt;如果你操作很多transactions, 并且不需要同步, 或者你需要把transactions加在back stack里, 那就使用&lt;code&gt;commit()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果你希望在某一个指定的点, 确保所有的transactions都被执行, 那么使用&lt;code&gt;executePendingTransactions()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;这是Android Weekly #220的一篇文章, 我在做这期笔记的时候觉得这个写得很好, 所以决定单独拿出来说一说. 这期整体的笔记稍后推出, 敬请期待哇.&lt;br&gt;原文&lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The many flavors of commit()&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于FragmentTransaction的各种提交方法: &lt;code&gt;commit()&lt;/code&gt;,&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;,&lt;code&gt;commitNow()&lt;/code&gt;和&lt;code&gt;commitNowAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;作者Bryan Herbst发了一个blog &lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot;&gt;The many flavors of commit()&lt;/a&gt;讨论这几个方法的特点和用途.&lt;br&gt;下文是中文摘要.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android 7.0 Nougat released</title>
    <link href="http://mengdd.github.io/Android/Android-News/2016/08/29/android-7-0-Nougat-released/"/>
    <id>http://mengdd.github.io/Android/Android-News/2016/08/29/android-7-0-Nougat-released/</id>
    <published>2016-08-29T10:14:26.000Z</published>
    <updated>2016-08-29T10:22:43.000Z</updated>
    
    <content type="html">&lt;p&gt;Android 7.0 Nougat 牛轧糖于本月发布了. 从官方blog里可以了解到这个版本的新特性.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Android 7.0 从2016年8月正式推出, 从Nexus设备开始发行.&lt;br&gt;据说此版本有250个主要的features, 其中值得高亮的几个是:&lt;/p&gt;
&lt;h3 id=&quot;更加个性化&quot;&gt;&lt;a href=&quot;#更加个性化&quot; class=&quot;headerlink&quot; title=&quot;更加个性化&quot;&gt;&lt;/a&gt;更加个性化&lt;/h3&gt;&lt;p&gt;扩展了emoji: 现在内置有超过1500个emoji, 其中72是新增的.&lt;br&gt;快速设置控制: 快速设置给予了对一些东西更方便的访问途径, 比如蓝牙, Wi-Fi, 手电筒等. 在Android Nougat中, 你现在可以控制这些按钮的位置, 按自己的需要来移动它们.&lt;br&gt;支持多地点: app可以根据你的地点设置来定制内容, 如果你讲多种语言, 那么可能应用里搜索引擎会用多种语言返回给你结果.&lt;/p&gt;
&lt;h3 id=&quot;更有效率&quot;&gt;&lt;a href=&quot;#更有效率&quot; class=&quot;headerlink&quot; title=&quot;更有效率&quot;&gt;&lt;/a&gt;更有效率&lt;/h3&gt;&lt;p&gt;不管你是在回复工作邮件或者跟朋友制定计划, Android Nougat让你的多任务变得更加容易.&lt;br&gt;Multi-window 多窗口: 可以同时显示两个应用窗口, 可拖拽调整窗口大小.&lt;br&gt;Direct Reply 直接回应: 可以直接回应通知, 不必打开app.&lt;br&gt;Quick Switch 快速转换: 双击overview button, 可以在你最近使用的两个app间切换.&lt;/p&gt;
&lt;h3 id=&quot;更加省电&quot;&gt;&lt;a href=&quot;#更加省电&quot; class=&quot;headerlink&quot; title=&quot;更加省电&quot;&gt;&lt;/a&gt;更加省电&lt;/h3&gt;&lt;p&gt;从Android Marshmallow开始, 加了Doze模式, 让电池更加智能地工作. 在Android Nougat中, doze模式又做了一些改进, 在你走路的时候, 把手机装在兜里, 也会进入省电模式.&lt;/p&gt;
&lt;h3 id=&quot;更沉浸的体验&quot;&gt;&lt;a href=&quot;#更沉浸的体验&quot; class=&quot;headerlink&quot; title=&quot;更沉浸的体验&quot;&gt;&lt;/a&gt;更沉浸的体验&lt;/h3&gt;&lt;p&gt;Android Nougat设计的时候也考虑了一些沉浸体验相关的东东, 支持VulkanTM(一个高级的3D渲染API)和Daydream(Google的mobile VR平台).&lt;/p&gt;
&lt;h3 id=&quot;更安全&quot;&gt;&lt;a href=&quot;#更安全&quot; class=&quot;headerlink&quot; title=&quot;更安全&quot;&gt;&lt;/a&gt;更安全&lt;/h3&gt;&lt;p&gt;Seamless Updates 无缝更新: 现在Nougat可以后台安装应用了.&lt;br&gt;File-based encryption 文件加密: 设备上各个用户的文件得到了分离和保护.&lt;br&gt;Direct Boot 直接启动: 手机启动更快了, 当你重启设备时, 应用即便是在你没有解锁时也跑得更安全了.&lt;/p&gt;
&lt;h3 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;&lt;p&gt;更多信息请查看:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/about/versions/nougat/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.0 Nougat&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://android.googleblog.com/2016/08/android-70-nougat-more-powerful-os-made.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.0 Nougat: a more powerful OS, made for you&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/08/taking-final-wrapper-off-of-nougat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Taking the final wrapper off of Android 7.0 Nougat&lt;/a&gt; 揭开Android 7.0 (牛轧糖) 的最后一层面纱.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android 7.0 Nougat 牛轧糖于本月发布了. 从官方blog里可以了解到这个版本的新特性.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android News" scheme="http://mengdd.github.io/categories/Android/Android-News/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android News" scheme="http://mengdd.github.io/tags/Android-News/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 219</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/08/24/android-weekly-notes-issue-219/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/08/24/android-weekly-notes-issue-219/</id>
    <published>2016-08-24T09:32:23.000Z</published>
    <updated>2016-08-24T09:47:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-219&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-219&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #219&quot;&gt;&lt;/a&gt;Android Weekly Issue #219&lt;/h1&gt;&lt;p&gt;August 21st, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-219&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #219&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h2&gt;&lt;h3 id=&quot;Android-Bottom-Sheet&quot;&gt;&lt;a href=&quot;#Android-Bottom-Sheet&quot; class=&quot;headerlink&quot; title=&quot;Android: Bottom Sheet&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@emrullahluleci/android-bottom-sheet-30284293f066#.i3i4ggv13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android: Bottom Sheet&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Bottom Sheet是一个从底部滑上来的组件, 关于这个&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Material Design&lt;/a&gt;有相关的guidelines.&lt;br&gt;这篇文章主要讲了基本使用, 比较简单.&lt;/p&gt;
&lt;p&gt;这里私心推荐一下我自己的repo和另一个我觉得很好的教程:&lt;br&gt;&lt;a href=&quot;https://github.com/mengdd/AndroidDesignWidgetsSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDesignWidgetsSample&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout#bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath-handling-scrolls-with-CoordinatorLayout&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;DI-101-Part-1&quot;&gt;&lt;a href=&quot;#DI-101-Part-1&quot; class=&quot;headerlink&quot; title=&quot;DI 101 - Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/di-101/di-101-part-1-81896c2858a0#.sdgvcu8v3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DI 101 - Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Android平台的依赖注入.&lt;br&gt;文章开始讲了下依赖注入的概念, 当前在Android上的依赖注入最著名的是&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2&lt;/a&gt;.&lt;br&gt;然后文章讲了如何set up dagger 2, 举了个例子, 写Module, Component, 然后使用.&lt;/p&gt;
&lt;p&gt;这里再私心推荐一下我自己的一篇教程:&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5613889.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Dagger2 in Android&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android-Security-Welcome-to-Shell-Permissions&quot;&gt;&lt;a href=&quot;#Android-Security-Welcome-to-Shell-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Android Security: Welcome to Shell (Permissions)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://doridori.github.io/Android-Security-welcome-to-shell/#sthash.2BSXwRAF.dpbs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Security: Welcome to Shell (Permissions)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者在Reddit上看到了这么一句话:&lt;br&gt;&lt;code&gt;ADB is a shell that you get on a PC with the same permissions as if you were to run a shell/terminal app on the phone itself.&lt;/code&gt;&lt;br&gt;于是就写了这篇文章来讨论一下shell命令的权限问题, 关于系统底层的权限如何工作.&lt;br&gt;作者在里面提到了这本书&lt;a href=&quot;https://www.amazon.co.uk/Android-Security-Internals-Depth-Architecture/dp/1593275811&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Security Internals: An In-Depth Guide to Android’s Security Architecture&lt;/a&gt;.&lt;br&gt;关于Android安全方面的研究, 作者还建了一个repo: &lt;a href=&quot;https://github.com/doridori/Android-Security-Reference&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Security-Reference&lt;/a&gt;, 里面是关于安全问题的各种notes, still WIP.&lt;/p&gt;
&lt;h3 id=&quot;Lessons-from-converting-an-app-to-100-Kotlin&quot;&gt;&lt;a href=&quot;#Lessons-from-converting-an-app-to-100-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Lessons from converting an app to 100% Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/keepsafe-engineering/lessons-from-converting-an-app-to-100-kotlin-68984a05dcb6#.mrqsqq9ap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lessons from converting an app to 100% Kotlin&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这是关于Kotlin的系列文章之part 1, part 2的文章在这里&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-the-good-the-bad-and-the-ugly-bf5f09b87e6f#.eyvm3gp5t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin: The Good, The Bad, and The Ugly&lt;/a&gt;, 讨论Kotlin的语言设计.&lt;br&gt;本篇文章讲什么呢?&lt;br&gt;作者是一个应用的leader engineer, 学习了几天Kotlin之后, 觉得可以解决Java存在的一些痛点, 于是把应用改为用Kotlin了, 这篇文章是在此过程中的一些想法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法数问题&lt;/strong&gt;: 因为dex对方法数有要求, 不能超过64k, 见这里:&lt;a href=&quot;https://developer.android.com/studio/build/multidex.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multidex&lt;/a&gt;, 作者用了这个工具来统计方法数&lt;a href=&quot;https://github.com/KeepSafe/dexcount-gradle-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dexcount-gradle-plugin&lt;/a&gt;. 最后证明迁移到Kotlin之后, 代码行数减少了30%, 方法数减少了10%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Retrolambda&lt;/strong&gt;: 本来Retrolamda会生成匿名类, 并加上一些方法. Kotlin有内置的方法(apply), lamda可以直接传入, 不用生成匿名类, 不用添加额外的方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guava&lt;/strong&gt;: Guava的功能已经被Kotlin的标准库覆盖, 作者举例了Guava中的&lt;code&gt;ComparisonChains&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, lazy fields和&lt;code&gt;Preconditions&lt;/code&gt;等, 均有对应的Kotlin方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ButterKnife&lt;/strong&gt;: ButterKnife仍然可以使用, 但是&lt;a href=&quot;https://kotlinlang.org/docs/tutorials/android-plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin Android Extensions&lt;/a&gt;提供了更加自然的方式来访问绑定的views. 还有其他的方案比如&lt;a href=&quot;https://github.com/JakeWharton/kotterknife&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotterknife&lt;/a&gt;和&lt;a href=&quot;https://github.com/Kotlin/anko&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anko&lt;/a&gt;, 但是这俩都各自有些缺点, 不如Kotlin Android Extensions好用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RxJava&lt;/strong&gt;: RxJava仍然是很好的, 但是由于对集合并没有函数式的方法, 所以有时候会用Kotlin替代一下.&lt;/p&gt;
&lt;p&gt;Kotlin的一个优势就是它和Java可以互相调用, 所以可以逐步改动.&lt;br&gt;Intellij有自动把Java转化为Kotlin的功能, 但是有时候会有错.&lt;/p&gt;
&lt;p&gt;作者推荐了学习Kotlin的资源:&lt;a href=&quot;http://kotlinlang.org/docs/reference/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reference&lt;/a&gt;.&lt;br&gt;最后鼓励大家使用Kotlin, 因为它现在已经足够成熟了.&lt;/p&gt;
&lt;h3 id=&quot;Rewriting-Android-Priority-JobQueue-Lessons-Learned&quot;&gt;&lt;a href=&quot;#Rewriting-Android-Priority-JobQueue-Lessons-Learned&quot; class=&quot;headerlink&quot; title=&quot;Rewriting Android Priority JobQueue - Lessons Learned&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.birbit.com/rewriting-android-priority-jobqueue-lessons-learned/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rewriting Android Priority JobQueue - Lessons Learned&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者有一个repo: &lt;a href=&quot;https://github.com/yigit/android-priority-jobqueue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-priority-jobqueue&lt;/a&gt;, 是为Android写的任务队列管理framework, 用于调度管理后台任务.&lt;br&gt;后来Android自己也加了这个类&lt;a href=&quot;https://developer.android.com/reference/android/app/job/JobScheduler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JobScheduler&lt;/a&gt;.&lt;br&gt;最近作者重写了这个库, 改善了稳定性并加了new features, 发了V2版, 然后写个文章分享一下心得:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要通过share memory来通信, 应该通过通信来share memory.&lt;br&gt;以前是多个线程访问加锁的共享资源, 线程里的一些字段标记为volatile. 新版JobManager改为单线程, 只有它可以访问共享资源, 其他线程都和JobManager通信. 这里有个文章在说这种方法&lt;a href=&quot;https://blog.golang.org/share-memory-by-communicating&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Share Memory By Communicating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果你的代码需要做时钟相关的事情, 抽象出来.&lt;br&gt;这主要是为测试和CI考虑.&lt;/li&gt;
&lt;li&gt;加新API之前多想想.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Trello-Android-Schema-Upgrades&quot;&gt;&lt;a href=&quot;#Trello-Android-Schema-Upgrades&quot; class=&quot;headerlink&quot; title=&quot;Trello Android Schema Upgrades&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://tech.trello.com/android-schemas/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trello Android Schema Upgrades&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Trello Android之前的数据库升级方式相当简单粗暴, 他们drop整个数据库, 重新创建, 然后用server上的数据填进来.&lt;br&gt;这样在以前是没有问题的, 因为Trello的每一个操作都会立即发送给server, 不支持离线操作, 所以server上的数据永远是最新的.&lt;br&gt;但是最近他们想支持离线工作了, 这就说明不能简单地删数据库了, 因为其中可能含有没有发给服务器的离线数据.&lt;br&gt;他们要升级数据库, 这篇文章讲了他们的升级策略和他们为数据库升级而写的测试.&lt;/p&gt;
&lt;h3 id=&quot;Animating-the-text-lt-gt-dots-translation-on-password-field&quot;&gt;&lt;a href=&quot;#Animating-the-text-lt-gt-dots-translation-on-password-field&quot; class=&quot;headerlink&quot; title=&quot;Animating the text &amp;lt;-&amp;gt; dots translation on password field&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/crafty/status/766967057921417216?s=03&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animating the text &amp;lt;-&amp;gt; dots translation on password field&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这个链接点进去是Twitter.&lt;br&gt;在新的support库升级(August 2016, v24.2.0)&lt;a href=&quot;https://developer.android.com/topic/libraries/support-library/revisions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support Library Revision History&lt;/a&gt;中, TextInputLayout增加了密码可见的toggle. Nick Butcher决定给按钮和文字的改变都加上动画.&lt;br&gt;这是他的repo: &lt;a href=&quot;https://github.com/nickbutcher/plaid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plaid&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Introducing-Android-code-style-guidelines-at-Buffer&quot;&gt;&lt;a href=&quot;#Introducing-Android-code-style-guidelines-at-Buffer&quot; class=&quot;headerlink&quot; title=&quot;Introducing Android code style guidelines at Buffer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://overflow.buffer.com/2016/08/18/introducing-android-code-style-guidelines-buffer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing Android code style guidelines at Buffer&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;团队工作中, 有统一的代码风格很重要, 代码风格主要是代码的可读性和一致性相关问题.&lt;br&gt;作者他们为自己的Android App归档了新的code style: &lt;a href=&quot;https://github.com/bufferapp/android-guidelines/blob/master/project_style_guidelines.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project style guidelines&lt;/a&gt;, 当然啦, 文档是在使用中不断成长的.&lt;br&gt;做这种事主要目标是以下几个点: 一致性, 可读性, 可维护性, 易于浏览查询, 有意义.&lt;br&gt;文档写得很详细, 涉及到各个方面, 值得一看.&lt;/p&gt;
&lt;h3 id=&quot;Building-UserScope-with-Dagger-2&quot;&gt;&lt;a href=&quot;#Building-UserScope-with-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Building UserScope with Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://frogermcs.github.io/building-userscope-with-dagger2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building UserScope with Dagger 2&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;关于Dagger 2里面自定义scope, 作者之前有一篇文章&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dependency injection with Dagger 2 - Custom scopes&lt;/a&gt;, 本篇文章继续了这个话题.&lt;br&gt;所谓scope呢, 就是限制了单例的生存周期, 有些单例可能在整个应用生命周期都存在, 另一些单例可能只需要存在一定的时间. Dagger 2默认只提供了一个scope @Singleton, 所以我们要根据需要自定义自己的scope.&lt;br&gt;作者的例子中定义了@UserScope, 以实例说明了他的实现, 还讨论了UserScope的状态恢复问题.&lt;br&gt;例子代码: &lt;a href=&quot;https://github.com/frogermcs/Dagger2Recipes-UserScope&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2Recipes-UserScope&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Using-Java-8-Lambda-expressions-in-Android&quot;&gt;&lt;a href=&quot;#Using-Java-8-Lambda-expressions-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Using Java 8 Lambda expressions in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mayojava.github.io/android/java/using-java8-lambda-expressions-in-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Java 8 Lambda expressions in Android&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Java 8的一个重要特性是加入了Lambda表达式.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lambda表达式的语法&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;括号里是用逗号分隔的参数列表, 类型可以省略, 如果只有一个参数, 连括号也可以省略.&lt;br&gt;举例:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TextView textView = (TextView) findViewById(R.id.text_view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;textView.setOnLongClickListener(v -&amp;gt; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Long Click&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;箭头符号 &lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;箭头后面的body是单个表达式或者一个语句块.&lt;br&gt;如果是单个表达式, java runtime会返回它的值;&lt;br&gt;如果是语句块, 用大括号&lt;code&gt;{}&lt;/code&gt;包起来.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在Android中使用Lambda表达式&lt;/strong&gt;:&lt;br&gt;需要改build.gradle:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jackOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      enabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compileOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sourceCompatibility JavaVersion.VERSION_1_8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    targetCompatibility JavaVersion.VERSION_1_8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有另一种方式是使用RetroLambda plugin: &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-retrolambda&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Developing-for-Android-Wear-A-Noob’s-perspective&quot;&gt;&lt;a href=&quot;#Developing-for-Android-Wear-A-Noob’s-perspective&quot; class=&quot;headerlink&quot; title=&quot;Developing for Android Wear - A Noob’s perspective&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@moyinoluwa/developing-for-android-wear-a-noob-s-perspective-de47c4686ffb#.xjawtq69e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Developing for Android Wear - A Noob’s perspective&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这篇文章讲了作者作为一个新手, 第一次开发Wear应用的时候遇到的种种问题.&lt;br&gt;比如, 手表和手机是需要配对的, 在手机上安装Google的这个&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.wearable.app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;软件&lt;/a&gt;, 才能和手表配对, 配对了之后, 给手机安装release版apk的时候就会自动给手表安装应用.&lt;br&gt;也可以在Android Studio中选择wear来单跑Wear应用安装到手表, 但是只有配对了才能和手机有通信.&lt;br&gt;使用Wear的模拟器, 还需要运行这个命令adb -d forward tcp:5601 tcp:5601来和连接到电脑的手机连接.&lt;br&gt;还有在传输Assets时, 作者按照官方文档的例子, 却遇到了一些方法不能在UI线程调用的问题, 后来也解决了.&lt;/p&gt;
&lt;h3 id=&quot;Remote-config-with-Firebase&quot;&gt;&lt;a href=&quot;#Remote-config-with-Firebase&quot; class=&quot;headerlink&quot; title=&quot;Remote config with Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://segunfamisa.com/posts/firebase-remote-config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote config with Firebase&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者讲了如何实现Firebase的Remote config.&lt;br&gt;Remote config可以使我们控制应用的更新, 而不用重新发布一个版本.&lt;br&gt;为什么要使用远程配置呢? 主要的原因是测试新的功能, 然后可以根据用户的反馈快速地做出响应, 把更好的行为呈现给用户. 简单来说就是做A/B Test.&lt;br&gt;Firebase的remote config很强大, 指定参数后可以指定应用条件, 包括国家, 系统, 应用版本, 随机等等.&lt;/p&gt;
&lt;h2 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h2&gt;&lt;h3 id=&quot;Updates-in-Material-design-guidelines&quot;&gt;&lt;a href=&quot;#Updates-in-Material-design-guidelines&quot; class=&quot;headerlink&quot; title=&quot;Updates in Material design guidelines&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://material.google.com/material-design/whats-new.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Updates in Material design guidelines&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;2016年8月新发布的Material design包括了以下更新:&lt;br&gt;Notifications, Widgets, 确认操作和操作后的提示.&lt;br&gt;比较重要的更新是:&lt;br&gt;Navigation现在包括了如何使用Up和Back button.&lt;br&gt;还有使用全屏模式的三种模式:Lean back, Immersive, Lights Out以及它们相应的交互行为.&lt;/p&gt;
&lt;h2 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h2&gt;&lt;h3 id=&quot;Auto-value-firebase&quot;&gt;&lt;a href=&quot;#Auto-value-firebase&quot; class=&quot;headerlink&quot; title=&quot;Auto-value-firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mattlogan/auto-value-firebase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto-value-firebase&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;AutoValue的扩展, 用来创建Firebase的数据库对象.&lt;br&gt;&lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;是google的一个库. 用来创建interchangeable的对象, 即如果两个对象的所有fields是相等的, 我们认为这两个对象相等.&lt;/p&gt;
&lt;h3 id=&quot;Icicle&quot;&gt;&lt;a href=&quot;#Icicle&quot; class=&quot;headerlink&quot; title=&quot;Icicle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/segunfamisa/Icicle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icicle&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;基于注解的一个工具, 用来保存和恢复实例的状态.&lt;br&gt;感觉跟&lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icepick&lt;/a&gt;一样.&lt;/p&gt;
&lt;h3 id=&quot;ReadMoreTextView&quot;&gt;&lt;a href=&quot;#ReadMoreTextView&quot; class=&quot;headerlink&quot; title=&quot;ReadMoreTextView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/borjabravo10/ReadMoreTextView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadMoreTextView&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个自定义的TextView, 可以指定按照文字长度或者行数截取显示, 带展开和关闭按钮操作.&lt;/p&gt;
&lt;h3 id=&quot;Android-priority-jobqueue&quot;&gt;&lt;a href=&quot;#Android-priority-jobqueue&quot; class=&quot;headerlink&quot; title=&quot;Android-priority-jobqueue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yigit/android-priority-jobqueue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-priority-jobqueue&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个为Android写的后台任务队列管理程序.&lt;/p&gt;
&lt;h2 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h2&gt;&lt;h3 id=&quot;Support-Library-Revision-History&quot;&gt;&lt;a href=&quot;#Support-Library-Revision-History&quot; class=&quot;headerlink&quot; title=&quot;Support Library Revision History&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.android.com/topic/libraries/support-library/revisions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support Library Revision History&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Android Support Library 24.2.0发布啦(August 2016).&lt;/p&gt;
&lt;p&gt;v4被分成了很多小模块.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API更新&lt;/strong&gt;:&lt;br&gt;Custom Tabs可以控制instant app是否打开.&lt;br&gt;TextInputLayout加了密码可见的toggle.&lt;br&gt;Transition兼容到API 14及其以上.&lt;br&gt;Custom Tabs support library支持给secondary toolbar用RemoteViews.&lt;br&gt;AppCompatResources加了可以通过getDrawable()方法, 以resource id加载&lt;vector&gt;和&lt;animated-vector&gt;的功能.&lt;br&gt;CoordinatorLayout现在支持定义inset views, 然后指定其他Views给其让路. 就是当Snackbar出现的时候, FloatingActionButton躲开的那种行为, 只不过现在给任意的child view都可以设置了.&lt;br&gt;DiffUtil类可以计算出两个集合的不同, 然后得出一个更新操作的list, 可以交给RecyclerView.Adapter.&lt;br&gt;新增了RecyclerView.OnFlingListener. 有SnapHelper和LinearSnapHelper可供选择使用.&lt;/animated-vector&gt;&lt;/vector&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为改变&lt;/strong&gt;:&lt;br&gt;day/night模式改变的时候, activity将会自动重启.&lt;br&gt;如果status bar是透明的, Snacker现在会在navigation bar后面绘制.&lt;/p&gt;
&lt;p&gt;其他还有一些deprecations和bug fixes.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-219&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-219&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #219&quot;&gt;&lt;/a&gt;Android Weekly Issue #219&lt;/h1&gt;&lt;p&gt;August 21st, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-219&quot;&gt;Android Weekly Issue #219&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/08/18/android-weekly-notes-issue-218/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/08/18/android-weekly-notes-issue-218/</id>
    <published>2016-08-18T05:20:56.000Z</published>
    <updated>2016-08-18T10:14:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-218&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-218&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #218&quot;&gt;&lt;/a&gt;Android Weekly Issue #218&lt;/h1&gt;&lt;p&gt;August 14th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://androidweekly.net/issues/issue-218&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h2&gt;&lt;h3 id=&quot;PathMorphing-with-AnimatedVectorDrawables&quot;&gt;&lt;a href=&quot;#PathMorphing-with-AnimatedVectorDrawables&quot; class=&quot;headerlink&quot; title=&quot;PathMorphing with AnimatedVectorDrawables&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://lewismcgeary.github.io/posts/animated-vector-drawable-pathMorphing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PathMorphing with AnimatedVectorDrawables&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Android 5.0 推出了&lt;a href=&quot;https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VectorDrawable&lt;/a&gt;, 矢量图为处理多种屏幕尺寸的带来了很多好处. 这篇文章先介绍了VectorDrawable的使用, 然后主要讲如何实时操纵图像的改变, 用&lt;a href=&quot;https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatedVectorDrawable&lt;/a&gt;实现一个图像变形的效果.&lt;br&gt;文中的例子是Android和Apple的log在互相变化.&lt;br&gt;&lt;a href=&quot;https://github.com/lewismcgeary/AndroidtoAppleVectorLogo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source code available&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android-UI-Instrumentation-test-with-Espresso&quot;&gt;&lt;a href=&quot;#Android-UI-Instrumentation-test-with-Espresso&quot; class=&quot;headerlink&quot; title=&quot;Android UI Instrumentation test with Espresso&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mayojava.github.io/android/android-ui-instrumentation-test-with-espresso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android UI Instrumentation test with Espresso&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;用Espresso写UI功能测试, 通常是: 定位UI元素, 然后与其交互, 检查UI元素的状态.&lt;br&gt;三种主要的组件是: ViewMatchers, ViewActions 和ViewAssertions.&lt;br&gt;一个简短的例子:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onView(withId(R.id.my_view))            &lt;span class=&quot;comment&quot;&gt;// withId(R.id.my_view) - ViewMatcher&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .perform(click())                  &lt;span class=&quot;comment&quot;&gt;// click() - ViewAction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .check(matches(isDisplayed()));   &lt;span class=&quot;comment&quot;&gt;//matches(isDisplayed()) - ViewAssertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了测试不受animation的影响, 有时候可能需要把设备上的Developer Options里的下面几个animation全关掉:&lt;br&gt;Window animation scale&lt;br&gt;Transition animation scale&lt;br&gt;Animator duration scale&lt;br&gt;然后这个文章里有具体的例子介绍如何写并且运行测试, 还附有相关源码.&lt;/p&gt;
&lt;h3 id=&quot;How-to-Build-an-Android-App-for-Fire-TV-Part-1&quot;&gt;&lt;a href=&quot;#How-to-Build-an-Android-App-for-Fire-TV-Part-1&quot; class=&quot;headerlink&quot; title=&quot;How to Build an Android App for Fire TV - Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/amazon-appstore/developing-for-the-living-room-how-to-build-an-android-app-for-fire-tv-part-1-6ae108106fd2#.n39tl15pa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Build an Android App for Fire TV - Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;创建在亚马逊的Fire TV上跑的Android应用.&lt;br&gt;文后可以点进part 2.&lt;/p&gt;
&lt;h3 id=&quot;Android-Wear-Development-for-beginners&quot;&gt;&lt;a href=&quot;#Android-Wear-Development-for-beginners&quot; class=&quot;headerlink&quot; title=&quot;Android Wear Development for beginners&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/android-news/android-wear-development-for-beginners-82c2b06ff13a#.15v0ar2g3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Wear Development for beginners&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Complication是指手表上显示的除了小时和分钟之外的东西, 比如, 一个电池指示标志.&lt;br&gt;使用了Complication API之后, 用户就可以自己选一个地方, 然后从应用的列表中选一个东东来显示.&lt;br&gt;Wear应用是嵌入到一个主应用里面的, 当google play上主应用的apk被安装到手机上的时候, Wearable应用会自动安装在配对的设备上.&lt;br&gt;这篇文章详细介绍了如何创建一个Wear应用, 代码在&lt;a href=&quot;https://github.com/moyheen/radar-watch-face&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档: &lt;a href=&quot;https://developer.android.com/wear/preview/features/complications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Watch Face Complications&lt;/a&gt;&lt;br&gt;官方sample: &lt;a href=&quot;https://github.com/googlesamples/android-WatchFace&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-WatchFace&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Router-—-Everything-in-its-Right-Place&quot;&gt;&lt;a href=&quot;#Router-—-Everything-in-its-Right-Place&quot; class=&quot;headerlink&quot; title=&quot;Router — Everything in its Right Place&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/stories-from-eyeem/router-everything-in-its-right-place-4ca437871052#.cvou4493z&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Router — Everything in its Right Place&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;之前有一篇文章介绍了用装饰者模式来构建高度模块化的Android应用: &lt;a href=&quot;https://medium.com/stories-from-eyeem/creating-highly-modular-android-apps-933271fbdb7d#.4gtrccg9n&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating Highly Modular Android Apps&lt;/a&gt;&lt;br&gt;那篇文章里也有一个例子&lt;a href=&quot;https://github.com/eyeem/decorator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Decorator&lt;/a&gt;.&lt;br&gt;这篇文章讲同样采用装饰者思想的一个库: &lt;a href=&quot;https://github.com/eyeem/router&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Router&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Router首先基于一个将URL映射到程序界面的库: &lt;a href=&quot;https://github.com/clayallsopp/routable-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;routable-android&lt;/a&gt;&lt;br&gt;Router在此基础上做出了一些扩展和改进, 可以用一个map文件(YAML/JSON/XML)来定义基本的构架.&lt;br&gt;输入是URL(可以带参数), 根据map进行解析, 然后传到plugins, 然后每个plugin创造一部分的输出, 当左右plugins的工作结束后, 输出就可用了(输出是由多个plugins组装而成的).&lt;br&gt;文末附有&lt;a href=&quot;https://github.com/eyeem/router/tree/master/app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Boosting-app-performance-with-reflectionless-de-serialization&quot;&gt;&lt;a href=&quot;#Boosting-app-performance-with-reflectionless-de-serialization&quot; class=&quot;headerlink&quot; title=&quot;Boosting app performance with reflectionless (de)serialization&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://makingvimeo.com/post/148808044404/boosting-app-performance-with-reflectionless&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Boosting app performance with reflectionless (de)serialization&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这篇文章研究了在解析JSON响应的时候如何提高效率.&lt;br&gt;作者他们的应用Vimeo Android用了Retrofit来做网络请求, 用Gson来反序列化, 不好的一点就是有点慢, 因为Gson用反射来解析JSON. 为了改进,他们想要去除反射.&lt;br&gt;他们创建了自己的Gson TypeAdapters, 并且利用程序中各个不同大小的model来测量对比了了反序列化的时间.&lt;br&gt;他们的实验测试了不同的机器对于不同大小model的处理, 在多数情况下, 不用反射会提高性能, 但是也有例外, 在解析很大的model时, 在高性能的机器上, 反而是使用反射的情况比较快.&lt;br&gt;他们的库: &lt;a href=&quot;https://github.com/vimeo/stag-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stag-java&lt;/a&gt;&lt;br&gt;STAG: Speedy Type Adapter Generation.&lt;/p&gt;
&lt;h3 id=&quot;Introduction-to-Automated-Android-Testing-Part-4&quot;&gt;&lt;a href=&quot;#Introduction-to-Automated-Android-Testing-Part-4&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Automated Android Testing - Part 4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/introduction-android-testing-part-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Automated Android Testing - Part 4&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;讲如何写测试的系列文章, 有一个案例sample: &lt;a href=&quot;https://github.com/riggaroo/GithubUsersSearchApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GithubUsersSearchApp&lt;/a&gt;.&lt;br&gt;举例了一个MVP的真实例子, 然后给P写单元测试.&lt;br&gt;Presenter里有一个CompositeSubscription, 用来管理RxJava的subscriptions, detach的时候会注销所有的订阅, 防止了内存泄露和可能存在危险的view操作.&lt;br&gt;还创建了一个Contract接口, 把View和Presenter的接口定义写在里面.&lt;br&gt;这里面还有很机智的一点是把RxJava要用到的Scheduler也从presenter的构造函数传入, 这样在测试的时候就可以使用&lt;code&gt;Schedulers.immediate()&lt;/code&gt;, 而在View里面我们就按实际情况使用其他.&lt;/p&gt;
&lt;h3 id=&quot;Introduction-to-Android-Testing-Part-3&quot;&gt;&lt;a href=&quot;#Introduction-to-Android-Testing-Part-3&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Android Testing - Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/introduction-android-testing-part3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Android Testing - Part 3&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这应该是跟上面那条一个系列文章的第三篇.&lt;br&gt;介绍了如何用Retrofit和RxJava请求Github API然后解析到models.&lt;br&gt;后面是写单元测试, 步骤很清楚, given, when, then.&lt;br&gt;可以从中学习一下怎么给这种Retrofit + RxJava的程序写单元测试.&lt;/p&gt;
&lt;h3 id=&quot;Git-as-a-secure-private-Maven-repository&quot;&gt;&lt;a href=&quot;#Git-as-a-secure-private-Maven-repository&quot; class=&quot;headerlink&quot; title=&quot;Git as a secure private Maven repository&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2016/02/05/wagongit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git as a secure private Maven repository&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt; is a web-based hosting service for projects using Git.&lt;br&gt;讲了如何使用BitBucket或者Github作为一个private的Maven repository.&lt;br&gt;例子: &lt;a href=&quot;https://github.com/JeroenMols/WagonGitExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WagonGitExample&lt;/a&gt;&lt;br&gt;Gradle 脚本: &lt;a href=&quot;https://github.com/JeroenMols/GitAsMaven&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitAsMaven&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Crash-reporting-in-Firebase&quot;&gt;&lt;a href=&quot;#Crash-reporting-in-Firebase&quot; class=&quot;headerlink&quot; title=&quot;Crash reporting in Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://segunfamisa.com/posts/firebase-crash-reporting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crash reporting in Firebase&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;比较简单的一个文章, 如何set up Firebase的crash reporting.&lt;br&gt;其实Firebase Crash Reporting一旦构建好之后, 不需要加java代码, 所有uncaught的异常都是自动报告的.&lt;br&gt;&lt;a href=&quot;https://firebase.google.com/docs/crash/android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase Report Crashes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Isometric-AnimatedVectorDrawable-–-Part-1&quot;&gt;&lt;a href=&quot;#Isometric-AnimatedVectorDrawable-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Isometric AnimatedVectorDrawable – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/isometric-animatedvectordrawable-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Isometric AnimatedVectorDrawable – Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;神奇的&lt;a href=&quot;https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatedVectorDrawable&lt;/a&gt;, 这篇文章讲了用它来实现栅格地形图, 游戏里可以升降的草地的类似的东东. (看文章里的图吧, 我也形容不好.)&lt;br&gt;遗憾的是pathData animation当前在VectorDrawableCompat library暂不支持, 所以文中所讲的技术只能在api 21及其之上使用.&lt;br&gt;文中的例子有9个方块, 4个三角形, 把SVG作为矢量图VectorDrawable导入Android Studio, 然后给每一个path起名字.&lt;br&gt;本文只是part 1, 预告了下一篇文章将讲如何动画.&lt;br&gt;Source code available here: &lt;a href=&quot;https://github.com/StylingAndroid/IsometricAnimatedVector/tree/Part1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IsometricAnimatedVector&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Design&quot;&gt;&lt;a href=&quot;#Design&quot; class=&quot;headerlink&quot; title=&quot;Design&quot;&gt;&lt;/a&gt;Design&lt;/h2&gt;&lt;h3 id=&quot;Don’t-just-port-an-iOS-navigation-model-to-Android&quot;&gt;&lt;a href=&quot;#Don’t-just-port-an-iOS-navigation-model-to-Android&quot; class=&quot;headerlink&quot; title=&quot;Don’t just port an iOS navigation model to Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.androidpolice.com/2016/08/13/opinion-bottom-navigation-material-guidelines-platform-awareness/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Don’t just port an iOS navigation model to Android&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;关于bottom nav bars的讨论.&lt;br&gt;Hamburger menu有时候感觉不是很理想, 是因为抽屉里的items总是隐藏状态, 用户不易发现和使用.&lt;br&gt;Bottom bar则把每一个item都时刻展现给用户, 在iOS上使用得很成功.&lt;br&gt;Google在2016年3月提供了Guides: &lt;a href=&quot;https://material.google.com/components/bottom-navigation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom navigation&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么时候该用bottom navigation呢?&lt;br&gt;应用有3到5个top级别的目的地, 且它们需要直接被访问, 从各个目的地之间转换, 并且它们应该是具有同等重要性的.&lt;/li&gt;
&lt;li&gt;什么时候bottom navigation不适用呢?&lt;br&gt;不能因为怕用户看不见一个东东, 就把它放在bottom nav bar, 作为推广手段.&lt;br&gt;bottom nav bar也不是用来放menu的, 比如放不下了加个more tab, 展开以后是更多的二级页面入口; 也不要用来放一些弹出窗口, 它们同样也不是top level的目的地.&lt;br&gt;bottom nav bar不能放低级别的目的地.&lt;br&gt;最后文章强调了每个平台应该遵从自己的特性, 对Android来说, 如果完全拷贝iOS的设计可能不是一个好主意.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h2&gt;&lt;h3 id=&quot;stag-java&quot;&gt;&lt;a href=&quot;#stag-java&quot; class=&quot;headerlink&quot; title=&quot;stag-java&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/vimeo/stag-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stag-java&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Stag通过减少反射改善了Gson的性能, 为你的model对象自动生成TypeAdapters.&lt;/p&gt;
&lt;h3 id=&quot;Router&quot;&gt;&lt;a href=&quot;#Router&quot; class=&quot;headerlink&quot; title=&quot;Router&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/eyeem/router&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Router&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个基于routable-android的新的Android URL router, 摒弃了Activity/Intent依赖, 并加入了新的特性.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-218&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-218&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #218&quot;&gt;&lt;/a&gt;Android Weekly Issue #218&lt;/h1&gt;&lt;p&gt;August 14th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-218&quot;&gt;http://androidweekly.net/issues/issue-218&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout使用</title>
    <link href="http://mengdd.github.io/Android/Design-Support-Library/2016/07/04/design-support-library-AppBarLayout/"/>
    <id>http://mengdd.github.io/Android/Design-Support-Library/2016/07/04/design-support-library-AppBarLayout/</id>
    <published>2016-07-04T08:41:11.000Z</published>
    <updated>2016-08-11T02:33:13.000Z</updated>
    
    <content type="html">&lt;p&gt;本文介绍Design Support Library中CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;br&gt;先列出了Design Support Library中的Features, 然后如何set up, 最后附有Demo程序, 介绍CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Design-Support-Library-Features&quot;&gt;&lt;a href=&quot;#Design-Support-Library-Features&quot; class=&quot;headerlink&quot; title=&quot;Design Support Library Features&quot;&gt;&lt;/a&gt;Design Support Library Features&lt;/h2&gt;&lt;p&gt;Design Support Library中有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Floating-Action-Buttons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FloatingActionButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Google-Play-Style-Tabs-using-TabLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TabLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Fragment-Navigation-Drawer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NavigationView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Displaying-the-Snackbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnackBar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Working-with-the-EditText#displaying-floating-label-feedback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextInputLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoordinatorLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppBarLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CollapsingToolbarLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout#bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom Sheets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Constructing-View-Layouts#percentrelativelayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PercentRelativeLayout&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/reference/android/support/percent/PercentFrameLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PercentFrameLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Drawables#vector-drawables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vector Drawables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Design-Support-Library-Setup&quot;&gt;&lt;a href=&quot;#Design-Support-Library-Setup&quot; class=&quot;headerlink&quot; title=&quot;Design Support Library Setup&quot;&gt;&lt;/a&gt;Design Support Library Setup&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   compileSdkVersion 23  // needs to be consistent with major support libs used&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  supportLibVersion = &amp;apos;23.4.0&amp;apos;  // variable that can be referenced to keep support libs consistent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:appcompat-v7:$&amp;#123;supportLibVersion&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:design:$&amp;#123;supportLibVersion&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;CoordinatorLayout-AppBarLayout使用&quot;&gt;&lt;a href=&quot;#CoordinatorLayout-AppBarLayout使用&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout, AppBarLayout使用&quot;&gt;&lt;/a&gt;CoordinatorLayout, AppBarLayout使用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoordinatorLayout&lt;/a&gt;&lt;br&gt;实际上是一个更强大的FrameLayout, 可以通过&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Behavior&lt;/a&gt; 来控制其中各个child view的交互行为. 也可以指定anchor来指定floating view相对于其他某个View的位置. 比如Floating Action Button在显示Snackbar的时候自动向上移动.&lt;/p&gt;
&lt;p&gt;为了使Toolbar响应滚动事件, 我们需要给它外边包一个&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppBarLayout&lt;/a&gt;.&lt;br&gt;它是一个纵向的LinearLayout, 必须要作为CoordinateLayout的直接child使用.&lt;br&gt;然后, 我们需要定义AppBarLayout和我们scroll的内容View的关系.&lt;br&gt;这里可以是一个RecyclerView, 或者其他支持嵌套scrolling的view, 比如&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/widget/NestedScrollView.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NestedScrollView&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(实际上View类就有方法setNestedScrollingEnabled(), 但是还是需要View自己实现nested scrolling的功能, 否则这个开关也没有效果.)&lt;/p&gt;
&lt;p&gt;support library提供了&lt;code&gt;@string/appbar_scrolling_view_behavior&lt;/code&gt;, 它映射到&lt;code&gt;AppBarLayout.ScrollingViewBehavior&lt;/code&gt;.&lt;br&gt;它是用来告诉AppBarLayout下面那个scroll view上的scroll事件什么时候发生.&lt;br&gt;所以这个属性必须在触发事件的view上指定, 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.RecyclerView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/rvToDoList&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:layout_behavior&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/appbar_scrolling_view_behavior&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当CoordinatorLayout看到自己的child(比如RecyclerView)声明了这个属性, 就会在自己的其他child中寻找相关的view(AppBarLayout).&lt;br&gt;这样, 当RecyclerView发生scroll事件的时候, AppBarLayout和其中的views都会被通知到.&lt;/p&gt;
&lt;p&gt;滚动事件怎么通知到AppBarLayout的呢? 还需要一个属性: &lt;code&gt;app:layout_scrollFlags&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|enterAlways&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;app:layout_scrollFlags&lt;/code&gt;属性中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scroll&lt;/code&gt;必须有, 这样scroll的任何效果才能生效.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enterAlways&lt;/code&gt;: 表示只要列表上方内容滚动出现, View就应该出现. 适用的情形: 当把列表滚到底部时, Toolbar被隐藏了, 一旦回滚一点儿, Toolbar就应该立即出现. 如果不设置这个flag, 默认的行为是一直要把列表滚到顶部, Toolbar才会出现.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enterAlwaysCollapsed&lt;/code&gt;: 正常情况下, 如果只有&lt;code&gt;enterAlways&lt;/code&gt;被指定, 在列表向下滚动的过程中Toolbar将会一直展开.&lt;br&gt;如果同时指定了&lt;code&gt;enterAlwaysCollapsed&lt;/code&gt;和&lt;code&gt;minHeight&lt;/code&gt;, 那么开始滚动以后, 只滚动到minHeight为止, 直到滚动到达列表顶部的时候, view才会展开到全部高度.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exitUntilCollapsed&lt;/code&gt;: 正常只指定scroll的情况下, scrolling down(即显示列表底部)将会使得整个Toolbar移动到不见.&lt;br&gt;如果同时指定了&lt;code&gt;exitUntilCollapsed&lt;/code&gt;和&lt;code&gt;minHeight&lt;/code&gt;, 那么将会收缩到minHeight为止, Toolbar不会一直滚动和退出屏幕.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snap&lt;/code&gt;: 使用了这个属性, 等scroll事件结束的时候, View可见的尺寸小于它的50%, 则它会直接消失, 如果大于50%, 则它会完整地出现.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以用&lt;code&gt;app:layout_scrollInterpolator&lt;/code&gt;属性指定滚动动画效果的插值器.&lt;/p&gt;
&lt;h3 id=&quot;折叠效果&quot;&gt;&lt;a href=&quot;#折叠效果&quot; class=&quot;headerlink&quot; title=&quot;折叠效果&quot;&gt;&lt;/a&gt;折叠效果&lt;/h3&gt;&lt;p&gt;如果想要折叠Toolbar的效果, 可以在Toolbar外面包一层&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CollapsingToolbarLayout&lt;/a&gt;&lt;br&gt;这个类必须作为AppBarLayout的直接child使用.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:contentScrim&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginEnd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;64dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginStart&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;48dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|exitUntilCollapsed&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|enterAlways&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;包了这个类之后, setTitle要调用这个类的方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;collapsingToolbar.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Title&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景图平行淡出&quot;&gt;&lt;a href=&quot;#背景图平行淡出&quot; class=&quot;headerlink&quot; title=&quot;背景图平行淡出&quot;&gt;&lt;/a&gt;背景图平行淡出&lt;/h3&gt;&lt;p&gt;这个类使得我们可以做更高级的动画效果, 比如放一个ImageView, 它在折叠的时候淡出.&lt;br&gt;这时候需要把ImageView的&lt;code&gt;app:layout_collapseMode&lt;/code&gt;属性置为&lt;code&gt;parallax&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/appbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;200dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:contentScrim&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginEnd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;64dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginStart&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;48dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|exitUntilCollapsed&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:layout_scrollInterpolator&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@anim/hero_image_interpolator&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ImageView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/logo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:contentDescription&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@null&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:scaleType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fitCenter&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/android_logo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_collapseMode&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parallax&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_collapseParallaxMultiplier&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0.1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_collapseMode&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:popupTheme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Light&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h2&gt;&lt;p&gt;这里推荐Demo: &lt;a href=&quot;https://github.com/mengdd/AndroidDesignWidgetsSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDesignWidgetsSample&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/images/AndroidDesignWidgetsSample-screen-video.gif&quot; alt=&quot;Android Design Widgets Sample screen video&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling Scrolls with CoordinatorLayout&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://material.google.com/patterns/scrolling-techniques.html#scrolling-techniques-behavior&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design: scrolling techniques&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Design-Support-Library#official-source-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Support Library&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://saulmm.github.io/mastering-coordinator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering the Coordinator Layout&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Design Support Library中CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;br&gt;先列出了Design Support Library中的Features, 然后如何set up, 最后附有Demo程序, 介绍CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Design Support Library" scheme="http://mengdd.github.io/categories/Android/Design-Support-Library/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Toolbar" scheme="http://mengdd.github.io/tags/Toolbar/"/>
    
      <category term="Design Support Library" scheme="http://mengdd.github.io/tags/Design-Support-Library/"/>
    
      <category term="AppBarLayout" scheme="http://mengdd.github.io/tags/AppBarLayout/"/>
    
  </entry>
  
  <entry>
    <title>Using Dagger2 in Android</title>
    <link href="http://mengdd.github.io/Android/2016/06/24/using-dagger2-in-android/"/>
    <id>http://mengdd.github.io/Android/2016/06/24/using-dagger2-in-android/</id>
    <published>2016-06-24T05:22:44.000Z</published>
    <updated>2016-06-24T08:16:47.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2&lt;/a&gt;是一个Java和Android的依赖注入框架.&lt;br&gt;本文介绍Android中dagger2的基本使用.&lt;br&gt;其中包括&lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Module&lt;/code&gt;和&lt;code&gt;@Provides&lt;/code&gt;注解的使用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;使用依赖注入的好处&quot;&gt;&lt;a href=&quot;#使用依赖注入的好处&quot; class=&quot;headerlink&quot; title=&quot;使用依赖注入的好处&quot;&gt;&lt;/a&gt;使用依赖注入的好处&lt;/h1&gt;&lt;p&gt;1.使用类和被依赖的对象构造分开,这样如果我们需要改变被依赖类的构造方法,不必改动每一个使用类.&lt;br&gt;2.对各种被依赖类的实例,可以只构造一次.&lt;br&gt;3.当我们需要更换一种实现时,只需要保证接口一致.&lt;br&gt;4.利于单元测试,我们可以方便地mock依赖类的对象.&lt;/p&gt;
&lt;p&gt;优点总结: 创建对象和使用对象分离, 模块化增强.&lt;/p&gt;
&lt;h1 id=&quot;Dagger2的使用&quot;&gt;&lt;a href=&quot;#Dagger2的使用&quot; class=&quot;headerlink&quot; title=&quot;Dagger2的使用&quot;&gt;&lt;/a&gt;Dagger2的使用&lt;/h1&gt;&lt;h2 id=&quot;Set-Up&quot;&gt;&lt;a href=&quot;#Set-Up&quot; class=&quot;headerlink&quot; title=&quot;Set Up&quot;&gt;&lt;/a&gt;Set Up&lt;/h2&gt;&lt;p&gt;在项目的&lt;strong&gt;build.gradle&lt;/strong&gt;里加这个:&lt;br&gt;classpath ‘com.neenbedankt.gradle.plugins:android-apt:1.8’&lt;/p&gt;
&lt;p&gt;然后&lt;strong&gt;app的build.gradle&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.application&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.neenbedankt.android-apt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compileSdkVersion 24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildToolsVersion &amp;quot;24.0.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        applicationId &amp;quot;com.ddmeng.dagger2sample&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        minSdkVersion 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        targetSdkVersion 24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        versionCode 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        versionName &amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile fileTree(dir: &amp;apos;libs&amp;apos;, include: [&amp;apos;*.jar&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &amp;apos;junit:junit:4.12&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.android.support:appcompat-v7:24.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;javax.annotation:jsr250-api:1.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.google.dagger:dagger:2.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &amp;apos;com.google.dagger:dagger-compiler:2.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;常用注解&quot;&gt;&lt;a href=&quot;#常用注解&quot; class=&quot;headerlink&quot; title=&quot;常用注解&quot;&gt;&lt;/a&gt;常用注解&lt;/h2&gt;&lt;p&gt;最常使用的主要是以下这几个注解:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/api/latest/dagger/Component.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Component&lt;/a&gt;&lt;br&gt;Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of modules(). The generated class will have the name of the type annotated with @Component prepended with Dagger. For example, @Component interface MyComponent {…} will produce an implementation named DaggerMyComponent.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/api/latest/dagger/Module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Module&lt;/a&gt;&lt;br&gt;Annotates a class that contributes to the object graph.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Inject&lt;/a&gt;&lt;br&gt;Dagger constructs instances of your application classes and satisfies their dependencies. It uses the javax.inject.Inject annotation to identify which constructors and fields it is interested in.&lt;/p&gt;
&lt;p&gt;Use @Inject to annotate the constructor that Dagger should use to create instances of a class. When a new instance is requested, Dagger will obtain the required parameters values and invoke this constructor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/api/latest/dagger/Provides.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Provides&lt;/a&gt;&lt;br&gt;Annotates methods of a module to create a provider method binding. The method’s return type is bound to its returned value. The component implementation will pass dependencies to the method as parameters.&lt;/p&gt;
&lt;h2 id=&quot;Dagger2基本使用&quot;&gt;&lt;a href=&quot;#Dagger2基本使用&quot; class=&quot;headerlink&quot; title=&quot;Dagger2基本使用&quot;&gt;&lt;/a&gt;Dagger2基本使用&lt;/h2&gt;&lt;h3 id=&quot;最简单的一个实例&quot;&gt;&lt;a href=&quot;#最简单的一个实例&quot; class=&quot;headerlink&quot; title=&quot;最简单的一个实例&quot;&gt;&lt;/a&gt;最简单的一个实例&lt;/h3&gt;&lt;p&gt;首先写一个Component&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;(modules = MyApplicationModule.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// this should be an interface or abstract class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// write like this, and Make Project, then a DaggerMyApplicationComponent class will be generated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时里面的Module内容可以暂时为空:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写好后make一下,就生成了&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.ddmeng.dagger2sample.component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.ddmeng.dagger2sample.&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;.MyApplicationModule;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dagger.internal.Preconditions;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; javax.annotation.Generated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Generated&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value = &lt;span class=&quot;string&quot;&gt;&quot;dagger.internal.codegen.ComponentProcessor&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  comments = &lt;span class=&quot;string&quot;&gt;&quot;https://google.github.io/dagger&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaggerMyApplicationComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaggerMyApplicationComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Builder builder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; builder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; MyApplicationComponent &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MyApplicationComponent &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DaggerMyApplicationComponent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@deprecated&lt;/span&gt; This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Deprecated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;myApplicationModule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MyApplicationModule myApplicationModule)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Preconditions.checkNotNull(myApplicationModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要切换到project视图下才能看见.&lt;br&gt;生成的这个实现,名字是在我们自己的Component名前面加了Dagger.&lt;br&gt;如果我们的类名不是顶级的,即还有外部类,则会以下划线分隔连接.&lt;/p&gt;
&lt;p&gt;现在我们的生成的myApplicationModule()方法被标记为&lt;code&gt;@Deprecated&lt;/code&gt;,这是因为我的module里面什么都还没有呢,所以被认为是没有必要的.&lt;/p&gt;
&lt;p&gt;现在我们添加一个要用的LogUtils类. 想要在MainActivity里面用.&lt;br&gt;写好LogUtils类,在构造函数上标记&lt;code&gt;@Inject&lt;/code&gt;. 这时候就将LogUtils加入了dependency graph中, 相当于作为预备队员.&lt;/p&gt;
&lt;p&gt;想要在MainActivity作为一个字段用,&lt;br&gt;在Component里面写一句:&lt;br&gt;&lt;code&gt;void inject(MainActivity activity);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为此时还是没有用到Module,所以在application里面可以直接build,保存component:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleApplication&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Application&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; MyApplicationComponent component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        component = DaggerMyApplicationComponent.builder().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MyApplicationComponent &lt;span class=&quot;title&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在MainActivity使用的时候, 先get到Component, 然后调用inject()方法, 字段就被注入了.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LogUtils logUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ((SampleApplication) getApplication()).getComponent().inject(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;tag&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hi, I&#39;m an instance of LogUtils&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行程序后可以看到打出log,证明注入成功.&lt;/p&gt;
&lt;p&gt;此时我们看到生成的代码有三个类:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaggerMyApplicationComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; LogUtils_Factory implements Factory&amp;lt;LogUtils&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity_MembersInjector&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MembersInjector&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过查看调用栈来看调用关系.&lt;/p&gt;
&lt;h3 id=&quot;单例-Singleton&quot;&gt;&lt;a href=&quot;#单例-Singleton&quot; class=&quot;headerlink&quot; title=&quot;单例@Singleton&quot;&gt;&lt;/a&gt;单例&lt;code&gt;@Singleton&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;如果我们想让工具类是单例,只需要在上面的基础上,在类名前加上&lt;code&gt;@Singleton&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;此时对应的Component也需要加上&lt;code&gt;@Singleton&lt;/code&gt;.否则编译会不通过.&lt;br&gt;加好之后,可以打印hashCode()看出, 标记了&lt;code&gt;@Singleton&lt;/code&gt;的这个对象,不论被注入几次,都是同一个对象.&lt;/p&gt;
&lt;p&gt;在我们的例子中, 可以让FileUtils作为一个单例被注入:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileUtils&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(LogUtils.TAG, &lt;span class=&quot;string&quot;&gt;&quot;new FileUtils: &quot;&lt;/span&gt; + hashCode());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(LogUtils.TAG, &lt;span class=&quot;string&quot;&gt;&quot;do sth with FileUtils &quot;&lt;/span&gt; + hashCode());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看生成的代码,可以看见&lt;code&gt;DaggerMyApplicationComponent&lt;/code&gt;为单例的类多保存了一个字段:&lt;br&gt;&lt;code&gt;private Provider&amp;lt;FileUtils&amp;gt; fileUtilsProvider;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它在init的时候被初始化为:&lt;br&gt;&lt;code&gt;this.fileUtilsProvider = ScopedProvider.create(FileUtils_Factory.create());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;包了一层之后,在ScopeProvider里实现了单例:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// double-check idiom from EJ2: Item 71&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Object result = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == UNINITIALIZED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      result = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == UNINITIALIZED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        instance = result = factory.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (T) result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Module-和-Provides的使用&quot;&gt;&lt;a href=&quot;#Module-和-Provides的使用&quot; class=&quot;headerlink&quot; title=&quot;@Module 和 @Provides的使用&quot;&gt;&lt;/a&gt;&lt;code&gt;@Module&lt;/code&gt; 和 &lt;code&gt;@Provides&lt;/code&gt;的使用&lt;/h3&gt;&lt;p&gt;上面的注入都是用&lt;code&gt;@Inject&lt;/code&gt;, 在构造函数和要使用的字段上标记.&lt;br&gt;有些情况下&lt;code&gt;@Inject&lt;/code&gt;是不能满足需求的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But @Inject doesn’t work everywhere&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interfaces can’t be constructed. 接口类型不能直接被构造.&lt;/li&gt;
&lt;li&gt;Third-party classes can’t be annotated. 第三方的类不能改动它的代码.&lt;/li&gt;
&lt;li&gt;Configurable objects must be configured! 需要配置的对象需要被配置.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些情况下, &lt;code&gt;@Inject&lt;/code&gt;不够用啦, 这时候就要用&lt;code&gt;@Provides&lt;/code&gt;标记的方法.&lt;br&gt;方法的返回值返回了它满足的依赖, 它实际返回的对象可以是返回值接口的实现,或者是返回值类型的子类.&lt;br&gt;&lt;code&gt;@Provides&lt;/code&gt;方法也可以有依赖, 即它的参数.&lt;br&gt;Dagger会注入它的参数值, 如果它的参数值不能被注入, 则编译会失败.&lt;br&gt;注意这个寻找参数注入的过程是在&lt;code&gt;@Component&lt;/code&gt;级别的, 只要这个Component里面有这个参数类型的注入, 即便可能是在另一个Module, 就会自动采用.&lt;/p&gt;
&lt;p&gt;所有的&lt;code&gt;@Provides&lt;/code&gt;方法都需要放在&lt;code&gt;@Module&lt;/code&gt;里面.&lt;br&gt;按照命名习惯(By convention), 一般&lt;code&gt;@Provides&lt;/code&gt;标记的方法都有一个provide前缀, 而module类都有一个Module后缀.&lt;br&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Context context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationModule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.context = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Context &lt;span class=&quot;title&quot;&gt;providesContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Inject interface, return implementation class instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpUtil &lt;span class=&quot;title&quot;&gt;provideHttpUtil&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(LogUtils.TAG, &lt;span class=&quot;string&quot;&gt;&quot;provideHttpUtil&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyHttpUtil();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Inject class from third-party, or Android framework service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This provide method need a parameter, Dagger will obtain the parameter value (injected it)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If the parameter is not injectable, then compilation failed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ConnectivityManager &lt;span class=&quot;title&quot;&gt;provideConnectivityManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Dagger2中几种常用注解总结&quot;&gt;&lt;a href=&quot;#Dagger2中几种常用注解总结&quot; class=&quot;headerlink&quot; title=&quot;Dagger2中几种常用注解总结&quot;&gt;&lt;/a&gt;Dagger2中几种常用注解总结&lt;/h1&gt;&lt;h3 id=&quot;Inject&quot;&gt;&lt;a href=&quot;#Inject&quot; class=&quot;headerlink&quot; title=&quot;@Inject&quot;&gt;&lt;/a&gt;&lt;code&gt;@Inject&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Inject&lt;/code&gt;的用法分为三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数上的&lt;code&gt;@Inject&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果构造函数是有参数的, 则它的所有参数都会自动从dependency graph中找到并注入.&lt;br&gt;同时构造的这个类也被作为dependency graph的一部分.&lt;br&gt;但是我们在一个类中最多只能用@Inject标记一个构造方法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段上的&lt;code&gt;@Inject&lt;/code&gt;: 从dependency graph中找到并注入字段.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里需要手动调用&lt;br&gt;&lt;code&gt;(SampleApplication) getApplication()).getComponent().inject(this);&lt;/code&gt;&lt;br&gt;类似的方法, 在这个方法被调用之前, 字段都是null.&lt;br&gt;注意这里的字段不能是private的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public方法上的&lt;code&gt;@Inject&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有方法的参数都会由dependency graph提供.&lt;br&gt;方法注入在构造函数&lt;em&gt;之后&lt;/em&gt;立即调用, 意味着我们可以用一个构建好的this对象.&lt;/p&gt;
&lt;h3 id=&quot;Module-和-Provides&quot;&gt;&lt;a href=&quot;#Module-和-Provides&quot; class=&quot;headerlink&quot; title=&quot;@Module 和 @Provides&quot;&gt;&lt;/a&gt;&lt;code&gt;@Module&lt;/code&gt; 和 &lt;code&gt;@Provides&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Module&lt;/code&gt;标记了提供依赖的类, 其中包含了一些&lt;code&gt;@Provides&lt;/code&gt;标注的方法, 返回值即依赖.&lt;/p&gt;
&lt;h3 id=&quot;Component&quot;&gt;&lt;a href=&quot;#Component&quot; class=&quot;headerlink&quot; title=&quot;@Component&quot;&gt;&lt;/a&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;@Component&lt;/code&gt;标记的接口负责将所有的事情联系起来, 可以看做是&lt;code&gt;@Module&lt;/code&gt;和&lt;code&gt;@Inject&lt;/code&gt;之间的桥梁.&lt;br&gt;我们可以定义我们用的依赖来自哪些Module或者Component.&lt;/p&gt;
&lt;p&gt;在Component里可以定义哪些依赖是公有的 (提供返回值为某种依赖的无参数方法) , 也可以定义我们的component可以去哪里inject对象 (void inject()方法, 参数是去注入的地方) .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;可以有自己的子Component, 也可以有lifecycle.&lt;/p&gt;
&lt;p&gt;先就这么多吧, 更多更高级的使用可以期待下文, 也可以参见后面的参考资料.&lt;/p&gt;
&lt;p&gt;本文地址: &lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5613889.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Dagger2 in Android&lt;/a&gt;&lt;br&gt;本文Demo: &lt;a href=&quot;https://github.com/mengdd/dagger2-sample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2-sample&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2 repo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2 website&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://google.github.io/dagger/users-guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1fwg-NsMKYtYxeEWe82rISIHjNrtdqonfiHgp8-PQ7m8/edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger 2.0文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger 2的sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有些guides:&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Dependency-Injection-with-Dagger-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Path Guides: DI with dagger2&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.me0ieiaph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一系列关于Dagger2的文章还挺好的:&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Froger_mcs dev blog&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dagger-1-to-2-migration/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger 1 to dagger 2 migration&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-introdution-to-di/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to DI&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-the-api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2 API&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://medium.com/@froger_mcs/inject-everything-viewholder-and-dagger-2-e1551a76a908#.e3zxrynq4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inject everything - ViewHolder and Dagger2 (with Multibinding and AutoFactory example)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Custom Scope&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者的例子:&lt;br&gt;&lt;a href=&quot;https://github.com/frogermcs/GithubClient&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Client&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger&quot;&gt;Dagger2&lt;/a&gt;是一个Java和Android的依赖注入框架.&lt;br&gt;本文介绍Android中dagger2的基本使用.&lt;br&gt;其中包括&lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Module&lt;/code&gt;和&lt;code&gt;@Provides&lt;/code&gt;注解的使用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(四) Toolbar使用及Fragment中的Toolbar处理</title>
    <link href="http://mengdd.github.io/Android/2016/06/16/android-fragment-usage-4-toolbar/"/>
    <id>http://mengdd.github.io/Android/2016/06/16/android-fragment-usage-4-toolbar/</id>
    <published>2016-06-16T04:15:26.000Z</published>
    <updated>2016-06-16T04:52:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;a href=&quot;#Toolbar作为ActionBar使用介绍&quot; class=&quot;headerlink&quot; title=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;/a&gt;Toolbar作为ActionBar使用介绍&lt;/h1&gt;&lt;p&gt;本文介绍了在Android中将Toolbar作为ActionBar使用的方法.&lt;br&gt;并且介绍了在Fragment和嵌套Fragment中使用Toolbar作为ActionBar使用时需要注意的事项.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用support-library的Toolbar&quot;&gt;&lt;a href=&quot;#使用support-library的Toolbar&quot; class=&quot;headerlink&quot; title=&quot;使用support library的Toolbar&quot;&gt;&lt;/a&gt;使用support library的Toolbar&lt;/h2&gt;&lt;p&gt;Android的ActionBar每个版本都会做一些改变, 所以原生的ActionBar在不同的系统上看起来可能会不一样.&lt;br&gt;使用support library版本的&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toolbar&lt;/a&gt;可以让你的应用在多种设备类型上保持一致. support library中总是包含了最新的features.&lt;br&gt;Android从5.0 (API Level 21)开始提供&lt;a href=&quot;https://developer.android.com/design/material/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design&lt;/a&gt;, 使用v7版本的Toolbar后, 在任何Android 2.1(API Level 7)以上的机器上都可以看到Material Design风格的Toolbar.&lt;/p&gt;
&lt;h2 id=&quot;在Activity中使用Toolbar&quot;&gt;&lt;a href=&quot;#在Activity中使用Toolbar&quot; class=&quot;headerlink&quot; title=&quot;在Activity中使用Toolbar&quot;&gt;&lt;/a&gt;在Activity中使用Toolbar&lt;/h2&gt;&lt;p&gt;1.首先项目gradle中添加:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;com.android.support:appcompat-v7:23.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.确保Activity继承&lt;code&gt;AppCompatActivity&lt;/code&gt;&lt;br&gt;3.在application设置中使用NoActionBar的主题:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.把Toolbar写在布局中&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/my_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:elevation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;4dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;app:popupTheme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Light&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.在Activity里面把Toolbar设置成为ActionBar&lt;br&gt;首先把Toolbar find出来, 然后调用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#setSupportActionBar(android.support.v7.widget.Toolbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setSupportActionBar方法&lt;/a&gt;)&lt;br&gt;把Toolbar设置为自己的ActionBar即可.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToolbarDemoActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.toolbar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Toolbar toolbar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_toolbar_demo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以随意使用啦, 用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#getSupportActionBar(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getSupportActionBar&lt;/a&gt;)可以获取ActionBar类型的对象, 从而使用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/ActionBar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActionBar&lt;/a&gt;的方法.&lt;/p&gt;
&lt;h3 id=&quot;添加Action-Buttons&quot;&gt;&lt;a href=&quot;#添加Action-Buttons&quot; class=&quot;headerlink&quot; title=&quot;添加Action Buttons&quot;&gt;&lt;/a&gt;添加Action Buttons&lt;/h3&gt;&lt;p&gt;定义menu:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:app&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/action_android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_android_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/action_android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:showAsAction&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;always&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/action_favourite&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_favorite_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/action_favourite&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:showAsAction&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ifRoom&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/action_settings&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/action_settings&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:showAsAction&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;never&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在代码中inflate和处理它的点击事件:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCreateOptionsMenu()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getMenuInflater().inflate(R.menu.menu_activity_main, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreateOptionsMenu(menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onOptionsItemSelected&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MenuItem item)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (item.getItemId()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; R.id.action_android:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;action android selected&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; R.id.action_favourite:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;action favourite selected&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; R.id.action_settings:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;action settings selected&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onOptionsItemSelected(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加向上返回的action&quot;&gt;&lt;a href=&quot;#添加向上返回的action&quot; class=&quot;headerlink&quot; title=&quot;添加向上返回的action&quot;&gt;&lt;/a&gt;添加向上返回的action&lt;/h3&gt;&lt;p&gt;添加向上返回parent的action:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.activity_toolbar_demo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// add a left arrow to back to parent activity,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// no need to handle action selected event, this is handled by super&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getSupportActionBar().setDisplayHomeAsUpEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只需要在manifest中指定parent:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.toolbar.ToolbarDemoActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:parentActivityName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Fragment中使用Toolbar&quot;&gt;&lt;a href=&quot;#在Fragment中使用Toolbar&quot; class=&quot;headerlink&quot; title=&quot;在Fragment中使用Toolbar&quot;&gt;&lt;/a&gt;在Fragment中使用Toolbar&lt;/h2&gt;&lt;p&gt;在Fragment中使用Toolbar的步骤和Activity差不多.&lt;br&gt;在Fragment布局中添加一个Toolbar, 然后find它, 然后调用Activity的方法来把它设置成ActionBar:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意此处有一个强转, 必须是AppCompatActivity才有这个方法.&lt;br&gt;但是此时运行到Fragment之后, 发现Toolbar上的文字和按钮全是Activity传过来的, 这是因为只有Activity的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;被调用了, 但是Fragment的并没有被调用.&lt;br&gt;在Fragment中加上这句:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setHasOptionsMenu(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时Fragment的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;回调会被调到了, 但是inflate出的按钮和Activity中的actions加在一起显示出来了.&lt;br&gt;因为Activity的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;会在之前调用到.&lt;br&gt;于是Fragment中的写成这样:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu, MenuInflater inflater)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCreateOptionsMenu()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    menu.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inflater.inflate(R.menu.menu_parent_fragment, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即先clear()一下, 这样按钮就只有Fragment中设置的自己的了, 不会有Activity中的按钮.&lt;/p&gt;
&lt;h2 id=&quot;在嵌套的子Fragment中使用Toolbar&quot;&gt;&lt;a href=&quot;#在嵌套的子Fragment中使用Toolbar&quot; class=&quot;headerlink&quot; title=&quot;在嵌套的子Fragment中使用Toolbar&quot;&gt;&lt;/a&gt;在嵌套的子Fragment中使用Toolbar&lt;/h2&gt;&lt;p&gt;前面已经介绍过, Fragment可以嵌套使用: &lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5552721.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Fragment使用(二) 嵌套Fragments (Nested Fragments) 的使用及常见错误&lt;/a&gt;.&lt;br&gt;那么在前面的Fragment中再显示一个子Fragment, 并且又带有一个不一样的Toolbar, 还需要哪些处理呢?&lt;br&gt;首先, java代码中还是需要有:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setHasOptionsMenu(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后根据是否需要菜单按钮, 覆写onCreateOptionsMenu()方法来inflate自己的menu文件即可.&lt;br&gt;感觉和在普通的Fragment中使用Toolbar作为ActionBar并没有什么区别.&lt;br&gt;但是如果你的多个Fragment有不同的Toolbar菜单选项, 如果你没有懂得其中的原理, 可能就会出现一些混乱.&lt;br&gt;下面来解说一下相关的方法.&lt;/p&gt;
&lt;h3 id=&quot;onCreateOptionsMenu-方法的调用&quot;&gt;&lt;a href=&quot;#onCreateOptionsMenu-方法的调用&quot; class=&quot;headerlink&quot; title=&quot;onCreateOptionsMenu()方法的调用&quot;&gt;&lt;/a&gt;onCreateOptionsMenu()方法的调用&lt;/h3&gt;&lt;p&gt;一旦调用&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就会导致Activity&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法的调用, 而Activity会根据其中Fragment是否设置了setHasOptionsMenu(true)来调用Fragment的&lt;br&gt;&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法, 调用顺序是树形的, 按层级调用, 中间如果有false则跳过.&lt;/p&gt;
&lt;p&gt;假设当前Activity, Parent Fragment和Child Fragment中都设置了自己的Toolbar为ActionBar.&lt;br&gt;在打开Child fragment的时候, &lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;的调用顺序是.&lt;br&gt;&lt;code&gt;Activity -&amp;gt; Parent -&amp;gt; Child.&lt;/code&gt; 此时parent和child fragment都设置了setHasOptionsMenu(true).&lt;/p&gt;
&lt;p&gt;关于这个, 还有以下几种情况:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 如果Parent的`setHasOptionsMenu(false)`, Child为true, 则Parent的`onCreateOptionsMenu()`不会调用, 打开Child的时候Activity -&amp;gt; Child.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 如果Child的`setHasOptionsMenu(false)`, Parent为true, 则打开Child的时候仍然会调用Activity和Parent的onCreateOptionsMenu()方法.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 如果Parent和Child都置为false, 打开Parent和Child Fragment的时候都会调用Activity的onCreateOptionsMenu()方法.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仅仅是child Fragment的show() hide()的切换, activity和parent Fragment的onCreateOptionsMenu()也会重新进入.&lt;/strong&gt;&lt;br&gt;这一点我还没有想明白, 是项目中遇到的, 初步推测可能是menu的显隐变化invalidate了menu, 改天有空再试试.&lt;/p&gt;
&lt;p&gt;上面的机制常常是导致Toolbar上面的按钮混淆错乱的原因.&lt;br&gt;举个例子:&lt;br&gt;如果我们现在Activity和Parent Fragment有不同的Toolbar按钮, 但是Child只有文字, 没有按钮.&lt;br&gt;很显然我们不需要给child写menu文件, 也不需要覆写child里的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法.&lt;br&gt;但是此时不管怎样, parent的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法都会被调用, 这样我们打开child的时候, toolbar上就神奇地出现了parent里的按钮.&lt;br&gt;这种情况如何解决呢?&lt;br&gt;可以在parent中加一个条件, 当没有child fragment的时候才做inflate的工作:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu, MenuInflater inflater)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCreateOptionsMenu()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    menu.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getChildFragmentManager().getBackStackEntryCount() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inflater.inflate(R.menu.menu_parent_fragment, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外, 除了&lt;code&gt;setSupportActionBar()&lt;/code&gt;之外, 如果我们想&lt;strong&gt;主动触发&lt;/strong&gt; &lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法的调用, 可以用&lt;br&gt;&lt;code&gt;invalidateOptionsMenu()&lt;/code&gt;方法.&lt;/p&gt;
&lt;h3 id=&quot;onOptionsItemSelected-方法的调用&quot;&gt;&lt;a href=&quot;#onOptionsItemSelected-方法的调用&quot; class=&quot;headerlink&quot; title=&quot;onOptionsItemSelected()方法的调用&quot;&gt;&lt;/a&gt;onOptionsItemSelected()方法的调用&lt;/h3&gt;&lt;p&gt;在Activity和其中的Fragment都有options menu的时候, 需要注意menu item的id不要重复.&lt;br&gt;以为点击事件的分发也是从Activity开始分发下去的, 如果child fragment中有个选项的id和Activity中一个选项的id重复了, 则在Activity中就会将其处理, 不会继续分发.&lt;/p&gt;
&lt;h3 id=&quot;有嵌套Fragment时-Back键处理&quot;&gt;&lt;a href=&quot;#有嵌套Fragment时-Back键处理&quot; class=&quot;headerlink&quot; title=&quot;有嵌套Fragment时 Back键处理&quot;&gt;&lt;/a&gt;有嵌套Fragment时 Back键处理&lt;/h3&gt;&lt;p&gt;之前没有嵌套Fragment的情况下, 只要将Fragment加入到Back Stack中, 那么按下Back键的时候pop动作是系统自动做好的.&lt;br&gt;虽然在添加child fragment的时候将其加入到back stack中, 但是按back键的时候仍然是将parent fragment弹出, 只剩下Activity.&lt;br&gt;这是因为back键只检查第一层Fragment的back stack, 对于child fragment, 需要在其parent中自己处理.&lt;br&gt;比如这样处理:&lt;/p&gt;
&lt;p&gt;在Activity中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment fragment = getSupportFragmentManager().findFragmentById(android.R.id.content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragment &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ToolbarFragment) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (((ToolbarFragment) fragment).onBackPressed()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onBackPressed();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中ToolbarFragment是直接加在Activity中作为parent fragment的.&lt;br&gt;在parent fragment中(即ToolbarFragment中):&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getChildFragmentManager().popBackStackImmediate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本文Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo on github&lt;/a&gt;&lt;br&gt;其中的: ToolbarDemoActivity即为Toolbar Demo.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;Developer Android:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/appbar/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Training AppBar&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v7.widget.Toolbar Reference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/ActionBar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v7.app.ActionBar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Creating-and-Using-Fragments#actionbar-menu-items-and-fragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guides: action bar menu items and fragments&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;a href=&quot;#Toolbar作为ActionBar使用介绍&quot; class=&quot;headerlink&quot; title=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;/a&gt;Toolbar作为ActionBar使用介绍&lt;/h1&gt;&lt;p&gt;本文介绍了在Android中将Toolbar作为ActionBar使用的方法.&lt;br&gt;并且介绍了在Fragment和嵌套Fragment中使用Toolbar作为ActionBar使用时需要注意的事项.&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="Nested Fragments" scheme="http://mengdd.github.io/tags/Nested-Fragments/"/>
    
      <category term="Toolbar" scheme="http://mengdd.github.io/tags/Toolbar/"/>
    
      <category term="ActionBar" scheme="http://mengdd.github.io/tags/ActionBar/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(三) Activity, Fragment, WebView的状态保存和恢复</title>
    <link href="http://mengdd.github.io/Android/2016/06/13/android-fragment-usage-3-state-restore/"/>
    <id>http://mengdd.github.io/Android/2016/06/13/android-fragment-usage-3-state-restore/</id>
    <published>2016-06-13T14:26:41.000Z</published>
    <updated>2016-06-13T14:22:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android中的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Android中的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Android中的状态保存和恢复&quot;&gt;&lt;/a&gt;Android中的状态保存和恢复&lt;/h1&gt;&lt;p&gt;Android中的状态保存和恢复, 包括Activity和Fragment以及其中View的状态处理.&lt;br&gt;Activity的状态除了其中的View和Fragment的状态之外, 还需要用户手动保存一些成员变量.&lt;br&gt;Fragment的状态有它自己的实例状态和其中的View状态, 因为其生命周期的灵活性和实际需要的不同, 情况会多一些.&lt;br&gt;根据源码, 列出了Fragment中实例状态和View状态保存和恢复的几个入口, 便于分析查看.&lt;br&gt;最后专门讲了WebView状态保存和恢复, 问题及处理.&lt;br&gt;还有一个工具类icepick的介绍.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Activity的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Activity的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Activity的状态保存和恢复&quot;&gt;&lt;/a&gt;Activity的状态保存和恢复&lt;/h1&gt;&lt;p&gt;作为热身, 先来讲一下Activity的状态保存和恢复.&lt;/p&gt;
&lt;h2 id=&quot;什么时候需要恢复Activity&quot;&gt;&lt;a href=&quot;#什么时候需要恢复Activity&quot; class=&quot;headerlink&quot; title=&quot;什么时候需要恢复Activity&quot;&gt;&lt;/a&gt;什么时候需要恢复Activity&lt;/h2&gt;&lt;p&gt;关于Activity的销毁和重建, 之前有这么一篇博文: &lt;a href=&quot;http://www.cnblogs.com/mengdd/archive/2012/12/17/2822291.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity的重新创建&lt;/a&gt;&lt;br&gt;总结来说, 就是Activity的销毁, 分为彻底销毁和留下数据的销毁两种.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;彻底销毁&lt;/strong&gt;是指用户主动去关闭或退出这个Activity. 此时是不需要状态恢复的, 因为下次回来又是重新创建全新的实例.&lt;br&gt;&lt;strong&gt;留下数据的销毁&lt;/strong&gt;是指系统销毁了activity, 但是当用户返回来时, 会重新创建它, 让用户觉得它一直都在.&lt;/p&gt;
&lt;p&gt;屏幕旋转重建可以归结为第二种情况, 打开Do not keep activities开关, 切换activities也是会出现第二种情况.&lt;br&gt;打开&lt;strong&gt;Do not keep activities&lt;/strong&gt;开关就是为了模拟内存不足时的系统行为, 这里有一篇&lt;a href=&quot;http://www.cnblogs.com/mengdd/p/4528417.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何恢复&quot;&gt;&lt;a href=&quot;#如何恢复&quot; class=&quot;headerlink&quot; title=&quot;如何恢复&quot;&gt;&lt;/a&gt;如何恢复&lt;/h2&gt;&lt;p&gt;实际上系统已经帮我们做好了View层面基本的恢复工作, 主要是依靠下面两个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在onStop()之前调用, 文档中说并不保证在onPause()的之前还是之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我的试验中一般是在onPause()之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在onStart() 之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Bundle其中包含了activity中的view和fragment的各种信息, 所以调用基类的方法就可以完成基本的view层面的恢复工作.&lt;br&gt;&lt;strong&gt;注意这两个方法并不是activity的生命周期回调, 对于activity来说它们不是一定会发生的.&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;另外需要注意的是, View必须要有id才能被恢复.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举一个实例来说明:&lt;br&gt;Activity A start B, 那么A的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;会在onStop()之前调用, 以防A被系统销毁.&lt;br&gt;但是在B中按下back键finish()了自己后, B被销毁的过程中, 并没有调用&lt;code&gt;onSaveInstanceState()&lt;/code&gt;, 是因为B并没有被压入task的back stack中,&lt;br&gt;也即系统知道B并不需要储存自己的状态.&lt;br&gt;正常情况下, 返回到A, A没有被销毁, 也不会调用&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;, 因为所有的状态都还在, 并不需要重建.&lt;/p&gt;
&lt;p&gt;如果我们打开了&lt;strong&gt;Do not keep activities&lt;/strong&gt;开关, 模拟系统内存不足时的行为, 从A到B, 可以看到当B resume的时候A会一路走到onDestroy(),&lt;br&gt;而关掉B之后, A会从onCreate()开始走, 此时onCreate()的参数bundle就不为空了, onStart()之后会调用&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;方法, 其参数bundle中内容类似于如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bundle[&amp;#123;android:viewHierarchyState=Bundle[mParcelledData.dataSize=272]&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中包含了View的状态, 如果有Fragment, 也会包含Fragment的状态, 其实质是保存了FragmentManagerState, 内容类似于如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bundle[&amp;#123;android:viewHierarchyState=Bundle[&amp;#123;android:views=&amp;#123;16908290=android.view.AbsSavedState$1@bc382e7, 2131492950=CompoundButton.SavedState&amp;#123;4034f96 checked=true&amp;#125;, 2131492951=android.view.AbsSavedState$1@bc382e7&amp;#125;&amp;#125;], android:fragments=android.app.FragmentManagerState@bacc717&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于上面的例子来说, B什么时候会调用&lt;code&gt;onSaveInstanceState()&lt;/code&gt;呢?&lt;br&gt;当从A打开B之后, 按下Home键, B就会调用&lt;code&gt;onSaveInstanceState()&lt;/code&gt;.&lt;br&gt;因为这时候系统不知道用户什么时候会返回, 有可能会把B也销毁了, 所以保存一下它的状态.&lt;br&gt;如果下次回来它没有被重建, &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;就不会被调用, 如果它被重建了, &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;才会被调用.&lt;/p&gt;
&lt;h3 id=&quot;Activity保存方法的调用时机&quot;&gt;&lt;a href=&quot;#Activity保存方法的调用时机&quot; class=&quot;headerlink&quot; title=&quot;Activity保存方法的调用时机&quot;&gt;&lt;/a&gt;Activity保存方法的调用时机&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;activity的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;和&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;方法在如下情形下会调用:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;屏幕旋转重建: 先save再restore.&lt;/li&gt;
&lt;li&gt;启动另一个activity: 当前activity在离开前会save, 返回时如果因为被系统杀死需要重建, 则会从onCreate()重新开始生命周期, 调用onRestoreInstanceState(); 如果没有重建, 则不会调用onCreate(), 也不会调用onRestoreInstanceState(), 生命周期从onRestart()开始, 接着onStart()和onResume().&lt;/li&gt;
&lt;li&gt;按Home键的情形和启动另一个activity一样, 当前activity在离开前会save, 用户再次点击应用图标返回时, 如果重建发生, 则会调用onCreate()和onRestoreInstanceState(); 如果activity不需要重建, 只是onRestart(), 则不会调用onRestoreInstanceState().&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Activity恢复方法的调用时机&quot;&gt;&lt;a href=&quot;#Activity恢复方法的调用时机&quot; class=&quot;headerlink&quot; title=&quot;Activity恢复方法的调用时机&quot;&gt;&lt;/a&gt;Activity恢复方法的调用时机&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;activity的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;和&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;方法在如下情形下不会调用:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户主动finish()掉的activity不会调用onSaveInstanceState(), 包括主动按back退出的情况.&lt;/li&gt;
&lt;li&gt;新建的activity, 从onCreate()开始, 不会调用onRestoreInstanceState().&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Activity中还需要手动恢复什么&quot;&gt;&lt;a href=&quot;#Activity中还需要手动恢复什么&quot; class=&quot;headerlink&quot; title=&quot;Activity中还需要手动恢复什么&quot;&gt;&lt;/a&gt;Activity中还需要手动恢复什么&lt;/h2&gt;&lt;p&gt;如上, 系统已经为我们恢复了activity中的各种view和fragment, 那么我们自己需要保存和恢复一些什么呢?&lt;br&gt;答案是&lt;strong&gt;成员变量值&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;因为系统并不知道你的各种成员变量有什么用, 哪些值需要保存, 所以需要你自己覆写上面两个方法, 然后把自己需要保存的值加进bundle里面去. 具体例子, 这里&lt;a href=&quot;http://www.cnblogs.com/mengdd/archive/2012/12/17/2822291.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity的重新创建&lt;/a&gt;有, 我就不重复了.&lt;br&gt;重要的是不要忘记调用super的方法, 那里有系统帮我们恢复的工作.&lt;/p&gt;
&lt;h1 id=&quot;工具类Icepick介绍&quot;&gt;&lt;a href=&quot;#工具类Icepick介绍&quot; class=&quot;headerlink&quot; title=&quot;工具类Icepick介绍&quot;&gt;&lt;/a&gt;工具类Icepick介绍&lt;/h1&gt;&lt;p&gt;在介绍下面的内容之前, 先介绍一个小工具: &lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icepick&lt;/a&gt;&lt;br&gt;这个工具的作用是, 在你想保存和重建自己的成员变量数据时, 帮你省去那些put和get方法的调用, 你也不用为每一个字段起一个常量key.&lt;br&gt;你需要做的就是简单地在你想要保存状态的字段上面加上一个&lt;code&gt;@State&lt;/code&gt; 注解.&lt;br&gt;然后在保存和恢复的时候分别加上一句话:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Icepick.restoreInstanceState(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Icepick.saveInstanceState(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你的成员变量就有了它应该有的值了, DONE!&lt;/p&gt;
&lt;h1 id=&quot;Fragment的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Fragment的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Fragment的状态保存和恢复&quot;&gt;&lt;/a&gt;Fragment的状态保存和恢复&lt;/h1&gt;&lt;p&gt;Fragment的状态比Activity的要复杂一些, 因为它的生命周期状态比较多.&lt;/p&gt;
&lt;h2 id=&quot;Fragment状态保存和恢复的相关方法&quot;&gt;&lt;a href=&quot;#Fragment状态保存和恢复的相关方法&quot; class=&quot;headerlink&quot; title=&quot;Fragment状态保存和恢复的相关方法&quot;&gt;&lt;/a&gt;Fragment状态保存和恢复的相关方法&lt;/h2&gt;&lt;p&gt;按照上面的思路, 我先去查找Fragment中保存和恢复的回调方法了.&lt;br&gt;Fragment的状态保存回调是这个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// may be called any time before onDestroy()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法和之前activity的情况大体是类似的, 它不是生命周期的回调, 所以只在有需要的时候会调到.&lt;br&gt;onSaveInstanceState()在activity调用onSaveInstanceState()的时候发生, 用于保存实例状态.(看它的方法名: instance state).&lt;br&gt;&lt;code&gt;onSaveInstanceState()&lt;/code&gt;方法保存的bundle会返回给几个生命周期回调: &lt;code&gt;onCreate()&lt;/code&gt;, &lt;code&gt;onCreateView()&lt;/code&gt;, &lt;code&gt;onViewCreated()&lt;/code&gt;和&lt;code&gt;onActivityCreated()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fragment并没有对应的onRestoreInstanceState()方法.&lt;br&gt;也即没有实例状态的恢复回调.&lt;/p&gt;
&lt;p&gt;Fragment只有一个onViewStateRestored()的回调方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewStateRestored&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Nullable Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在onActivityCreated()和onStart()之间调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCalled = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;onViewStateRestored()每次新建Fragment都会发生.&lt;br&gt;它并不是实例状态恢复的方法, 只是一个View状态恢复的回调.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里需要注意, Fragment的状态分两个类型: 实例状态和View状态&lt;/strong&gt;.&lt;br&gt;这里有个最佳实践: &lt;a href=&quot;https://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Real Best Practices to Save/Restore Activity’s and Fragment’s state&lt;/a&gt;&lt;br&gt;&lt;strong&gt;不要把Fragment的实例状态和View状态混在一起处理.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这里我先上个结论, 把查看源码中Fragment状态保存和恢复的相关方法列出来:&lt;/p&gt;
&lt;p&gt;Fragment状态保存入口:&lt;br&gt;&lt;img src=&quot;/images/fragment-state-save-entries.png&quot; alt=&quot;Fragment state saving&quot;&gt;&lt;/p&gt;
&lt;p&gt;Fragment的状态保存入口有三个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activity的状态保存, 在Activity的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;里, 调用了FragmentManger的&lt;code&gt;saveAllState()&lt;/code&gt;方法, 其中会对mActive中各个Fragment的实例状态和View状态分别进行保存.&lt;/li&gt;
&lt;li&gt;FragmentManager还提供了public方法: &lt;code&gt;saveFragmentInstanceState()&lt;/code&gt;, 可以对单个Fragment进行状态保存, 这是提供给我们用的, 后面会有例子介绍这个. 其中调用的&lt;code&gt;saveFragmentBasicState()&lt;/code&gt;方法即为情况一中所用, 图中已画出标记.&lt;/li&gt;
&lt;li&gt;FragmentManager的&lt;code&gt;moveToState()&lt;/code&gt;方法中, 当状态回退到&lt;code&gt;ACTIVITY_CREATED&lt;/code&gt;, 会调用&lt;code&gt;saveFragmentViewState()&lt;/code&gt;方法, 保存View的状态.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;moveToState()&lt;/code&gt;方法中有很长的switch case, 中间不带break, 基本是根据新状态和当前状态的比较, 分为正向创建和反向销毁两个方向, 一路沿着多个case走下去.&lt;/p&gt;
&lt;p&gt;Fragment状态恢复入口:&lt;br&gt;&lt;img src=&quot;/images/fragment-state-restore-entries.png&quot; alt=&quot;Fragment state restoring&quot;&gt;&lt;/p&gt;
&lt;p&gt;三个恢复的入口和三个保存的入口刚好对应.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Activity重新创建的时候, 恢复所有的Fragment状态.&lt;/li&gt;
&lt;li&gt;如果调用了FragmentManager的方法: &lt;code&gt;saveFragmentInstanceState()&lt;/code&gt;, 返回值得到的状态可以用Fragment的&lt;code&gt;setInitialSavedState()&lt;/code&gt;方法设置给新的Fragment实例, 作为初始状态.&lt;/li&gt;
&lt;li&gt;FragmentManager的&lt;code&gt;moveToState()&lt;/code&gt;方法中, 当状态正向创建到&lt;code&gt;CREATED&lt;/code&gt;时, Fragment自己会恢复View的状态.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三个入口分别对应的情况是:&lt;br&gt;入口1对应系统销毁和重建新实例.&lt;br&gt;入口2对应用户自定义销毁和创建新Fragment实例的状态传递.&lt;br&gt;入口3对应同一Fragment实例自身的View状态重建.&lt;/p&gt;
&lt;h2 id=&quot;Fragment状态保存恢复和Activity的联系&quot;&gt;&lt;a href=&quot;#Fragment状态保存恢复和Activity的联系&quot; class=&quot;headerlink&quot; title=&quot;Fragment状态保存恢复和Activity的联系&quot;&gt;&lt;/a&gt;Fragment状态保存恢复和Activity的联系&lt;/h2&gt;&lt;p&gt;这里对应的是入口1的情况.&lt;br&gt;当Activity在做状态保存和恢复的时候, 在它其中的fragment自然也需要做状态保存和恢复.&lt;br&gt;所以Fragment的onSaveInstanceState()在activity调用onSaveInstanceState()的时候一定会发生.&lt;br&gt;同样的, 如果Fragment中有一些成员变量的值在此时需要保存, 也可以用@State标记, 处理方法和上面一样.&lt;br&gt;也即, 在Activity需要保存状态的时候, 其中的Fragments的&lt;strong&gt;实例状态&lt;/strong&gt;自动被处理保存.&lt;/p&gt;
&lt;h2 id=&quot;Fragment同一实例的View状态恢复&quot;&gt;&lt;a href=&quot;#Fragment同一实例的View状态恢复&quot; class=&quot;headerlink&quot; title=&quot;Fragment同一实例的View状态恢复&quot;&gt;&lt;/a&gt;Fragment同一实例的View状态恢复&lt;/h2&gt;&lt;p&gt;这里对应的是入口3的情况.&lt;br&gt;前面介绍过, activity在保存状态的时候, 会将所有View和Fragment的状态都保存起来等待重建的时候使用.&lt;br&gt;但是如果是单个Activity对应多个Fragments的架构, Activity永远是resume状态, 多个Fragments在切换的过程中, 没有activity的帮助, 如何保存自己的状态?&lt;/p&gt;
&lt;p&gt;首先, 取决于你的多个Fragments是如何初始化的.&lt;br&gt;我做了一个实验, 在activity的onCreate()里面初始化两个Fragment:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initFragments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab1Fragment = getFragmentManager().findFragmentByTag(Tab1Fragment.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tab1Fragment == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tab1Fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tab1Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab2Fragment = getFragmentManager().findFragmentByTag(Tab2Fragment.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tab2Fragment == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tab2Fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tab2Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后点击两个按钮来切换它们, replace(), 并且不加入到back stack中:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.tab1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTab1Clicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getFragmentManager().beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(R.id.content_container, tab1Fragment, Tab1Fragment.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.tab2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTab2Clicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getFragmentManager().beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(R.id.content_container, tab2Fragment, Tab2Fragment.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到, 每一次的切换, 都是一个Fragment的完全destroy, detach和另一个fragment的attach, create,&lt;br&gt;但是当我在这两个fragment中各自加上EditText, 发现只要EditText有id, 切换过程中EditText的内容是被保存的.&lt;br&gt;这是谁在什么时候保存并恢复的呢?&lt;br&gt;我在TextChange的回调里打了断点, 发现调用栈如下:&lt;br&gt;&lt;img src=&quot;/images/fragment-state-debug-onRestore.png&quot; alt=&quot;Fragment view state debug&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;FragmentManagerImpl&lt;/code&gt;中, &lt;code&gt;moveToState()&lt;/code&gt;方法的case Fragment.CREATED中:&lt;br&gt;调用了: &lt;code&gt;f.restoreViewState(f.mSavedFragmentState);&lt;/code&gt;&lt;br&gt;此时我没有做任何保存状态的处理, 但是断点中可以看出:&lt;br&gt;&lt;img src=&quot;/images/fragment-states.png&quot; alt=&quot;Fragment states&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然mSavedFragmentState是null, 但是mSavedViewState却有值.&lt;br&gt;所以这个View状态保存和恢复对应的入口即是上面两个图中的入口三.&lt;/p&gt;
&lt;p&gt;这是因为我的两个fragment只new了一次, 然后保存了成员变量, 即便是Fragment重新onCreate(), 但是对应的实例仍然是同一个.&lt;br&gt;这和Activity是不同的, 因为你是无法new一个Activity的.&lt;/p&gt;
&lt;p&gt;在上面的例子中, 如果不保存Fragment的引用, 每次都new Fragment, 那么View的状态是不会被保存的, 因为不同实例间的状态传递只有在系统销毁恢复的情况下才会发生(入口一).&lt;br&gt;如果我们需要在不同的实例间传递状态, 就需要用到下面的方法:&lt;/p&gt;
&lt;h2 id=&quot;不同Fragment实例间的状态保存和恢复&quot;&gt;&lt;a href=&quot;#不同Fragment实例间的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;不同Fragment实例间的状态保存和恢复&quot;&gt;&lt;/a&gt;不同Fragment实例间的状态保存和恢复&lt;/h2&gt;&lt;p&gt;这里对应的是入口2, 不同于入口1和3, 它们是自动的, 入口2是用户主动保存和恢复的情形.&lt;br&gt;自己主动保存Fragment的状态, 可以调用FragmentManager的这个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public abstract Fragment.SavedState saveFragmentInstanceState(Fragment f);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它的实现是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Fragment.&lt;span class=&quot;function&quot;&gt;SavedState &lt;span class=&quot;title&quot;&gt;saveFragmentInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Fragment fragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragment.mIndex &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throwException(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Fragment &quot;&lt;/span&gt; + fragment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &lt;span class=&quot;string&quot;&gt;&quot; is not currently in the FragmentManager&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragment.mState &amp;gt; Fragment.INITIALIZING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bundle result = saveFragmentBasicState(fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fragment.SavedState(result) : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回的数据类型是: Fragment.SavedState, 这个state可以通过Fragment的这个方法设置给自己:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setInitialSavedState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SavedState state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mIndex &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Fragment already active&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mSavedFragmentState = state != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; state.mState != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ? state.mState : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是注意只能在Fragment被加入之前设置, 这是一个初始状态.&lt;br&gt;利用这两个方法可以更加自由地保存和恢复状态, 而不依赖于Activity.&lt;br&gt;这样处理以后, 不必保存Fragment的引用, 每次切换的时候虽然都new了新的实例, 但是旧的实例的状态可以设置给新实例.&lt;/p&gt;
&lt;p&gt;例子代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@State&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SparseArray&amp;lt;Fragment.SavedState&amp;gt; savedStateSparseArray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SparseArray&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTab1Clicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// save current tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment tab2Fragment = getSupportFragmentManager().findFragmentByTag(Tab2Fragment.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tab2Fragment != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        saveFragmentState(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, tab2Fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// restore last state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tab1Fragment tab1Fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tab1Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    restoreFragmentState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, tab1Fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// show new tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getSupportFragmentManager().beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(R.id.content_container, tab1Fragment, Tab1Fragment.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveFragmentState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, Fragment fragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment.SavedState savedState = getSupportFragmentManager().saveFragmentInstanceState(fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    savedStateSparseArray.put(index, savedState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restoreFragmentState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, Fragment fragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment.SavedState savedState = savedStateSparseArray.get(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragment.setInitialSavedState(savedState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这里用了SparseArray来存储Fragment的状态, 并且加上了&lt;code&gt;@State&lt;/code&gt;, 这样在Activity重建的时候其中的内容也能够被恢复.&lt;/p&gt;
&lt;h2 id=&quot;Back-stack中的fragment&quot;&gt;&lt;a href=&quot;#Back-stack中的fragment&quot; class=&quot;headerlink&quot; title=&quot;Back stack中的fragment&quot;&gt;&lt;/a&gt;Back stack中的fragment&lt;/h2&gt;&lt;p&gt;有一点很特殊的是, 当Fragment从back stack中返回, 实际上是经历了一次View的销毁和重建, 但是它本身并没有被重建.&lt;br&gt;即View状态需要重建, 实例状态不需要重建.&lt;/p&gt;
&lt;p&gt;举个例子说明这种情形: Fragment被另一个Fragment replace(), 并且压入back stack中, 此时它的View是被销毁的, 但是它本身并没有被销毁.&lt;br&gt;也即, 它走到了onDestroyView(), 却没有走&lt;code&gt;onDestroy()&lt;/code&gt;和&lt;code&gt;onDetact()&lt;/code&gt;.&lt;br&gt;等back回来的时候, 它的view会被重建, 重新从onCreateView()开始走生命周期.&lt;br&gt;在这整个过程中, 该Fragment中的成员变量是保持不变的, 只有View会被重新创建.&lt;br&gt;在这个过程中, instance state的saving并没有发生.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以, 很多时候Fragment还需要考虑的是在没有Activity帮助的情形下(Activity并没有可能重建的情形), 自身View状态的保存.&lt;/strong&gt;&lt;br&gt;此时要注意一些不容易发现的错误, 比如List的新实例需要重新setAdapter等.&lt;/p&gt;
&lt;h2 id=&quot;Fragment-setRetainInstance&quot;&gt;&lt;a href=&quot;#Fragment-setRetainInstance&quot; class=&quot;headerlink&quot; title=&quot;Fragment setRetainInstance&quot;&gt;&lt;/a&gt;Fragment setRetainInstance&lt;/h2&gt;&lt;p&gt;Fragment有一个相关方法:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#setRetainInstance(boolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setRetainInstance&lt;/a&gt;)&lt;br&gt;这个方法设置为true的时候表示, 即便activity重建了, 但是fragment的实例并不被重建.&lt;br&gt;注意此方法只对没有放在back stack中的fragment生效.&lt;br&gt;什么时候要用这个方法呢? 处理configuration change的时候:&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling Configuration Changes with Fragments&lt;/a&gt;&lt;br&gt;这样, 当屏幕旋转, Activity重建, 但是其中的fragment和fragment正在执行的任务不必重建.&lt;br&gt;更多解释可以参见:&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11182180/understanding-fragments-setretaininstanceboolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/11182180/understanding-fragments-setretaininstanceboolean&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11160412/why-use-fragmentsetretaininstanceboolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/11160412/why-use-fragmentsetretaininstanceboolean&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意这个方法只是针对&lt;strong&gt;configuration change&lt;/strong&gt;, 并不影响用户主动关闭和系统销毁的情况:&lt;br&gt;当activity被用户主动finish, 其中的所有fragments仍然会被销毁.&lt;br&gt;当activity不在最顶端, memory不够了, 系统仍然可能会销毁activity和其中的fragments.&lt;/p&gt;
&lt;h1 id=&quot;View的状态保存和恢复&quot;&gt;&lt;a href=&quot;#View的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;View的状态保存和恢复&quot;&gt;&lt;/a&gt;View的状态保存和恢复&lt;/h1&gt;&lt;p&gt;View的状态保存和恢复主要是依赖于下面几个方法:&lt;br&gt;保存: &lt;code&gt;saveHierarchyState()&lt;/code&gt; -&amp;gt; &lt;code&gt;dispatchSaveInstanceState()&lt;/code&gt; -&amp;gt; &lt;code&gt;onSaveInstanceState()&lt;/code&gt;&lt;br&gt;恢复: &lt;code&gt;restoreHierarchyState()&lt;/code&gt; -&amp;gt; &lt;code&gt;dispatchRestoreInstanceState()&lt;/code&gt; -&amp;gt; &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;&lt;br&gt;还有两个重要的前提条件是View要有id, 并且&lt;code&gt;setSavedEnabled()&lt;/code&gt;为true.(这个值默认为true).&lt;br&gt;在系统的widget里(比如TextView, EditText, Checkbox等), 这些都是已经被处理好的, 我们只需要给View赋予id, Activity和Fragment重建的时候会自动恢复其中的状态. (这里的Fragment恢复对应入口一和入口三, 入口二属于跨实例新建的情况).&lt;/p&gt;
&lt;p&gt;但是如果你要使用第三方的自定义View, 就需要确认一下它们内部是否有状态保存和恢复的代码.&lt;br&gt;如果不行你就需要继承该自定义View, 然后实现这两个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Assumes that SomeSmartButton is a 3rd Party view that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View State Saving/Restoring are not implemented internally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeBetterSmartButton&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeSmartButton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Parcelable &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bundle bundle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Save current View&#39;s state here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bundle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Parcelable state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Restore View&#39;s state here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;WebView的状态保存和恢复&quot;&gt;&lt;a href=&quot;#WebView的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;WebView的状态保存和恢复&quot;&gt;&lt;/a&gt;WebView的状态保存和恢复&lt;/h1&gt;&lt;p&gt;WebView的状态保存和恢复不像其他原生View一样是自动完成的.&lt;br&gt;WebView不是继承自View的.&lt;br&gt;如果我们把WebView放在布局里, 不加处理, 那么Activity或Fragment重建的过程中, WebView的状态就会丢失, 变成初始状态.&lt;/p&gt;
&lt;p&gt;在Fragment的onSaveInstanceState()里面可以加入如下代码来保存WebView的状态:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onSaveInstanceState(Bundle outState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.saveState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在初始化的时候, 增加判断, 不必每次都打开初始链接:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (savedInstanceState != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.restoreState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.loadUrl(TEST_URL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样处理以后, 在重新建立的时候, WebView的状态就能恢复到离开前的页面.&lt;br&gt;不论WebView是放在Activity里还是Fragment里, 这个方法都适用.&lt;/p&gt;
&lt;p&gt;但是Fragment还有另一种情况, 即Fragment被压入back stack, 此时它没有被destroy(), 所以没有调用onSavedInstanceState()这个方法.&lt;br&gt;这种情况返回的时候, 会从onCreateView()开始, 并且savedInstanceState为null, 于是其中WebView之前的状态在此时丢失了.&lt;br&gt;解决这种情况可以利用Fragment实例并未销毁的条件, 增加一个成员变量bundle, 保存WebView的状态, 最终解决如下:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Bundle webViewState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewCreated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view, Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onViewCreated(view, savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initWebView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (webViewState != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Fragment实例并未被销毁, 重新create view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.restoreState(webViewState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (savedInstanceState != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Fragment实例被销毁重建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.restoreState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//全新Fragment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.loadUrl(TEST_URL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Fragment不被销毁(Fragment被加入back stack)的情况下, 依靠Fragment中的成员变量保存WebView状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webViewState = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.saveState(webViewState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Fragment被销毁的情况, 依靠outState保存WebView状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (webView != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.saveState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本文完整例子相关实验代码可见:&lt;br&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloActivityAndFragment&lt;/a&gt;&lt;br&gt;中的State Restore Demo.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;Developer Android:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Fragment Reference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android FragmentManager Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Posts:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/basics/activity-lifecycle/recreating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Recreating an Activity&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mengdd/archive/2012/12/17/2822291.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity的重新创建&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/180d2cc0feb5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从源码角度剖析Fragment核心知识点&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/bd4a8be309c8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragment源码阅读笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Real Best Practices to Save/Restore Activity’s and Fragment’s state&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0327/2648.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android中保存和恢复Fragment状态的最好方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling Configuration Changes with Fragments&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://trickyandroid.com/saving-android-view-state-correctly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Saving Android View state correctly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tools:&lt;br&gt;&lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;icepick&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android中的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Android中的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Android中的状态保存和恢复&quot;&gt;&lt;/a&gt;Android中的状态保存和恢复&lt;/h1&gt;&lt;p&gt;Android中的状态保存和恢复, 包括Activity和Fragment以及其中View的状态处理.&lt;br&gt;Activity的状态除了其中的View和Fragment的状态之外, 还需要用户手动保存一些成员变量.&lt;br&gt;Fragment的状态有它自己的实例状态和其中的View状态, 因为其生命周期的灵活性和实际需要的不同, 情况会多一些.&lt;br&gt;根据源码, 列出了Fragment中实例状态和View状态保存和恢复的几个入口, 便于分析查看.&lt;br&gt;最后专门讲了WebView状态保存和恢复, 问题及处理.&lt;br&gt;还有一个工具类icepick的介绍.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="WebView" scheme="http://mengdd.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(二) 嵌套Fragments (Nested Fragments) 的使用及常见错误</title>
    <link href="http://mengdd.github.io/Android/2016/06/02/android-fragment-usage-2-nested-fragments/"/>
    <id>http://mengdd.github.io/Android/2016/06/02/android-fragment-usage-2-nested-fragments/</id>
    <published>2016-06-02T05:03:04.000Z</published>
    <updated>2016-06-16T05:20:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;a href=&quot;#嵌套Fragment的使用及常见错误&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;/a&gt;嵌套Fragment的使用及常见错误&lt;/h1&gt;&lt;p&gt;嵌套Fragments (Nested Fragments), 是在Fragment内部又添加Fragment.&lt;br&gt;使用时, 主要要依靠宿主Fragment的 &lt;code&gt;getChildFragmentManager()&lt;/code&gt; 来获取FragmentManger.&lt;br&gt;虽然看起来和在activity中添加fragment差不多, 但因为fragment生命周期及管理恢复模式不同, 其中有一些需要特别注意的地方.&lt;br&gt;本文内容还包括了从Fragment迁移到v4.Fragment代码中需要改动的一些地方.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;嵌套Fragments&quot;&gt;&lt;a href=&quot;#嵌套Fragments&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragments&quot;&gt;&lt;/a&gt;嵌套Fragments&lt;/h2&gt;&lt;p&gt;嵌套Fragments &lt;a href=&quot;https://developer.android.com/about/versions/android-4.2.html#NestedFragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nested Fragments&lt;/a&gt; 是Android 4.2 API 17 引入的.&lt;br&gt;目的: 进一步增强动态复用.&lt;br&gt;如果要在Android 4.2之前使用, 可以用support library v4的版本, 后面会有详细的迁移过程介绍.&lt;/p&gt;
&lt;h3 id=&quot;嵌套Fragment的动态添加&quot;&gt;&lt;a href=&quot;#嵌套Fragment的动态添加&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment的动态添加&quot;&gt;&lt;/a&gt;嵌套Fragment的动态添加&lt;/h3&gt;&lt;p&gt;在宿主fragment里调用&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#getChildFragmentManager(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getChildFragmentManager()&lt;/a&gt;)&lt;br&gt;即可用它来向这个fragment内部添加fragments.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Fragment videoFragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; VideoPlayerFragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FragmentTransaction transaction = getChildFragmentManager().beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transaction.add(R.id.video_fragment, videoFragment).commit();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样, 对于内部的fragment来说, &lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#getParentFragment(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getParentFragment()&lt;/a&gt;) 方法可以获取到fragment的宿主fragment.&lt;/p&gt;
&lt;h3 id=&quot;getChildFragmentManager-和-getFragmentManager&quot;&gt;&lt;a href=&quot;#getChildFragmentManager-和-getFragmentManager&quot; class=&quot;headerlink&quot; title=&quot;getChildFragmentManager() 和 getFragmentManager()&quot;&gt;&lt;/a&gt;getChildFragmentManager() 和 getFragmentManager()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;getChildFragmentManager()&lt;/code&gt;是fragment中的方法, 返回的是管理当前fragment内部子fragments的manager.&lt;br&gt;&lt;code&gt;getFragmentManager()&lt;/code&gt;在activity和fragment中都有.&lt;br&gt;在activity中, 如果用的是v4 support库, 方法应该用&lt;code&gt;getSupportFragmentManager()&lt;/code&gt;, 返回的是管理activity中fragments的manager.&lt;br&gt;在fragment中, 还叫getFragmentManager(), 返回的是把自己加进来的那个manager.&lt;/p&gt;
&lt;p&gt;也即, 如果fragment在activity中, fragment.getFragmentManager()得到的是activity中管理fragments的那个manager.&lt;br&gt;如果fragment是嵌套在另一个fragment中, fragment.getFragmentManager()得到的是它的parent的getChildFragmentManager().&lt;/p&gt;
&lt;p&gt;总结就是: &lt;strong&gt;&lt;em&gt;getFragmentManager()是本级别管理者, getChildFragmentManager()是下一级别管理者&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;这实际上是一个树形管理结构.&lt;/p&gt;
&lt;h2 id=&quot;使用Support-library&quot;&gt;&lt;a href=&quot;#使用Support-library&quot; class=&quot;headerlink&quot; title=&quot;使用Support library&quot;&gt;&lt;/a&gt;使用Support library&lt;/h2&gt;&lt;h3 id=&quot;为什么要使用support-library-有两种原因&quot;&gt;&lt;a href=&quot;#为什么要使用support-library-有两种原因&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用support library? 有两种原因:&quot;&gt;&lt;/a&gt;为什么要使用support library? 有两种原因:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;要在API level11之前使用fragment.&lt;/li&gt;
&lt;li&gt;要在API Level 17之前使用&lt;code&gt;getChildFragmentManager()&lt;/code&gt;, 即使用嵌套Fragment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;迁移到support-library需要改动哪些地方&quot;&gt;&lt;a href=&quot;#迁移到support-library需要改动哪些地方&quot; class=&quot;headerlink&quot; title=&quot;迁移到support library需要改动哪些地方?&quot;&gt;&lt;/a&gt;迁移到support library需要改动哪些地方?&lt;/h3&gt;&lt;p&gt;把Fragment迁移到v4版本, 需要改动如下地方:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import android.app.Fragment; -&amp;gt; import android.support.v4.app.Fragment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Activity -&amp;gt; FragmentActivity / AppCompatActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activity.getFragmentManager() -&amp;gt; getSupportFragmentManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Loader, LoaderManager, LoaderCursor也需要改成v4包的.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activity.getLoaderManager() -&amp;gt; getSupportLoaderManager()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Fragment中onTrimMemory()方法不见了&lt;br&gt;以前是这个方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTrimMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; level)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onTrimMemory(level);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageLoader.trimMemory(level);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;v4版本需要改成这个&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLowMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onLowMemory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     imageLoader.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;嵌套Fragment使用常见错误&quot;&gt;&lt;a href=&quot;#嵌套Fragment使用常见错误&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment使用常见错误&quot;&gt;&lt;/a&gt;嵌套Fragment使用常见错误&lt;/h2&gt;&lt;h3 id=&quot;错误情形1-把嵌套Fragment放在布局里&quot;&gt;&lt;a href=&quot;#错误情形1-把嵌套Fragment放在布局里&quot; class=&quot;headerlink&quot; title=&quot;错误情形1: 把嵌套Fragment放在布局里&quot;&gt;&lt;/a&gt;错误情形1: 把嵌套Fragment放在布局里&lt;/h3&gt;&lt;p&gt;把嵌套Fragment放在布局里 -&amp;gt; &lt;code&gt;InflateException in Binary XML&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看起来嵌套fragment的使用除了要用&lt;code&gt;getChildFragmentManager()&lt;/code&gt;以外, 其他跟之前似乎没什么区别.&lt;br&gt;如果嵌套的fragment不需要太多控制, 固定地占据了一块地方, 你可能想当然地为了省事就把它放进了xml布局文件里, 写个&lt;fragment&gt;标签.&lt;br&gt;运行一下初看起来似乎没什么错, run一下也能显示出来, 但是千万不要这样做, 多玩两下更复杂的你就知道了.&lt;/fragment&gt;&lt;/p&gt;
&lt;p&gt;上面&lt;a href=&quot;https://developer.android.com/about/versions/android-4.2.html#NestedFragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网介绍时&lt;/a&gt;就有这么一句:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note: You cannot inflate a layout into a fragment when that layout includes a &amp;lt;fragment&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nested fragments are only supported when added to a fragment dynamically.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;人家这么说肯定是有原因的哇, 下面我来告诉你我知道的问题:&lt;br&gt;如果Fragment被嵌套写在了布局里, inflate到这个标签的时候就相当于将它加进了FragmentManager里.&lt;br&gt;如果嵌套的parent fragment因为需要重建View而重新走了&lt;code&gt;onCreateView()&lt;/code&gt;方法, 再次inflate, 此时就会抛出异常:  &lt;code&gt;InflateException in Binary XML&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前为什么可以呢? 非嵌套的情况, fragment直接加在activity里, 如果需要重新inflate, 必定是在onCreate()里, activity是重新建的, 所以没有问题, 因为不存在fragmentManager中已经持有同一个fragment的问题.&lt;/p&gt;
&lt;p&gt;举一个例子:&lt;br&gt;在嵌套的情况下, 如果FragmentE布局里有FragmentA, 这时候我们需要叠加一个FragmentD.&lt;br&gt;用了&lt;code&gt;replace()&lt;/code&gt;, 并且&lt;code&gt;addToBackStack()&lt;/code&gt;.&lt;br&gt;当D显示的时候, E实际上View是被销毁的, 然后back回来, 重建View, 即FragementE需要重新从onCreateView&lt;br&gt;()开始走生命周期, 走到inflate的时候又看到了fragmentA的标签.&lt;br&gt;但是这时候A实际上还在FragmentManager里面, 所以就会抛出如下的异常:&lt;br&gt;&lt;code&gt;android.view.InflateException: Binary XML file line # XX: Binary XML file line #XX: Error inflating class fragment&lt;/code&gt;&lt;br&gt;崩溃的位置就在parent fragment(FragmentE) inflate的时候.&lt;br&gt;打印具体的异常栈信息可以看到:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;at com.example.ddmeng.helloactivityandfragment.fragment.FragmentE.onCreateView(FragmentE.java:35)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.Fragment.performCreateView(Fragment.java:2220)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:973)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.popBackStackState(FragmentManager.java:1587)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:578)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.support.v4.app.BaseFragmentActivityEclair.onBackPressedNotHandled(BaseFragmentActivityEclair.java:27)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.support.v4.app.FragmentActivity.onBackPressed(FragmentActivity.java:189)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Caused by: java.lang.IllegalArgumentException: Binary XML file line #16: Duplicate id 0x7f0c0059, tag null, or parent id 0xffffffff with another fragment for com.example.ddmeng.helloactivityandfragment.fragment.FragmentA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.onCreateView(FragmentManager.java:2205)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验例子代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Solution-1-动态添加child-fragment&quot;&gt;&lt;a href=&quot;#Solution-1-动态添加child-fragment&quot; class=&quot;headerlink&quot; title=&quot;Solution 1: 动态添加child fragment&quot;&gt;&lt;/a&gt;Solution 1: 动态添加child fragment&lt;/h4&gt;&lt;p&gt;解决上面的问题有各种方法, 最常规的做法是, 使用动态添加:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Fragment fragmentA = getChildFragmentManager().findFragmentByTag(NESTED_FRAGMENT_TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragmentA == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.i(LOG_TAG, &lt;span class=&quot;string&quot;&gt;&quot;add new FragmentA !!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FragmentA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentTransaction fragmentTransaction = getChildFragmentManager().beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentTransaction.add(R.id.fragment_container, fragmentA, NESTED_FRAGMENT_TAG).commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.i(LOG_TAG, &lt;span class=&quot;string&quot;&gt;&quot;found existing FragmentA, no need to add it again !!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Solution-2-在异常之前remove-child-fragment&quot;&gt;&lt;a href=&quot;#Solution-2-在异常之前remove-child-fragment&quot; class=&quot;headerlink&quot; title=&quot;Solution 2: 在异常之前remove child fragment&quot;&gt;&lt;/a&gt;Solution 2: 在异常之前remove child fragment&lt;/h4&gt;&lt;p&gt;如果你的子fragment非要加在布局里不可, 而你的程序确实会有重建父fragment view的情形.&lt;br&gt;为了避免上面的异常, 你也可以这样做(tricky and not recommended):&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeChildFragment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Fragment parentFragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentManager fragmentManager = parentFragment.getChildFragmentManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment child = fragmentManager.findFragmentById(R.id.child);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (child != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fragmentManager.beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .remove(child)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .commitAllowingStateLoss();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在parentFragment的&lt;code&gt;onCreateView()&lt;/code&gt;方法中inflate之前和&lt;code&gt;onSaveInstanceState()&lt;/code&gt;方法中做save工作之前调用它.&lt;br&gt;这两个地方是发生异常的地方, 只要在其之前remove就好.&lt;/p&gt;
&lt;h3 id=&quot;错误情形2-把fragment放在一个动态布局里&quot;&gt;&lt;a href=&quot;#错误情形2-把fragment放在一个动态布局里&quot; class=&quot;headerlink&quot; title=&quot;错误情形2: 把fragment放在一个动态布局里&quot;&gt;&lt;/a&gt;错误情形2: 把fragment放在一个动态布局里&lt;/h3&gt;&lt;p&gt;把fragment放在一个动态布局里 -&amp;gt; &lt;code&gt;java.lang.IllegalArgumentException: No view found for id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发现这个错误是因为项目中的一个子Fragment是添加在RecyclerView里面的一块的.&lt;br&gt;RecyclerView要等到Loader的数据取到了之后再populate每一块的布局.&lt;br&gt;还是上面的流程, 启动父fragment, load数据, 添加子fragment, 这都没有问题.&lt;br&gt;但是一旦如果是上面的&lt;code&gt;replace()&lt;/code&gt;加&lt;code&gt;addToBackStack()&lt;/code&gt; , 并且再次返回, 就会出现异常.&lt;/p&gt;
&lt;p&gt;因为当重建View的时候, fragmentManager其中是持有child fragment的, 但是找不到它的container, 于是就会抛出异常.&lt;br&gt;我也同样做了一个小实验, 在我的demo程序里:&lt;br&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloActivityAndFragment&lt;/a&gt;&lt;br&gt;Nested Fragment in Dynamic Container:&lt;br&gt;在Fragment F中, 先添加一个FrameLayout, 再把child fragment A加进去.&lt;br&gt;然后在Activity中, 用D replace F, 按back键返回, 就会有crash:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: No view found for id 0x7f0c0062 (com.example.ddmeng.helloactivityandfragment:id/frame_container) for fragment FragmentA&amp;#123;b37763 #0 id=0x7f0c0062 FragmentA&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:965)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1130)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.dispatchActivityCreated(FragmentManager.java:1953)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.Fragment.performActivityCreated(Fragment.java:2234)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:992)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.BackStackRecord.popFromBackStack(BackStackRecord.java:1670)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.popBackStackState(FragmentManager.java:1587)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:578)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.Activity.onBackPressed(Activity.java:2503)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是因为返回的时候FragmentManager找不到对应的container了.&lt;br&gt;所以应该避免这种做法, 尽量把fragment加进parent的根布局里, 而不是某个动态添加的布局.&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;关于嵌套fragments的情况, 可能和ViewPager结合使用的情形比较多.&lt;br&gt;这个感觉说来话长了, 以为有很多系统帮忙做的事情, 改天有空再说吧.&lt;/p&gt;
&lt;p&gt;这里有个大哥写了个工具类&lt;a href=&quot;https://github.com/YoKeyword/Fragmentation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragmentation&lt;/a&gt;.&lt;br&gt;他也有几篇博文分析遇到的坑和原因(见上面repo的README给出的链接), 里面有一些back stack的问题, 还有动画什么的, 大家有兴趣可以看看.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Creating-and-Using-Fragments#nesting-fragments-within-fragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide: Nested Fragments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;相关Demo&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;a href=&quot;#嵌套Fragment的使用及常见错误&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;/a&gt;嵌套Fragment的使用及常见错误&lt;/h1&gt;&lt;p&gt;嵌套Fragments (Nested Fragments), 是在Fragment内部又添加Fragment.&lt;br&gt;使用时, 主要要依靠宿主Fragment的 &lt;code&gt;getChildFragmentManager()&lt;/code&gt; 来获取FragmentManger.&lt;br&gt;虽然看起来和在activity中添加fragment差不多, 但因为fragment生命周期及管理恢复模式不同, 其中有一些需要特别注意的地方.&lt;br&gt;本文内容还包括了从Fragment迁移到v4.Fragment代码中需要改动的一些地方.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="Nested Fragments" scheme="http://mengdd.github.io/tags/Nested-Fragments/"/>
    
  </entry>
  
  <entry>
    <title>Test Links</title>
    <link href="http://mengdd.github.io/uncategorized/2016/05/31/test-links/"/>
    <id>http://mengdd.github.io/uncategorized/2016/05/31/test-links/</id>
    <published>2016-05-31T04:51:19.000Z</published>
    <updated>2016-08-03T01:58:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/property-house-nsw-singleton+heights-122331330&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/property-house-nsw-singleton+heights-122331330&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://m.realestate.com.au/sold/property-house-act-waramanga-122532898&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.realestate.com.au/sold/property-house-act-waramanga-122532898&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;realestate.com.au/suggested-properties&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/suggested-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/suggested-properties&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/blog/expand-your-real-estate-search-with-apps-suggested-properties/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/blog/expand-your-real-estate-search-with-apps-suggested-properties/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-with-1-bedroom-between-600000-750000-in-mentone%2c+vic+3194%3b/list-1?maxBeds=2&amp;amp;includeSurrounding=false&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-with-1-bedroom-between-600000-750000-in-mentone%2c+vic+3194%3b/list-1?maxBeds=2&amp;amp;includeSurrounding=false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-400-between-800000-900000-in-mentone%2c+vic+3194/list-1?keywords=pool&amp;amp;numParkingSpaces=3&amp;amp;numBaths=2&amp;amp;maxBeds=2&amp;amp;includeSurrounding=false&amp;amp;persistIncludeSurrounding=true&amp;amp;source=location-search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-400-between-800000-900000-in-mentone%2c+vic+3194/list-1?keywords=pool&amp;amp;numParkingSpaces=3&amp;amp;numBaths=2&amp;amp;maxBeds=2&amp;amp;includeSurrounding=false&amp;amp;persistIncludeSurrounding=true&amp;amp;source=location-search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/rent/property-townhouse-villa-acreage-with-2-bedrooms-between-300-450-in-parkdale%2c+vic+3195%3b/list-1?availableBefore=2016-05-16&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/rent/property-townhouse-villa-acreage-with-2-bedrooms-between-300-450-in-parkdale%2c+vic+3195%3b/list-1?availableBefore=2016-05-16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/property-house-townhouse-with-3-bedrooms-between-0-1000000-in-sandringham%2c+vic+3191/map-1?maxBeds=3&amp;amp;includeSurrounding=false&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/property-house-townhouse-with-3-bedrooms-between-0-1000000-in-sandringham%2c+vic+3191/map-1?maxBeds=3&amp;amp;includeSurrounding=false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/property-house-with-2-bedrooms-between-50000-950000-in-kew%2c+vic+3101/list-1?maxBeds=3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/property-house-with-2-bedrooms-between-50000-950000-in-kew%2c+vic+3101/list-1?maxBeds=3&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://m.realestate.com.au/sold/property-townhouse-with-studio-in-weston+creek+district%2c+act/list-1?numParkingSpaces=1&amp;amp;numBaths=1&amp;amp;keywords=car&amp;amp;activeSort=sold-price-desc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.realestate.com.au/sold/property-townhouse-with-studio-in-weston+creek+district%2c+act/list-1?numParkingSpaces=1&amp;amp;numBaths=1&amp;amp;keywords=car&amp;amp;activeSort=sold-price-desc&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/in-scoresby%2c+vic+3179%3b/list-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/in-scoresby%2c+vic+3179%3b/list-1&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;2016-06-15&lt;br&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/in-bentleigh%2c+vic+3204/list-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/in-bentleigh%2c+vic+3204/list-1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-between-0-2000000-in-melbourne%2c+vic+3000/list-1?numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=price-asc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-between-0-2000000-in-melbourne%2c+vic+3000/list-1?numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=price-asc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-1-between-0-2000000-in-melbourne%2c+vic+3000/list-1?maxBeds=5&amp;amp;numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=list-date&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-1-between-0-2000000-in-melbourne%2c+vic+3000/list-1?maxBeds=5&amp;amp;numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=list-date&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2016-08-03&lt;br&gt;&lt;a href=&quot;https://m.realestate.com.au/saved-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.realestate.com.au/saved-properties&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/property-house-nsw-singleton+heights-122331330&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestat
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(一) 基础篇 温故知新</title>
    <link href="http://mengdd.github.io/Android/2016/05/31/android-fragment-usage-1-basic-part/"/>
    <id>http://mengdd.github.io/Android/2016/05/31/android-fragment-usage-1-basic-part/</id>
    <published>2016-05-31T04:51:19.000Z</published>
    <updated>2016-06-16T05:36:30.000Z</updated>
    
    <content type="html">&lt;p&gt;Fragment使用的基本知识点总结, 包括Fragment的添加, 参数传递和通信, 生命周期和各种操作.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Fragment使用基础&quot;&gt;&lt;a href=&quot;#Fragment使用基础&quot; class=&quot;headerlink&quot; title=&quot;Fragment使用基础&quot;&gt;&lt;/a&gt;Fragment使用基础&lt;/h1&gt;&lt;h2 id=&quot;Fragment添加&quot;&gt;&lt;a href=&quot;#Fragment添加&quot; class=&quot;headerlink&quot; title=&quot;Fragment添加&quot;&gt;&lt;/a&gt;Fragment添加&lt;/h2&gt;&lt;p&gt;方法一: 布局里的标签&lt;fragment&gt;&lt;br&gt;标识符: tag, id, 如果都没有, container的id将会被使用.&lt;/fragment&gt;&lt;/p&gt;
&lt;p&gt;方法二: 动态添加&lt;br&gt;动态添加利用了一个transaction:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FragmentManager fragmentManager = getFragmentManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fragment fragment = fragmentManager.findFragmentByTag(FragmentB.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == fragment) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentB fragmentB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FragmentB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentTransaction.add(R.id.fragment_container, fragmentB, FragmentB.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;commit()&lt;/code&gt;方法并不立即执行transaction中包含的动作,而是把它加入到UI线程队列中.&lt;br&gt;如果想要立即执行,可以在commit之后立即调用FragmentManager的&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentManager.html#executePendingTransactions(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;executePendingTransactions()&lt;/code&gt;&lt;/a&gt;)方法.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commit()&lt;/code&gt;方法必须在状态存储之前调用,否则会抛出异常,如果觉得状态丢失没关系,可以调用&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;. 但是除非万不得已, 一般不推荐用这个方法, 会掩盖很多错误.&lt;/p&gt;
&lt;h2 id=&quot;Back-Stack&quot;&gt;&lt;a href=&quot;#Back-Stack&quot; class=&quot;headerlink&quot; title=&quot;Back Stack&quot;&gt;&lt;/a&gt;Back Stack&lt;/h2&gt;&lt;p&gt;Activity的back stack: 系统维护, 每个task一个back stack.&lt;br&gt;Fragment的back stack: 宿主activity掌管, 每个activity一个.&lt;/p&gt;
&lt;p&gt;通过调用&lt;code&gt;addToBackStack()&lt;/code&gt;,commit()的一系列转换作为一个transaction被存储在back stack中,&lt;br&gt;用户按Back键, 从栈中pop出一个transaction, 逆转操作, 可以返回上一个转换前的状态.&lt;/p&gt;
&lt;p&gt;一个transaction可以包含多种操作, 并且不局限于对同一个Fragment, 所以每一个transaction实际上可以是一系列对多个fragment的操作的组合.&lt;br&gt;加入到back stack中去的时候, 是把这一系列的组合作为一个原子, 加入到back stack中.&lt;/p&gt;
&lt;h2 id=&quot;构造和参数传递&quot;&gt;&lt;a href=&quot;#构造和参数传递&quot; class=&quot;headerlink&quot; title=&quot;构造和参数传递&quot;&gt;&lt;/a&gt;构造和参数传递&lt;/h2&gt;&lt;p&gt;所有的Fragment都必须有一个&lt;code&gt;public的无参构造函数&lt;/code&gt;, 因为framework经常会在需要的时候重新创建实例(状态恢复时), 它需要的就是这个构造.&lt;br&gt;如果无参构造没有提供,会有异常.&lt;/p&gt;
&lt;p&gt;所以&lt;code&gt;不要给Fragment写有参数的构造函数, 也不要企图搞个什么单例的Fragment&lt;/code&gt;. 这些都是反设计的.&lt;/p&gt;
&lt;p&gt;参数传递的正确姿势:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; FragmentWithParameters &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentWithParameters fragmentWithParameter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FragmentWithParameters();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Bundle args = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args.putInt(NUM, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentWithParameter.setArguments(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fragmentWithParameter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num = getArguments() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? getArguments().getInt(NUM) : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里是提供了一个静态方法, 也可以new出对象后自己set Bundle参数.&lt;/p&gt;
&lt;h2 id=&quot;Fragment的通信&quot;&gt;&lt;a href=&quot;#Fragment的通信&quot; class=&quot;headerlink&quot; title=&quot;Fragment的通信&quot;&gt;&lt;/a&gt;Fragment的通信&lt;/h2&gt;&lt;p&gt;除了DialogFragment和嵌套Fragment需要与自己的parent fragment通信以外, 一般的fragment是不与其他fragment有任何通信的. 因为要求应尽量独立, 模块化, 可复用.&lt;br&gt;fragment与自己的parent activity (除了嵌套和dialog的情况外, 这个parent通常是activity) 有直接通信, 一般以这三种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在构造fragment的时候, 通过Bundle传递参数.&lt;/li&gt;
&lt;li&gt;parent可以直接调用fragment的public方法, 这里也可以传递一些参数.&lt;/li&gt;
&lt;li&gt;Listener, 也即parent实现的callback接口, fragment可以在自己内部调用, 这里fragment也可以传递参数出去.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于DialogFragment来说, 可以通过一个public的set方法将外面的target设置进去.&lt;br&gt;比如用Fragment的这个方法: &lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#setTargetFragment(android.app.Fragment,%20int&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setTargetFragment()&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Using-DialogFragment#passing-data-to-parent-fragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;&lt;br&gt;对于嵌套(nested)Fragment, 通信方式与上面普通的fragment类似, 只不过parent此时不是activity而是一个fragment.&lt;br&gt;后面会单独有一个文章说嵌套Fragment的使用, 敬请期待.&lt;/p&gt;
&lt;h1 id=&quot;Fragment的生命周期&quot;&gt;&lt;a href=&quot;#Fragment的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Fragment的生命周期&quot;&gt;&lt;/a&gt;Fragment的生命周期&lt;/h1&gt;&lt;p&gt;Fragment的生命周期首先和Activity的生命周期密切相关,&lt;br&gt;如果activity stopped,其中所有的fragment都不能start;&lt;br&gt;如果activity destroyed, 其中所有的fragment都会被destroyed.&lt;br&gt;只有activity在resumed状态下,fragment的生命周期可以独立改变,否则它被activity控制.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/fragment-lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/fragment-lifecycle-2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/activity-fragment-lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/fragment-lifecycle-with-callbacks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面这个图来自于: &lt;a href=&quot;https://corner.squareup.com/2014/10/advocating-against-android-fragments.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://corner.squareup.com/2014/10/advocating-against-android-fragments.html&lt;/a&gt;&lt;br&gt;这里还有一个更吊的图: &lt;a href=&quot;https://github.com/xxv/android-lifecycle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xxv/android-lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;FragmentTransaction基础操作&quot;&gt;&lt;a href=&quot;#FragmentTransaction基础操作&quot; class=&quot;headerlink&quot; title=&quot;FragmentTransaction基础操作&quot;&gt;&lt;/a&gt;FragmentTransaction基础操作&lt;/h1&gt;&lt;h2 id=&quot;操作类型&quot;&gt;&lt;a href=&quot;#操作类型&quot; class=&quot;headerlink&quot; title=&quot;操作类型&quot;&gt;&lt;/a&gt;操作类型&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentTransaction&lt;/a&gt; 中对Fragment有如下几种操作:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;attach(), detach()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add(), remove(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show(), hide(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replace()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了&lt;code&gt;replace()&lt;/code&gt;以外其他都是成对的.&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;attach()&lt;/code&gt;和&lt;code&gt;detach()&lt;/code&gt;不是很常用.&lt;br&gt;调用&lt;code&gt;detach()&lt;/code&gt;之后, fragment实际的生命周期会走到onDestroyView(), 但不会走onDestroy()和onDetach(), 也即fragment本身并没有被销毁, 只是view被销毁了. 这和addToBackStack()的情况一样, 尽管调用detach()的时候没有addToBackStack(), 仍然只是走到view被销毁的阶段.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt;和&lt;code&gt;remove()&lt;/code&gt;是将fragment添加和移除.&lt;br&gt;remove()比detach()要彻底一些, 如果不加入到back stack, remove()的时候, fragment的生命周期会一直走到onDetach().&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show()&lt;/code&gt;和&lt;code&gt;hide()&lt;/code&gt;是用来设置fragment的显示和隐藏状态, 这两个方法并不对应fragment的状态变化,只是将view设置为visible和gone,然后调用onHiddenChanged()的回调.&lt;/p&gt;
&lt;p&gt;实际上&lt;code&gt;replace() == remove() + add()&lt;/code&gt;, 所以它的反操作也是replace(), 只不过把add和remove的东西交换一下.&lt;/p&gt;
&lt;p&gt;关于replace()和show(), hide()的选择, 要根据实际使用情形来定.&lt;br&gt;&lt;code&gt;replace()&lt;/code&gt;的好处是会减少内存占用, 但是返回时需要重新走完初始化的过程.&lt;br&gt;&lt;code&gt;show()&lt;/code&gt;和&lt;code&gt;hide()&lt;/code&gt;只是控制了fragment的显示和隐藏, 不会改变生命周期状态, 也即fragment始终是处于running状态的, 被保持在内存中, 适用于频繁切换的情形.&lt;/p&gt;
&lt;h2 id=&quot;remove-replace-是否加到back-stack对生命周期的影响&quot;&gt;&lt;a href=&quot;#remove-replace-是否加到back-stack对生命周期的影响&quot; class=&quot;headerlink&quot; title=&quot;remove(), replace()是否加到back stack对生命周期的影响&quot;&gt;&lt;/a&gt;remove(), replace()是否加到back stack对生命周期的影响&lt;/h2&gt;&lt;p&gt;前面说过, &lt;code&gt;replace() == remove() + add()&lt;/code&gt;&lt;br&gt;新的fragment将取代在容器布局中的fragment, 如果没有,将直接添加新的fragment.&lt;/p&gt;
&lt;p&gt;是否添加到back stack对fragment的生命周期是有影响的.&lt;br&gt;&lt;code&gt;remove()&lt;/code&gt;或者&lt;code&gt;replace()&lt;/code&gt;的时候,如果&lt;code&gt;commit()&lt;/code&gt;之前没有调用&lt;code&gt;addToBackStack()&lt;/code&gt;,那个旧fragment将会被destroyed和detach; 即完全销毁和移除.&lt;/p&gt;
&lt;p&gt;如果调用了&lt;code&gt;addToBackStack()&lt;/code&gt;,旧的fragment会处在stopped状态,调用到&lt;code&gt;onDestroyView()&lt;/code&gt;, 可以通过返回键来resume.&lt;br&gt;这个时候对于旧的Fragment来说, 成员变量依然在,但是View被销毁了. 所以返回时它的生命周期从&lt;code&gt;onCreateView()&lt;/code&gt;开始重建View.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Reference Fragment&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Reference FragmentTransaction&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Creating-and-Using-Fragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath Guides: Creating and Using Fragments&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Fragment使用的基本知识点总结, 包括Fragment的添加, 参数传递和通信, 生命周期和各种操作.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Set up github pages with Hexo</title>
    <link href="http://mengdd.github.io/uncategorized/2016/05/23/set-up-github-pages-with-hexo/"/>
    <id>http://mengdd.github.io/uncategorized/2016/05/23/set-up-github-pages-with-hexo/</id>
    <published>2016-05-23T10:12:02.000Z</published>
    <updated>2016-05-24T04:00:18.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Set-up-Github-Pages-with-Hexo-migrating-from-Jekyll&quot;&gt;&lt;a href=&quot;#Set-up-Github-Pages-with-Hexo-migrating-from-Jekyll&quot; class=&quot;headerlink&quot; title=&quot;Set up Github Pages with Hexo, migrating from Jekyll.&quot;&gt;&lt;/a&gt;Set up Github Pages with Hexo, migrating from Jekyll.&lt;/h1&gt;&lt;p&gt;本文介绍用Hexo建立github pages, 其中包含了从Jekyll迁移过来的过程.&lt;br&gt;Migrate github pages from Jekyll to &lt;a href=&quot;https://hexo.io/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;.&lt;br&gt;Set up github pages using Hexo.&lt;br&gt;不光是迁移哇, 直接用Hexo setup github pages 看这个也有用哇.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;为什么要把github pages 从Jekyll实现迁移到Hexo?&lt;br&gt;前阵子用Jekyll建了github pages(官方推荐), 但是发现添加代码段比较痛苦, markdown的前后三个点并不能标记一个代码块, 需要在代码块前后加上两句特定的语句.&lt;br&gt;如果一篇文章有很多代码块, 这样一个一个加下来比较费劲, 而且加完了之后代码段的样式也不是很好看.&lt;/p&gt;
&lt;p&gt;为此很苦恼的我问了phodal大神, 大神回复: Hexo.&lt;/p&gt;
&lt;p&gt;下文记录了我的操作过程.&lt;/p&gt;
&lt;h2 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h2&gt;&lt;p&gt;必要条件:&lt;br&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;br&gt;可以选个pkg,下载后点击安装, 装完之后告诉你路径.&lt;/p&gt;
&lt;p&gt;也可以用nvm装的&lt;br&gt;&lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nvm&lt;/a&gt;&lt;br&gt;Git&lt;br&gt;这个一般大家都有哒~&lt;/p&gt;
&lt;p&gt;上面两个都有之后, 安装Hexo:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install -g hero-cli&lt;/code&gt;&lt;br&gt;装得也很快.&lt;br&gt;之后试一下hexo命令,如果有命令介绍(而不是command not found)就代表装好了.&lt;/p&gt;
&lt;h2 id=&quot;设置和迁移&quot;&gt;&lt;a href=&quot;#设置和迁移&quot; class=&quot;headerlink&quot; title=&quot;设置和迁移&quot;&gt;&lt;/a&gt;设置和迁移&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Setup&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;备份&quot;&gt;&lt;a href=&quot;#备份&quot; class=&quot;headerlink&quot; title=&quot;备份&quot;&gt;&lt;/a&gt;备份&lt;/h3&gt;&lt;p&gt;首先, 从原先的_posts/目录下将原来的文章都拷贝出来.&lt;br&gt;另外将.git目录也拷贝出来(这是为了保持github上的历史).&lt;br&gt;这些文件另外保存.&lt;/p&gt;
&lt;h3 id=&quot;建立新的目录&quot;&gt;&lt;a href=&quot;#建立新的目录&quot; class=&quot;headerlink&quot; title=&quot;建立新的目录&quot;&gt;&lt;/a&gt;建立新的目录&lt;/h3&gt;&lt;p&gt;在准备好的空目录运行命令:&lt;br&gt;&lt;code&gt;hexo init .&lt;/code&gt;&lt;br&gt;就建立好了hexo的目录,相关介绍可以去网站看.&lt;br&gt;&lt;code&gt;npm install&lt;/code&gt; 下载依赖包.&lt;/p&gt;
&lt;p&gt;Hexo会自动忽略下划线开头的目录和文件名,但是_posts目录除外.&lt;br&gt;这时候可以运行&lt;br&gt;&lt;code&gt;$ hexo server&lt;/code&gt;&lt;br&gt;然后访问&lt;a href=&quot;http://localhost:4000/预览一下&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/预览一下&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;p&gt;网站的设置文件是&lt;code&gt;_config.yml&lt;/code&gt;&lt;br&gt;打开可以配置一些新东东, 比如title url之类的.&lt;br&gt;具体设置参照这个: &lt;a href=&quot;https://hexo.io/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;configuration&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容迁移&quot;&gt;&lt;a href=&quot;#内容迁移&quot; class=&quot;headerlink&quot; title=&quot;内容迁移&quot;&gt;&lt;/a&gt;内容迁移&lt;/h3&gt;&lt;p&gt;这是内容迁移的介绍:&lt;br&gt;&lt;a href=&quot;https://hexo.io/docs/migration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;migration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以首先在&lt;code&gt;_config.yml&lt;/code&gt;文件里把 new_post_name字段改为:&lt;br&gt;&lt;code&gt;new_post_name: :year-:month-:day-:title.md&lt;/code&gt;&lt;br&gt;否则就要修改之前每一个文章的文件名,太麻烦,而且我觉得加个日期也比较好.&lt;/p&gt;
&lt;p&gt;然后把原来备份的博客文章移到source/_posts/目录下.&lt;/p&gt;
&lt;p&gt;比较bug的是以前jekyll文章里的代码段前后加的那两句还得手动移除.&lt;br&gt;用Hexo后 前后各加三个点即可标记代码段.&lt;br&gt;如果想要代码高亮, 比如是java, 代码段首的三个点后加个java.&lt;br&gt;这里可以查看代码高亮的各种语言: &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;highlightjs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完成之后可以运行hexo server 命令在本地看一下样子.&lt;/p&gt;
&lt;p&gt;然后把.git目录拷贝回来放在根目录. 可以看到repo地址啊, 历史记录啊还在.&lt;br&gt;最后提交, 本次提交即为迁移提交, push.&lt;/p&gt;
&lt;h2 id=&quot;Deployment&quot;&gt;&lt;a href=&quot;#Deployment&quot; class=&quot;headerlink&quot; title=&quot;Deployment&quot;&gt;&lt;/a&gt;Deployment&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;部署Deployment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我本来以为跟Jekyll一样本地运行好了, push上去就生效了, 结果并没有.&lt;br&gt;访问原地址, github pages并不生效,居然还是原来的那个样子.&lt;/p&gt;
&lt;p&gt;查了一下是因为deploy没有设置.&lt;/p&gt;
&lt;p&gt;打开&lt;code&gt;_config.yml&lt;/code&gt;文件,找到deploy字段, 设置一下.&lt;br&gt;我的是这样写的:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: https://github.com/mengdd/mengdd.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后执行一下这条命令:&lt;br&gt;&lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;&lt;br&gt;这条命令执行后package.json会有一条改动, 新添加了一个插件.&lt;br&gt;把这个提交了.&lt;/p&gt;
&lt;p&gt;然后generate和deploy:&lt;br&gt;&lt;code&gt;$ hexo generate --deploy&lt;/code&gt;&lt;br&gt;&lt;code&gt;$ hexo deploy --generate&lt;/code&gt;&lt;br&gt;这两条命令是一样的.&lt;br&gt;运行这条命令的时候可能会要求你输入github的账户名和密码(如果你没有配置SSH key的话).&lt;br&gt;这个需要等待比较长的时间, 实际上最后它是给master分支做了一个&lt;code&gt;git push -f&lt;/code&gt;&lt;br&gt;所以它实际上是不用你自己push的.&lt;/p&gt;
&lt;p&gt;之后就可以访问啦: &lt;a href=&quot;http://mengdd.github.io/&quot;&gt;http://mengdd.github.io/&lt;/a&gt;&lt;br&gt;哒哒!&lt;/p&gt;
&lt;h2 id=&quot;网站代码和静态网页管理&quot;&gt;&lt;a href=&quot;#网站代码和静态网页管理&quot; class=&quot;headerlink&quot; title=&quot;网站代码和静态网页管理&quot;&gt;&lt;/a&gt;网站代码和静态网页管理&lt;/h2&gt;&lt;p&gt;在知乎上看到这个问题: &lt;a href=&quot;https://www.zhihu.com/question/21193762&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用hexo, 如果换了电脑怎么更新博客?&lt;/a&gt;&lt;br&gt;乍一看感觉很奇怪, 换一台电脑难道不是clone下来就行了吗? 仔细看了一下恍然大悟.&lt;br&gt;前面提到刚刚的部署命令执行了一次强制push, 可是当我们查看github上的repo(&lt;a href=&quot;https://github.com/mengdd/mengdd.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengdd/mengdd.github.io&lt;/a&gt;),&lt;br&gt;发现push上去的文件和我们本地的这些完全不同.&lt;br&gt;现在在origin master上的全是一些静态html文件.&lt;br&gt;而我们本地master分支上是一些配置, 还有source文件等.&lt;br&gt;也就是等于我们把母鸡留在了本地电脑, 执行deploy之后只把鸡蛋push到了origin. (我这个形象的比喻).&lt;/p&gt;
&lt;p&gt;那么怎么解决呢? 该问题下排名第一的 [CrazyMilk] 大哥已经给出了答案.&lt;br&gt;&lt;a href=&quot;http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;他的博文&lt;/a&gt;&lt;br&gt;所以解决办法就是新建一个分支把网站代码(母鸡)放上去咯~哈~&lt;/p&gt;
&lt;p&gt;首先在本地, 基于当前本地的master新建一个hexo分支:&lt;br&gt;&lt;code&gt;git checkout -b hexo&lt;/code&gt;&lt;br&gt;然后push到origin上去:&lt;br&gt;&lt;code&gt;git push origin hexo&lt;/code&gt;&lt;br&gt;耗时比较久, 请耐心等待.&lt;/p&gt;
&lt;p&gt;最后在github的settings页面把hexo分支设置为default.&lt;br&gt;DONE!&lt;/p&gt;
&lt;h2 id=&quot;Theme&quot;&gt;&lt;a href=&quot;#Theme&quot; class=&quot;headerlink&quot; title=&quot;Theme&quot;&gt;&lt;/a&gt;Theme&lt;/h2&gt;&lt;p&gt;之后想设置一个好看的主题, 知乎上居然还有这么个问题:&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/24422335&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有哪些好看的Hexo主题?&lt;/a&gt;&lt;br&gt;我打算选这个试试: &lt;a href=&quot;https://github.com/wuchong/jacman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wuchong/jacman&lt;/a&gt;&lt;br&gt;在本地hexo分支根目录下运行:&lt;br&gt;&lt;code&gt;git clone https://github.com/wuchong/jacman.git themes/jacman&lt;/code&gt;&lt;br&gt;就会clone到themes目录下面叫jacman的目录下.&lt;br&gt;然后在根目录下的&lt;code&gt;_config.yml&lt;/code&gt;中把theme名改为jacman.&lt;/p&gt;
&lt;p&gt;然后用命令hexo server就可以在本地查看效果.&lt;br&gt;改主题大概就酱, 两步就可以完成, 可以多试几个选一选.&lt;br&gt;选完了在hexo分支提交保存,然后运行&lt;code&gt;hexo d -g&lt;/code&gt;生成部署即可.&lt;/p&gt;
&lt;h2 id=&quot;Future&quot;&gt;&lt;a href=&quot;#Future&quot; class=&quot;headerlink&quot; title=&quot;Future&quot;&gt;&lt;/a&gt;Future&lt;/h2&gt;&lt;p&gt;需要用到的命令: &lt;a href=&quot;https://hexo.io/docs/commands.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commands&lt;/a&gt; 随时查看哇.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Set-up-Github-Pages-with-Hexo-migrating-from-Jekyll&quot;&gt;&lt;a href=&quot;#Set-up-Github-Pages-with-Hexo-migrating-from-Jekyll&quot; class=&quot;headerlink&quot; title=&quot;Set up Github Pages with Hexo, migrating from Jekyll.&quot;&gt;&lt;/a&gt;Set up Github Pages with Hexo, migrating from Jekyll.&lt;/h1&gt;&lt;p&gt;本文介绍用Hexo建立github pages, 其中包含了从Jekyll迁移过来的过程.&lt;br&gt;Migrate github pages from Jekyll to &lt;a href=&quot;https://hexo.io/docs/index.html&quot;&gt;Hexo&lt;/a&gt;.&lt;br&gt;Set up github pages using Hexo.&lt;br&gt;不光是迁移哇, 直接用Hexo setup github pages 看这个也有用哇.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mengdd.github.io/uncategorized/2016/05/20/hello-world-from-hexo/"/>
    <id>http://mengdd.github.io/uncategorized/2016/05/20/hello-world-from-hexo/</id>
    <published>2016-05-19T16:00:00.000Z</published>
    <updated>2016-05-24T03:57:26.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>EventBus源码阅读记录</title>
    <link href="http://mengdd.github.io/Android/2016/03/10/eventbus-codes-analysis/"/>
    <id>http://mengdd.github.io/Android/2016/03/10/eventbus-codes-analysis/</id>
    <published>2016-03-09T16:00:00.000Z</published>
    <updated>2016-05-24T03:56:48.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;EventBus源码阅读记录&quot;&gt;&lt;a href=&quot;#EventBus源码阅读记录&quot; class=&quot;headerlink&quot; title=&quot;EventBus源码阅读记录&quot;&gt;&lt;/a&gt;EventBus源码阅读记录&lt;/h1&gt;&lt;p&gt;EventBus是一个Android上用的消息分发的类库,非常灵活好用,主要的原理是利用了反射注册以及调用.&lt;br&gt;本文是在阅读EventBus的源码过程中所记录的东西, 遇到不懂的去查了,然后留下了链接.&lt;br&gt;有点流水账,讲得也不是很深入,如果有错请帮忙指正.&lt;br&gt;repo地址:&lt;br&gt;&lt;a href=&quot;https://github.com/greenrobot/EventBus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;greenrobot/EventBus&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;EventBus的构造&quot;&gt;&lt;a href=&quot;#EventBus的构造&quot; class=&quot;headerlink&quot; title=&quot;EventBus的构造&quot;&gt;&lt;/a&gt;EventBus的构造&lt;/h2&gt;&lt;p&gt;双重加锁的单例.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; EventBus defaultInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; EventBus &lt;span class=&quot;title&quot;&gt;getDefault&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (defaultInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (EventBus.class) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (defaultInstance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                defaultInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventBus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; defaultInstance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是仍然开放了构造函数,用于构造其他别的对象.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Builder模式&lt;/strong&gt;: &lt;code&gt;EventBusBuilder&lt;/code&gt;.&lt;br&gt;有一个&lt;code&gt;DEFAULT_BUILDER&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;注册&quot;&gt;&lt;a href=&quot;#注册&quot; class=&quot;headerlink&quot; title=&quot;注册&quot;&gt;&lt;/a&gt;注册&lt;/h2&gt;&lt;p&gt;注册即添加订阅者,调用&lt;code&gt;register()&lt;/code&gt;方法:&lt;br&gt;方法参数最全时共有三个参数:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object subscriber, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; sticky, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; priority)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;SubscriberMethod&amp;gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriber.getClass());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (SubscriberMethod subscriberMethod : subscriberMethods) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscribe(subscriber, subscriberMethod, sticky, priority);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;subscriber&lt;/code&gt;(订阅者)传入的是一个对象,用到了它的class.&lt;br&gt;&lt;code&gt;SubscriberMethodFinder&lt;/code&gt;会去找这个类中的方法.&lt;br&gt;被找到的方法最后会被缓存到一个map里,key是&lt;code&gt;class&lt;/code&gt;, value是&lt;code&gt;ArrayList&amp;lt;SubscriberMethod&amp;gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;寻找方法&quot;&gt;&lt;a href=&quot;#寻找方法&quot; class=&quot;headerlink&quot; title=&quot;寻找方法&quot;&gt;&lt;/a&gt;寻找方法&lt;/h3&gt;&lt;p&gt;在一个类(class)中寻找方法的过程, 首先是拿出方法:&lt;br&gt;在循环中skip了一些系统的类, 因为我们不可能在这些类里加入方法.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (clazz != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String name = clazz.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;java.&quot;&lt;/span&gt;) || name.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;javax.&quot;&lt;/span&gt;) || name.startsWith(&lt;span class=&quot;string&quot;&gt;&quot;android.&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Skip system classes, this just degrades performance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Starting with EventBus 2.2 we enforced methods to be public (might change with annotations again)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This is faster than getMethods, especially when subscribers a fat classes like Activities&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method[] methods = clazz.getDeclaredMethods();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filterSubscriberMethods(subscriberMethods, eventTypesFound, methodKeyBuilder, methods);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Throwable th) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method[] methods = subscriberClass.getMethods();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscriberMethods.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        eventTypesFound.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filterSubscriberMethods(subscriberMethods, eventTypesFound, methodKeyBuilder, methods);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clazz = clazz.getSuperclass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h4&gt;&lt;p&gt;关于反射的性能讨论, 代码中有说:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This is faster than getMethods, especially when subscribers a fat classes like Activities&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method[] methods = clazz.getDeclaredMethods();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为什么呢?&lt;br&gt;&lt;code&gt;getMethods()&lt;/code&gt;返回了所有的public方法,包含从所有基类继承的,也即包含了从Object类中继承的public方法.&lt;br&gt;&lt;code&gt;getDeclaredMethods()&lt;/code&gt;返回了该类中声明的所有方法,包括各种访问级别的,但是只包含本类中的,不包括基类中的方法.&lt;/p&gt;
&lt;p&gt;相关DOC:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;反射package-summary&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getDeclaredMethods(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getDeclaredMethods()&lt;/a&gt;)&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getMethods(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getMethods()&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&quot;Issue-of-NoClassDefFoundError&quot;&gt;&lt;a href=&quot;#Issue-of-NoClassDefFoundError&quot; class=&quot;headerlink&quot; title=&quot;Issue of NoClassDefFoundError&quot;&gt;&lt;/a&gt;Issue of NoClassDefFoundError&lt;/h4&gt;&lt;p&gt;这里有一个try catch主要是为了解决这个issue: &lt;a href=&quot;https://github.com/greenrobot/EventBus/issues/149&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/greenrobot/EventBus/issues/149&lt;/a&gt;&lt;br&gt;本来的流程是: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从自己的class开始,每次都&lt;code&gt;getDeclaredMethods()&lt;/code&gt;, 即提取自己类中的方法,不取基类.&lt;/li&gt;
&lt;li&gt;取完之后, &lt;code&gt;getSuperclass()&lt;/code&gt;,获取基类的class,重新进入while循环.直到进入java包或者android包才退出.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是&lt;code&gt;getDeclaredMethods()&lt;/code&gt;会检查一些参数和返回值, 如果找不到类型则抛出NoClassDefFoundError.&lt;br&gt;&lt;code&gt;getMethods()&lt;/code&gt;却不检查.&lt;/p&gt;
&lt;p&gt;什么样的情况会抛出这个Error呢?&lt;/p&gt;
&lt;p&gt;Android代码里可能会有一些方法标明了&lt;code&gt;@TargetApi&lt;/code&gt;,表明是更高级的sdk上才会有的.&lt;br&gt;这样在低版本的机器上遇到了这些代码,就无法解析出它们的类了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只要你的作为subscriber的class里含有这种东西,就会出现问题.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了解决这个崩溃, 所以代码里catch了一把,然后采用第二种方案&lt;code&gt;getMethods()&lt;/code&gt;,一次性get所有基类中的方法,这种效率虽然低,但是不会抛异常.&lt;br&gt;需要把之前的map都清理一把.&lt;/p&gt;
&lt;h3 id=&quot;筛选方法&quot;&gt;&lt;a href=&quot;#筛选方法&quot; class=&quot;headerlink&quot; title=&quot;筛选方法&quot;&gt;&lt;/a&gt;筛选方法&lt;/h3&gt;&lt;p&gt;得到了所有的方法之后,开始筛选方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filterSubscriberMethods&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;SubscriberMethod&amp;gt; subscriberMethods, HashMap&amp;lt;String, Class&amp;gt; eventTypesFound, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder methodKeyBuilder, Method[] methods)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里第一个参数会作为最后的返回值,即我们方法选择的结果.&lt;/p&gt;
&lt;p&gt;筛选的过程, 遍历所有找到的方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看它是以”onEvent”开头,即为我们要找的目标方法.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后&lt;code&gt;getModifiers()&lt;/code&gt;看它是一个&lt;strong&gt;public&lt;/strong&gt;的方法,并且不是我们要忽略的方法.&lt;br&gt;注意这里用到了位操作&lt;strong&gt;&amp;amp;&lt;/strong&gt;来比较. 结果不为零表示满足,为零表示不满足.&lt;br&gt;默认的忽略方法是&lt;strong&gt;&lt;em&gt;static, bridge, synthetic&lt;/em&gt;&lt;/strong&gt;方法.&lt;br&gt;后两个词指的其实是同一种东东,但是这是什么东东呢?&lt;br&gt;是编译器生成的方法, 见参考链接:&lt;br&gt;&lt;a href=&quot;https://javax0.wordpress.com/2014/02/26/syntethic-and-bridge-methods/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://javax0.wordpress.com/2014/02/26/syntethic-and-bridge-methods/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html&lt;/a&gt;&lt;br&gt;从上面的例子中可以看出,编译器生成&lt;strong&gt;&lt;em&gt;bridge&lt;/em&gt;&lt;/strong&gt;方法主要是为了保证多态的顺利进行.它和基类的签名一样,但是实现去调用了子类的方法.自己偷偷完成了其中的类型转换.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取参数类型:必须是一个参数.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取&lt;code&gt;ThreadMode&lt;/code&gt;: 即看方法名中onEvent之后还是什么,一共有四种Mode,对应四种方法名:&lt;br&gt;&lt;strong&gt;&lt;em&gt;onEvent(), onEventMainThread(), onEventBackgroundThread(), onEventAsync()&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;如果获取不到&lt;code&gt;ThreadMode&lt;/code&gt;,则continue;即这个方法不是我们要找的方法.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用&lt;code&gt;StringBuilder&lt;/code&gt;组成一个key: &lt;strong&gt;&lt;em&gt;method name&amp;gt;parameterType class name&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;注意这里StringBuilder的清理方式是&lt;code&gt;setLength(0)&lt;/code&gt;.&lt;br&gt;然后放进了一个&lt;code&gt;eventTypesFound&lt;/code&gt;的HashMap, String是key, Class是value,这里放的是&lt;code&gt;method.getDeclaringClass()&lt;/code&gt;;即方法声明的那个类的类型.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意这里还利用了&lt;code&gt;put()&lt;/code&gt;方法的返回值,如果map里之前有这个key对应的值,那么老的value会作为返回值返回.&lt;br&gt;文档:&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html#put(K,%20V&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashMap.put()&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;这里还用了这个一个方法: &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#isAssignableFrom(java.lang.Class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;isAssignableFrom&lt;/a&gt;)&lt;br&gt;判断是否自己的class是参数的基类或接口.如果传入的参数是当前对象的子类或自身,则返回true.&lt;/p&gt;
&lt;p&gt;如果有old class存在,并且old class和新的class不能互相转换, 后者old是new的子类, 那么&lt;code&gt;eventTypesFound&lt;/code&gt;这个map里还是保存老的值.&lt;/p&gt;
&lt;p&gt;如果存在old class,但是old class是新加class的父类,会把新的class加进&lt;code&gt;eventTypesFound&lt;/code&gt;的map,取代前者,即这个map中尽量放继承体系下层中更具体的类.&lt;br&gt;这里虽然父类没有被放进&lt;code&gt;eventTypesFound&lt;/code&gt;,但是父类的方法仍然会被加进最后返回的methods的map.&lt;/p&gt;
&lt;p&gt;筛选结束后,我们就获取到了所有的目标方法.&lt;br&gt;把它们都存在了一个cache map里面,以免同一个类下次我们又要重新筛选一遍:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, List&amp;lt;SubscriberMethod&amp;gt;&amp;gt; methodCache = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;Class&amp;lt;?&amp;gt;, List&amp;lt;SubscriberMethod&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;订阅&quot;&gt;&lt;a href=&quot;#订阅&quot; class=&quot;headerlink&quot; title=&quot;订阅&quot;&gt;&lt;/a&gt;订阅&lt;/h3&gt;&lt;p&gt;得到了方法的list(&lt;code&gt;List&amp;lt;SubscriberMethod&amp;gt;&lt;/code&gt;)之后,我们要对每一个成员调用&lt;br&gt;&lt;code&gt;private void subscribe(Object subscriber, SubscriberMethod subscriberMethod, boolean sticky, int priority)&lt;/code&gt; 方法.&lt;/p&gt;
&lt;p&gt;里面有一个新的数据类型&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;:&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CopyOnWriteArrayList Java doc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://developer.android.com/reference/java/util/concurrent/CopyOnWriteArrayList.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CopyOnWriteArrayList android doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;类说明: &lt;em&gt;A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这个数据类型是一个ArrayList,但是它在每次进行变异操作之前都拷贝一份新的.它底层的数组是&lt;strong&gt;&lt;em&gt;volatile&lt;/em&gt;&lt;/strong&gt;的.&lt;br&gt;这种数据类型的写操作代价很高.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subscribe()&lt;/code&gt;方法中主要是给这两个字段放数据:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;private final Map&amp;lt;Class&amp;lt;?&amp;gt;, CopyOnWriteArrayList&amp;lt;Subscription&amp;gt;&amp;gt; subscriptionsByEventType;&lt;/code&gt;&lt;br&gt;key是eventType的Class, value是Subscription这种数据类型的数组:&lt;br&gt;&lt;code&gt;Subscription newSubscription = new Subscription(subscriber, subscriberMethod, priority);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;private final Map&amp;lt;Object, List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;&amp;gt; typesBySubscriber;&lt;/code&gt;&lt;br&gt;key是subscriber,即订阅者的类的对象,value是eventType的class,即事件类.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;注销&quot;&gt;&lt;a href=&quot;#注销&quot; class=&quot;headerlink&quot; title=&quot;注销&quot;&gt;&lt;/a&gt;注销&lt;/h2&gt;&lt;p&gt;&lt;code&gt;unregister()&lt;/code&gt;的时候, 传入subscriber:&lt;br&gt;首先从typesBySubscriber获取到事件的List,然后遍历这个List, 从subscriptionsByEventType中移除该eventType,并且subscriber是当前subscriber的Subscription.&lt;br&gt;遍历完成之后,从typesBySubscriber移除该subscriber.&lt;/p&gt;
&lt;h2 id=&quot;事件触发&quot;&gt;&lt;a href=&quot;#事件触发&quot; class=&quot;headerlink&quot; title=&quot;事件触发&quot;&gt;&lt;/a&gt;事件触发&lt;/h2&gt;&lt;p&gt;好了,注册和反注册到这里就结束了,看起来也就是找到一些方法和类型,放在一些map里面,注销的时候再从map里面拿出来而已.&lt;br&gt;真正做事情的代码呢?&lt;/p&gt;
&lt;p&gt;首先看事件的触发: &lt;code&gt;post()&lt;/code&gt;方法, 这里传入的参数是事件类对象.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PostingThreadState postingState = currentPostingThreadState.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Object&amp;gt; eventQueue = postingState.eventQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eventQueue.add(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!postingState.isPosting) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postingState.isMainThread = Looper.getMainLooper() == Looper.myLooper();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        postingState.isPosting = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (postingState.canceled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventBusException(&lt;span class=&quot;string&quot;&gt;&quot;Internal error. Abort state was not reset&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!eventQueue.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                postSingleEvent(eventQueue.remove(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), postingState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            postingState.isPosting = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            postingState.isMainThread = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大致地看上去好像就是加入了一个队列,然后发送出去直到队列为空.&lt;/p&gt;
&lt;p&gt;对每一个事件来说,是调用了&lt;code&gt;postSingleEvent()&lt;/code&gt;这个方法.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;postSingleEvent()&lt;/code&gt;这个方法里&lt;code&gt;eventInheritance&lt;/code&gt;为true时(默认行为)会把event的class拿出来,然后取出它的所有基类和接口,和它自己一起放在一个map里.&lt;br&gt;这是可以理解的,因为可能我们本来的需求是监听了一个灾难事件,后来的需求发展,又写了个它的子类事件叫地震.&lt;br&gt;那么当我post地震事件的时候,除了地震事件后来新加的处理,当然也要采取原先灾难事件的相关措施.&lt;/p&gt;
&lt;p&gt;取出所有基类和接口的方法:&lt;code&gt;lookupAllEventTypes()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Looks up all Class objects including super classes and interfaces. Should also work for interfaces. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; lookupAllEventTypes(Class&amp;lt;?&amp;gt; eventClass) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (eventTypesCache) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; eventTypes = eventTypesCache.get(eventClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (eventTypes == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            eventTypes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Class&amp;lt;?&amp;gt; clazz = eventClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (clazz != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                eventTypes.add(clazz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addInterfaces(eventTypes, clazz.getInterfaces());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                clazz = clazz.getSuperclass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            eventTypesCache.put(eventClass, eventTypes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; eventTypes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有这些费时的遍历查找操作都是有一个map作为cache的.&lt;br&gt;注意这里添加接口的时候,因为&lt;strong&gt;接口是多继承的&lt;/strong&gt;,所以除了去重以外,还需要深入遍历:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** Recurses through super interfaces. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addInterfaces&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; eventTypes, Class&amp;lt;?&amp;gt;[] interfaces)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Class&amp;lt;?&amp;gt; interfaceClass : interfaces) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!eventTypes.contains(interfaceClass)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            eventTypes.add(interfaceClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addInterfaces(eventTypes, interfaceClass.getInterfaces());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取到所有类型之后,进行遍历, 对每一个eventClass进行处理, 真正的对每一个类型post的方法是这个:&lt;br&gt;&lt;code&gt;private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&amp;lt;?&amp;gt; eventClass)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里,从之前那个&lt;code&gt;subscriptionsByEventType&lt;/code&gt;里面,根据eventClass把&lt;code&gt;CopyOnWriteArrayList&amp;lt;Subscription&amp;gt;&lt;/code&gt;拿出来.&lt;br&gt;这里拿出来的就是一个List,里面是一个一个的&lt;em&gt;onEventXXX&lt;/em&gt;方法的个体,&lt;br&gt;对每一个&lt;code&gt;Subscription&lt;/code&gt;,执行了:&lt;br&gt;&lt;code&gt;private void postToSubscription(Subscription subscription, Object event, boolean isMainThread)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;线程模式&quot;&gt;&lt;a href=&quot;#线程模式&quot; class=&quot;headerlink&quot; title=&quot;线程模式&quot;&gt;&lt;/a&gt;线程模式&lt;/h3&gt;&lt;p&gt;这里根据线程模式不同,有一个switch case.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postToSubscription&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Subscription subscription, Object event, &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; isMainThread)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (subscription.subscriberMethod.threadMode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; PostThread:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            invokeSubscriber(subscription, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MainThread:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isMainThread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                invokeSubscriber(subscription, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mainThreadPoster.enqueue(subscription, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BackgroundThread:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isMainThread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                backgroundPoster.enqueue(subscription, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                invokeSubscriber(subscription, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Async:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            asyncPoster.enqueue(subscription, event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Unknown thread mode: &quot;&lt;/span&gt; + subscription.subscriberMethod.threadMode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里&lt;code&gt;invokeSubscriber(Subscription subscription, Object event)&lt;/code&gt;方法就是直接通过&lt;code&gt;Method&lt;/code&gt;, 反射调用, invoke了那个方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`case PostThread`: 直接在当前线程调用这个方法.
`case MainThread`: 如果当前线程是主线程,则直接调用,否则加入mainThreadPoster的队列.
`case BackgroundThread`: 如果当前是主线程,加入backgroundPoster队列, 否则直接调用.
`case Async`: 加入asyncPoster队列.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加入的三个队列类型如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; HandlerPoster mainThreadPoster; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BackgroundPoster backgroundPoster;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; AsyncPoster asyncPoster;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HandlerPoster&lt;/code&gt;继承自Handler, 内部有一个&lt;code&gt;PendingPostQueue&lt;/code&gt;.&lt;br&gt;这三个poster里面都是这个&lt;code&gt;PendingPostQueue&lt;/code&gt;, 数据结构是&lt;code&gt;PendingPost&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;关于Queue的相关知识&quot;&gt;&lt;a href=&quot;#关于Queue的相关知识&quot; class=&quot;headerlink&quot; title=&quot;关于Queue的相关知识&quot;&gt;&lt;/a&gt;关于Queue的相关知识&lt;/h4&gt;&lt;p&gt;队列Queue: Java中Queue是一个接口, 类文档:&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Queue Java doc&lt;/a&gt;&lt;br&gt;它是继承自Collection这个接口:&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Collection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Queue这个数据结构可以自己定义顺序, 可以用来做FIFO也可以用来做LIFO.&lt;br&gt;每一种Queue的实现都必须指定要用什么顺序.&lt;br&gt;不管是什么顺序,head上的那个元素都是&lt;code&gt;remove()&lt;/code&gt;或&lt;code&gt;poll()&lt;/code&gt;即将移除的元素.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;offer()&lt;/code&gt;方法将会试图插入一个元素,如果失败了就会返回false.&lt;br&gt;&lt;code&gt;remove()&lt;/code&gt;和&lt;code&gt;poll()&lt;/code&gt;方法都会删除并返回head元素.&lt;br&gt;&lt;code&gt;peek()&lt;/code&gt;只查询,不remove.&lt;/p&gt;
&lt;h4 id=&quot;主线程处理-HandlerPoster&quot;&gt;&lt;a href=&quot;#主线程处理-HandlerPoster&quot; class=&quot;headerlink&quot; title=&quot;主线程处理 HandlerPoster&quot;&gt;&lt;/a&gt;主线程处理 HandlerPoster&lt;/h4&gt;&lt;p&gt;所以这里看看&lt;code&gt;HandlerPoster&lt;/code&gt;是怎么做的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它继承自&lt;code&gt;Handler&lt;/code&gt;, 初始化的时候用的是mainLooper,所以确保了消息处理操作都是在主线程:&lt;br&gt;&lt;code&gt;mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;这个里面写了一个自己的queue: PendingPostQueue里面包含的数据是:&lt;code&gt;PendingPost&lt;/code&gt;.&lt;br&gt;&lt;code&gt;PendingPost&lt;/code&gt;这个类里用了一个pool来实现一个对象池,最大限制是10000.&lt;br&gt;obtain的时候, 如果池子里有对象,则从池子里拿出来一个, 如果池中没有对象,则new一个新的PendingPost; release的时候放回池子去.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;HandlerPoster&lt;/code&gt;主要做两件事:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;enqueue一个PendingPost, sendMessage, &lt;/li&gt;
&lt;li&gt;在handleMessage()方法里面处理message.&lt;br&gt;handleMessage()里面是一个while循环,从队列里面拿出PendingPost然后调用EventBus的invokeSubscriber()方法.&lt;br&gt;这里调用方法之前就会release该PendingPost.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;异步和后台处理-AsyncPoster和BackgroundPoster&quot;&gt;&lt;a href=&quot;#异步和后台处理-AsyncPoster和BackgroundPoster&quot; class=&quot;headerlink&quot; title=&quot;异步和后台处理 AsyncPoster和BackgroundPoster&quot;&gt;&lt;/a&gt;异步和后台处理 AsyncPoster和BackgroundPoster&lt;/h4&gt;&lt;p&gt;&lt;code&gt;AsyncPoster&lt;/code&gt;和&lt;code&gt;BackgroundPoster&lt;/code&gt;都是一个&lt;code&gt;Runnable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;enqueue的时候把PendingPost加入队列, 然后调用&lt;code&gt;eventBus.getExecutorService().execute(this);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;run()&lt;/code&gt;方法里面就是从队列中拿出PendingPost,然后invoke,和上面很像.&lt;/p&gt;
&lt;p&gt;默认的对象是:&lt;br&gt;&lt;code&gt;private final static ExecutorService DEFAULT_EXECUTOR_SERVICE = Executors.newCachedThreadPool();&lt;/code&gt;&lt;br&gt;提供了一个线程池,可以异步地执行操作.&lt;/p&gt;
&lt;p&gt;那么它们两者有什么不同呢?&lt;/p&gt;
&lt;p&gt;AsyncPoster很简单, run里面直接invoke, 没有过多的判断. 即对每一个任务都是直接启动线程执行.&lt;br&gt;BackgroundPoster比较复杂,有一个boolean来判断是否正在run, run()方法里面是一个while true的循环,当queue全部被执行完之后才return.&lt;br&gt;如果队列中有任务正在执行,这时候enqueue()操作会加入元素到队列中,等待执行.&lt;br&gt;即BackgroundPoster只用了一个线程,所有的事件都是按顺序执行的,等到前面的任务执行完了才会进行下一个.&lt;/p&gt;
&lt;p&gt;对各个模式的说明可以参见&lt;code&gt;ThreadMode.java&lt;/code&gt;类.&lt;br&gt;Async模式下,不管你的post thread是什么,都是会新启线程来执行任务的,所以适用于那些比较耗时的操作.&lt;br&gt;为了避免并发线程过多, EventBus里面使用了一个线程池来复用线程.&lt;/p&gt;
&lt;h2 id=&quot;事件取消&quot;&gt;&lt;a href=&quot;#事件取消&quot; class=&quot;headerlink&quot; title=&quot;事件取消&quot;&gt;&lt;/a&gt;事件取消&lt;/h2&gt;&lt;p&gt;有一个public的cancel方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cancelEventDelivery&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object event)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PostingThreadState postingState = currentPostingThreadState.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!postingState.isPosting) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventBusException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;This method may only be called from inside event handling methods on the posting thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventBusException(&lt;span class=&quot;string&quot;&gt;&quot;Event may not be null&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (postingState.event != event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventBusException(&lt;span class=&quot;string&quot;&gt;&quot;Only the currently handled event may be aborted&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (postingState.subscription.subscriberMethod.threadMode != ThreadMode.PostThread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventBusException(&lt;span class=&quot;string&quot;&gt;&quot; event handlers may only abort the incoming event&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    postingState.canceled = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法的使用可以从测试代码里面看出来:&lt;br&gt;1.首先它只能在handler里面调用, 即第一个异常.这里判断的isPosting这个值在post的时候变为true,处理完就变为false.&lt;br&gt;这里用到的currentPostingState:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ThreadLocal&amp;lt;PostingThreadState&amp;gt; currentPostingThreadState = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;PostingThreadState&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; PostingThreadState &lt;span class=&quot;title&quot;&gt;initialValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PostingThreadState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ThreadLocal类是什么?&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/ThreadLocal.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThreadLocal类&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要是用来给每一个线程保存一个不同的状态值.&lt;br&gt;这个currentPostingThreadState在第一次被调用&lt;code&gt;get()&lt;/code&gt;方法的时候初始化,也即在&lt;code&gt;public void post(Object event)&lt;/code&gt; 方法里.&lt;br&gt;然后修改了它的状态, 之后再在同一个线程里,即可访问到它的状态.&lt;/p&gt;
&lt;p&gt;这里cancel的测试也写得很有意思,可以看一下.&lt;/p&gt;
&lt;h2 id=&quot;黏性事件&quot;&gt;&lt;a href=&quot;#黏性事件&quot; class=&quot;headerlink&quot; title=&quot;黏性事件&quot;&gt;&lt;/a&gt;黏性事件&lt;/h2&gt;&lt;p&gt;什么叫Sticky?&lt;br&gt;字面上看是黏性的.&lt;/p&gt;
&lt;p&gt;之前的事件都是非黏性的,即有一个&lt;code&gt;register()&lt;/code&gt;和&lt;code&gt;unregister()&lt;/code&gt;方法.&lt;br&gt;&lt;code&gt;register()&lt;/code&gt;了subscriber之后, EventBus会扫描该类中的onEventXXX()方法,建立一些map来记录.&lt;br&gt;&lt;code&gt;unregister()&lt;/code&gt;即合理地清除了这些数据.&lt;/p&gt;
&lt;p&gt;而对于sticky的事件,注册时调用&lt;code&gt;registerSticky()&lt;/code&gt;, 并没有相应的注销方法.只有一个单独的&lt;code&gt;removeAllStickyEvents()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;sticky的事件注册的时候, &lt;code&gt;subscribe()&lt;/code&gt;方法中, 除了重复上面正常的过程之外, 还有一个额外的map:&lt;br&gt;&lt;code&gt;private final Map&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt; stickyEvents;&lt;/code&gt;&lt;br&gt;这个数据类型是: &lt;code&gt;stickyEvents = new ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, Object&amp;gt;();&lt;/code&gt;&lt;br&gt;存的是event的Class和event对象.&lt;/p&gt;
&lt;p&gt;注册时如果发现这个map中相同的event type要处理,&lt;strong&gt;&lt;em&gt;会立即触发&lt;/em&gt;&lt;/strong&gt;, 通知到它的订阅者.&lt;/p&gt;
&lt;p&gt;注意这个sticky event存的是最近的一个事件: &lt;strong&gt;most recent event&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;sticky事件触发的时候调用:&lt;br&gt;&lt;code&gt;public void postSticky(Object event)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sticky的代码里有一个&lt;code&gt;cast()&lt;/code&gt;方法:&lt;br&gt;看文档:&lt;br&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;cast()&lt;/code&gt;方法就是用来把对象强转成当前的这个Class类型.&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;EventBus是一个Android上用的消息分发的类库,非常灵活好用,主要的原理是利用了反射注册以及调用. &lt;/p&gt;
&lt;p&gt;本文是在阅读EventBus的源码过程中所记录的东西, 遇到不懂的去查了, 然后留下了链接.&lt;br&gt;有点流水账,讲得也不是很深入,如果有错请帮忙指正.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;EventBus源码阅读记录&quot;&gt;&lt;a href=&quot;#EventBus源码阅读记录&quot; class=&quot;headerlink&quot; title=&quot;EventBus源码阅读记录&quot;&gt;&lt;/a&gt;EventBus源码阅读记录&lt;/h1&gt;&lt;p&gt;EventBus是一个Android上用的消息分发的类库,非常灵活好用,主要的原理是利用了反射注册以及调用.&lt;br&gt;本文是在阅读EventBus的源码过程中所记录的东西, 遇到不懂的去查了,然后留下了链接.&lt;br&gt;有点流水账,讲得也不是很深入,如果有错请帮忙指正.&lt;br&gt;repo地址:&lt;br&gt;&lt;a href=&quot;https://github.com/greenrobot/EventBus&quot;&gt;greenrobot/EventBus&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>My First Post</title>
    <link href="http://mengdd.github.io/others/2016/01/28/my-first-post/"/>
    <id>http://mengdd.github.io/others/2016/01/28/my-first-post/</id>
    <published>2016-01-27T16:00:00.000Z</published>
    <updated>2016-05-24T03:55:54.000Z</updated>
    
    <content type="html">&lt;p&gt;Hi, this is the first post.&lt;br&gt;As you know, this is just for testing.&lt;/p&gt;
&lt;p&gt;Anyway, if you are here, you must be bored and are trying to find something to do.&lt;/p&gt;
&lt;p&gt;My plan is to grow here as my second blog site.&lt;br&gt;The first one is here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/mengdd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;圣骑士wind的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Do whatever improves yourself.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Life is so beautiful~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Haha and Bye&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Hi, this is the first post.&lt;br&gt;As you know, this is just for testing.&lt;/p&gt;
&lt;p&gt;Anyway, if you are here, you must be bored and are trying to
    
    </summary>
    
      <category term="others" scheme="http://mengdd.github.io/categories/others/"/>
    
    
  </entry>
  
</feed>
