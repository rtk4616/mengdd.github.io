<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meng&#39;s pages</title>
  <subtitle>Android developer and maybe other intersting things.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mengdd.github.io/"/>
  <updated>2016-10-21T07:57:52.000Z</updated>
  <id>http://mengdd.github.io/</id>
  
  <author>
    <name>Dandan Meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Weekly Notes Issue 227</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/21/android-weekly-notes-issue-227/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/21/android-weekly-notes-issue-227/</id>
    <published>2016-10-21T06:52:53.000Z</published>
    <updated>2016-10-21T07:57:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-227&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-227&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #227&quot;&gt;&lt;/a&gt;Android Weekly Issue #227&lt;/h1&gt;&lt;p&gt;October 16th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-227&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #227&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的Mobile Vision API 人脸检测; Firebase的Remote Config; 与HashMap有关的优化; 提高RecyclerView帧率的优化; 使用AutoValue生成model代码; 开源库中抽象类和接口的使用讨论; Bottom Sheet的使用; Android Studio中的版本控制系统; ConstraintLayout的使用; 应用换Bottom Navigation; Nougat的Messaging Style Notification; 自定义字体; Reductor的使用等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Face-Detection-Concepts-Overview&quot;&gt;&lt;a href=&quot;#Face-Detection-Concepts-Overview&quot; class=&quot;headerlink&quot; title=&quot;Face Detection Concepts Overview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/vision/face-detection-concepts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Face Detection Concepts Overview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章来自Mobile Vision, 讲人脸检测及相关概念.&lt;br&gt;API使用&lt;a href=&quot;https://developers.google.com/vision/android/detect-faces-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;.&lt;br&gt;&lt;a href=&quot;https://github.com/googlesamples/android-vision&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sample&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Exploring-Firebase-on-Android-amp-iOS-Remote-Config&quot;&gt;&lt;a href=&quot;#Exploring-Firebase-on-Android-amp-iOS-Remote-Config&quot; class=&quot;headerlink&quot; title=&quot;Exploring Firebase on Android &amp;amp; iOS: Remote Config&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@hitherejoe/exploring-firebase-on-android-ios-remote-config-3e1407b088f6#.ozr0s8s5q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exploring Firebase on Android &amp;amp; iOS: Remote Config&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Remote config是Firebase提供的一个feature, 让我们可以定义参数, 在firebase的console管理, 从而在server端控制应用的UI或者行为, 并且可以选择生效的用户范围.&lt;/p&gt;
&lt;p&gt;之前还有这个文章是关于&lt;a href=&quot;https://medium.com/exploring-android/exploring-firebase-on-android-ios-analytics-8484b61a21ba#.lu7cv7ejz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase Analytics&lt;/a&gt;的.&lt;/p&gt;
&lt;p&gt;本篇文章介绍了Firebase的Remote Config可以干什么, 以及怎么做, 解说很详细.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;&lt;br&gt;我们用Remote Config定义的键值对叫参数(parameters).  它提供了这个参数相关的what信息(key, the identifier), 和how信息(value, the configuration).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件&lt;/strong&gt;&lt;br&gt;条件值(conditional value)也是一个键值对, 其中condition指定了需要满足的条件, value指定了满足条件时需要返回的值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优先级&lt;/strong&gt;&lt;br&gt;如果单个条件被满足, 那么返回对应的值; 如果多个条件都被满足, 那么返回主导条件(list上方的条件)对应的值; 如果没有条件满足, 则返回默认值; 如果没有定义默认值, 则什么也不返回.&lt;/p&gt;
&lt;p&gt;文中还详细介绍了Android和iOS端的实现, 以及console的配置.&lt;/p&gt;
&lt;h2 id=&quot;Android-App-Optimization-Using-ArrayMap-and-SparseArray&quot;&gt;&lt;a href=&quot;#Android-App-Optimization-Using-ArrayMap-and-SparseArray&quot; class=&quot;headerlink&quot; title=&quot;Android App Optimization Using ArrayMap and SparseArray&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@amitshekhar/android-app-optimization-using-arraymap-and-sparsearray-f2b4e2e3dc47#.29qai8u8j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android App Optimization Using ArrayMap and SparseArray&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当我们需要存储键值对的时候, 我们总是首先想到用&lt;code&gt;HashMap&lt;/code&gt;, 然而IDE(Android Studio)有时候会警告提醒你, 应该用&lt;code&gt;ArrayMap&lt;/code&gt;或&lt;code&gt;SparseArray&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;HashMap-vs-ArrayMap&quot;&gt;&lt;a href=&quot;#HashMap-vs-ArrayMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap vs ArrayMap&quot;&gt;&lt;/a&gt;HashMap vs ArrayMap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ArrayMap&lt;/code&gt;比传统的&lt;code&gt;HashMap&lt;/code&gt;更节省内存, 因为它把自己的映射放在数组结构中: 一个整型数组放每一个item的hash code, 一个Object数组放key/value对. 这样避免了为每一个entry创建额外的对象, 而且数组增长也好控制.&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;ArrayMap&lt;/code&gt;并不是为很大的数据集设计的, 并且它会比&lt;code&gt;HashMap&lt;/code&gt;慢一些, 以为查找需要二分查找, 增删需要在数组中操作.&lt;/p&gt;
&lt;h3 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;是一个&lt;code&gt;HashMap.Entry&lt;/code&gt;的数组, 其组成是key, value, HashCode, 还有一个指针.&lt;/p&gt;
&lt;p&gt;当进行插入时: 首先计算出key的HashCode, 然后用这个hashCode找到对应的bucket, 如果已经存了元素, 则把旧元素的指针指向新元素, 即把bucket变为一个&lt;code&gt;LinkedList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当进行查询时: 复杂度为O(1), 但是这样是牺牲了更多的空间复杂度得到的.&lt;/p&gt;
&lt;p&gt;HashMap的缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为key和value都不能是原生类型, 所以插入时可能会有自动装箱, 导致创建额外的对象.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap.Entry&lt;/code&gt;本身就是一层额外的对象.&lt;/li&gt;
&lt;li&gt;每次HashMap的收缩或者扩张, Buckets都要重新排列, 随着对象变多, 这个操作变得越发昂贵.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ArrayMap&quot;&gt;&lt;a href=&quot;#ArrayMap&quot; class=&quot;headerlink&quot; title=&quot;ArrayMap&quot;&gt;&lt;/a&gt;ArrayMap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ArrayMap&lt;/code&gt;使用两个数组:&lt;br&gt;&lt;code&gt;int[] mHashes&lt;/code&gt;用来存哈希值; &lt;code&gt;Object[] mArray&lt;/code&gt;来存对象.&lt;/p&gt;
&lt;p&gt;当插入键值对时: Key/Value被自动装箱, Key被插入到&lt;code&gt;mArray[]&lt;/code&gt;数组的下一个位置, Value也被插入到&lt;code&gt;mArray[]&lt;/code&gt;, 在Key的下一个位置.&lt;br&gt;计算出的哈希值被放在&lt;code&gt;mHashes[]&lt;/code&gt;的下一个位置.&lt;/p&gt;
&lt;p&gt;当查询一个Key时: 首先计算出Key的哈希值, 在&lt;code&gt;mHashes&lt;/code&gt;中二分查找这个hashCode(时间复杂度(logN)), 当得到hash的index之后, 我们就知道&lt;code&gt;mArray&lt;/code&gt;中&lt;code&gt;2*index&lt;/code&gt;和&lt;code&gt;2*index+1&lt;/code&gt;的位置对应的是查找的key和value.&lt;/p&gt;
&lt;p&gt;虽然时间复杂度提升了, 但是这样却更省空间.&lt;/p&gt;
&lt;h3 id=&quot;推荐的数据结构&quot;&gt;&lt;a href=&quot;#推荐的数据结构&quot; class=&quot;headerlink&quot; title=&quot;推荐的数据结构:&quot;&gt;&lt;/a&gt;推荐的数据结构:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayMap&amp;lt;K,V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArraySet&amp;lt;K,V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashSet&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseArray&amp;lt;V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseBooleanArray&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,Boolean&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseIntArray&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,Integer&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseLongArray&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Integer,Long&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LongSparseArray&amp;lt;V&amp;gt;&lt;/code&gt; in place of &lt;code&gt;HashMap&amp;lt;Long,V&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;RecyclerView-How-we-achieved-60-FPS-in-Workable’s-Android-App&quot;&gt;&lt;a href=&quot;#RecyclerView-How-we-achieved-60-FPS-in-Workable’s-Android-App&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView: How we achieved 60 FPS in Workable’s Android App&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@p.tournaris/recyclerview-how-we-achieved-60-fps-tips-in-workables-android-app-recyclerviews-c646c796473c#.h4gimmdkp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RecyclerView: How we achieved 60 FPS in Workable’s Android App&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们经常会用RecyclerView来显示一个list的数据.&lt;br&gt;作者他们做的是一个招聘应用: Workable, 其中会用list来显示candidates.&lt;br&gt;他们还使用了DataBinding.&lt;br&gt;本文是作者他们关于RecyclerView的帧率所做的一些优化.&lt;/p&gt;
&lt;p&gt;首先他们使用了Android Studio的Allocation Tracking, 然后上下滚动, 从报告发现, 他们布局中使用的&lt;code&gt;TableLayout&lt;/code&gt;花费了很多资源, 于是后来他们改为&lt;code&gt;LinearLayout&lt;/code&gt;加权重的方式来解决, 摆脱了耗费资源的&lt;code&gt;TableLayout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;另一个引起很多资源分配的问题是, 对于需要大写的文字, xml中的:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;android:textAllCaps&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TextView&lt;/code&gt;的代码中会为此生成一个对象:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (allCaps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTransformationMethod(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AllCapsTransformationMethod(getContext()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个在静态的布局中可能没有问题, 但是在一个滚动的list中可能会有些影响.&lt;/p&gt;
&lt;p&gt;改进方法是改为用java String的&lt;code&gt;.toUpperCase()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;然后他们使用了RecyclerView的&lt;code&gt;.onViewRecycled()&lt;/code&gt;方法. 这个方法让我们知道了RecyclerView中的一行何时被回收, 这样我们就可以释放一些不需要的资源.&lt;br&gt;他们使用了DataBinding, 所以这是一个合适的时机来删除ViewModel中的&lt;code&gt;OnPropertyChangedCallbacks&lt;/code&gt;, 然后清理ViewModel自身, 我们还可以清理之前用Glide load到ImageView中的图片.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewRecycled&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Candidates holder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(holder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.getCandidateVM().removePropertyChangedCallback();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setCandidateVM(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setHighlightTerm(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setShowJobTitle(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.setShowStage(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.executePendingBindings();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Glide.clear(holder.binding.candidateBrowserAvatar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        holder.binding.candidateBrowserAvatar.setImageDrawable(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onViewRecycled(holder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;作者他们的应用还有一些cache设置:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;binding.fragmentCandidateBrowseList.setItemViewCacheSize(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binding.fragmentCandidateBrowseList.setDrawingCacheEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;binding.fragmentCandidateBrowseList.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后作者测量了他们的FPS, 显示是60 FPS, 并且发现去掉这些cache设置仍然是60.&lt;/p&gt;
&lt;p&gt;测量帧率FPS的工具: &lt;a href=&quot;https://github.com/friendlyrobotnyc/TinyDancer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TinyDancer&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;No-more-value-classes-boilerplate-—-The-power-of-AutoValue&quot;&gt;&lt;a href=&quot;#No-more-value-classes-boilerplate-—-The-power-of-AutoValue&quot; class=&quot;headerlink&quot; title=&quot;No more value classes boilerplate — The power of AutoValue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/rocknnull/no-more-value-classes-boilerplate-the-power-of-autovalue-bbaf36cf8bbe#.r72rsbe34&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;No more value classes boilerplate — The power of AutoValue&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Java/Android编程中经常需要写model对象来存放一些数据, 使用Google的库&lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;可以帮你自动生成这些类, 你需要做的就是定义你的字段, 然后给类加上注解.&lt;/p&gt;
&lt;h3 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h3&gt;&lt;p&gt;在project的&lt;code&gt;build.gradle&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在app的&lt;code&gt;build.gradle&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.neenbedankt.android-apt&amp;apos; // At the beginning&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    provided &amp;quot;com.google.auto.value:auto-value:1.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &amp;quot;com.google.auto.value:auto-value:1.2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;p&gt;比如要创建Film类, 你可以写一个这样的抽象类:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Film&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Film &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String name, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; year)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AutoValue_Film(name, year);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每一个字段都对应一个抽象方法.&lt;br&gt;build一下, &lt;code&gt;AutoValue_Film&lt;/code&gt;类就会自动生成, 加上静态工厂方法(上面的&lt;code&gt;create()&lt;/code&gt;方法) 然后就可以使用工厂方法来得到model:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Film matrix = Film.create(&lt;span class=&quot;string&quot;&gt;&quot;The Matrix&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1999&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点进自动生成的类&lt;code&gt;AutoValue_Film&lt;/code&gt;里可以看到, 连&lt;code&gt;hashCode()&lt;/code&gt;和&lt;code&gt;equals()&lt;/code&gt;方法都生成了.&lt;/p&gt;
&lt;h3 id=&quot;用builder模式&quot;&gt;&lt;a href=&quot;#用builder模式&quot; class=&quot;headerlink&quot; title=&quot;用builder模式&quot;&gt;&lt;/a&gt;用builder模式&lt;/h3&gt;&lt;p&gt;上面的例子随着字段的增多, &lt;code&gt;create()&lt;/code&gt;方法的参数会变得很多, 用起来不方便, 那么此时就需要用Builder模式:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Film&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AutoValue_Film.Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;.Builder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Film &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就可以很方便地加参数了:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Film matrix = Film.builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setName(&lt;span class=&quot;string&quot;&gt;&quot;The Matrix&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setYear(&lt;span class=&quot;number&quot;&gt;1999&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setCategory(Category.FANTASY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setRating(&lt;span class=&quot;number&quot;&gt;8.7f&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setDuration(&lt;span class=&quot;number&quot;&gt;136&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setReleaseDate(releasedDate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setDirectors(directorsList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setCast(castList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;AutoValue扩展-Parcelable&quot;&gt;&lt;a href=&quot;#AutoValue扩展-Parcelable&quot; class=&quot;headerlink&quot; title=&quot;AutoValue扩展 Parcelable&quot;&gt;&lt;/a&gt;AutoValue扩展 Parcelable&lt;/h3&gt;&lt;p&gt;有时候你需要在Activity之间传数据, 需要你的model是&lt;code&gt;Parcelable&lt;/code&gt;的, 此时你就可以用这个&lt;a href=&quot;https://github.com/rharter/auto-value-parcel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;auto-value-parcel&lt;/a&gt;, 在代码里也只需要实现这个接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@AutoValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Film&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parcelable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [...]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有很多的扩展库: &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cauto-value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;extensions for AutoValue&lt;/a&gt;, 比如AutoValue-Gson, AutoValue-Cursor, AutoValue-With, AutoValue-Redacted等.&lt;/p&gt;
&lt;h2 id=&quot;Consider-abstract-class-instead-of-interface&quot;&gt;&lt;a href=&quot;#Consider-abstract-class-instead-of-interface&quot; class=&quot;headerlink&quot; title=&quot;Consider abstract class instead of interface&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hannesdorfmann.com/android/library-abstract-class&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Consider abstract class instead of interface&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章的作者说, 在library开发中, 应该考虑用抽象类而不是接口. 他的库是&lt;a href=&quot;https://github.com/sockeqwe/AdapterDelegates&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdapterDelegates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者先介绍了通用的概念比较:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class vs. interface&lt;br&gt;接口更解耦, 更灵活, 只是定义了一个协议, 不限制实现.&lt;/li&gt;
&lt;li&gt;interface vs. abstract class&lt;br&gt;抽象类会有继承的问题, 基类和子类会共享一些实现, 所以子类的编写者最好能清楚基类的实现, 这样才不会在写子类实现抽象方法的时候打破了基类作者的意图. 另外就是基类作者仍然可能会更新基类, 所以得时刻检查子类是否还是符合基类的设计意图.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是为什么作者还是要把自己库中的接口改为抽象类呢? 这是因为作者的库依赖于Android的库, Android的库中相关代码改了, 作者就得改自己的public接口, 加一个方法, 导致所有新版的使用者也都必须实现这个方法.&lt;/p&gt;
&lt;p&gt;还有一个情况就是比如一个开发者使用了2.1版本, 但是他项目里依赖的另一个第三方库使用了2.0版本. 编译不会出错, 最终的apk中打包的是2.1版本. 然后在这个第三方库的组件里调用2.1才有的新方法时就会抛出错误.&lt;/p&gt;
&lt;p&gt;为了解决这个问题, Jake Wharton建议在库的主要更新(major update)中更改发布的package name和group id: &lt;a href=&quot;http://jakewharton.com/java-interoperability-policy-for-major-version-updates/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jakewharton.com/java-interoperability-policy-for-major-version-updates/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者觉得那每次Android RecyclerView的Adapter更新都会导致自己的库major update, 所以他决定把自己的&lt;code&gt;AdapterDelegate&lt;/code&gt;接口改为抽象类. 这样他就可以对新增的方法提供默认空实现.&lt;/p&gt;
&lt;p&gt;这样定义的抽象类只有抽象方法和一些空实现的方法, 并没有状态和行为的共享可能会传播给子类, 其实和接口是一样的.&lt;/p&gt;
&lt;h2 id=&quot;Android-BottomSheetDialog&quot;&gt;&lt;a href=&quot;#Android-BottomSheetDialog&quot; class=&quot;headerlink&quot; title=&quot;Android BottomSheetDialog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@anitas3791/android-bottomsheetdialog-3871a6e9d538#.462vjndmp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android BottomSheetDialog&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;实现bottom sheet的时候, 有三种选择: container view + &lt;code&gt;BottomSheetBehavior&lt;/code&gt;,  &lt;code&gt;BottomSheetDialogFragment&lt;/code&gt;, &lt;code&gt;BottomSheetDialog&lt;/code&gt;. 前两种的例子比较多, 作者要介绍的是第三种.&lt;/p&gt;
&lt;p&gt;如何选择取决你的用途, container view + &lt;code&gt;BottomSheetBehavior&lt;/code&gt; 适用于&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html#bottom-sheets-persistent-bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;persistent bottom sheet&lt;/a&gt;, 而&lt;code&gt;BottomSheetDialogFragment&lt;/code&gt;和&lt;code&gt;BottomSheetDialog&lt;/code&gt;适用于&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html#bottom-sheets-modal-bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Modal bottom sheets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;之后作者提供了实现代码, 附有theme定制和状态callback的设置.&lt;/p&gt;
&lt;h2 id=&quot;The-VCS-client-of-Android-Studio&quot;&gt;&lt;a href=&quot;#The-VCS-client-of-Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;The VCS client of Android Studio&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://saulmm.github.io/vcs-android-studio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The VCS client of Android Studio&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章介绍Android Studio的版本控制系统.&lt;/p&gt;
&lt;p&gt;在Android Studio 2.2开始, 加入了一个&lt;code&gt;Create command line launcher&lt;/code&gt;, 这样你就可以在命令行或者第三方的版本控制客户端使用Android Studio的diff/merge tool了.&lt;br&gt;作者使用的客户端是&lt;a href=&quot;https://www.sourcetreeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SourceTree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;cmd + shift + A&lt;/code&gt;可以用来find action, 然后就可以找到&lt;code&gt;Compare with branch&lt;/code&gt;:  可以比较当前文件和某个分支上的文件的diff;&lt;br&gt;另外还可以&lt;code&gt;Compare with...&lt;/code&gt;, 来比较和之前某一个特定提交的diff;  以及&lt;code&gt;Compare with Clipboard&lt;/code&gt;来和剪贴板做比较.&lt;/p&gt;
&lt;p&gt;还有一些其他有用的快捷键, 请看原文吧.&lt;/p&gt;
&lt;h2 id=&quot;Constraint-Layout-Icon-Label-Text&quot;&gt;&lt;a href=&quot;#Constraint-Layout-Icon-Label-Text&quot; class=&quot;headerlink&quot; title=&quot;Constraint Layout: Icon Label Text&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sqisland.com/2016/10/constraint-layout-icon-label-text.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Constraint Layout: Icon Label Text&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者想做这样一个UI, 左边是一个icon, 右边是两行字, icon的top和bottom分别和第一行字的top和bottom对齐.&lt;br&gt;&lt;img src=&quot;/images/icon-label-text.jpg&quot; alt=&quot;ConstraintLayout: Icon Label Text&quot;&gt;&lt;br&gt;怎么做呢? 她想到了用&lt;a href=&quot;https://developer.android.com/training/constraint-layout/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConstraintLayout&lt;/a&gt;.&lt;br&gt;代码在这里: &lt;a href=&quot;https://github.com/chiuki/iconlabeltext&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iconlabeltext&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Bye-Bye-Burger&quot;&gt;&lt;a href=&quot;#Bye-Bye-Burger&quot; class=&quot;headerlink&quot; title=&quot;Bye, Bye Burger&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/startup-grind/bye-bye-burger-5bd963806015#.emir2u5kv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bye, Bye Burger&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们的应用从burger menu改为bottom navigation, 此篇为心得分享和他们改版时设计中的一些细节讨论.&lt;/p&gt;
&lt;p&gt;其中状态保存是一个最主要的技术问题.&lt;/p&gt;
&lt;p&gt;改版之后, 作者他们的应用数据表明有以下几个好处:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户参与度提升了;&lt;/li&gt;
&lt;li&gt;在底部导航有入口的功能使用率提高了;&lt;/li&gt;
&lt;li&gt;并没有用户反馈说新的导航不好.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Nougat-–-Messaging-Style-Notifications&quot;&gt;&lt;a href=&quot;#Nougat-–-Messaging-Style-Notifications&quot; class=&quot;headerlink&quot; title=&quot;Nougat – Messaging Style Notifications&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/nougat-messaging-style-notifications/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nougat – Messaging Style Notifications&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Messaging Style Notifications是为信息应用特殊设计的, 提供了一个像对话一样的view.&lt;/p&gt;
&lt;p&gt;Messaging-style notifications和Bundled notifications的主要区别是, Bundled notifications中我们持续创建新的notification, 然后它们被grouped together. 但是用Messaging-style notifications的时候, 我们只有一个notification, 然后我们把所有的信息添加进去.&lt;/p&gt;
&lt;p&gt;作者展示了实现代码和效果, 注意这个Messaging style并不是后项兼容的, 只在Nougat及以后的版本才支持.&lt;/p&gt;
&lt;h2 id=&quot;Bottom-sheet-everything&quot;&gt;&lt;a href=&quot;#Bottom-sheet-everything&quot; class=&quot;headerlink&quot; title=&quot;Bottom sheet everything&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.hidroh.com/2016/06/17/bottom-sheet-everything/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom sheet everything&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者介绍了他的应用中对于Bottom sheet的使用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deep linking with bottom sheet Activity&lt;/strong&gt;&lt;br&gt;作者用它处理Deep linking, 这样用户就不用每次都全屏打开, 只先提供一个peek, 如果真的感兴趣再打开.&lt;/p&gt;
&lt;p&gt;实现是用一个透明的Activity, 还有状态栏处理的细节.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom sheet settings menu&lt;/strong&gt;&lt;br&gt;关于Settings, 为了节省用户的trip, 作者它们的应用用了options menu的弹出菜单. 后来他们改用bottom sheet来实现, 并且结合了&lt;code&gt;PreferenceFragmentCompat&lt;/code&gt;, 省去了一些SharedPreferences的读写操作.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supporting tablet users&lt;/strong&gt;&lt;br&gt;bottom sheet在平板上使用, 尤其是横屏的时候, 看起来不太好.&lt;br&gt;所以作者定制了Bottom sheet的宽度, 在平板上时是一个指定宽度, 在手机上维持原状.&lt;/p&gt;
&lt;h2 id=&quot;Machine-Learning-for-with-the-Mobile-Vision-API—-Part-1&quot;&gt;&lt;a href=&quot;#Machine-Learning-for-with-the-Mobile-Vision-API—-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Machine Learning for with the Mobile Vision API— Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/machine-learning-for-android-developers-with-the-mobile-vision-api-part-1-face-detection-e7e24a3e472f?gi=e6e15107d4d6#.8kmih1fyd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Machine Learning for with the Mobile Vision API— Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;基于Google的Mobile Vision APIs现在Android开发者可以在应用里用上机器学习了.  现在这个Mobile Vision API包括三种类型Face Detection API, Barcode Detection API和Text API.&lt;/p&gt;
&lt;p&gt;本文主要讲人脸检测部分, 后面会讲二维码检测和文字的API.&lt;/p&gt;
&lt;p&gt;作者的demo展示了如何从一个静态照片中检测出人脸区域, 并且标记出landmark(眼睛, 鼻子, 嘴巴等), 之后可以根据这些特征位置加上一些覆盖标记.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/moyheen/face-detector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Custom-fonts-formatting-the-simple-way&quot;&gt;&lt;a href=&quot;#Custom-fonts-formatting-the-simple-way&quot; class=&quot;headerlink&quot; title=&quot;Custom fonts formatting, the simple way&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@andrei.rosca/custom-fonts-formatting-the-simple-way-c1a0e4f6687f#.kjv5uaaix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Custom fonts formatting, the simple way&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Android中自定义字体的一个库: &lt;a href=&quot;https://github.com/chrisjenx/Calligraphy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calligraphy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;如果你的输入是html文字, 你想自动处理里面的tag(比如&lt;b&gt;), 用另一种字体, 怎么处理呢, 作者给出了代码.&lt;br&gt;&lt;img src=&quot;/images/custom-fonts-in-one-textview.png&quot; alt=&quot;custom font in one textview&quot;&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;完整的例子代码见: &lt;a href=&quot;https://github.com/andrei-egeniq/android-tibits/tree/master/StyleSpan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Reductor-Redux-for-Android-Part-1-Introduction&quot;&gt;&lt;a href=&quot;#Reductor-Redux-for-Android-Part-1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;Reductor - Redux for Android. Part 1: Introduction&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yarikx.github.io/Reductor-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor - Redux for Android. Part 1: Introduction&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前这个&lt;a href=&quot;https://yarikx.github.io/Reductor-prologue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;介绍过Reductor, 在Android Weekly之前也出现过, 我的笔记: &lt;a href=&quot;http://mengdd.github.io/Android/Android-Weekly/2016/10/02/android-weekly-notes-issue-224/#Reductor-Redux-for-Android&quot;&gt;Android Weekly Notes Issue 224&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Yarikx/reductor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor&lt;/a&gt;是一个状态管理的库, 用Java重新实现了JavaScript的库Redux.&lt;br&gt;它的中心思想:&lt;br&gt;&lt;img src=&quot;/images/redux-idea.png&quot; alt=&quot;redux idea&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前的一篇文章做了一个TODO app, 然后作者发现这种mutable的数据会导致失控的数据改变, 然后可能会出现无法预测的行为. 做了一些改动之后, 我们发现可以通过只保存一个immutable的对象和mutable的reference来避免这个问题.&lt;/p&gt;
&lt;p&gt;这篇文章用Reductor来重新实现应用, 文中详细说明了代码实现.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;ImageTransition&quot;&gt;&lt;a href=&quot;#ImageTransition&quot; class=&quot;headerlink&quot; title=&quot;ImageTransition&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/vikramkakkar/ImageTransition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageTransition&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个很小的库, Activity直接的shared element transition动画, 把一个圆形的ImageView变换到下一个Activity的方形ImageView.&lt;/p&gt;
&lt;h2 id=&quot;Design-Patterns-In-Kotlin&quot;&gt;&lt;a href=&quot;#Design-Patterns-In-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Design-Patterns-In-Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dbacinski/Design-Patterns-In-Kotlin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design-Patterns-In-Kotlin&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用Kotlin实现的设计模式.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-227&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-227&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #227&quot;&gt;&lt;/a&gt;Android Weekly Issue #227&lt;/h1&gt;&lt;p&gt;October 16th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-227&quot;&gt;Android Weekly Issue #227&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本期内容包括: Google的Mobile Vision API 人脸检测; Firebase的Remote Config; 与HashMap有关的优化; 提高RecyclerView帧率的优化; 使用AutoValue生成model代码; 开源库中抽象类和接口的使用讨论; Bottom Sheet的使用; Android Studio中的版本控制系统; ConstraintLayout的使用; 应用换Bottom Navigation; Nougat的Messaging Style Notification; 自定义字体; Reductor的使用等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Bottom Navigation" scheme="http://mengdd.github.io/tags/Bottom-Navigation/"/>
    
      <category term="Bottom Sheet" scheme="http://mengdd.github.io/tags/Bottom-Sheet/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="AutoValue" scheme="http://mengdd.github.io/tags/AutoValue/"/>
    
      <category term="Mobile Vision" scheme="http://mengdd.github.io/tags/Mobile-Vision/"/>
    
      <category term="Face Detection" scheme="http://mengdd.github.io/tags/Face-Detection/"/>
    
      <category term="Optimization" scheme="http://mengdd.github.io/tags/Optimization/"/>
    
      <category term="HashMap" scheme="http://mengdd.github.io/tags/HashMap/"/>
    
      <category term="ArrayMap" scheme="http://mengdd.github.io/tags/ArrayMap/"/>
    
      <category term="RecyclerView" scheme="http://mengdd.github.io/tags/RecyclerView/"/>
    
      <category term="FPS" scheme="http://mengdd.github.io/tags/FPS/"/>
    
      <category term="Abstract class" scheme="http://mengdd.github.io/tags/Abstract-class/"/>
    
      <category term="Interface" scheme="http://mengdd.github.io/tags/Interface/"/>
    
      <category term="Android Studio" scheme="http://mengdd.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="http://mengdd.github.io/tags/ConstraintLayout/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Notification" scheme="http://mengdd.github.io/tags/Notification/"/>
    
      <category term="font" scheme="http://mengdd.github.io/tags/font/"/>
    
      <category term="Reductor" scheme="http://mengdd.github.io/tags/Reductor/"/>
    
      <category term="Redux" scheme="http://mengdd.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 226</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/12/android-weekly-notes-issue-226/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/12/android-weekly-notes-issue-226/</id>
    <published>2016-10-12T09:46:27.000Z</published>
    <updated>2016-10-12T09:58:43.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-226&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-226&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #226&quot;&gt;&lt;/a&gt;Android Weekly Issue #226&lt;/h1&gt;&lt;p&gt;October 9th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-226&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #226&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: 用Firebase做A/B Test; 用RxJava做动画; MVP; proguardFiles; RxJava和Android Data Binding的结合; Mockito的更新; Gradle configurations等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;用Firebase做A-B-Test-A-B-Test-your-App-using-Firebase-Remote-Config&quot;&gt;&lt;a href=&quot;#用Firebase做A-B-Test-A-B-Test-your-App-using-Firebase-Remote-Config&quot; class=&quot;headerlink&quot; title=&quot;用Firebase做A/B Test A/B Test your App using Firebase Remote Config&quot;&gt;&lt;/a&gt;用Firebase做A/B Test &lt;a href=&quot;https://riggaroo.co.za/ab-test-app-firebase-remote-config/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A/B Test your App using Firebase Remote Config&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讲了如何用Firebase的Remote Config做A/B Test.&lt;/p&gt;
&lt;h2 id=&quot;用RxJava做动画-Android-animations-powered-by-RxJava&quot;&gt;&lt;a href=&quot;#用RxJava做动画-Android-animations-powered-by-RxJava&quot; class=&quot;headerlink&quot; title=&quot;用RxJava做动画 Android animations powered by RxJava&quot;&gt;&lt;/a&gt;用RxJava做动画 &lt;a href=&quot;https://pspdfkit.com/blog/2016/android-animations-powered-by-rx-java/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android animations powered by RxJava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;动画基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/view/ViewPropertyAnimator.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewPropertyAnimator&lt;/a&gt; 操作View的属性动画很容易也很方便.&lt;/p&gt;
&lt;p&gt;本文讲的内容主要用&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/view/ViewPropertyAnimatorCompat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewPropertyAnimatorCompat&lt;/a&gt;, 它是通过这个方法获得的: &lt;a href=&quot;https://developer.android.com/reference/android/support/v4/view/ViewCompat.html#animate(android.view.View&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewCompat.animate(targetView)&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;它是这样用的:&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ViewCompat.animate(someButton)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .scaleX(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;f)                         &lt;span class=&quot;comment&quot;&gt;// Scale to 0 horizontally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .scaleY(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;f)                         &lt;span class=&quot;comment&quot;&gt;// Scale to 0 vertically&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .setDuration(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;)                   &lt;span class=&quot;comment&quot;&gt;// Duration of the animation in milliseconds.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .withEndAction &amp;#123; removeView(view) &amp;#125; &lt;span class=&quot;comment&quot;&gt;// Called when the animation ends successfully.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Completable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Completable&lt;/a&gt; 是RxJava1.1.1加入的.&lt;/p&gt;
&lt;p&gt;作者通过RxJava来做他们的动画效果.&lt;br&gt;这在链式连接多个动画和其他操作的时候很有用.&lt;/p&gt;
&lt;h2 id=&quot;Android-Architecture-Patterns-Part-2-MVP&quot;&gt;&lt;a href=&quot;#Android-Architecture-Patterns-Part-2-MVP&quot; class=&quot;headerlink&quot; title=&quot;Android Architecture Patterns Part 2: MVP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://upday.github.io/blog/model-view-presenter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Architecture Patterns Part 2: MVP&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于Android程序的架构, google提供了&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Architecture Blueprints&lt;/a&gt;, 其中作者他们合作于&lt;a href=&quot;https://github.com/googlesamples/android-architecture/tree/todo-mvp-rxjava/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVP &amp;amp; RxJava&lt;/a&gt;的sample.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVP(Model-View-Presenter)模式&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model: 数据层. 负责与网络层和数据库层的逻辑交互.&lt;/li&gt;
&lt;li&gt;View: UI层. 显示数据, 并向Presenter报告用户行为.&lt;/li&gt;
&lt;li&gt;Presenter: 从Model拿数据, 应用到UI层, 管理UI的状态, 决定要显示什么以及响应用户的行为.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;V和P联系紧密, 所以它们通常会持有对方的引用. 为了给P做单元测试, V是一个抽象的接口. P和对应的V的关系定义在一个&lt;code&gt;Contract&lt;/code&gt;接口里, 这样可以让代码可读性更好, 更容易发现二者的联系.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVP模式 &amp;amp; RxJava在Android Architecture Blueprints里的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google blueprint的Sample是一个&lt;a href=&quot;https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;To Do应用&lt;/a&gt;. 它让用户可以创建, 阅读, 更新和删除to do task, 也可以过滤显示. RxJava主要是用来进行一些非主线程的异步操作.&lt;/p&gt;
&lt;p&gt;然后作者详细说明了代码实现.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt;中用RxJava在本地和网络取数据.&lt;br&gt;(他们的单元测试里是下划线和驼峰结合的方法命名方式.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;有一个base接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseView&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setPresenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T presenter)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;View在&lt;code&gt;onResume()&lt;/code&gt;的时候调用Presenter的&lt;code&gt;subscribe()&lt;/code&gt;, &lt;code&gt;onPause()&lt;/code&gt;的时候调用Presenter的&lt;code&gt;unsubscribe()&lt;/code&gt;. 如果View接口的实现不是Fragment或Activity, 而是Android的自定义View, 那么在&lt;code&gt;onAttachedToWindow()&lt;/code&gt;和&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;方法里分别调用这两个方法.&lt;/p&gt;
&lt;p&gt;View的测试是用Espresso写的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Presenter&lt;/strong&gt;也有一个base接口:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasePresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;View和Model都通过构造函数传入Presenter, 在Presenter构造里还要调用View的&lt;code&gt;setPresetner()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;每一个Presenter还要暴露一些其他的方法, 对应View中用户的行为.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVP模式的缺点&lt;/strong&gt;:&lt;br&gt;MVP模式很好地分离了概念, 当然这是好的. 但是当开发很小的app或者只是做一个原型时, 确实感觉过度设计了. 为了减少所用的接口, 有一些开发者省去了&lt;code&gt;Contract&lt;/code&gt;接口类, 也删掉了Presenter的接口.&lt;/p&gt;
&lt;p&gt;当把UI的逻辑移到Presenter中时, 它就变成了一个全能的类, 代码很长. 为了解决这个问题, 可以进一步拆分代码, 并且记得创建单一职能, 并且可以被单元测试的类.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;:&lt;br&gt;&lt;a href=&quot;https://upday.github.io/blog/model-view-controller/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Model-View-Controller MVC模式&lt;/a&gt; 有两个主要的缺点: 首先, View持有Controller和Model的引用; 第二, 它没有把对UI逻辑的操作限制在单一的类里, 这个职能被Controller和View或者Model共享.&lt;/p&gt;
&lt;p&gt;MVP模式解决了这两个问题: 砍断了View和Model之间的联系, 用Presenter来管理所有和View显示相关的逻辑(handles everything related to the presentation of the View), 并且这个类是很容易被单元测试的.&lt;/p&gt;
&lt;h2 id=&quot;proguardFiles-A-Cautionary-Tale&quot;&gt;&lt;a href=&quot;#proguardFiles-A-Cautionary-Tale&quot; class=&quot;headerlink&quot; title=&quot;proguardFiles: A Cautionary Tale&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stkent.github.io/2016/10/07/proguardfiles-a-cautionary-tale.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proguardFiles: A Cautionary Tale&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者有三个buildTypes: debug, beta, release.&lt;/p&gt;
&lt;p&gt;其中beta用了initWith(buildTypes.debug).&lt;br&gt;他想给不同的type加上不同的proguard files. 让debug不混淆(&lt;code&gt;-dontobfuscate&lt;/code&gt;), beta和release混淆.&lt;br&gt;结果却发现beta没有混淆.&lt;/p&gt;
&lt;p&gt;查看代码发现&lt;code&gt;proguardFiles&lt;/code&gt;其实是将proguard files叠加.&lt;br&gt;作者找到的解决方式是用&lt;code&gt;setProguardFiles()&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;, &amp;apos;proguard-debug.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  beta &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initWith(buildTypes.debug)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // New!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setProguardFiles([getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;评论区有人指出还可以这样:&lt;br&gt;在&lt;code&gt;defaultConfig&lt;/code&gt;中:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;debug&lt;/code&gt;中: 加&lt;code&gt;proguardFile &amp;#39;proguard-debug.pro&lt;/code&gt;, 这样更简洁一些.&lt;/p&gt;
&lt;p&gt;相关文档: &lt;a href=&quot;https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BuildType&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;RxJava-meets-Android-Data-Binding&quot;&gt;&lt;a href=&quot;#RxJava-meets-Android-Data-Binding&quot; class=&quot;headerlink&quot; title=&quot;RxJava meets Android Data Binding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/tangoagency/rxjava-meets-android-data-binding-4ca5e1144107#.p13x1zwkc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava meets Android Data Binding&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者使用例子介绍了如何将RxJava和Android的Data Binding结合起来使用.&lt;/p&gt;
&lt;h2 id=&quot;Mocking-Kotlin-with-Mockito&quot;&gt;&lt;a href=&quot;#Mocking-Kotlin-with-Mockito&quot; class=&quot;headerlink&quot; title=&quot;Mocking Kotlin with Mockito&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://hadihariri.com/2016/10/04/Mocking-Kotlin-With-Mockito/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mocking Kotlin with Mockito&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;因为Kotlin默认类和方法都是final的, 如果你想要继承, 必须显式声明&lt;code&gt;open&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当你想要在测试中Mock一些行为时, Mockito可能会报错, 因为它无法mock一个final的class/method.&lt;/p&gt;
&lt;p&gt;于是你可能要修改源代码, 加&lt;code&gt;open&lt;/code&gt;或者是接口, 仅仅是为了测试.&lt;/p&gt;
&lt;p&gt;Mockito 2解决了这个问题: &lt;a href=&quot;https://github.com/mockito/mockito/wiki/What&amp;#39;s-new-in-Mockito-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s new in Mockito 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;你只需要在&lt;code&gt;resources/mockito-extensions&lt;/code&gt;目录下创建一个文件: &lt;code&gt;org.mockito.plugins.MockMaker&lt;/code&gt;.&lt;br&gt;里面只包含一行内容:&lt;br&gt;&lt;code&gt;mock-maker-inline&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Droidcon-NYC-2016-Victor-Nascimento&quot;&gt;&lt;a href=&quot;#Droidcon-NYC-2016-Victor-Nascimento&quot; class=&quot;headerlink&quot; title=&quot;Droidcon NYC 2016 - Victor Nascimento&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@victor.nascimento/droidcon-ny-2016-e037cb81559#.4ncx0xcgg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droidcon NYC 2016 - Victor Nascimento&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Droidcon-NYC-2016-Florina-Muntenescu&quot;&gt;&lt;a href=&quot;#Droidcon-NYC-2016-Florina-Muntenescu&quot; class=&quot;headerlink&quot; title=&quot;Droidcon NYC 2016 - Florina Muntenescu&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://upday.github.io/blog/droidcon_nyc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droidcon NYC 2016 - Florina Muntenescu&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这两篇是关于Droidcon NYC 2016的感想.&lt;/p&gt;
&lt;h2 id=&quot;Android-Gradle-configurations&quot;&gt;&lt;a href=&quot;#Android-Gradle-configurations&quot; class=&quot;headerlink&quot; title=&quot;Android Gradle configurations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.thedroidsonroids.com/blog/android/android-gradle-configurations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Gradle configurations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gradle中的configuration是:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	annotationProcessor &amp;apos;com.jakewharton:butterknife-compiler:8.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	compile &amp;apos;com.jakewharton:butterknife:8.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	compile project(&amp;apos;:api&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	debugCompile &amp;apos;com.squareup.leakcanary:leakcanary-android:1.4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	releaseCompile &amp;apos;com.squareup.leakcanary:leakcanary-android-no-op:1.4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	androidTestCompile &amp;apos;com.android.support.test:runner:0.5&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testCompile &amp;apos;org.robolectric:robolectric:3.1.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testAnnotationProcessor &amp;apos;org.robolectric:robolectric-processor:3.1.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;模式是&lt;code&gt;configuationName dependencyNotation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Configuration names由两部分组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选的前缀, 指定build variant, product flavor或者build type.&lt;/li&gt;
&lt;li&gt;必需的后缀, 指定scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如在&lt;code&gt;debugCompile&lt;/code&gt;中, debug就是一个build type.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile&lt;/code&gt;没有前缀, 就表示它应用到所有的build类型里.&lt;/p&gt;
&lt;p&gt;每一个正常的configuration都有一个相应的unit test版, 比如&lt;code&gt;testCompile&lt;/code&gt;, &lt;code&gt;testDebugCompile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;对于功能测试来说是&lt;code&gt;androidTest&lt;/code&gt;, 只有这一种.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Scope是和configuration应用的阶段有关:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;annotationProcessor/kapt: 注解处理;&lt;/li&gt;
&lt;li&gt;provided/compileOnly: 编译期;&lt;/li&gt;
&lt;li&gt;compile: 编译 + 执行;&lt;/li&gt;
&lt;li&gt;apk: 执行期.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;继承&lt;/strong&gt;&lt;br&gt;Configuration可以继承, 意味着子类包含父类所有包含的项目.&lt;br&gt;比如&lt;code&gt;testCompile&lt;/code&gt;就继承了&lt;code&gt;compile&lt;/code&gt;.&lt;br&gt;但是注意继承必须显式声明, 并不是由名字看出来的, 比如&lt;code&gt;testAnnotationProcessor&lt;/code&gt;没有继承&lt;code&gt;annotationProcessor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;利用继承可以定义单元测试和公共测试的基类, 这样它们的共享依赖就可以只声明一次.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;configurations &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [androidTestCompile, testCompile].each &amp;#123; it.extendsFrom commonTestCompile &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;android-data-binding-rxjava&quot;&gt;&lt;a href=&quot;#android-data-binding-rxjava&quot; class=&quot;headerlink&quot; title=&quot;android-data-binding-rxjava&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TangoAgency/android-data-binding-rxjava&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-data-binding-rxjava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;例子代码, 展示如何结合RxJava和Android data binding.&lt;/p&gt;
&lt;h2 id=&quot;AnimatorDurationTile&quot;&gt;&lt;a href=&quot;#AnimatorDurationTile&quot; class=&quot;headerlink&quot; title=&quot;AnimatorDurationTile&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nickbutcher/AnimatorDurationTile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatorDurationTile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Quick Settings tile, 用于控制动画的duration scale.&lt;/p&gt;
&lt;h2 id=&quot;DateTimeSeer&quot;&gt;&lt;a href=&quot;#DateTimeSeer&quot; class=&quot;headerlink&quot; title=&quot;DateTimeSeer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/p-v/DateTimeSeer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DateTimeSeer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个关于日期和时间的自动提示输入框.&lt;/p&gt;
&lt;h2 id=&quot;A-list-of-all-Android-permissions&quot;&gt;&lt;a href=&quot;#A-list-of-all-Android-permissions&quot; class=&quot;headerlink&quot; title=&quot;A list of all Android permissions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gist.github.com/Arinerron/1bcaadc7b1cbeae77de0263f4e15156f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A list of all Android permissions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android所有权限的列表.&lt;/p&gt;
&lt;h1 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h1&gt;&lt;h2 id=&quot;What’s-new-in-Mockito-2&quot;&gt;&lt;a href=&quot;#What’s-new-in-Mockito-2&quot; class=&quot;headerlink&quot; title=&quot;What’s new in Mockito 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s new in Mockito 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Mockito 2发布了, 有什么新东西呢?&lt;/p&gt;
&lt;h2 id=&quot;Kotlin-1-0-5-EAP&quot;&gt;&lt;a href=&quot;#Kotlin-1-0-5-EAP&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 1.0.5 EAP&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://discuss.kotlinlang.org/t/kotlin-1-0-5-eap/2023&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin 1.0.5 EAP&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Kotlin 1.0.5 EAP (Early Access Program).&lt;/p&gt;
&lt;h2 id=&quot;What’s-next-for-android-apt&quot;&gt;&lt;a href=&quot;#What’s-next-for-android-apt&quot; class=&quot;headerlink&quot; title=&quot;What’s next for android-apt?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.littlerobots.nl/blog/Whats-next-for-android-apt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s next for android-apt?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;android-apt将不会再开发了, 因为它的功能已经被包含进了Android Gradle plugin.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-226&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-226&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #226&quot;&gt;&lt;/a&gt;Android Weekly Issue #226&lt;/h1&gt;&lt;p&gt;October 9th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-226&quot;&gt;Android Weekly Issue #226&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: 用Firebase做A/B Test; 用RxJava做动画; MVP; proguardFiles; RxJava和Android Data Binding的结合; Mockito的更新; Gradle configurations等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="Proguard" scheme="http://mengdd.github.io/tags/Proguard/"/>
    
      <category term="Data Binding" scheme="http://mengdd.github.io/tags/Data-Binding/"/>
    
      <category term="Mockito" scheme="http://mengdd.github.io/tags/Mockito/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 225</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/09/android-weekly-notes-issue-225/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/09/android-weekly-notes-issue-225/</id>
    <published>2016-10-09T02:32:42.000Z</published>
    <updated>2016-10-09T04:48:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-225&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-225&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #225&quot;&gt;&lt;/a&gt;Android Weekly Issue #225&lt;/h1&gt;&lt;p&gt;October 2nd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-225&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Android 7.0的Quick Settings; Firebase; 兼容旧版本的shared element transition; Wear; ORM: 用ActiveAndroid做数据库存储; 崩溃报告工具对比; Google Cast API介绍; Google的播放器库ExoPlayer 2.x发布; 项目的包结构整理; Task API的使用等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Android-7-0的快速设置-Quick-Settings-Tiles&quot;&gt;&lt;a href=&quot;#Android-7-0的快速设置-Quick-Settings-Tiles&quot; class=&quot;headerlink&quot; title=&quot;Android 7.0的快速设置 Quick Settings Tiles&quot;&gt;&lt;/a&gt;Android 7.0的快速设置 &lt;a href=&quot;https://medium.com/google-developers/quick-settings-tiles-e3c22daf93a8#.4q0cxslwd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Quick Settings Tiles&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;从Android 7.0 (API 24)开始, 任何app都可以创建一个quick settings tile, 快速访问关键功能.&lt;br&gt;它除了是一个展示最新信息的UI, 点击一个片还可以trigger后台任务, 打开dialog或activity.&lt;/p&gt;
&lt;p&gt;一个好的quick settings tile:&lt;br&gt;决定是否要建立这样一个tile时, 主要考虑紧急性和频繁性两个方面.&lt;/p&gt;
&lt;p&gt;每一个tile和一个&lt;a href=&quot;https://developer.android.com/reference/android/service/quicksettings/TileService.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TileService&lt;/a&gt;关联. 和其他service一样, 它需要在manifest中注册, 它的label和icon就是显示在quick settings上的文字和图片.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TileService的生命周期&lt;/strong&gt;:&lt;br&gt;TileService是一个&lt;a href=&quot;https://developer.android.com/guide/components/bound-services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bound service&lt;/a&gt;, 它的生命周期主要由系统控制. 主要有三个阶段: being added, listening, being removed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onTileAdded()&lt;/code&gt;: 当用户添加这个tile到quick settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onStartListening()&lt;/code&gt;: tile变为可见.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onStopListening()&lt;/code&gt;: tile变为不可见.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onTileRemoved()&lt;/code&gt;: 用户移除这个tile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这是默认模式, 如果你准确地知道何时更新, 你可以使用&lt;a href=&quot;https://developer.android.com/reference/android/service/quicksettings/TileService.html#META_DATA_ACTIVE_TILE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;active mode&lt;/a&gt;.&lt;br&gt;此时更新的回调&lt;code&gt;onStartListening()&lt;/code&gt;是通过静态方法主动触发的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新UI&lt;/strong&gt;:&lt;br&gt;UI是&lt;a href=&quot;https://developer.android.com/reference/android/service/quicksettings/Tile.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tile&lt;/a&gt;, 主要包含icon, label, description和state. 最后必须调用&lt;code&gt;updateTile()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;处理点击&lt;/strong&gt;:&lt;br&gt;在&lt;code&gt;onClick()&lt;/code&gt;回调触发的时候, 我们可以启动一些后台工作, 或者&lt;code&gt;showDialog()&lt;/code&gt;, 或者&lt;code&gt;startActivityAndCollapse()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;对于锁屏的机器有一些限制, 不能打开dialog, 并且activity需要有一个特定的flag, 有一个&lt;code&gt;unlockAndRun()&lt;/code&gt;方法可以让用户先解锁后做一些工作.&lt;/p&gt;
&lt;p&gt;长按tile默认会打开app的app info屏, 当然这个行为也可以override. 只要给你想打开的activity加上&lt;code&gt;ACTION_QS_TILE_PREFERENCES&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Android开发最佳实践-Android-Development-Best-Practices&quot;&gt;&lt;a href=&quot;#Android开发最佳实践-Android-Development-Best-Practices&quot; class=&quot;headerlink&quot; title=&quot;Android开发最佳实践 Android Development Best Practices&quot;&gt;&lt;/a&gt;Android开发最佳实践 &lt;a href=&quot;https://medium.freecodecamp.com/android-development-best-practices-83c94b027fd3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Development Best Practices&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于性能:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/best-performance.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Best Practices for Performance&lt;/a&gt;;&lt;br&gt;&lt;a href=&quot;https://github.com/amitshekhariitbhu/awesome-android-complete-reference#performance-and-optimization&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance and Optimization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于架构:&lt;br&gt;&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写单元测试和UI测试.&lt;/p&gt;
&lt;p&gt;使用Proguard, Stetho.&lt;br&gt;复用布局, 使用&lt;merge&gt;标签.&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/improving-layouts/reusing-layouts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reusing-layouts&lt;/a&gt;.&lt;/merge&gt;&lt;/p&gt;
&lt;p&gt;把launcher icons放在mipmap文件夹下.&lt;/p&gt;
&lt;p&gt;多用shape和selector而不是图片.&lt;/p&gt;
&lt;p&gt;避免深层次的布局.&lt;/p&gt;
&lt;p&gt;向Intent或Bundler传数据时, 使用&lt;code&gt;Parcelable&lt;/code&gt;而不是&lt;code&gt;Serializable&lt;/code&gt;. 因为后者使用反射而比较慢.&lt;/p&gt;
&lt;p&gt;不要在UI线程进行文件操作.&lt;/p&gt;
&lt;p&gt;明白Bitmaps. 因为它们占用很多memory. &lt;a href=&quot;https://developer.android.com/training/displaying-bitmaps/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Displaying Bitmaps&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用style来避免重复的属性设置.&lt;/p&gt;
&lt;p&gt;需要时使用Fragment.&lt;/p&gt;
&lt;p&gt;明白Activity的生命周期.&lt;/p&gt;
&lt;p&gt;使用得到公认的libraries而不是自己的实现.&lt;/p&gt;
&lt;p&gt;在各种机器上测试.&lt;/p&gt;
&lt;h2 id=&quot;Recap-Of-Google-Launchpad-Build-Lagos-All-About-Firebase&quot;&gt;&lt;a href=&quot;#Recap-Of-Google-Launchpad-Build-Lagos-All-About-Firebase&quot; class=&quot;headerlink&quot; title=&quot;Recap Of Google Launchpad Build Lagos : All About Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://chikemgbemena.com/2016/09/27/recap-lagos-launchpad-developers-conference-all-about-firebase/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Recap Of Google Launchpad Build Lagos : All About Firebase&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者参加了一个叫Google Launchpad Build的会议, 这篇文章是总结, 全部是关于Firebase的.&lt;/p&gt;
&lt;h2 id=&quot;Android-Shared-Element-Transitions-for-all&quot;&gt;&lt;a href=&quot;#Android-Shared-Element-Transitions-for-all&quot; class=&quot;headerlink&quot; title=&quot;Android Shared-Element Transitions for all&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@aitorvs/android-shared-element-transitions-for-all-b90e9361507d#.rlu4u7kmy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Shared-Element Transitions for all&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Lollipop+的设备上, shared element的transition动画很好实现, 但是在旧的版本上该怎么办呢? 作者展示了他的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity A捕捉origin view的初始值, 通过Intent把它们传给Activity B;&lt;/li&gt;
&lt;li&gt;Activity B完全透明地启动;&lt;/li&gt;
&lt;li&gt;Activity B读取bundle中的值, 准备场景;&lt;/li&gt;
&lt;li&gt;Acitivty B运行shared element动画.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个实现细节:&lt;/p&gt;
&lt;p&gt;需要知道View在B中的位置, 时机是layout之后, 但是draw之前, 即&lt;code&gt;onPreDraw()&lt;/code&gt;.&lt;br&gt;返回时只需要把这个动画反向播放即可.&lt;/p&gt;
&lt;h2 id=&quot;Writing-Better-Adapters&quot;&gt;&lt;a href=&quot;#Writing-Better-Adapters&quot; class=&quot;headerlink&quot; title=&quot;Writing Better Adapters&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@dpreussler/writing-better-adapters-1b09758407d2#.c5av797rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Better Adapters&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;(这个上一期刚讲过, 不知道为什么重复了. )&lt;/p&gt;
&lt;p&gt;就是关于RecyclerView的Adapter, 作者认为多种View类型时, Adapter中太多的instance of和强制类型转换不是一种好做法, 于是提出了他的做法. &lt;/p&gt;
&lt;h2 id=&quot;Android-Wear-Accessing-the-Data-Layer-API&quot;&gt;&lt;a href=&quot;#Android-Wear-Accessing-the-Data-Layer-API&quot; class=&quot;headerlink&quot; title=&quot;Android Wear: Accessing the Data Layer API&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@manuelvicnt/android-wear-accessing-the-data-layer-api-d64fd55982e3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Wear: Accessing the Data Layer API&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Data Layer API是Google Play services的一部分, 用于不同设备(手机和手表)间的数据交换.&lt;/p&gt;
&lt;p&gt;作者先提供了代码, 发送和存储数据, 监听数据变化.&lt;/p&gt;
&lt;p&gt;问题是, 如果Wear第二次向mobile请求数据, mobile发送了和上一次一样的数据, Wear并不会进入&lt;code&gt;onDataChanged()&lt;/code&gt;, 因为数据并没有变化.&lt;/p&gt;
&lt;p&gt;所以作者想知道如何从Data Layer API来获取数据, 并展示了他的方法在不同情形下的应用.&lt;/p&gt;
&lt;h2 id=&quot;Espresso-Tests-For-TextSwitcher&quot;&gt;&lt;a href=&quot;#Espresso-Tests-For-TextSwitcher&quot; class=&quot;headerlink&quot; title=&quot;Espresso Tests For TextSwitcher&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ottodroid.net/?p=493&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Espresso Tests For TextSwitcher&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者想给TextSwitcher写Espresso测试.&lt;/p&gt;
&lt;p&gt;从Android Studio 2.2开始, 你可以录制你的操作, IDE将会自动为你生成Espresso测试代码. 但是作者录了一个有关TextSwitcher的测试之后, 跑失败了.&lt;/p&gt;
&lt;p&gt;这是因为&lt;code&gt;TextSwitcher&lt;/code&gt;继承了&lt;code&gt;ViewSwitcher&lt;/code&gt;, 其实现其实是把两个TextView加到了布局里.&lt;br&gt;所以Espresso抛出了&lt;code&gt;AmbiguousViewMatcherException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以作者根据可见性区分了它俩, 修复了测试.&lt;br&gt;还可以根据child view的index来区分.&lt;/p&gt;
&lt;h2 id=&quot;Animating-Android-Activities-and-Views-with-Slide-Animations&quot;&gt;&lt;a href=&quot;#Animating-Android-Activities-and-Views-with-Slide-Animations&quot; class=&quot;headerlink&quot; title=&quot;Animating Android Activities and Views with Slide Animations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kylewbanks.com/blog/left-and-right-slide-animations-on-android-activity-or-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animating Android Activities and Views with Slide Animations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者展示了如何给Activity和View加上左右滑动的动画.&lt;/p&gt;
&lt;h2 id=&quot;Guide-to-ORM-using-ActiveAndroid-Part-1&quot;&gt;&lt;a href=&quot;#Guide-to-ORM-using-ActiveAndroid-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Guide to ORM using ActiveAndroid: Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.rscottcarson.com/2016/09/22/the-ultimate-guide-to-orm-in-android-using-activeandroid-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide to ORM using ActiveAndroid: Part 1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是一个系列教程, 相关的代码在: &lt;a href=&quot;https://github.com/rscottcarson/ActiveAndroid-Tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActiveAndroid-Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么是ORM(Object-Relational Mapping)呢?&lt;br&gt;a technique to convert between incompatible type-systems in an object-oriented programming language.&lt;br&gt;在面向对象的语言中, 转换不兼容的类型的技术.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.activeandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActiveAndroid&lt;/a&gt;是一个ORM(object relational mapper), 让你不用写SQL语句, 就可以读写数据库.&lt;/p&gt;
&lt;p&gt;其他类似的工具还有&lt;a href=&quot;https://realm.io/docs/java/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt;和&lt;a href=&quot;http://ormlite.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OrmLite&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;A-Comparison-of-Android-Crash-Reporting-Tools&quot;&gt;&lt;a href=&quot;#A-Comparison-of-Android-Crash-Reporting-Tools&quot; class=&quot;headerlink&quot; title=&quot;A Comparison of Android Crash Reporting Tools&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.captechconsulting.com/blogs/a-comparison-of-android-crash-reporting-tools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Comparison of Android Crash Reporting Tools&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者对比了几种崩溃报告工具, 并介绍了如何使用.&lt;br&gt;包括: Firebase, &lt;a href=&quot;https://fabric.io/kits/android/crashlytics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crashlytics&lt;/a&gt;, &lt;a href=&quot;https://www.apteligent.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apteligent&lt;/a&gt;, &lt;a href=&quot;https://bugsnag.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bugsnag&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Google-Play-Services-Google-Cast-v3-and-Media&quot;&gt;&lt;a href=&quot;#Google-Play-Services-Google-Cast-v3-and-Media&quot; class=&quot;headerlink&quot; title=&quot;Google Play Services: Google Cast v3 and Media&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/google-play-services-google-cast-v3-and-media--cms-26893&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Play Services: Google Cast v3 and Media&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Cast是一个让用户把网上的内容发送到设备上的技术. 通常用来和TV交换内容.&lt;/p&gt;
&lt;p&gt;作者详细地介绍了如何使用Google Cast SDK来创建应用.&lt;/p&gt;
&lt;p&gt;注: 要建造客户端程序, 首先需要注册: &lt;a href=&quot;https://cast.google.com/publish/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cast.google.com/publish/&lt;/a&gt;.&lt;br&gt;这是收费的.&lt;/p&gt;
&lt;h2 id=&quot;ExoPlayer-2-x-It’s-here-plus-FAQs&quot;&gt;&lt;a href=&quot;#ExoPlayer-2-x-It’s-here-plus-FAQs&quot; class=&quot;headerlink&quot; title=&quot;ExoPlayer 2.x - It’s here (plus FAQs)!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-exoplayer/exoplayer-2-x-its-here-plus-faqs-cce34b0d4c7b#.h6m9czs7y&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExoPlayer 2.x - It’s here (plus FAQs)!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google的库&lt;a href=&quot;https://github.com/google/ExoPlayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google/ExoPlayer&lt;/a&gt;升级到v2.x了.&lt;br&gt;(它是一个Media Player, YouTube用的就是它.)&lt;br&gt;这次是个重大更新, 添加了很多新功能, 推荐大家以后用新版.&lt;/p&gt;
&lt;h2 id=&quot;How-We-Rethought-our-Complete-Package-Structure-for-Buffer-on-Android&quot;&gt;&lt;a href=&quot;#How-We-Rethought-our-Complete-Package-Structure-for-Buffer-on-Android&quot; class=&quot;headerlink&quot; title=&quot;How We Rethought our Complete Package Structure for Buffer on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://overflow.buffer.com/2016/09/26/android-rethinking-package-structure/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How We Rethought our Complete Package Structure for Buffer on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们重新整理了项目的包结构, 总结了整个过程还有从中学到的东东.&lt;/p&gt;
&lt;p&gt;作者他们之前的包结构是按类型的, 有activities, fragments, adapters等包. 因为类名以类型终结, 所以索性就按整个分组.&lt;/p&gt;
&lt;p&gt;当app变得越来越大, 这种组织方式发现就不太好, 感觉很难找东西, 并且感觉没什么结构.&lt;/p&gt;
&lt;p&gt;经过改变之后, 作者他们采用了一种更加整洁并且易于导航的结构.&lt;/p&gt;
&lt;p&gt;新结构中, 当添加一个新的feature, 就保持在同一个目录中, 这样就不用来回切换目录.&lt;/p&gt;
&lt;p&gt;作者他们的新结构有四个总目录: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data&lt;/li&gt;
&lt;li&gt;ui&lt;/li&gt;
&lt;li&gt;injection&lt;/li&gt;
&lt;li&gt;util&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;中包含网络请求及相关的models, preferences, database, data models, 还有其他和数据直接关联的东西.&lt;/p&gt;
&lt;p&gt;其中和不同API关联的models又分别组织在子目录下.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ui&lt;/strong&gt;目录中包含所有和UI相关的组件, 在这个包中按照功能又拆分了子目录. 其中有base包, 用来盛放Fragment, Activity和MVP的基类, 接口等; 还有common包, 用来盛放公共控件.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;injection&lt;/strong&gt;中包含所有依赖注入的类, 分component, module和scope的子目录.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;util&lt;/strong&gt;中含有Helper和Utility类.&lt;/p&gt;
&lt;h2 id=&quot;Become-a-Firebase-Taskmaster-Part-3&quot;&gt;&lt;a href=&quot;#Become-a-Firebase-Taskmaster-Part-3&quot; class=&quot;headerlink&quot; title=&quot;Become a Firebase Taskmaster! (Part 3)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://firebase.googleblog.com/2016/09/become-a-firebase-taskmaster-part-3_29.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Become a Firebase Taskmaster! (Part 3)&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是系列文章的第三篇, 这个系列是关于Play services的&lt;a href=&quot;https://developers.google.com/android/guides/tasks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Task API&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;如果项目里已经依赖了Firebase, 变自动包含了Task API, 如果不想用Firebase, 可以单独添加依赖:&lt;br&gt;&lt;code&gt;compile &amp;#39;com.google.android.gms:play-services-tasks:9.6.1&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建新的Task可以用下面这两个方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Task&amp;lt;TResult&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Callable&amp;lt;TResult&amp;gt; callable)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task&amp;lt;TResult&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Executor executor, Callable&amp;lt;TResult&amp;gt; callable)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一个&lt;code&gt;call()&lt;/code&gt;方法在主线程执行任务, 第二个&lt;code&gt;call()&lt;/code&gt;方法可以把工作提交给一个&lt;code&gt;Executor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/java/util/concurrent/Callable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Callable&lt;/a&gt;有点类似于Runnable:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CarlyCallable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Callable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Call me maybe&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数制定了方法的返回值的类型, 进而也是创建出Task的类型.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Task&amp;lt;String&amp;gt; task = Tasks.call(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CarlyCallable());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要链式执行, 进行后续操作, 可以用&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Continuation&lt;/a&gt;.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SeparateWays&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Continuation&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Task&amp;lt;String&amp;gt; task)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Arrays.asList(task.getResult().split(&lt;span class=&quot;string&quot;&gt;&quot; +&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它继承接口时指定了输入和输出的类型, 它的输入来自于Task的输出.&lt;/p&gt;
&lt;p&gt;可以多写几个Continuation类然后连起来:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Task&amp;lt;String&amp;gt; playlist = Tasks.call(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CarlyCallable())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .continueWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SeparateWays())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .continueWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AllShookUp())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .continueWith(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComeTogether());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;playlist.addOnSuccessListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnSuccessListener&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The final String with all the words randomized is here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;LIBRIARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRIARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRIARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRIARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;groupie&quot;&gt;&lt;a href=&quot;#groupie&quot; class=&quot;headerlink&quot; title=&quot;groupie&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Genius/groupie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;groupie&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;显示和管理复杂的RecyclerView布局, 把你的items按照逻辑分组管理.&lt;/p&gt;
&lt;h2 id=&quot;android-junit5&quot;&gt;&lt;a href=&quot;#android-junit5&quot; class=&quot;headerlink&quot; title=&quot;android-junit5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/aurae/android-junit5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-junit5&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Gradle插件, 用JUnit5做Android的单元测试.&lt;/p&gt;
&lt;h2 id=&quot;epoxy&quot;&gt;&lt;a href=&quot;#epoxy&quot; class=&quot;headerlink&quot; title=&quot;epoxy&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/airbnb/epoxy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epoxy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用来构建复杂的RecyclerView屏.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-225&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-225&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #225&quot;&gt;&lt;/a&gt;Android Weekly Issue #225&lt;/h1&gt;&lt;p&gt;October 2nd, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-225&quot;&gt;Android Weekly Issue #225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Android 7.0的Quick Settings; Firebase; 兼容旧版本的shared element transition; Wear; ORM: 用ActiveAndroid做数据库存储; 崩溃报告工具对比; Google Cast API介绍; Google的播放器库ExoPlayer 2.x发布; 项目的包结构整理; Task API的使用等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="Animation" scheme="http://mengdd.github.io/tags/Animation/"/>
    
      <category term="Android 7.0" scheme="http://mengdd.github.io/tags/Android-7-0/"/>
    
      <category term="Quick Settings" scheme="http://mengdd.github.io/tags/Quick-Settings/"/>
    
      <category term="Shared-Element Transtion" scheme="http://mengdd.github.io/tags/Shared-Element-Transtion/"/>
    
      <category term="ORM" scheme="http://mengdd.github.io/tags/ORM/"/>
    
      <category term="ActiveAndroid" scheme="http://mengdd.github.io/tags/ActiveAndroid/"/>
    
      <category term="Crash Reporting" scheme="http://mengdd.github.io/tags/Crash-Reporting/"/>
    
      <category term="Google Cast" scheme="http://mengdd.github.io/tags/Google-Cast/"/>
    
      <category term="ExoPlayer" scheme="http://mengdd.github.io/tags/ExoPlayer/"/>
    
      <category term="Packages" scheme="http://mengdd.github.io/tags/Packages/"/>
    
      <category term="Task" scheme="http://mengdd.github.io/tags/Task/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 224</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/10/02/android-weekly-notes-issue-224/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/10/02/android-weekly-notes-issue-224/</id>
    <published>2016-10-02T04:17:13.000Z</published>
    <updated>2016-10-02T04:35:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-224&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-224&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #224&quot;&gt;&lt;/a&gt;Android Weekly Issue #224&lt;/h1&gt;&lt;p&gt;September 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-224&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google Play的pre-launch报告; Wear的Complications API; Android Handler解析; RxAndroid; 测量性能的库: Pury; 方法数限制; APK内容分析; Redux for Android; 一种view造成的泄露; 注解处理; 更好的Adapter; Intro屏等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Apk的pre-launch报告-Awesome-pre-launch-reports-for-Alpha-Beta-APK’s&quot;&gt;&lt;a href=&quot;#Apk的pre-launch报告-Awesome-pre-launch-reports-for-Alpha-Beta-APK’s&quot; class=&quot;headerlink&quot; title=&quot;Apk的pre-launch报告 Awesome pre-launch reports for Alpha/Beta APK’s&quot;&gt;&lt;/a&gt;Apk的pre-launch报告 &lt;a href=&quot;https://medium.com/@AruLNadhaN/awesome-pre-launch-reports-for-alpha-beta-apks-9960ac5c403c#.5qhy3bbqc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Awesome pre-launch reports for Alpha/Beta APK’s&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Google Play team在I/O 2016的时候宣布了很多新features, 其中有一个pre-launch report.&lt;/p&gt;
&lt;p&gt;这个report是干什么的呢, 它会报告在一些设备上测试你的应用的时候发现的issues.&lt;/p&gt;
&lt;p&gt;要生成这种报告, 你应该在Developer console上enable它. 然后&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/3131213&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上传alpha/beta apk&lt;/a&gt;. 上传到beta channel之后, 5-10分钟就会生成报告.&lt;/p&gt;
&lt;p&gt;报告主要包括三个部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crashes&lt;/li&gt;
&lt;li&gt;Screenshots&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官方文档: &lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/7002270#sources&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pre-launch&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Wear-Complications-API&quot;&gt;&lt;a href=&quot;#Wear-Complications-API&quot; class=&quot;headerlink&quot; title=&quot;Wear Complications API&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@danybony_/wear-complications-api-16ab65290aa1#.w6lt2q3rx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wear Complications API&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在钟表的定义里, complications是指表上除了小时和分钟指示之外其他的东西.&lt;/p&gt;
&lt;p&gt;在Android Wear里面我们已经有一些complications的例子, 比如向用户显示计步器, 天气预报, 下一个会议时间等等.&lt;/p&gt;
&lt;p&gt;但是之前有一个很大的限制就是每一个小应用都必须实现自己的逻辑来取数据, 比如有两个应用都取了今天的天气预报信息, 将会有两套机制取同样的数据, 这明显是一种浪费.&lt;/p&gt;
&lt;p&gt;Android Wear 2.0推出了Complications API解决了这个问题.&lt;/p&gt;
&lt;p&gt;通信主要是&lt;strong&gt;Data providers&lt;/strong&gt;和&lt;strong&gt;Watch faces&lt;/strong&gt;之间的, 前者包含取数据的逻辑, 后者负责显示.&lt;/p&gt;
&lt;p&gt;Complications API定义了一些Complications Types, 见&lt;a href=&quot;https://developer.android.com/wear/preview/features/complications.html#using_complication_types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;作者在他朋友的开源应用里用了新的API: &lt;a href=&quot;https://github.com/alexstyl/Memento-Namedays&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memento-Namedays&lt;/a&gt;, 这个应用是生日或者日期提醒类的.&lt;/p&gt;
&lt;p&gt;首先, 作者用&lt;a href=&quot;https://developer.android.com/training/wearables/data-layer/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wearable Data Layer API&lt;/a&gt;同步了手机和手表的数据. 然后在Wear module里继承&lt;code&gt;ComplicationProviderService&lt;/code&gt;创建了complication data provider, 这里就提供了&lt;code&gt;onComplicationActivated&lt;/code&gt;, &lt;code&gt;onComplicationDeactivated&lt;/code&gt;, &lt;code&gt;onComplicationUpdate&lt;/code&gt;等回调. &lt;/p&gt;
&lt;p&gt;用户也可以点击Complications, 可以用&lt;code&gt;setTapAction()&lt;/code&gt;指定点击后要启动的Activity.&lt;/p&gt;
&lt;p&gt;可以指定&lt;code&gt;ComplicationProviderService&lt;/code&gt;的更新频率, 是在manifest里用这个key:&lt;br&gt;&lt;code&gt;android.support.wearable.complications.UPDATE_PERIOD_SECONDS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;更新得太频繁会比较费电.&lt;br&gt;需要注意的是这并不是一个常量, 因为系统也会根据手机的状况进行一些调节, 不必要的时候就不需要频繁更新.&lt;/p&gt;
&lt;p&gt;本文作者采用的方式是用&lt;code&gt;ProviderUpdateRequester&lt;/code&gt;. 在manifest里面设置0.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ComponentName providerComponentName = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ComponentName(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyComplicationProviderService.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ProviderUpdateRequester providerUpdateRequester = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ProviderUpdateRequester(context, providerComponentName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;providerUpdateRequester.requestUpdateAll();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后, 这里是官网文档:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/wear/preview/features/complications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Complications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这里是作者PR: &lt;a href=&quot;https://github.com/alexstyl/Memento-Namedays/pull/40&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PR&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-Handler-Internals&quot;&gt;&lt;a href=&quot;#Android-Handler-Internals&quot; class=&quot;headerlink&quot; title=&quot;Android Handler Internals&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jagsaund/android-handler-internals-b5d49eba6977#.xuogmm2c0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Handler Internals&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先, 作者举了一个简单的例子, 用两种方法, 用Handler来实现下载图片并显示到ImageView上的过程.&lt;/p&gt;
&lt;p&gt;主要是因为网络请求需要在非UI线程, 而View操作需要在UI线程. Handler就用来在这两种线程之间切换调度.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handler的组成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handler&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;li&gt;Message Queue&lt;/li&gt;
&lt;li&gt;Looper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Handler&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Handler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handler&lt;/a&gt;是线程间消息传递的直接接口, 生产者和消费者线程都是通过调用下面的操作和Handler交互:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creating, inserting, removing Messages from Message Queue.&lt;/li&gt;
&lt;li&gt;processing Messages on the consumer thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个Handler都是和一个Looper和一个Message Queue关联的. 有两种方法来创建一个Handler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用默认构造器, 将会使用当前线程的Looper.&lt;/li&gt;
&lt;li&gt;显式地指明要用的Looper.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Handler不能没有Looper, 如果构造时没有指明Looper, 当前线程也没有Looper, 那么将会抛出异常.&lt;/p&gt;
&lt;p&gt;因为Handler需要Looper中的消息队列.&lt;/p&gt;
&lt;p&gt;一个线程上的多个Handler共享同一个消息队列, 因为它们共享同一个Looper.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Message.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Message&lt;/a&gt;是一个包含任意数据的容器, 它包含的数据信息是callback, data bundle和obj/arg1/arg2, 还有三个附加数据what, time和target.&lt;/p&gt;
&lt;p&gt;可以调用Handler的&lt;code&gt;obtainMessage()&lt;/code&gt;方法来创建Message, 这样message是从message pool中取出的, target会自动设置成Handler自己. 所以直接可以在后面调用&lt;code&gt;sendToTarget()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;Message pool是一个最大尺寸为50的LinkedList. 当消息被处理完之后, 会放回pool, 并且重置所有字段.&lt;/p&gt;
&lt;p&gt;当我们使用Handler来&lt;code&gt;post(Runnable)&lt;/code&gt;的时候, 实际上是隐式地创建一个Message, 它的callback存这个Runnable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Message Queue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/MessageQueue.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Message Queue&lt;/a&gt; 是一个无边界的LinkedList, 元素是Message对象. 它按照时间顺序来插入Message, 所以timestamp最小的最先分发. &lt;/p&gt;
&lt;p&gt;MessageQueue中有一个&lt;code&gt;dispatch barrier&lt;/code&gt;表示当前时间, 当message的timestamp小于当前时间时, 被分发和处理.&lt;/p&gt;
&lt;p&gt;Handler提供了一些方法在发message的时候设置不同的时间戳:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendMessageDelayed()&lt;/code&gt;: 当前时间 + delay时间.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendMessageAtFrontOfQueue()&lt;/code&gt;: 把时间戳设为0, 不建议使用.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sendMessageAtTime()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Handler经常需要和UI交互, 可能会引用Activity, 所以也经常会引起内存泄漏.&lt;br&gt;作者举了两个例子, 略.&lt;/p&gt;
&lt;p&gt;需要注意:&lt;br&gt;非静态内部类会持有外部类实例引用.&lt;br&gt;Message会持有Handler引用, 主线程的Looper和MessageQueue在程序运行期间是一直存在的.&lt;/p&gt;
&lt;p&gt;建议的是, 内部类用static修饰, 另用WeakReference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debug Tips&lt;/strong&gt;&lt;br&gt;显示Looper中dispatched的Messages:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Looper looper = getMainLooper();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;looper.setMessageLogging(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogPrinter(Log.DEBUG, &lt;span class=&quot;string&quot;&gt;&quot;Looper&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;显示MessageQueue中和handler相关的pending messages:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;handler.dump(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LogPrinter(Log.DEBUG, &lt;span class=&quot;string&quot;&gt;&quot;Handler&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Looper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Looper.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Looper&lt;/a&gt; 从消息队列中读取消息, 然后分发给target handler. 每当一个Message穿过了&lt;code&gt;dispatch barrier&lt;/code&gt;, 它就可以在下一个消息循环中被Looper读.&lt;/p&gt;
&lt;p&gt;一个线程只能关联一个Looper. 因为Looper类中有一个静态的ThreadLocal对象保证了只有一个Looper和线程关联, 企图再加一个就会抛出异常.&lt;/p&gt;
&lt;p&gt;调用&lt;code&gt;Looper.quit()&lt;/code&gt;会立即终止Looper, 丢弃所有消息.&lt;br&gt;而&lt;code&gt;Looper.quitSafely()&lt;/code&gt;会将已经通过&lt;code&gt;dispatch barrier&lt;/code&gt;的消息处理了, 只丢弃pending的消息.&lt;/p&gt;
&lt;p&gt;Looper是在Thread的&lt;code&gt;run()&lt;/code&gt;方法里setup的, &lt;code&gt;Looper.prepare()&lt;/code&gt;会检查是否之前存在一个&lt;code&gt;Looper&lt;/code&gt;和这个线程关联, 如果有则抛异常, 没有则建立一个新的&lt;code&gt;Looper&lt;/code&gt;对象, 创建一个新的MessageQueue. 见&lt;a href=&quot;https://github.com/android/platform_frameworks_base/blob/e71ecb2c4df15f727f51a0e1b65459f071853e35/core/java/android/os/Looper.java#L83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;现在&lt;code&gt;Handler&lt;/code&gt;可以接收或者发送消息到&lt;code&gt;MessageQueue&lt;/code&gt;了. 执行&lt;code&gt;Looper.loop()&lt;/code&gt;方法将会开始从队列读出消息. 每一个loop迭代都会取出下一个消息.&lt;/p&gt;
&lt;h2 id=&quot;Crunching-RxAndroid-Part-10-细细咀嚼RxAndroid&quot;&gt;&lt;a href=&quot;#Crunching-RxAndroid-Part-10-细细咀嚼RxAndroid&quot; class=&quot;headerlink&quot; title=&quot;Crunching RxAndroid - Part 10  细细咀嚼RxAndroid&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/crunching-rxandroid/crunching-rxandroid-part-10-cc0c33108ee2#.ri2xoc35c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crunching RxAndroid - Part 10 &lt;/a&gt; 细细咀嚼RxAndroid&lt;/h2&gt;&lt;p&gt;作者这个是个系列文章, 本文是part 10.&lt;/p&gt;
&lt;p&gt;Android的listener很多, 我们可以通过RxJava把listener都变成发射信息的源, 然后我们subscribe.&lt;/p&gt;
&lt;p&gt;本文举例讲了&lt;code&gt;Observable.fromCallable()&lt;/code&gt;和&lt;code&gt;Observable.fromAsync()&lt;/code&gt;方法的用法.&lt;/p&gt;
&lt;h2 id=&quot;Pury-a-new-way-to-profile-your-Android-application&quot;&gt;&lt;a href=&quot;#Pury-a-new-way-to-profile-your-Android-application&quot; class=&quot;headerlink&quot; title=&quot;Pury a new way to profile your Android application&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@nikita.kozlov/pury-new-way-to-profile-your-android-application-7e248b5f615e#.a7a9lsexj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury a new way to profile your Android application&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在做任何优化之前我们都应该先定位问题. 首先是收集性能数据, 如果收集到的信息超过了可以接受的阈值, 我们再进一步深究, 找到引起问题的方法或者API.&lt;/p&gt;
&lt;p&gt;幸运的是, 有一些工具可以帮我们profiling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JakeWharton/hugo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hugo&lt;/a&gt; 用&lt;code&gt;@DebugLog&lt;/code&gt;注解来标记方法, 然后参数, 返回值, 执行时间都会log出来.&lt;/li&gt;
&lt;li&gt;Android Studio toolset. 比如System Trace, 非常准确, 提供了很多信息, 但是需要你花时间来收集和分析数据.&lt;/li&gt;
&lt;li&gt;后台解决方案, 比如&lt;a href=&quot;https://jmeter.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JMeter&lt;/a&gt;, 它们提供了很多功能, 需要花时间来学习如何使用, 第二就是高并发profile也不是常见的需求.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Missing tool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于我们关心的应用的速度问题, 大多数可以分为两种:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特定方法和API的执行时间, 这个可以被Hugo cover.&lt;/li&gt;
&lt;li&gt;两个事件之间的时间, 这可能是独立的两段代码, 但是在逻辑上关联. Android Studio toolset可以cover这种, 但是你需要花很多时间来做profile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者意识到下面的需求没有被满足:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始和结束profiling应该是被两个独立的事件触发的, 这样才可以满足我们灵活性的需求.&lt;/li&gt;
&lt;li&gt;如果我们想监控performance, 仅仅开始和结束事件是不够的. 有时候我们需要知道这之间发生了什么, 这些阶段信息应该被放在一个报告里, 让我们更容易明白和分享数据.&lt;/li&gt;
&lt;li&gt;有时候我们需要做重复操作, 比如loading RecyclerView的下一页, 那么一个回合的操作显然是不够的, 我们需要进行多次操作, 然后显示统计数据, 比如平均值, 最小最大值.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于上面的需求, 作者创建了Pury.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction to Pury&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pury是一个profiling的库, 用于测量多个独立事件之间的时间.&lt;br&gt;事件可以通过注解或者方法调用来触发, 一个scenario的所有事件被放在同一个报告里.&lt;/p&gt;
&lt;p&gt;然后作者举了两个例子, 一个用来测量启动时间, 另一个用来测量loading pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inner structure and limitations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;性能测量是&lt;code&gt;Profilers&lt;/code&gt;做的, 每一个&lt;code&gt;Profiler&lt;/code&gt;包含一个list, 里面是&lt;code&gt;Runs&lt;/code&gt;. 多个&lt;code&gt;Profilers&lt;/code&gt;可以并行运行, 但是每个&lt;code&gt;Profiler&lt;/code&gt;中只有一个&lt;code&gt;Run&lt;/code&gt;是active的. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Profiling with Pury&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pury可以测量多个独立事件之间的时间, 事件可以用注解或者方法调用触发.&lt;br&gt;基本的注解有: &lt;code&gt;@StartProfiling&lt;/code&gt;, &lt;code&gt;@StopProfiling&lt;/code&gt;, &lt;code&gt;@MethodProfiling&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pury.startProfiling();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pury.stopProfiling();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后作者介绍了一些使用细节.&lt;br&gt;项目地址: &lt;a href=&quot;https://github.com/NikitaKozlov/Pury&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;处理方法数限制问题-Dealing-With-the-65K-Methods-limit-on-Android&quot;&gt;&lt;a href=&quot;#处理方法数限制问题-Dealing-With-the-65K-Methods-limit-on-Android&quot; class=&quot;headerlink&quot; title=&quot;处理方法数限制问题 Dealing With the 65K Methods limit on Android&quot;&gt;&lt;/a&gt;处理方法数限制问题 &lt;a href=&quot;http://bytes.schibsted.com/dealing-65k-methods-limit-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dealing With the 65K Methods limit on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作为Android开发, 你可能会看到过这种信息:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Too many field references: 88974; max is 65536.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You may try using –multi-dex option.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先, 为什么会存在65k的方法数限制呢?&lt;/p&gt;
&lt;p&gt;Android应用是放在APK文件里的, 这里面包含了可执行的二进制码文件(DEX - Dalvik Executable), 里面包含了让app工作的代码.&lt;/p&gt;
&lt;p&gt;DEX规范限制了单个的DEX文件中的方法总数最大为65535, 包括了Android framework方法, library方法, 还有你自己代码中的方法. 如果超过了这个限制你将不得不配置你的app来生成多个DEX文件(multidex configuration). &lt;/p&gt;
&lt;p&gt;但是开启了multidex配置之后有一些随机性的兼容问题, 所以我们在决定开启multidex之前, 首先采取的第一步是减少方法数来避免这个问题.&lt;/p&gt;
&lt;p&gt;在我们开始改动之前, 先提出了这些问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们有多少方法?&lt;/li&gt;
&lt;li&gt;这些方法都是从哪里来?&lt;/li&gt;
&lt;li&gt;主要的方法来源是谁?&lt;/li&gt;
&lt;li&gt;我们真的需要所有这些方法吗?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在搜寻这些问题的答案的过程中, 我们发现了一些有用的工具和tips:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.methodscount.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MethodsCount.com&lt;/a&gt; 将会告诉你一个库有多少方法, 还提供了每个方法的依赖.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/dex-method-list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JakeWharton/dex-method-list utility&lt;/a&gt; 可以显示.apk, .aar, .dex, .jar或.class文件中的所有方法引用. 这可以用来发现一个库中到底有多少方法是被你的app使用了.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mihaip/dex-method-counts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mihaip/dex-method-counts&lt;/a&gt; 这个工具可以按包来输出方法, 计算出一个DEX文件中的方法数然后按包来分组输出. 这有利于我们明白哪些库是方法数的主要来源.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle build system&lt;/a&gt; 提供了关于项目结构很有价值的信息. 一个有用的task是&lt;code&gt;dependencies&lt;/code&gt;, 让你看到库的依赖树, 这样你就可以看到重复的依赖, 进而删除它们来减少方法数.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://classyshark.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Classyshark&lt;/a&gt; 是一个Android可执行文件的浏览器. 用这个工具你可以打开Android的可执行文件(.jar, .class, .apk, .dex, .so, .aar, 和Android XML)来分析它的内容.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://inloop.github.io/apk-method-count/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk-method-count&lt;/a&gt; 这是一个工具, 用来快速地查apk中的方法数, 拖拽apk之后就会得到结果.&lt;/p&gt;
&lt;h2 id=&quot;What’s-in-the-APK-APK中有什么&quot;&gt;&lt;a href=&quot;#What’s-in-the-APK-APK中有什么&quot; class=&quot;headerlink&quot; title=&quot;What’s in the APK APK中有什么&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://crushingcode.co/whats-in-the-apk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What’s in the APK&lt;/a&gt; APK中有什么&lt;/h2&gt;&lt;p&gt;APK: Android application package 是Android系统的一种文件格式, 实际上是一种压缩文件, 如果把.apk重命名为.zip, 就可以取出其内容.&lt;/p&gt;
&lt;p&gt;但是此时我们直接在文本编辑器打开AndroidManifest.xml的时候看到的全是机器码.&lt;/p&gt;
&lt;p&gt;当然是有工具来帮我们分析这些东西的, 这个工具从一开始就有, 那就是aapt, 它是Android Build Tool的一部分.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;aapt - Android Asset Packaging Tool&lt;/strong&gt; 这个工具可以用来查看和增删apk中的文件, 打包资源, 研究PNG文件等等.&lt;/p&gt;
&lt;p&gt;它的位置在: &lt;code&gt;&amp;lt;path_to_android_sdk&amp;gt;/build-tools/&amp;lt;build_tool_version_such_as_24.0.2&amp;gt;/aapt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;aapt能做的事情, 从man可以看出:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aapt list - Listing contents of a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;aapt dump - Dumping specific information from an APK file.&lt;/li&gt;
&lt;li&gt;aapt package - Packaging Android resources.&lt;/li&gt;
&lt;li&gt;aapt remove - Removing files from a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;aapt add - Adding files to a ZIP, JAR or APK file.&lt;/li&gt;
&lt;li&gt;aapt crunch - Crunching PNG files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用这个工具来分析我们的apk:&lt;/p&gt;
&lt;p&gt;输出基本信息:&lt;br&gt;&lt;code&gt;aapt dump badging app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出声明的权限:&lt;br&gt;&lt;code&gt;aapt dump permissions app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出配置:&lt;br&gt;&lt;code&gt;aapt dump configurations app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还有其他这些:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Print the resource table from the APK.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt dump resources app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Print the compiled xmls in the given assets.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt dump xmltree app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Print the strings of the given compiled xml assets.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt dump xmlstrings app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# List contents of Zip-compatible archive.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;aapt list -v -a  app-debug.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reductor-Redux-for-Android&quot;&gt;&lt;a href=&quot;#Reductor-Redux-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Reductor - Redux for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yarikx.github.io/Reductor-prologue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor - Redux for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Redux是一个当前JavaScript中很火的构架模式. Reductor把它的概念借鉴到了Java和Android中.&lt;/p&gt;
&lt;p&gt;关于状态管理到底有什么好方法呢, 作者想到了前端开发中的SPA(Single-page application), 和Android应用很像, 有没有什么可借鉴的呢? 答案是有.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux&lt;/a&gt; 是一个JavaScript应用的可预测的状态容器, 可以用下面三个基本原则来描述:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一的真相来源&lt;/li&gt;
&lt;li&gt;状态只读&lt;/li&gt;
&lt;li&gt;变化是纯函数造成的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redux的灵感来源有&lt;a href=&quot;http://facebook.github.io/flux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux&lt;/a&gt;和&lt;a href=&quot;https://github.com/evancz/elm-architecture-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elm Architecture&lt;/a&gt;.&lt;br&gt;强烈建议阅读一下它的&lt;a href=&quot;http://redux.js.org/docs/introduction/Motivation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Yarikx/reductor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reductor&lt;/a&gt;是作者用Java又实现了一次Redux.&lt;/p&gt;
&lt;p&gt;作者用了一个Todo app的例子来说明如何使用, 以及它的好处.&lt;/p&gt;
&lt;p&gt;作者先写了一个naive的实现, 然后不断地举出它的缺点, 然后改进它.&lt;/p&gt;
&lt;p&gt;其中作者用到了&lt;a href=&quot;https://github.com/hrldcpr/pcollections&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pcollection&lt;/a&gt;来实现persistent/immutable的集合.&lt;/p&gt;
&lt;p&gt;最后还把代码改为对测试友好的.&lt;/p&gt;
&lt;h2 id=&quot;Android-leak-pattern-subscriptions-in-views&quot;&gt;&lt;a href=&quot;#Android-leak-pattern-subscriptions-in-views&quot; class=&quot;headerlink&quot; title=&quot;Android leak pattern: subscriptions in views&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@pyricau/android-leak-pattern-subscriptions-in-views-18f0860aa74c?swoff=true&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android leak pattern: subscriptions in views&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;开始作者举了一个例子, 一个自定义View, subscribe了Authenticator单例的username变化事件, 从而更新UI.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeaderView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FrameLayout&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Authenticator authenticator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeaderView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, AttributeSet attrs)&lt;/span&gt; &lt;/span&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFinishInflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; TextView usernameView = (TextView) findViewById(R.id.username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    authenticator.username().subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;String&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String username)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usernameView.setText(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是代码存在一个主要的问题: 我们从来没有unsubscribe. 这样匿名内部类对象就持有外部类对象, 整个view hierarchy就泄露了, 不能被GC.&lt;/p&gt;
&lt;p&gt;为了解决这个问题, 在View的&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;回调里调用&lt;code&gt;unsubscribe()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;作者以为这样解决了问题, 但是并没有, 还是检测出了泄露, 并且作者发现View的&lt;code&gt;onAttachedToWindow()&lt;/code&gt;和&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;都没有被调用.&lt;/p&gt;
&lt;p&gt;作者研究了&lt;code&gt;onAttachedToWindow()&lt;/code&gt;的调用时机:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a view is added to a parent view with a window, onAttachedToWindow() is called immediately, from addView().&lt;/li&gt;
&lt;li&gt;When a view is added to a parent view with no window, onAttachedToWindow() will be called when that parent is attached to a window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而作者的布局是在Activity的&lt;code&gt;onCreate()&lt;/code&gt;里面&lt;code&gt;setContentView()&lt;/code&gt;设置的.&lt;br&gt;这时候每一个View都收到了&lt;code&gt;View.onFinishInflate()&lt;/code&gt;回调, 却没有调&lt;code&gt;View.onAttachedToWindow()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;View.onAttachedToWindow()&lt;/code&gt; is called on the first view traversal, sometime after &lt;code&gt;Activity.onStart()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;onStart()&lt;/code&gt;方法是不是每次都会调用呢? 不是的, 如果我们在&lt;code&gt;onCreate()&lt;/code&gt;里面调用了&lt;code&gt;finish()&lt;/code&gt;, &lt;code&gt;onDestroy()&lt;/code&gt;会立即执行, 而不经过其中的其他生命周期回调.&lt;/p&gt;
&lt;p&gt;明白了这个原理之后, 作者的改进是把订阅放在了&lt;code&gt;View.onAttachedToWindow()&lt;/code&gt;里, 这样就不会泄露了. 对称总是好的.&lt;/p&gt;
&lt;h2 id=&quot;Annotation-Processing-in-Android-Studio-注解和其处理器&quot;&gt;&lt;a href=&quot;#Annotation-Processing-in-Android-Studio-注解和其处理器&quot; class=&quot;headerlink&quot; title=&quot;Annotation Processing in Android Studio 注解和其处理器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@aitorvs/annotation-processing-in-android-studio-7042ccb83024#.khjikdf51&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Annotation Processing in Android Studio&lt;/a&gt; 注解和其处理器&lt;/h2&gt;&lt;p&gt;作者用例子说明了如何自定义注解和其处理器, 让被标记的类自动成为Parcelable的.&lt;br&gt;看了这个有助于理解各种依赖和了解相关的目录结构.&lt;/p&gt;
&lt;p&gt;建议使用: &lt;a href=&quot;https://bitbucket.org/hvisser/android-apt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-apt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Parcelable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parcelable&lt;/a&gt;.&lt;br&gt;相关库代码: &lt;a href=&quot;https://github.com/aitorvs/auto-parcel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;aitorvs/auto-parcel&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Writing-Better-Adapters-写出更好的Adapter&quot;&gt;&lt;a href=&quot;#Writing-Better-Adapters-写出更好的Adapter&quot; class=&quot;headerlink&quot; title=&quot;Writing Better Adapters 写出更好的Adapter&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@dpreussler/writing-better-adapters-1b09758407d2#.ngas0y7j1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing Better Adapters&lt;/a&gt; 写出更好的Adapter&lt;/h2&gt;&lt;p&gt;在Android应用中, 经常需要展示List, 那就需要一个Adapter来持有数据.&lt;/p&gt;
&lt;p&gt;RecyclerView的基本操作是: 创建一个view, 然后这个ViewHolder显示view数据; 把这个ViewHolder和adapter持有的数据绑定, 通常是一个model classes的list.&lt;/p&gt;
&lt;p&gt;当数据类型只有一种时, 实现很简单, 不容易出错. 但是当要显示的数据有很多种时, 就变得复杂起来.&lt;/p&gt;
&lt;p&gt;首先你需要覆写:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun getItemViewType(position: Int) : Int&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;默认是返回0, 实现以后把不同的type转换为不同的整型值.&lt;/p&gt;
&lt;p&gt;然后你需要覆写:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为每一种type创建一个ViewHolder.&lt;/p&gt;
&lt;p&gt;第三步是:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun onBindViewHolder(holder: ViewHolder, position: Int): Any&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里没有type参数.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Uglyness&lt;/strong&gt;&lt;br&gt;好像看起来没有什么问题?&lt;br&gt;让我们重新看&lt;code&gt;getItemViewType()&lt;/code&gt;这个方法. 系统需要给每一个position都对应一个type, 所以你可能会写出这样的代码:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (things.get(position) is Duck) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TYPE_DUCK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (things.get(position) is Mouse) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TYPE_MOUSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这很丑不是吗?&lt;/p&gt;
&lt;p&gt;如果你的ViewHolder没有一个共同的基类, 在binding的时候也是这么丑:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    val thing = things.get(position)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (thing is Animal) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (holder as AnimalViewHolder).bind(thing as Animal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (thing is Car) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (holder as CarViewHolder).bind(thing as Car)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很多的instance-of和强制类型转换, 它们都是code smells. 违反了很多软件设计的原则, 并且当我们想要新添一种类型时, 需要改动很多方法. 我们的目标是添加新类型的时候不用更改Adapter之前的代码.&lt;br&gt;开闭原则: Open for Extension, Closed for Modification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s Fix It&lt;/strong&gt;&lt;br&gt;用一个map来查询? 不好.&lt;br&gt;把type放在model里? 不好.&lt;/p&gt;
&lt;p&gt;解决问题的一种办法是: 加入ViewModel, 作为中间层.&lt;/p&gt;
&lt;p&gt;但是如果你不想创建很多的ViewModel类, 还有其他的办法: &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visitor模式&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface Visitable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(typeFactory: TypeFactory) : Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface Animal : Visitable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface Car : Visitable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Mouse: Animal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(typeFactory: TypeFactory) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        = typeFactory.type(this)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;工厂:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface TypeFactory &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(duck: Duck): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(mouse: Mouse): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(dog: Dog): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun type(car: Car): Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回对应的id:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TypeFactoryForList : TypeFactory &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(duck: Duck) = R.layout.duck&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(mouse: Mouse) = R.layout.mouse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(dog: Dog) = R.layout.dog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override fun type(car: Car) = R.layout.car&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Material-Intro-Screen-for-Android-Apps&quot;&gt;&lt;a href=&quot;#Material-Intro-Screen-for-Android-Apps&quot; class=&quot;headerlink&quot; title=&quot;Material Intro Screen for Android Apps&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/tangoagency/material-intro-screen-for-android-apps-c4317fbac923?source=latest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Intro Screen for Android Apps&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;现在有两个主流的libraries为Android 应用提供了好看的intro screens, 但是感觉并不是很好用, 所以作者他们发布了一个新的欢迎界面的库&lt;a href=&quot;https://github.com/TangoAgency/material-intro-screen/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TangoAgency/material-intro-screen
&lt;/a&gt;, 好用易扩展.&lt;/p&gt;
&lt;h2 id=&quot;Testing-Legacy-Code-Hidden-Dependencies&quot;&gt;&lt;a href=&quot;#Testing-Legacy-Code-Hidden-Dependencies&quot; class=&quot;headerlink&quot; title=&quot;Testing Legacy Code: Hidden Dependencies&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@corneliu/testing-legacy-code-hidden-dependencies-9b8cd617953f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing Legacy Code: Hidden Dependencies&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文讨论&lt;a href=&quot;https://en.wikipedia.org/wiki/God_object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;God Object&lt;/a&gt;, &lt;a href=&quot;https://sourcemaking.com/antipatterns/the-blob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blob&lt;/a&gt;, 这种很大的类和方法, 做了很多事情. 如果你想要重构, 先加点测试, 也发现很难, 因为它的依赖太多了, 做了太多事情.&lt;/p&gt;
&lt;p&gt;首先, 实例化:&lt;br&gt;加set方法, 让数据库依赖抽离出来, 这样测试的时候可以传一个Fake的进去.&lt;/p&gt;
&lt;p&gt;第二, 更多依赖:&lt;br&gt;把UserManger和网络请求等依赖也抽为成员变量, 加上set方法或者构造参数, 这样在测试的时候易于把mock的东西传进去.&lt;/p&gt;
&lt;p&gt;第三, 清理: 要牢记&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;单一职能原则&lt;/a&gt;, 进行职能拆分.&lt;/p&gt;
&lt;p&gt;最后, 现实: 清理是一个持续化的过程, 得一步一步来, 有时候小步的改动会帮助你发现另外需要改动的地方. &lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;EncryptedPreferences&quot;&gt;&lt;a href=&quot;#EncryptedPreferences&quot; class=&quot;headerlink&quot; title=&quot;EncryptedPreferences&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/PDDStudio/EncryptedPreferences&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EncryptedPreferences&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AES-256加密的SharedPreferences.&lt;/p&gt;
&lt;h2 id=&quot;Pury&quot;&gt;&lt;a href=&quot;#Pury&quot; class=&quot;headerlink&quot; title=&quot;Pury&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/NikitaKozlov/Pury&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pury&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;报告多个不同事件之间的时间, 可用于性能测量.&lt;/p&gt;
&lt;h2 id=&quot;Floating-Navigation-View&quot;&gt;&lt;a href=&quot;#Floating-Navigation-View&quot; class=&quot;headerlink&quot; title=&quot;Floating-Navigation-View&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/andremion/Floating-Navigation-View&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Floating-Navigation-View&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Floating Action Button, 展开后是一个NavigationView.&lt;/p&gt;
&lt;h2 id=&quot;Material-Intro-Screen&quot;&gt;&lt;a href=&quot;#Material-Intro-Screen&quot; class=&quot;headerlink&quot; title=&quot;Material Intro Screen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TangoAgency/material-intro-screen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Intro Screen&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;易用易扩展的欢迎界面.&lt;/p&gt;
&lt;h1 id=&quot;SPECIALS&quot;&gt;&lt;a href=&quot;#SPECIALS&quot; class=&quot;headerlink&quot; title=&quot;SPECIALS&quot;&gt;&lt;/a&gt;SPECIALS&lt;/h1&gt;&lt;h2 id=&quot;Huge-list-of-useful-resources-for-Android-development&quot;&gt;&lt;a href=&quot;#Huge-list-of-useful-resources-for-Android-development&quot; class=&quot;headerlink&quot; title=&quot;Huge list of useful resources for Android development&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.anysoftwaretools.com/best-android-development-resources/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Huge list of useful resources for Android development&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;资源分享, 包括博客论坛Video社区等等.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-224&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-224&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #224&quot;&gt;&lt;/a&gt;Android Weekly Issue #224&lt;/h1&gt;&lt;p&gt;September 25th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-224&quot;&gt;Android Weekly Issue #224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括: Google Play的pre-launch报告; Wear的Complications API; Android Handler解析; RxAndroid; 测量性能的库: Pury; 方法数限制; APK内容分析; Redux for Android; 一种view造成的泄露; 注解处理; 更好的Adapter; Intro屏等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Annotation" scheme="http://mengdd.github.io/tags/Annotation/"/>
    
      <category term="Reductor" scheme="http://mengdd.github.io/tags/Reductor/"/>
    
      <category term="Redux" scheme="http://mengdd.github.io/tags/Redux/"/>
    
      <category term="Memory Leak" scheme="http://mengdd.github.io/tags/Memory-Leak/"/>
    
      <category term="pre-launch" scheme="http://mengdd.github.io/tags/pre-launch/"/>
    
      <category term="Handler" scheme="http://mengdd.github.io/tags/Handler/"/>
    
      <category term="RxAndroid" scheme="http://mengdd.github.io/tags/RxAndroid/"/>
    
      <category term="Profile" scheme="http://mengdd.github.io/tags/Profile/"/>
    
      <category term="Methods Count" scheme="http://mengdd.github.io/tags/Methods-Count/"/>
    
      <category term="APK" scheme="http://mengdd.github.io/tags/APK/"/>
    
      <category term="Adapter" scheme="http://mengdd.github.io/tags/Adapter/"/>
    
      <category term="Intro Screen" scheme="http://mengdd.github.io/tags/Intro-Screen/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 223</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/09/22/android-weekly-notes-issue-223/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/09/22/android-weekly-notes-issue-223/</id>
    <published>2016-09-22T09:34:27.000Z</published>
    <updated>2016-09-22T10:08:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-223&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-223&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #223&quot;&gt;&lt;/a&gt;Android Weekly Issue #223&lt;/h1&gt;&lt;p&gt;September 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-223&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #223&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Offline时间戳处理;  Accessibility的安全问题可能并不是个问题; 如何在单元测试和UI测试之间共享代码; Android中的指纹认证; 编译时间Kotlin vs Java; MVP结合RxJava, 让View来处理生命周期; RxJava2预览; 内存泄露处理; Gradle相关等等.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Offline-First-Introducing-TrueTime-for-Android&quot;&gt;&lt;a href=&quot;#Offline-First-Introducing-TrueTime-for-Android&quot; class=&quot;headerlink&quot; title=&quot;Offline First: Introducing TrueTime for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://tech.instacart.com/truetime/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Offline First: Introducing TrueTime for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;TrueTime是一个NTP library for &lt;a href=&quot;https://github.com/instacart/truetime.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift&lt;/a&gt; and &lt;a href=&quot;https://github.com/instacart/truetime-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;其中NTP是Network Time Protocol.&lt;/p&gt;
&lt;p&gt;作者他们有一个购物app, 但是时断时续的网络降低了用户体验, 所以他们进行了离线迁移, 准备出一系列文章分享相关的想法和在此过程中学到的东西.&lt;/p&gt;
&lt;p&gt;本文是第一篇, 关于时间.&lt;/p&gt;
&lt;p&gt;由于在设置里可以设置设备的日期和时间, 所以设备的时间并不一定是真实的时间, 我们在程序里&lt;code&gt;new Date()&lt;/code&gt;得到的其实是设备时间.&lt;/p&gt;
&lt;p&gt;关于真实时间的计算, 他们开源了TrueTime库, Android和iOS都能用.&lt;/p&gt;
&lt;p&gt;TrueTime如何计算真实时间的呢? 它其实是向NTP的server发了请求, 然后计算出的.&lt;/p&gt;
&lt;p&gt;文中和库都说明了用法.&lt;/p&gt;
&lt;h2 id=&quot;Android-Security-and-Accessibility&quot;&gt;&lt;a href=&quot;#Android-Security-and-Accessibility&quot; class=&quot;headerlink&quot; title=&quot;Android Security and Accessibility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@ataulm/a-few-weeks-ago-android-weekly-promoted-a-post-highlighting-a-security-issue-with-the-android-5eae7ff6b8aa#.p25cbw2wl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Security and Accessibility&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前有一个&lt;a href=&quot;https://android.jlelse.eu/android-accessibility-75fdc5810025#.94tpbl6z2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;说Accessiblity存在安全隐患, 这个服务可能可以访问到一些隐私信息, 比如密码.&lt;/p&gt;
&lt;p&gt;但是这篇文章的作者觉得前一篇文章作者的解决方案不是很好.&lt;/p&gt;
&lt;p&gt;因为当用户开启Accessibility权限的时候, Android就已经给出了警告, 说明敏感信息可能会被观察到. 第三方的keyboard也可以访问这些信息, Android也是在开启的时候给出了警告.&lt;/p&gt;
&lt;p&gt;另外对于前一篇文章作者提出的解决方案: &lt;code&gt;View.IMPORTANT_FOR_ACCESSIBILITY_NO&lt;/code&gt;&lt;br&gt;这样真正有视觉障碍的那部分用户也无法看到密码, 可能就无法登陆了.&lt;/p&gt;
&lt;p&gt;所以本文作者建议的解决方案是, 可以弹一个对话框来提醒用户, 如果用户允许了, 再继续输入.&lt;/p&gt;
&lt;h2 id=&quot;Sharing-code-between-UI-amp-unit-tests&quot;&gt;&lt;a href=&quot;#Sharing-code-between-UI-amp-unit-tests&quot; class=&quot;headerlink&quot; title=&quot;Sharing code between UI &amp;amp; unit tests&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://trickyandroid.com/android-test-tricks-sharing-code-between-unit-ui-tests/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sharing code between UI &amp;amp; unit tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Android的测试分两种:&lt;/p&gt;
&lt;p&gt;一种是Unit tests. 单元测试, 在JVM上跑.&lt;/p&gt;
&lt;p&gt;另一种是UI测试, 需要Android设备.&lt;/p&gt;
&lt;p&gt;在Android Studio中对应&lt;code&gt;test&lt;/code&gt;和&lt;code&gt;androidTest&lt;/code&gt;文件夹.&lt;/p&gt;
&lt;p&gt;这两个测试文件夹之间是不共享代码的, 即一个文件夹里不能访问另一个里面的代码.&lt;/p&gt;
&lt;p&gt;但是如果我们想要共用一些代码, 是有办法解决的.&lt;/p&gt;
&lt;p&gt;首先在app/src下新建一个文件夹, 比如叫&lt;code&gt;testShared&lt;/code&gt;. 里面添加要共享的代码.&lt;/p&gt;
&lt;p&gt;然后在&lt;code&gt;app/build.gradle&lt;/code&gt;里面添加这个:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android.sourceSets &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs += &amp;quot;$projectDir/src/testShared&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    androidTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        java.srcDirs += &amp;quot;$projectDir/src/testShared&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以在UI测试和单元测试中共享同一份代码了.&lt;/p&gt;
&lt;h2 id=&quot;Synchronously-Animating-Colors-on-Android&quot;&gt;&lt;a href=&quot;#Synchronously-Animating-Colors-on-Android&quot; class=&quot;headerlink&quot; title=&quot;Synchronously Animating Colors on Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kylewbanks.com/blog/animating-toolbar-tablayout-floatingactionbutton-and-statusbar-background-color-on-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Synchronously Animating Colors on Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者想做的一个效果是, 在切换tab的时候, 把&lt;code&gt;Toolbar&lt;/code&gt;, &lt;code&gt;TabLayout&lt;/code&gt;, &lt;code&gt;FloatingActionButton&lt;/code&gt;还有&lt;code&gt;StatusBar&lt;/code&gt;的颜色都动画地改变到另一个颜色.&lt;/p&gt;
&lt;p&gt;实现很简单, 首先用当前颜色和目标颜色建立一个&lt;code&gt;ValueAnimator&lt;/code&gt;, 然后&lt;code&gt;addUpdateListener()&lt;/code&gt;在更新的过程中把值set给相应的控件:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;colorAnimation.addUpdateListener(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ValueAnimator.AnimatorUpdateListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onAnimationUpdate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ValueAnimator animator)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; color = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) animator.getAnimatedValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        toolbar.setBackgroundColor(color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tabLayout.setBackgroundColor(color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        floatingActionButton.setBackgroundTintList(ColorStateList.valueOf(color));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.LOLLIPOP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getWindow().setStatusBarColor(color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;colorAnimation.start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中FloatingActionButton要用&lt;code&gt;setBackgroundTintList()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;StatusBar在21及以上才支持&lt;code&gt;getWindow().setStatusBarColor(color);&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-Fingerprint-Authentication&quot;&gt;&lt;a href=&quot;#Android-Fingerprint-Authentication&quot; class=&quot;headerlink&quot; title=&quot;Android Fingerprint Authentication&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@aitorvs/android-fingerprint-authentication-44c047179d9a#.3og72boir&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Fingerprint Authentication&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;其实用户都不喜欢验证, 因为用户都比较懒, 不喜欢一次又一次地输入密码或者手势pattern, 但是不锁屏又不安全.&lt;/p&gt;
&lt;p&gt;指纹验证&lt;a href=&quot;https://developer.android.com/about/versions/marshmallow/android-6.0.html#fingerprint-authentication&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fingerprint Authentication&lt;/a&gt;是Android M (Android 6.0, API 23)引入的. 它就是为了解决这个问题, 提升用户体验. 这种non-disturbing和easy的方式, 让我们不用在安全和用户体验之间做出妥协.&lt;/p&gt;
&lt;p&gt;如果你的应用需要做一些关键操作, 比如支付, 你需要用户在操作前授权, 那么指纹验证会很有帮助.&lt;/p&gt;
&lt;p&gt;然后作者介绍了实现的细节.&lt;/p&gt;
&lt;p&gt;最后作者附上了自己的相关库: &lt;a href=&quot;https://github.com/aitorvs/fingerlock&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fingerlock&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Kotlin-vs-Java-Compilation-Speed&quot;&gt;&lt;a href=&quot;#Kotlin-vs-Java-Compilation-Speed&quot; class=&quot;headerlink&quot; title=&quot;Kotlin vs Java: Compilation Speed&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-vs-java-compilation-speed-e6c174b39b5d#.nep65secf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin vs Java: Compilation Speed&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是作者关于Kotlin的第三篇文章, 作者在这篇文章里测试了Kotlin和Java的编译时间.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clean build with No Gradle daemon&lt;/strong&gt;&lt;br&gt;Java编译比Kotlin快17%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clean build + Gradle daemon&lt;/strong&gt;&lt;br&gt;&lt;code&gt;org.gradle.daemon=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Java编译比Kotlin快13%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Incremental builds&lt;/strong&gt;&lt;br&gt;&lt;code&gt;kotlin.incremental=true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在clean build的时候, Java可能快10-15%, 但是在增量build + gradle daemon时, kotlin和Java一样快, 甚至可能比Java更快一些.&lt;/p&gt;
&lt;h2 id=&quot;Let-the-view-handle-the-lifecycle-in-MVP-by-using-RxJava&quot;&gt;&lt;a href=&quot;#Let-the-view-handle-the-lifecycle-in-MVP-by-using-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Let the view handle the lifecycle in MVP by using RxJava&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@ferhatparmak/let-the-view-handle-the-lifecycle-in-mvp-by-using-rxjava-694d67923871#.vt21pzfr0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let the view handle the lifecycle in MVP by using RxJava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;问题:&lt;br&gt;作者举了一个例子, 在Fragment作为View的MVP中, 如果P从service取一些数据, 然后调用View的显示方法, 则还需要知道&lt;code&gt;onViewCreated()&lt;/code&gt;是不是已经调用过了.&lt;/p&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;p&gt;首先创建一个Lifecycle的BehaviorSubject, 在&lt;code&gt;onViewCreated()&lt;/code&gt;的时候调用&lt;code&gt;onNext(null)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;把View的方法改成返回一个Observable, presenter的方法调用View的方法时实际上是subscribe了一下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsFragment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsView&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ProductsPresenter presenter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//Lifecycle subject. It is BehaviourSubject because it can be subscribed after onViewCreated call.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; BehaviorSubject&amp;lt;Void&amp;gt; onViewCreatedSubject = BehaviorSubject.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Void&amp;gt; &lt;span class=&quot;title&quot;&gt;showProducts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Product&amp;gt; productList)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; onViewCreatedSubject. &lt;span class=&quot;comment&quot;&gt;// Wait for onViewCreated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doOnNext(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;Object&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//Updates recyclerview adapter items&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewCreated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view, @Nullable Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onViewCreated(view, savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onViewCreatedSubject.onNext(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Presenter:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsFragmentPresenter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProductsPresenter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ProductsView view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadProducts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    productsService.getProducts()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .flatMap(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Func1&amp;lt;Object, Observable&amp;lt;Void&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Observable&amp;lt;Void&amp;gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Product&amp;gt; productList)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//Return the view&#39;s observable to show products. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//No need to check if the view is created!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; view.showProducts(productList); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .subscribe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然这并不是一个完整的例子, 完整的例子还需要考虑&lt;code&gt;onDestroyView()&lt;/code&gt;还有注销等情况的处理.&lt;/p&gt;
&lt;h2 id=&quot;Nougat-GCM-Network-Manager&quot;&gt;&lt;a href=&quot;#Nougat-GCM-Network-Manager&quot; class=&quot;headerlink&quot; title=&quot;Nougat - GCM Network Manager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/nougat-gcm-network-manager/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nougat - GCM Network Manager&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者搞了一个message app来研究Android 7的新特性.&lt;/p&gt;
&lt;p&gt;他用到了&lt;a href=&quot;http://ryanharter.com/blog/2016/03/22/autovalue/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;关于Android 7的另一篇文章: &lt;a href=&quot;https://commonsware.com/blog/2016/03/09/random-musings-n-developer-preview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Random Musings on the N Developer Preview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;他们的应用首先需要周期性地生产一些消息, 关于生产消息的实现, 作者没有用&lt;code&gt;AlarmManager&lt;/code&gt;, 也没有用&lt;code&gt;JobScheduler&lt;/code&gt;(因为只支持API 21及以上), 而是选用了&lt;code&gt;GCMNetworkManager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;具体实现见原文, 有详细说明.&lt;br&gt;另: &lt;a href=&quot;https://github.com/StylingAndroid/Nougat/tree/GCMNetworkManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这只是系列文章的第一篇, 后续应该会写更多.&lt;/p&gt;
&lt;h2 id=&quot;TransactionTooLargeException-crashes-on-Nougat&quot;&gt;&lt;a href=&quot;#TransactionTooLargeException-crashes-on-Nougat&quot; class=&quot;headerlink&quot; title=&quot;TransactionTooLargeException crashes on Nougat&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.sqisland.com/2016/09/transactiontoolargeexception-crashes-nougat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TransactionTooLargeException crashes on Nougat&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者自己的应用在Activity转换的时候遇到了一个crash: &lt;code&gt;java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 700848 bytes.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前应用里有相关的Warning log, 但是&lt;br&gt;Android 7 Nougat (API 24)把它作为异常抛出来了.&lt;/p&gt;
&lt;p&gt;产生这个问题的原因是在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;里面存了太多数据. 作者做了一个测试, 想看看这个限制大概是多少, 大概是500K左右. &lt;/p&gt;
&lt;p&gt;所以这里是不应该用来存储太多数据的, 应该只存状态.&lt;/p&gt;
&lt;p&gt;底下回复说每个进程都有1M的buffer来接收transactions, 但是是在没有任何其他IPC的情况下. 所以建议存储的状态数据少于100K或者50K, 当然越少越好.&lt;/p&gt;
&lt;h2 id=&quot;Building-a-blazing-fast-ETC2-compressor&quot;&gt;&lt;a href=&quot;#Building-a-blazing-fast-ETC2-compressor&quot; class=&quot;headerlink&quot; title=&quot;Building a blazing fast ETC2 compressor&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@duhroach/building-a-blazing-fast-etc2-compressor-307f3e9aad99#.ixumn3e2v&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a blazing fast ETC2 compressor&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者是Google的, 以前做游戏的, 所以致力于Performances, GPU, 数据压缩等内容.&lt;/p&gt;
&lt;p&gt;作者关注VR, 但是VR中要提升体验, 必定会增加图像的大小和质量.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ericsson_Texture_Compression&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ETC textures&lt;/a&gt; 是OpenGLES 3.0的一种标准格式.&lt;/p&gt;
&lt;p&gt;编码一个高质量的ETC2 texture会花费很多时间.&lt;br&gt;以在游戏界最流行的压缩工具&lt;a href=&quot;http://malideveloper.arm.com/resources/tools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mali GPU Texture Compression tool&lt;/a&gt;为例, 作者做了实验, 证明确实要花费很多时间(平均10分钟)来encode一个图.&lt;/p&gt;
&lt;p&gt;所以作者他们开发了一个新的库: &lt;a href=&quot;https://github.com/google/etc2comp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;etc2comp&lt;/a&gt;, 一个很快的texture encoder.&lt;/p&gt;
&lt;p&gt;然后和之前的工具做了比较, 平均时间提高到了10秒.&lt;/p&gt;
&lt;p&gt;后来他说的技术细节我就看不懂了. 文后还有其他图像格式(JPG, PNG, WebP)相关的文章链接.&lt;/p&gt;
&lt;h2 id=&quot;Low-Coupling-With-Rx-and-Dagger2-in-Android&quot;&gt;&lt;a href=&quot;#Low-Coupling-With-Rx-and-Dagger2-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Low Coupling With Rx and Dagger2 in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ottodroid.net/?p=479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Low Coupling With Rx and Dagger2 in Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者举例展示Android程序的解耦.&lt;/p&gt;
&lt;p&gt;首先, 他展示一个高度耦合的Android程序, 然后加入Rx, 最后加入Dagger2, 从而一步一步地解耦这个项目.&lt;/p&gt;
&lt;p&gt;项目的内容是发现Network中的Services. 这里有官方的Training: &lt;a href=&quot;https://developer.android.com/training/connect-devices-wirelessly/nsd.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Network Service Discovery&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;RxJava2-An-Early-Preview&quot;&gt;&lt;a href=&quot;#RxJava2-An-Early-Preview&quot; class=&quot;headerlink&quot; title=&quot;RxJava2: An Early Preview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@theMikhail/rxjava2-an-early-preview-5b05de46b07#.ftflhi48n&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava2: An Early Preview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;最近RxJava2有了第一个Release Candidate. 所以作者在这里先预览一下有哪些有趣的更新和新加的功能:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Dependency&lt;/strong&gt;:&lt;br&gt;添加了依赖: &lt;a href=&quot;http://www.reactive-streams.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveStreams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Imports&lt;/strong&gt;:&lt;br&gt;RxJava2放在了一个不同的package下:&lt;/p&gt;
&lt;p&gt;RxJava:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile ‘io.reactivex:rxjava:1.0.y-SNAPSHOT’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RxJava2:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile ‘io.reactivex.rxjava2:rxjava:x.y.z’&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这意味着, 你可以同时用两个版本的库. 如果你要完全迁移的话, 你需要把所有的import都改到新包.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Null Emissions No Longer Permitted&lt;/strong&gt;:&lt;br&gt;不允许再发送null值了, 会直接抛出空指针异常.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//don’t do this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subject.onNext(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//don’t do this either&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Under(Back)Pressure&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Backpressure&lt;/code&gt;是当&lt;code&gt;Observable&lt;/code&gt;发射值的速度比&lt;code&gt;Observer&lt;/code&gt;能处理的速度快时发生的.&lt;/p&gt;
&lt;p&gt;RxJava2引入了一个新的Observable类&lt;code&gt;Flowable&lt;/code&gt;, with backpressure support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Single Old and New&lt;/strong&gt;:&lt;br&gt;订阅一个Single现在可以用这个:&lt;br&gt;&lt;code&gt;SingleObserver&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hit Me Maybe One More Type&lt;/strong&gt;:&lt;br&gt;一个新的类型叫&lt;code&gt;Maybe&lt;/code&gt;, 它是&lt;code&gt;Single&lt;/code&gt;和&lt;code&gt;Completable&lt;/code&gt;的混合体. 用来发射0或1个值.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New BackPressured Subject: Processor&lt;/strong&gt;:&lt;br&gt;引入了一个新类型, &lt;code&gt;Processor&lt;/code&gt;, 它是一个有backpressure support的&lt;code&gt;Subject&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Names for Function and Action&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Func1&lt;/code&gt; -&amp;gt; &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func2&lt;/code&gt; -&amp;gt; &lt;code&gt;BiFunction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FuncN&lt;/code&gt; -&amp;gt; &lt;code&gt;Function&amp;lt;Object[], R&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func1&amp;lt;T, Boolean&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;Predicate&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Action0&lt;/code&gt; -&amp;gt; &lt;code&gt;Consumer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Action1&lt;/code&gt; -&amp;gt; &lt;code&gt;BiConsumer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ActionN&lt;/code&gt; -&amp;gt; &lt;code&gt;Consumer&amp;lt;Object[]&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Subscriber is Now Disposable&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;因为和Reactive-Streams的命名冲突, 所以&lt;code&gt;Subscriber&lt;/code&gt;改名为&lt;code&gt;Disposable&lt;/code&gt;. 它有一个&lt;code&gt;.dispose()&lt;/code&gt;方法, 类似于&lt;code&gt;Subscription&lt;/code&gt;的&lt;code&gt;.unsubscribe()&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;onCompleted()&lt;/code&gt;也将变为&lt;code&gt;onComplete()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Composite Subscriptions Changes&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CompositeSubscription&lt;/code&gt; + &lt;code&gt;subscribe()&lt;/code&gt;-&amp;gt; &lt;code&gt;CompositeDisposable&lt;/code&gt; + &lt;code&gt;subscribeWith()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blocking Calls&lt;/strong&gt;:&lt;br&gt;RxJava2加了一些新的操作符来变异步为同步.&lt;br&gt;&lt;code&gt;.toBlocking.first()&lt;/code&gt; -&amp;gt; &lt;code&gt;.blockingFirst()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Better Hooks for Plugins&lt;/strong&gt;:&lt;br&gt;plugin系统被重写了. 现在你可以覆写内置schedulers返回的值了. 这样你就可以在做单元测试的时候覆写&lt;code&gt;Schedulers.io()&lt;/code&gt;来返回同步的值, 甚至debug Schedulers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目标Release日期: October 29.&lt;/p&gt;
&lt;p&gt;Retrofit已经支持RxJava2了:&lt;br&gt;&lt;a href=&quot;https://github.com/JakeWharton/retrofit2-rxjava2-adapter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;retrofit-rxjava2-adapter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里还有一个Library用来把RxJava1转换到RxJava2: &lt;a href=&quot;https://github.com/akarnokd/RxJava2Interop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava2Interop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sources:&lt;br&gt;&lt;a href=&quot;http://reactivex.io/RxJava/2.x/javadoc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 2.x javadoc&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Wiki: What’s different in 2.0&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38423079/differences-between-rxjava1-and-rxjava2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Eight-Ways-Your-Android-App-Can-STOP-Leaking-Memory&quot;&gt;&lt;a href=&quot;#Eight-Ways-Your-Android-App-Can-STOP-Leaking-Memory&quot; class=&quot;headerlink&quot; title=&quot;Eight Ways Your Android App Can STOP Leaking Memory&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.nimbledroid.com/2016/09/06/stop-memory-leaks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eight Ways Your Android App Can STOP Leaking Memory&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之前作者有个文章叫&lt;a href=&quot;http://blog.nimbledroid.com/2016/05/23/memory-leaks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Eight Ways Your Android App Can Leak Memory&lt;/a&gt;, 讲的是Android应用中8种内存泄露的原因, 主要是泄露了Activity.&lt;/p&gt;
&lt;p&gt;这篇文章主要讲解决方法:&lt;/p&gt;
&lt;h3 id=&quot;Static-Activities&quot;&gt;&lt;a href=&quot;#Static-Activities&quot; class=&quot;headerlink&quot; title=&quot;Static Activities&quot;&gt;&lt;/a&gt;Static Activities&lt;/h3&gt;&lt;p&gt;错误原因: 把Activity存在一个静态引用里, Activity生命周期结束后仍然持有.&lt;/p&gt;
&lt;p&gt;解决方法:&lt;br&gt;使用&lt;a href=&quot;https://developer.android.com/reference/java/lang/ref/WeakReference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WeakReference&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Static-Views&quot;&gt;&lt;a href=&quot;#Static-Views&quot; class=&quot;headerlink&quot; title=&quot;Static Views&quot;&gt;&lt;/a&gt;Static Views&lt;/h3&gt;&lt;p&gt;错误原因: 静态引用了View, 因为attached View引用了Activity, 所以等于间接引用了Activity.&lt;/p&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用WeakReference;&lt;/li&gt;
&lt;li&gt;在onDestroy()里面把引用置为null.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Inner-Classes&quot;&gt;&lt;a href=&quot;#Inner-Classes&quot; class=&quot;headerlink&quot; title=&quot;Inner Classes&quot;&gt;&lt;/a&gt;Inner Classes&lt;/h3&gt;&lt;p&gt;内部类分两种, 静态内部类和非静态内部类: &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nested Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;错误原因: 在Activity里有一个内部类(非静态), 创建内部类的对象, 然后静态引用之. 因为内部类持有外部类的应用, 所以会造成内存泄露.&lt;/p&gt;
&lt;p&gt;解决方法:&lt;br&gt;尽量不要存static引用.&lt;/p&gt;
&lt;h3 id=&quot;匿名内部类-AsyncTask-Handler-Thread-TimerTask&quot;&gt;&lt;a href=&quot;#匿名内部类-AsyncTask-Handler-Thread-TimerTask&quot; class=&quot;headerlink&quot; title=&quot;匿名内部类 AsyncTask, Handler, Thread, TimerTask&quot;&gt;&lt;/a&gt;匿名内部类 AsyncTask, Handler, Thread, TimerTask&lt;/h3&gt;&lt;p&gt;错误原因:&lt;/p&gt;
&lt;p&gt;如果你不在超出生命周期的地方引用它, 匿名内部类的对象是无害的.&lt;/p&gt;
&lt;p&gt;但是上面的这些内部类对象全都是用来产生一些线程的, 这些线程是app全局的, 而且会引用创建它们的对象.&lt;/p&gt;
&lt;p&gt;解决方法: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把上面的这些类改成静态内部类, 静态的内部类对象不会引用外部类的对象.&lt;/li&gt;
&lt;li&gt;如果你坚持使用匿名内部类, 可以在Activity的onDestroy()里面终止线程.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Sensor-Manager&quot;&gt;&lt;a href=&quot;#Sensor-Manager&quot; class=&quot;headerlink&quot; title=&quot;Sensor Manager&quot;&gt;&lt;/a&gt;Sensor Manager&lt;/h3&gt;&lt;p&gt;错误原因:&lt;/p&gt;
&lt;p&gt;把Activity作为listener注册给了系统服务, 但是在Activity生命周期结束之前没有注销listener.&lt;/p&gt;
&lt;p&gt;解决方法: 在生命周期结束前注销listener.&lt;/p&gt;
&lt;h2 id=&quot;Auto-rename-Android-versionName-in-Gradle&quot;&gt;&lt;a href=&quot;#Auto-rename-Android-versionName-in-Gradle&quot; class=&quot;headerlink&quot; title=&quot;Auto rename Android versionName in Gradle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jagonzalez.develop/auto-rename-android-versionname-by-creating-custom-gradle-plugin-2922bbaaaed6#.cds2wvd05&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto rename Android versionName in Gradle&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在应用release的时候, 版本号是确定的, 这没问题. 在应用开发的时候, 如果每一个apk也有一个特定的版本号, 将会非常有帮助.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自定义Gradle Plugin&lt;/strong&gt;:&lt;br&gt;&lt;code&gt;com.android.application&lt;/code&gt;就是一个gradle plugin.&lt;/p&gt;
&lt;p&gt;有三种方式可以创建gradle plugin: &lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html#sec:packaging_a_plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;doc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;本文作者选择了&lt;code&gt;buildSrc&lt;/code&gt;的方式, 因为这很容易, 而且可以被加到repo里, 但是这样将依附于你的project, 不能复用.&lt;/p&gt;
&lt;p&gt;具体代码见原文.&lt;/p&gt;
&lt;p&gt;这么做了之后, 每一次build的apk都自带了分支信息, Jira卡号, 或者任何你想带的信息.&lt;/p&gt;
&lt;h2 id=&quot;Is-your-custom-view-interactive-aware&quot;&gt;&lt;a href=&quot;#Is-your-custom-view-interactive-aware&quot; class=&quot;headerlink&quot; title=&quot;Is your custom view interactive aware?&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://renaudcerrato.github.io/2016/09/15/is-your-custom-view-interactive-aware/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Is your custom view interactive aware?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;什么是&lt;strong&gt;Interactive View&lt;/strong&gt;?&lt;br&gt;当View是可见的, 即可以和用户交互, 即为interactive.&lt;/p&gt;
&lt;p&gt;当你的自定义View做一些很重的工作, 比如循环的动画或者loading, 或者依赖于传感器, 当这种View变为不可见时,你需要做一些工作来节约电量.&lt;/p&gt;
&lt;p&gt;作者写了一个辅助类: &lt;a href=&quot;https://gist.github.com/renaudcerrato/746e039700ac5eeaaea40808666e239f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;InteractiveViewHelper&lt;/a&gt; 来做这个.&lt;/p&gt;
&lt;p&gt;具体利用了View的这几个回调:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onVisibilityChanged(View, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onWindowVisibilityChanged()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onAttachedToWindow()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; View::onDetachedFromWindow()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有两个ACTION:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent.ACTION_SCREEN_ON&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent.ACTION_SCREEN_OFF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Beta-Testing-Your-Android-App-With-Build-Variants&quot;&gt;&lt;a href=&quot;#Beta-Testing-Your-Android-App-With-Build-Variants&quot; class=&quot;headerlink&quot; title=&quot;Beta Testing Your Android App With Build Variants&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://chikemgbemena.com/2016/09/16/beta-testing-your-app-with-build-variants/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Beta Testing Your Android App With Build Variants&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;讲了如何用Build Variants, 添加不同的Flavors.&lt;/p&gt;
&lt;h2 id=&quot;Make-your-build-gradle-great-again&quot;&gt;&lt;a href=&quot;#Make-your-build-gradle-great-again&quot; class=&quot;headerlink&quot; title=&quot;Make your build.gradle great again&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sergii/make-your-build-gradle-great-again-c84cc172a654#.y66yudcxc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Make your build.gradle great again&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-把你的build-gradle分成小份-更加模块化-用apply应用&quot;&gt;&lt;a href=&quot;#1-把你的build-gradle分成小份-更加模块化-用apply应用&quot; class=&quot;headerlink&quot; title=&quot;1. 把你的build.gradle分成小份, 更加模块化, 用apply应用.&quot;&gt;&lt;/a&gt;1. 把你的build.gradle分成小份, 更加模块化, 用&lt;code&gt;apply&lt;/code&gt;应用.&lt;/h3&gt;&lt;h3 id=&quot;2-在build-file里指明application-id&quot;&gt;&lt;a href=&quot;#2-在build-file里指明application-id&quot; class=&quot;headerlink&quot; title=&quot;2. 在build file里指明application id.&quot;&gt;&lt;/a&gt;2. 在build file里指明application id.&lt;/h3&gt;&lt;p&gt;applicationId是apk最终会用的包名.&lt;br&gt;packageName是用来找代码中的R, 和activity/service组件的相对路径.&lt;br&gt;如果不在build文件里指明applicationId可能会有一些问题.&lt;/p&gt;
&lt;h3 id=&quot;3-给debug版使用一个不同的applicationId&quot;&gt;&lt;a href=&quot;#3-给debug版使用一个不同的applicationId&quot; class=&quot;headerlink&quot; title=&quot;3. 给debug版使用一个不同的applicationId.&quot;&gt;&lt;/a&gt;3. 给debug版使用一个不同的applicationId.&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        applicationIdSuffix &amp;quot;.debug&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好处是同一个机器上可以同时安装debug和release版.&lt;/p&gt;
&lt;h3 id=&quot;4-统计build时间&quot;&gt;&lt;a href=&quot;#4-统计build时间&quot; class=&quot;headerlink&quot; title=&quot;4. 统计build时间.&quot;&gt;&lt;/a&gt;4. 统计build时间.&lt;/h3&gt;&lt;p&gt;用–profile命令. 或&lt;a href=&quot;https://scans.gradle.com/get-started?type=project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build Scans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还可以用&lt;a href=&quot;https://github.com/passy/build-time-tracker-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;build-time-tracker-plugin&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-配置release&quot;&gt;&lt;a href=&quot;#5-配置release&quot; class=&quot;headerlink&quot; title=&quot;5. 配置release.&quot;&gt;&lt;/a&gt;5. 配置release.&lt;/h3&gt;&lt;p&gt;Proguard在Java层面工作, 对于资源是不管的, 只把R中的id删了.&lt;br&gt;如果想进一步处理不用的资源, 需要加:&lt;br&gt;&lt;code&gt;shrinkResources true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;更深一步的居然还可以拆分apk: &lt;a href=&quot;https://developer.android.com/studio/build/configure-apk-splits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;config-apk-splits&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-发现一些有用的tasks-或者自己开发-Reddit-page&quot;&gt;&lt;a href=&quot;#6-发现一些有用的tasks-或者自己开发-Reddit-page&quot; class=&quot;headerlink&quot; title=&quot;6. 发现一些有用的tasks, 或者自己开发. Reddit page.&quot;&gt;&lt;/a&gt;6. 发现一些有用的tasks, 或者自己开发. &lt;a href=&quot;https://www.reddit.com/r/androiddev/comments/3ig3gm/show_us_your_gradle_tasks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reddit page&lt;/a&gt;.&lt;/h3&gt;&lt;h3 id=&quot;7-把依赖的版本号抽出来&quot;&gt;&lt;a href=&quot;#7-把依赖的版本号抽出来&quot; class=&quot;headerlink&quot; title=&quot;7. 把依赖的版本号抽出来.&quot;&gt;&lt;/a&gt;7. 把依赖的版本号抽出来.&lt;/h3&gt;&lt;h3 id=&quot;8-使用jcenter-响应更快&quot;&gt;&lt;a href=&quot;#8-使用jcenter-响应更快&quot; class=&quot;headerlink&quot; title=&quot;8. 使用jcenter, 响应更快.&quot;&gt;&lt;/a&gt;8. 使用jcenter, 响应更快.&lt;/h3&gt;&lt;h3 id=&quot;9-在开发时把最小sdk设为21或以上-会build得更快&quot;&gt;&lt;a href=&quot;#9-在开发时把最小sdk设为21或以上-会build得更快&quot; class=&quot;headerlink&quot; title=&quot;9. 在开发时把最小sdk设为21或以上, 会build得更快.&quot;&gt;&lt;/a&gt;9. 在开发时把最小sdk设为21或以上, 会build得更快.&lt;/h3&gt;&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;Android-Amazing-Open-Source-Apps&quot;&gt;&lt;a href=&quot;#Android-Amazing-Open-Source-Apps&quot; class=&quot;headerlink&quot; title=&quot;Android Amazing Open Source Apps&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@amitshekhar/android-amazing-open-source-apps-e44f520593cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Amazing Open Source Apps&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章列举了一些好的开源app.&lt;br&gt;包括&lt;a href=&quot;https://github.com/google/iosched&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;google/iosched&lt;/a&gt;, &lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-architecture&lt;/a&gt;, &lt;a href=&quot;https://github.com/DrKLO/Telegram&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Telegram&lt;/a&gt;, &lt;a href=&quot;https://github.com/nickbutcher/plaid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Plaid&lt;/a&gt;, &lt;a href=&quot;https://github.com/wireapp/wire-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wire-android&lt;/a&gt;, &lt;a href=&quot;https://github.com/ribot/ribot-app-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ribot/ribot-app-android&lt;/a&gt;, &lt;a href=&quot;https://github.com/pockethub/PocketHub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PocketHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;DoorSignView&quot;&gt;&lt;a href=&quot;#DoorSignView&quot; class=&quot;headerlink&quot; title=&quot;DoorSignView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/renaudcerrato/DoorSignView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DoorSignView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个自定义View, 显示门牌. AnimatedDoorSignView可以根据传感器进行动画.&lt;/p&gt;
&lt;h2 id=&quot;Java-Error-Handler&quot;&gt;&lt;a href=&quot;#Java-Error-Handler&quot; class=&quot;headerlink&quot; title=&quot;Java Error Handler&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Workable/java-error-handler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Error Handler&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个统一的错误处理器. 为每一种错误建立全局默认的处理方式.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-223&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-223&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #223&quot;&gt;&lt;/a&gt;Android Weekly Issue #223&lt;/h1&gt;&lt;p&gt;September 18th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-223&quot;&gt;Android Weekly Issue #223&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本期内容包括:&lt;br&gt;Offline时间戳处理;  Accessibility的安全问题可能并不是个问题; 如何在单元测试和UI测试之间共享代码; Android中的指纹认证; 编译时间Kotlin vs Java; MVP结合RxJava, 让View来处理生命周期; RxJava2预览; 内存泄露处理; Gradle相关等等.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="Accessibility" scheme="http://mengdd.github.io/tags/Accessibility/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Nougat" scheme="http://mengdd.github.io/tags/Nougat/"/>
    
      <category term="Test" scheme="http://mengdd.github.io/tags/Test/"/>
    
      <category term="Fingerprint" scheme="http://mengdd.github.io/tags/Fingerprint/"/>
    
      <category term="RxJava2" scheme="http://mengdd.github.io/tags/RxJava2/"/>
    
      <category term="GCM" scheme="http://mengdd.github.io/tags/GCM/"/>
    
      <category term="Memory Leak" scheme="http://mengdd.github.io/tags/Memory-Leak/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 222</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/09/15/android-weekly-notes-issue-222/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/09/15/android-weekly-notes-issue-222/</id>
    <published>2016-09-15T09:44:39.000Z</published>
    <updated>2016-09-15T09:59:09.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-222&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-222&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #222&quot;&gt;&lt;/a&gt;Android Weekly Issue #222&lt;/h1&gt;&lt;p&gt;September 11th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-222&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #222&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h1&gt;&lt;h2 id=&quot;Forcing-bytes-download-in-Okio&quot;&gt;&lt;a href=&quot;#Forcing-bytes-download-in-Okio&quot; class=&quot;headerlink&quot; title=&quot;Forcing bytes download in Okio&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://jakewharton.com/forcing-bytes-downward-in-okio/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forcing bytes download in Okio&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这是Jake Wharton的文章, 关于Okio的&lt;code&gt;BufferedSink&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/square/okio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;okio&lt;/a&gt; 是一个java io库, 包装了一套API用来读写和处理数据. 文档见: &lt;a href=&quot;http://square.github.io/okio/1.x/okio/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;okio doc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;很多库都是在其之上写的, 比如okhttp, Retrofit, Moshi. 这里有个视频: &lt;a href=&quot;http://jakewharton.com/a-few-ok-libraries/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Few OK libraries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有三个方法可以强制把bytes放入底层的&lt;code&gt;Sink&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;flush-emit-and-emitCompleteSegments&quot;&gt;&lt;a href=&quot;#flush-emit-and-emitCompleteSegments&quot; class=&quot;headerlink&quot; title=&quot;flush(), emit() and emitCompleteSegments()&quot;&gt;&lt;/a&gt;flush(), emit() and emitCompleteSegments()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;调用这个方法会使得所有缓存的字节移动到Sink, 然后Sink立即flush自己. 所以调用&lt;code&gt;flush()&lt;/code&gt;方法返回后, 你可以保证所有的字节都到了目的地Sink.&lt;/p&gt;
&lt;p&gt;当用多级buffer时, &lt;code&gt;flush()&lt;/code&gt;会清除所有level的buffer. Okio中多级buffer的花销很小, 一个flush会让每一级把自己的segments移到下一级.&lt;/p&gt;
&lt;p&gt;java io中的多级buffer每一级都自己管理自己的字节, 所以flush操作会让每一级都拷贝数据到下一级.&lt;/p&gt;
&lt;p&gt;流类型的&lt;code&gt;close()&lt;/code&gt;和&lt;code&gt;flush()&lt;/code&gt;的行为类似, 在关闭流之前把所有的字节都写了.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emit()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发射字节的行为和flush类似, 但是不是递归的. 调用&lt;code&gt;emit()&lt;/code&gt;会使得所有缓存的字节移动到Sink, 但是与&lt;code&gt;flush()&lt;/code&gt;不同, 此时Sink并不会做其他的操作.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emitCompleteSegments()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;调用这个&lt;code&gt;emitCompleteSegments()&lt;/code&gt;方法仅仅移动那些完整&lt;code&gt;segment&lt;/code&gt;的字节移动到Sink.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;segment&lt;/code&gt;是okio的一个概念.&lt;/p&gt;
&lt;p&gt;原文中有动图图解, 看起来更清楚一些.&lt;/p&gt;
&lt;h3 id=&quot;Use-cases&quot;&gt;&lt;a href=&quot;#Use-cases&quot; class=&quot;headerlink&quot; title=&quot;Use cases&quot;&gt;&lt;/a&gt;Use cases&lt;/h3&gt;&lt;p&gt;Writing messages to a WebSocket -&amp;gt; &lt;code&gt;flush()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Encoding a video to a file -&amp;gt; &lt;code&gt;emitCompleteSegments()&lt;/code&gt; + &lt;code&gt;emit()&lt;/code&gt;/&lt;code&gt;flush()&lt;/code&gt; at the end&lt;/p&gt;
&lt;p&gt;Serializing an object to JSON -&amp;gt; &lt;code&gt;emit()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Using-Android-Studio’s-Performance-Monitors&quot;&gt;&lt;a href=&quot;#Using-Android-Studio’s-Performance-Monitors&quot; class=&quot;headerlink&quot; title=&quot;Using Android Studio’s Performance Monitors&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@andreworobator/debugging-without-a-stacktrace-using-android-studios-performance-monitors-a0d601afd814#.wnqu72q21&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Android Studio’s Performance Monitors&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他的音乐应用遇到了不响应的问题, 然后他打开Android Studio的performance monitor看到了是内存问题, 然后他track了一下出问题的时候的memory allocation, 最后发现是有一张要下载的图太大了.&lt;/p&gt;
&lt;h2 id=&quot;The-hidden-cost-of-code-coverage&quot;&gt;&lt;a href=&quot;#The-hidden-cost-of-code-coverage&quot; class=&quot;headerlink&quot; title=&quot;The hidden cost of code coverage&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2016/09/01/coveragecost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The hidden cost of code coverage&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;测试覆盖率是一个很好的方法来激励你和你的团队多写一些测试, 但是你知道吗, 打开测试覆盖率的检测会让你的build变慢.&lt;/p&gt;
&lt;p&gt;要测量build时间:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./gradlew clean assembleDebug --profile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后作者发现其中&lt;code&gt;:app:transformClassesWithJacocoForDailyDebug&lt;/code&gt;占用的时间达到了build时间的14%.&lt;/p&gt;
&lt;p&gt;就是因为这句:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testCoverageEnabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;&lt;br&gt;只在需要测试覆盖率的时候用它, 所以加一个变量:&lt;br&gt;&lt;code&gt;/gradlew -Pcoverage clean connectedDebugAndroidTest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;gradle里这样写:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        testCoverageEnabled (project.hasProperty(&amp;apos;coverage&amp;apos;) ? true : false)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当你不加这个flag的时候就不会检查测试覆盖率.&lt;/p&gt;
&lt;h2 id=&quot;Android-Development-Useful-Tools&quot;&gt;&lt;a href=&quot;#Android-Development-Useful-Tools&quot; class=&quot;headerlink&quot; title=&quot;Android Development Useful Tools&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.freecodecamp.com/android-development-useful-tools-fd73283e82e3#.ru47kg8kt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Development Useful Tools&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.methodscount.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;methodscount&lt;/a&gt; 可以统计library的方法数, 因为Android有64k的方法数限制.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/stetho/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stetho&lt;/a&gt;&lt;br&gt;可以看网络请求, 数据库, shared preferences等.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/square/leakcanary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LeakCanary&lt;/a&gt; 检测内存泄露的库.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://inloop.github.io/apk-method-count/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apk-method-count&lt;/a&gt; 这个网站可以检测apk中的方法数, 根据包分别显示.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://romannurik.github.io/AndroidAssetStudio/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Asset Studio&lt;/a&gt;&lt;br&gt;生成图片, 9-patch等的一系列工具.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://buckbuild.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Buck&lt;/a&gt; Facebook开发的一套build系统.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gradleplease.appspot.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle, please&lt;/a&gt; 输入你要的库, 然后就可以找到对应的dependencies里应该写的 compile xxx.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/build/shrink-code.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Proguard&lt;/a&gt;或&lt;a href=&quot;https://www.guardsquare.com/dexguard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DexGuard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.genymotion.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Genymotion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://materialdesignicons.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design Icons&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduction-to-Automated-Android-Testing-Part-6&quot;&gt;&lt;a href=&quot;#Introduction-to-Automated-Android-Testing-Part-6&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Automated Android Testing - Part 6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/introduction-automated-android-testing-part-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Automated Android Testing - Part 6&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;系列文章的最后一篇, 作者讲用Espresso写UI测试.&lt;/p&gt;
&lt;p&gt;如果数据是动态的, 那么要测试View包含指定的信息是很难的. 数据有可能变化, 但是我们的测试不能因此而失败. 所以为了测试可靠和可重复, 我们不应该调用production的API.&lt;/p&gt;
&lt;p&gt;所以第一步是mock API, 有几种方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;用&lt;a href=&quot;http://wiremock.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WireMock&lt;/a&gt; (需要server).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;用OkHttp的&lt;a href=&quot;https://github.com/square/okhttp/tree/master/mockwebserver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MockWebServer&lt;/a&gt;, 在你的设备上跑一个webserver.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;创建一个Retrofit REST接口, 返回一些dummy对象.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mock数据的时候利用了Gradle的flavor, 可以创建一个mockDebug flavor, 然后在src目录下建一个mock目录, 放一些mock的代码进去, 然后再建一个prod目录, 把真实的实现移动到那里去.&lt;/p&gt;
&lt;h3 id=&quot;Espresso基础&quot;&gt;&lt;a href=&quot;#Espresso基础&quot; class=&quot;headerlink&quot; title=&quot;Espresso基础&quot;&gt;&lt;/a&gt;Espresso基础&lt;/h3&gt;&lt;p&gt;用&lt;a href=&quot;https://google.github.io/android-testing-support-library/docs/espresso/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Espresso&lt;/a&gt;写测试, 基本格式是这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onView(withId(R.id.menu_search))      &lt;span class=&quot;comment&quot;&gt;// withId(R.id.menu_search) is a ViewMatcher&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .perform(click())               &lt;span class=&quot;comment&quot;&gt;// click() is a ViewAction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .check(matches(isDisplayed())); &lt;span class=&quot;comment&quot;&gt;// matches(isDisplayed()) is a ViewAssertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewMatchers&lt;/code&gt; 是用来定位View的 有withId, withText, withTag等.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewActions&lt;/code&gt; 是用来跟View交互的, 比如点击, 输入等.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewAssertations&lt;/code&gt; 是用来做出断言的.&lt;/p&gt;
&lt;p&gt;这里有个cheat-sheet可以查: &lt;a href=&quot;https://google.github.io/android-testing-support-library/downloads/espresso-cheat-sheet-2.1.0.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-expresso-testing.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Writing-Espresso-UI-Tests&quot;&gt;&lt;a href=&quot;#Writing-Espresso-UI-Tests&quot; class=&quot;headerlink&quot; title=&quot;Writing Espresso UI Tests&quot;&gt;&lt;/a&gt;Writing Espresso UI Tests&lt;/h3&gt;&lt;p&gt;这部分具体讲了作者例子的UI测试写法, 见原文.&lt;br&gt;最后作者还看了一下测试覆盖率.&lt;/p&gt;
&lt;h2 id=&quot;What-2-years-of-Android-Development-Have-Taught-Me&quot;&gt;&lt;a href=&quot;#What-2-years-of-Android-Development-Have-Taught-Me&quot; class=&quot;headerlink&quot; title=&quot;What 2 years of Android Development Have Taught Me&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.aritraroy.in/what-my-2-years-of-android-development-have-taught-me-the-hard-way-52b495ba5c51#.ur0ez1ouq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What 2 years of Android Development Have Taught Me&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讲了他两年来的心路历程, 以及他总结的一些To do和Not to do.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要重复造轮子.&lt;br&gt;可以用&lt;a href=&quot;https://android-arsenal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-arsenal&lt;/a&gt;来查库.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;明智地选择库.&lt;br&gt;选择库的时候看看星多不多, 作者有没有什么其他流行的库. 再看看issues, 有时间的话可以看代码.&lt;br&gt;&lt;a href=&quot;https://github.com/cesarferreira/dryrun&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dryrun&lt;/a&gt;可以用来跑sample.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;坐下来看代码. 我们应该花费多数的时间阅读别人的代码, 而不是写自己的代码.&lt;br&gt;你能写出来的代码是你已经知道的东西的一个反映, 要不断成长和提高自己, 只能不断阅读和学习别人的代码.&lt;br&gt;这里有&lt;a href=&quot;https://snowdream.github.io/awesome-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Library列表&lt;/a&gt;和&lt;a href=&quot;https://github.com/pcqpcq/open-source-android-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;app列表&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保持一个好的代码风格. 这里有一些参考: &lt;a href=&quot;https://source.android.com/source/code-style.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;code-style&lt;/a&gt;, &lt;a href=&quot;https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用Proguard, 这样release版本不但缩小了代码也做了混淆. 这里还有一个&lt;a href=&quot;https://www.guardsquare.com/dexguard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DexGuard&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用一个合理的架构. 可以用MVP来解耦, 这里有个demo: &lt;a href=&quot;https://github.com/android10/Android-CleanArchitecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-CleanArchitecture&lt;/a&gt;, 这里是它相关的Guide文章: &lt;a href=&quot;https://medium.com/@dmilicic/a-detailed-guide-on-developing-android-apps-using-the-clean-architecture-pattern-d38d71e94029#.j970cogwt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide on Clean Architecture&lt;/a&gt;.&lt;br&gt;更多资源:&lt;br&gt;&lt;a href=&quot;https://github.com/antoniolg/androidmvp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;androidmvp&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;https://github.com/sockeqwe/mosby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mosby&lt;/a&gt;,&lt;br&gt;&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-architecture&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于独立工作的开发, 还需要注意一些UI/UX相关的原则. 可以上&lt;a href=&quot;https://dribbble.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dribble&lt;/a&gt;和&lt;a href=&quot;https://material.uplabs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MaterialUp&lt;/a&gt;多看看.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分析是你的好朋友. 分析包括了crash报告和app使用记录, 可以用&lt;a href=&quot;https://firebase.google.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做一个市场忍者. 对于独立开发者来说, 需要marketing. 这是一个市场分析工具: &lt;a href=&quot;https://sensortower.com/#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sensor tower&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化你的App. 推荐检查内存泄露的工具: &lt;a href=&quot;https://github.com/square/leakcanary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leakcanary&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化gradle的build时间. 这里有两个Guides: &lt;a href=&quot;https://medium.com/@cesarmcferreira/speeding-up-gradle-builds-619c442113cb#.6ezl2rgec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;speeding up gradle build&lt;/a&gt;, &lt;a href=&quot;http://zeroturnaround.com/rebellabs/making-gradle-builds-faster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;making gradle builds faster&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多做测试. 发布前花时间测试, 不要急.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;兼顾多种机型, 包括屏幕尺寸, API level, 不同厂商的OS等.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用Git. 这是一个&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git branch model&lt;/a&gt;. 如果你不能负担github上的private repo, 你可以试试&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BitBucket&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;让黑客觉得难处理. Android很容易被攻击, app可以被轻易地反编译和分析. 你需要知道如何处理你的API keys, 如果你需要处理用户的敏感信息, 你应该知道如何加密. 秘钥也要妥善存储. 任何存储在数据库中的敏感信息也都要加密. 相关的资料可以看&lt;a href=&quot;https://www.airpair.com/android/posts/adding-tampering-detection-to-your-android-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adding Tampering Detection to Your app&lt;/a&gt;和&lt;a href=&quot;https://rammic.github.io/2015/07/28/hiding-secrets-in-android-apps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hiding Secrets in Android Apps&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在低级设备上开发. 低级的设备容易暴露问题.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习设计模式. 这里有一个repo讲了所有的Java中的设计模式: &lt;a href=&quot;https://github.com/iluwatar/java-design-patterns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java-design-patterns&lt;/a&gt;. 另外还推荐书籍: GoF的设计模式, Martin Fowler的重构, Joshua Bloch的Effective Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;贡献自己的力量. StackOverflow, Github, blog posts…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-Support-Annotations&quot;&gt;&lt;a href=&quot;#Android-Support-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Android Support Annotations&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mayojava.github.io/android/android-support-annotations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Support Annotations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Annotation library:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;com.android.support:support-annotations:&amp;lt;latest-library-version&amp;gt;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你已经用了&lt;code&gt;appcompat library&lt;/code&gt;, 你就已经可以用annotations了, 因为appcompat自己就用了它.&lt;/p&gt;
&lt;p&gt;annotations按照用法和功能来分组:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nullness Annotations&lt;/li&gt;
&lt;li&gt;Resource Annotations&lt;/li&gt;
&lt;li&gt;Thread Annotations&lt;/li&gt;
&lt;li&gt;Value Constraints Annotations&lt;/li&gt;
&lt;li&gt;Others : Permissions Annotations, CheckResults Annotations and CallSuper Annotations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Nullness-Annotations&quot;&gt;&lt;a href=&quot;#Nullness-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Nullness Annotations&quot;&gt;&lt;/a&gt;Nullness Annotations&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Nullalbe&lt;/code&gt;和&lt;code&gt;@NonNull&lt;/code&gt;用来检查变量, 参数和方法返回值为null与否.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@NonNull&lt;/code&gt;表示变量, 参数或返回值不能为null, 如果为null了编译器会给出警告.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Nullalbe&lt;/code&gt;表示可能为null, 用这个注解的时候表示代码中应该加上null check.&lt;/p&gt;
&lt;h3 id=&quot;Resource-Annotations&quot;&gt;&lt;a href=&quot;#Resource-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Resource Annotations&quot;&gt;&lt;/a&gt;Resource Annotations&lt;/h3&gt;&lt;p&gt;因为资源号都是int值, 所以如果你把一个drawable的int传给一个期待string resource的代码, 编译器是会接受的.&lt;br&gt;资源注解就是用来做这种情况的类型检查的.&lt;/p&gt;
&lt;p&gt;比如用&lt;code&gt;@StringRes&lt;/code&gt;来标记参数, 如果你传入一个drawable的id, IDE就会把它标记出来.&lt;/p&gt;
&lt;p&gt;每一个Android的资源类型都有一个对应的资源注解, 比如类型是&lt;code&gt;Foo&lt;/code&gt;, 那么对应的资源类型注解就是&lt;code&gt;FooRes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;有一个特殊的&lt;code&gt;@AnyRes&lt;/code&gt;, 用来表示任意的资源类型.&lt;/p&gt;
&lt;h3 id=&quot;Thread-Annotations&quot;&gt;&lt;a href=&quot;#Thread-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Thread Annotations&quot;&gt;&lt;/a&gt;Thread Annotations&lt;/h3&gt;&lt;p&gt;这种注解用来检查方法是不是在特定的线程调用的. 有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@UiThread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@MainThread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@WorkerThread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@BinderThread&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;@UiThread&lt;/code&gt;和&lt;code&gt;@MainThread&lt;/code&gt;是可互换的.&lt;/p&gt;
&lt;p&gt;如果一个类中的所有方法都是从同样的线程调用搞得, 那么可以直接把类给标记了.&lt;/p&gt;
&lt;h3 id=&quot;Value-Constraints-Annotations&quot;&gt;&lt;a href=&quot;#Value-Constraints-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Value Constraints Annotations&quot;&gt;&lt;/a&gt;Value Constraints Annotations&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@IntRange&lt;/code&gt;, &lt;code&gt;@FloatRange&lt;/code&gt;和&lt;code&gt;@Size&lt;/code&gt;注解是用来验证参数的值的. 比如&lt;code&gt;@IntRange&lt;/code&gt;就验证参数是在一个给定的int范围之内.&lt;br&gt;比如下面的方法确保传入的参数是0到255:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAlpha&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@IntRange(from=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, to=&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; alpha) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//set alpha&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;相应的&lt;code&gt;@FloatRange&lt;/code&gt;检查参数是在一个指定范围内的浮点数.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Size&lt;/code&gt;注解是用来检查集合的大小, 还有字符串的长度. 比如&lt;code&gt;@Size(min=1)&lt;/code&gt;用来检查集合不为空, &lt;code&gt;@Size(2)&lt;/code&gt;检查集合有两个元素.&lt;/p&gt;
&lt;h3 id=&quot;CheckResult-Annotations&quot;&gt;&lt;a href=&quot;#CheckResult-Annotations&quot; class=&quot;headerlink&quot; title=&quot;CheckResult Annotations&quot;&gt;&lt;/a&gt;CheckResult Annotations&lt;/h3&gt;&lt;p&gt;这个注解是用来检查一个方法的返回值确实被使用了.&lt;br&gt;一个比较好的例子是&lt;code&gt;String.trim&lt;/code&gt;方法, 当这个方法被&lt;code&gt;@CheckResult&lt;/code&gt;标注, 如果它的返回值没有被使用, IDE就会报错.&lt;/p&gt;
&lt;p&gt;另外一些比较值得看的注解有&lt;code&gt;@CallSuper&lt;/code&gt;, &lt;code&gt;@Keep&lt;/code&gt;和&lt;code&gt;@RequiresPermission&lt;/code&gt;.&lt;br&gt;可以直接查看support annotations的&lt;a href=&quot;https://developer.android.com/reference/android/support/annotation/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;其他参考资料:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/write/annotations.html#adding-nullness&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improve code Inspection with Annotations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.android.com/tech-docs/support-annotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support Annotation documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improving your code with android support annotations&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ActivityTestRule-Espresso’s-Test-“Lifecycle”&quot;&gt;&lt;a href=&quot;#ActivityTestRule-Espresso’s-Test-“Lifecycle”&quot; class=&quot;headerlink&quot; title=&quot;ActivityTestRule: Espresso’s Test “Lifecycle”&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://jabknowsnothing.wordpress.com/2015/11/05/activitytestrule-espressos-test-lifecycle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActivityTestRule: Espresso’s Test “Lifecycle”&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者这篇文章的目的是讲讲用Espresso的&lt;code&gt;ActivityTestRule&lt;/code&gt;写的测试中的操作顺序, 讨论像&lt;code&gt;beforeActivityLaunched()&lt;/code&gt;, &lt;code&gt;afterActivityLaunched()&lt;/code&gt;, 和 &lt;code&gt;afterActivityFinished()&lt;/code&gt;这些方法相对于测试和Activity的生命周期都是什么时候被调用的. &lt;/p&gt;
&lt;p&gt;首先作者介绍了Espresso 2.0及之前的旧的&lt;code&gt;ActivityInstrumentationTestCase2&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ActivityTestRule的”生命周期”&quot;&gt;&lt;a href=&quot;#ActivityTestRule的”生命周期”&quot; class=&quot;headerlink&quot; title=&quot;ActivityTestRule的”生命周期”.&quot;&gt;&lt;/a&gt;&lt;code&gt;ActivityTestRule&lt;/code&gt;的”生命周期”.&lt;/h3&gt;&lt;p&gt;新的写法是这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RunWith&lt;/span&gt;(AndroidJUnit4.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MyNewTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MyCustomRule&amp;lt;MyActivity&amp;gt; testRule = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyCustomRule&amp;lt;&amp;gt;(MyActivity.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testStuff&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Wow where&#39;s all the boilerplate code?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Verify Oscar Grouch is no longer grouchy.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而其中的MyCustomRule:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyCustomRule&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyActivity&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActivityTestRule&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyCustomRule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Class&amp;lt;A&amp;gt; activityClass)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(activityClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;beforeActivityLaunched&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.beforeActivityLaunched();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Maybe prepare some mock service calls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Maybe override some depency injection modules with mocks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; Intent &lt;span class=&quot;title&quot;&gt;getActivityIntent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent customIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// add some custom extras and stuff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; customIntent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterActivityLaunched&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.afterActivityLaunched();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// maybe you want to do something here &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterActivityFinished&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.afterActivityFinshed();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Clean up mocks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;ActivityTestRule-launchActivity-false&quot;&gt;&lt;a href=&quot;#ActivityTestRule-launchActivity-false&quot; class=&quot;headerlink&quot; title=&quot;ActivityTestRule: launchActivity=false;&quot;&gt;&lt;/a&gt;&lt;code&gt;ActivityTestRule&lt;/code&gt;: launchActivity=false;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ActivityTestRule&lt;/code&gt;的第三个参数允许开发者明确指定对每一个test case启动一个Activity.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public ActivityTestRule(Class activityClass, boolean initialTouchMode, boolean launchActivity)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;把第三个参数设置为false, 就可以写出这样的测试:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RunWith&lt;/span&gt;(AndroidJUnit4.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MultipleIntentsTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Rule&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ActivityTestRule&amp;lt;MyActivity&amp;gt; testRule = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActivityTestRule&amp;lt;&amp;gt;(MyActivity.class,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;,    &lt;span class=&quot;comment&quot;&gt;// initialTouchMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// launchActivity. False to set intent per test);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testOscarGrouchy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent grouchyIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// intent stuff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grouchyIntent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;EXTRA_IS_GROUCHY&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testRule.launchActivity(grouchyIntent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// verify Oscar is grouchy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testOscarNotGrouchy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent happyIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// intent stuff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    happyIntent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;EXTRA_IS_GROUCHY&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testRule.launchActivity(happyIntent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// verify Oscar is not grouchy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个lauchActivity的值默认是为true. 设置为false之后我们在每一个test case里面自己启动activity. 对生命周期产生的影响作者也做了图对比分析, 见原文.&lt;/p&gt;
&lt;p&gt;作者最后还讲了几个点, 关于测试迁移, 以及Activity的生命周期方法中启动Intent相关的需要注意的地方.&lt;/p&gt;
&lt;h2 id=&quot;People-and-resources-to-learn-Android-programming-from&quot;&gt;&lt;a href=&quot;#People-and-resources-to-learn-Android-programming-from&quot; class=&quot;headerlink&quot; title=&quot;People and resources to learn Android programming from&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://m.signalvnoise.com/my-favorite-people-and-resources-to-learn-android-programming-from-293f249e2b4e#.6j6qqirem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;People and resources to learn Android programming from&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者分享了关于Android编程学习中他积累的人和资源.&lt;/p&gt;
&lt;h3 id=&quot;Twitter&quot;&gt;&lt;a href=&quot;#Twitter&quot; class=&quot;headerlink&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;Twitter&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/chiuki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chiu-Ki Chan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/donnfelker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Donn Felker&lt;/a&gt;, 他的博客: &lt;a href=&quot;http://www.donnfelker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt;. 他和&lt;a href=&quot;https://twitter.com/kaushikgopal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kaushik Gopal&lt;/a&gt;一起弄了&lt;a href=&quot;http://fragmentedpodcast.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragmented Podcast&lt;/a&gt;. 这里还有一个视频教程的网站: &lt;a href=&quot;https://caster.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caster.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/JakeWharton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jake Wharton&lt;/a&gt;, 这个大家都知道啦, 这是他的博客: &lt;a href=&quot;http://jakewharton.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kristinmars&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kristin V Marsicano&lt;/a&gt;, 这里有一个她的关于Activity生命周期的演讲&lt;a href=&quot;https://realm.io/news/activities-in-the-wild-exploring-the-activity-lifecycle-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activities in the Wild&lt;/a&gt;, 可能有一些你没有想过的东西.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/rharter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ryan Harter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ThePracticalDev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Practical Dev&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后这有一个列表: &lt;a href=&quot;https://twitter.com/dankim/lists/androids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tweet Android List&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Podcasts&quot;&gt;&lt;a href=&quot;#Podcasts&quot; class=&quot;headerlink&quot; title=&quot;Podcasts&quot;&gt;&lt;/a&gt;Podcasts&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://fragmentedpodcast.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragmented&lt;/a&gt; 两个独立开发者办的.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://androidbackstage.blogspot.hk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Developers Backstage&lt;/a&gt; 写Android的那些人办的.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.relay.fm/material&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material&lt;/a&gt; 这不是一个技术广播, 讲一些Google新闻.&lt;/p&gt;
&lt;h3 id=&quot;Videos&quot;&gt;&lt;a href=&quot;#Videos&quot; class=&quot;headerlink&quot; title=&quot;Videos&quot;&gt;&lt;/a&gt;Videos&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://caster.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caster.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://realm.io/news/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCMEmNnHT69aZuaOrE-dF6ug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Dialogs (YouTube)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Newsletters&quot;&gt;&lt;a href=&quot;#Newsletters&quot; class=&quot;headerlink&quot; title=&quot;Newsletters&quot;&gt;&lt;/a&gt;Newsletters&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://androidweekly.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://us12.campaign-archive2.com/home/?u=f39692e245b94f7fb693b6d82&amp;amp;id=93b2272cb6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotline Weekly&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;General-Reading&quot;&gt;&lt;a href=&quot;#General-Reading&quot; class=&quot;headerlink&quot; title=&quot;General Reading&quot;&gt;&lt;/a&gt;General Reading&lt;/h3&gt;&lt;p&gt;Medium: 标签&lt;a href=&quot;https://medium.com/tag/androiddev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;androiddev&lt;/a&gt;和&lt;a href=&quot;https://medium.com/tag/android-app-development&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-app-development&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conferences&quot;&gt;&lt;a href=&quot;#Conferences&quot; class=&quot;headerlink&quot; title=&quot;Conferences&quot;&gt;&lt;/a&gt;Conferences&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://events.google.com/io2016/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoogleIO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://360andev.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;360|AnDev&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://droidcon.nyc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Droid Con NYC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ThirtyInch-a-new-MVP-library-for-Android&quot;&gt;&lt;a href=&quot;#ThirtyInch-a-new-MVP-library-for-Android&quot; class=&quot;headerlink&quot; title=&quot;ThirtyInch - a new MVP library for Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@passsy/thirtyinch-a-new-mvp-library-for-android-bd1a27262fd6#.dvjdbuvfx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThirtyInch - a new MVP library for Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;近年来MVP已经变成了Android社区中很流行的一种设计模式, MVC和MVVM也有人用. 这些模式的共同点就是把业务逻辑从Activity中抽取来.&lt;/p&gt;
&lt;p&gt;这样做的好处首先是我们可以尽量把需要测试的逻辑用JVM上的单元测试测, 而不是用模拟器上的androidTests.&lt;br&gt;当然有些需要UI测试的地方仍然会用Espresso.&lt;/p&gt;
&lt;p&gt;作者介绍了他们的MVP库: &lt;a href=&quot;https://github.com/grandcentrix/ThirtyInch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThirtyInch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这个库开始的时候&lt;a href=&quot;https://github.com/sockeqwe/mosby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mosby&lt;/a&gt;还没有release, 建议读一下mosby作者关于MVP的文章: &lt;a href=&quot;http://hannesdorfmann.com/android/mosby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mosby&lt;/a&gt;, 其中关于passive View的概念也在ThirtyInch中用到.&lt;/p&gt;
&lt;h3 id=&quot;ThirtyInch&quot;&gt;&lt;a href=&quot;#ThirtyInch&quot; class=&quot;headerlink&quot; title=&quot;ThirtyInch:&quot;&gt;&lt;/a&gt;ThirtyInch:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/grandcentrix/ThirtyInch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThirtyInch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;有&lt;code&gt;TiPresenter&lt;/code&gt;, &lt;code&gt;TiView&lt;/code&gt;.&lt;br&gt;&lt;code&gt;TiView&lt;/code&gt;是一个接口, 可以被attach和detach.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TiPresenter&lt;/code&gt;有四个生命周期事件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onCreate()&lt;/code&gt;: 初始化的时候调用一次, 此时view还没有attach.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onWakeUp()&lt;/code&gt;: view attach了, 并且对用户变为可见.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onSleep()&lt;/code&gt;: 在这个调用之后, view将被detach, 并且变为对用户不可见.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDestroy()&lt;/code&gt;: 在Activity/Fragment完全销毁的时候调用一次.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;onWakeUp()&lt;/code&gt;和&lt;code&gt;onSleep()&lt;/code&gt;对应了&lt;code&gt;onStart()&lt;/code&gt;和&lt;code&gt;onStop()&lt;/code&gt;, onResume/onPause没有对应的回调支持, 因为这些生命周期回调应该在View层处理, 见: &lt;a href=&quot;http://hannesdorfmann.com/android/presenters-dont-need-lifecycle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Presenters dont need lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;ThirtyInch有什么不同&quot;&gt;&lt;a href=&quot;#ThirtyInch有什么不同&quot; class=&quot;headerlink&quot; title=&quot;ThirtyInch有什么不同&quot;&gt;&lt;/a&gt;ThirtyInch有什么不同&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可配置. 可以传&lt;code&gt;TiConfiguration&lt;/code&gt;对象给TiPresenter, 去掉一些features.&lt;/li&gt;
&lt;li&gt;所有Presenter的生命周期都按照正确的顺序调用, &lt;code&gt;onCreate()&lt;/code&gt;和&lt;code&gt;onDestroy()&lt;/code&gt;只调用一次.&lt;/li&gt;
&lt;li&gt;不依赖RxJava. 它有一个独立的Rx module.&lt;/li&gt;
&lt;li&gt;View接口的方法注解. 比如&lt;code&gt;@CallOnMainThread&lt;/code&gt;和&lt;code&gt;@DistinctUntilChanged&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Public API. 一些基层API可以被所有人利用起来.&lt;/li&gt;
&lt;li&gt;不用继承&lt;code&gt;TiActivity&lt;/code&gt;. 你可以利用&lt;a href=&quot;https://github.com/passsy/CompositeAndroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CompositeAndrodi&lt;/a&gt;, 把plugin module作为你的依赖, 然后把&lt;code&gt;TiActivityPlugin&lt;/code&gt;加到你的Activity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后作者举了一个Hello World的例子, 附图讲解很好, 见原文.&lt;/p&gt;
&lt;h3 id=&quot;不是严格的MVP-MVVM也可以&quot;&gt;&lt;a href=&quot;#不是严格的MVP-MVVM也可以&quot; class=&quot;headerlink&quot; title=&quot;不是严格的MVP, MVVM也可以&quot;&gt;&lt;/a&gt;不是严格的MVP, MVVM也可以&lt;/h3&gt;&lt;p&gt;作者又列出了一个ViewModel的图.&lt;br&gt;ViewModel存储了当前UI的状态数据.&lt;br&gt;当ViewModel中的数据变化时立即应用到View, 这里&lt;code&gt;@DistinctUtilChanged&lt;/code&gt;的使用避免了数据不变时候的重复操作.&lt;/p&gt;
&lt;h3 id=&quot;测试-Keep-Android-At-Arm’s-Length&quot;&gt;&lt;a href=&quot;#测试-Keep-Android-At-Arm’s-Length&quot; class=&quot;headerlink&quot; title=&quot;测试, Keep Android At Arm’s Length&quot;&gt;&lt;/a&gt;测试, Keep Android At Arm’s Length&lt;/h3&gt;&lt;p&gt;MVP的初衷之一是为了方便写测试, 因为Android SDK中的一些方法和类不好mock, 所以Presenter中应该是没有Android相关的东西的, 比如Context和Fragment等, Presenter只知道View接口和其中的方法, 是纯java的.&lt;/p&gt;
&lt;p&gt;这就是”Keep Android At Arm’s Length.”的意思, 不要把Android和逻辑代码绑在一起, 库的名字ThirtyInch也是来自于这个原则, 因为三十寸是人类手臂, 肩膀到手指的平均长度.&lt;/p&gt;
&lt;h3 id=&quot;How-does-the-Presenter-survive-the-configuration-change&quot;&gt;&lt;a href=&quot;#How-does-the-Presenter-survive-the-configuration-change&quot; class=&quot;headerlink&quot; title=&quot;How does the Presenter survive the configuration change?&quot;&gt;&lt;/a&gt;How does the Presenter survive the configuration change?&lt;/h3&gt;&lt;p&gt;Activity在屏幕方向旋转时会被重建. 此时没有被序列化保存的信息就会丢失, 网络请求要么被取消, 要么被忽略, 重新请求.&lt;/p&gt;
&lt;p&gt;序列化数据会费时, 而且在这种情况下, 序列话的数据几秒之后就要被反序列化.&lt;/p&gt;
&lt;p&gt;Android Framework提供了两个方法来避免这种不必要的序列化:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fragment的&lt;code&gt;setRetainInstance(true)&lt;/code&gt;, 之前的那个Fragment实例会被保存.&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Activity#onRetainNonConfigurationInstance()&lt;/code&gt;和&lt;code&gt;Activity#getLastNonConfigurationInstance()&lt;/code&gt;来存储和恢复对象. 这也是Android保存上面retained Fragments的方法. 这个方法最近被废弃了.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Java中还有一个比较简单粗暴的方法是保存一个应用级别的单例.&lt;/p&gt;
&lt;p&gt;ThirtyInch使用了上述的三种方法来确保TiPresenter在configuration变化的时候不死. 单例的解决方法尽在一些边缘情况必须.&lt;/p&gt;
&lt;p&gt;当使用&lt;code&gt;TiPresenter&lt;/code&gt;的时候不需要再实现&lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt;方法了, 因为数据都存在Presenter中.&lt;/p&gt;
&lt;h2 id=&quot;Firebase-Analytics-VS-Google-Analytics&quot;&gt;&lt;a href=&quot;#Firebase-Analytics-VS-Google-Analytics&quot; class=&quot;headerlink&quot; title=&quot;Firebase Analytics VS Google Analytics&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/google-developer-experts/firebase-analytics-vs-google-analytics-b2010f34d2bb#.cjqb9n505&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase Analytics VS Google Analytics&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者之前对比过 &lt;a href=&quot;https://medium.com/google-developer-experts/firebase-crash-reporting-vs-crashlytics-a6c287c4b792#.m4ubzrcds&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase Crash Reporting和Crashlytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在这篇文章里, 作者对比Firebase和Google的分析工具, 下面简称FA和GA.&lt;/p&gt;
&lt;p&gt;首先GA是2005年就推出了, 那时候根本没有Android和iOS, 所以GA最开始是网站用的, FA是今年推出的, 从一开始目标就是移动应用.&lt;/p&gt;
&lt;p&gt;然后作者总结了FA的优势和当前存在的几个不足.&lt;/p&gt;
&lt;p&gt;最后的结论就是:&lt;br&gt;如果你只有app, 用FA; 如果你只有网站, 用GA; 如果你两个都有, 则两个都用.&lt;/p&gt;
&lt;h2 id=&quot;VectorDrawable-Fill-Windings&quot;&gt;&lt;a href=&quot;#VectorDrawable-Fill-Windings&quot; class=&quot;headerlink&quot; title=&quot;VectorDrawable Fill Windings&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/vectordrawable-fill-windings/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VectorDrawable Fill Windings&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者有一个Sketch做的资源, 是一个空洞图, 结果放在程序里看的时候中间的洞没有了, 变成实心的了.&lt;/p&gt;
&lt;p&gt;作者分析并详细解释了出现这种问题的原因, 并提供了两种解决方案.&lt;/p&gt;
&lt;h1 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h1&gt;&lt;h2 id=&quot;Basic-Patterns-for-Mobile-Navigation&quot;&gt;&lt;a href=&quot;#Basic-Patterns-for-Mobile-Navigation&quot; class=&quot;headerlink&quot; title=&quot;Basic Patterns for Mobile Navigation&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://uxplanet.org/basic-patterns-for-mobile-navigation-d12a87686efe#.1jleu0y6v&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Basic Patterns for Mobile Navigation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这篇文章作者分析了三种导航模式: hamburger menu, tab bar和gesture-base navigation.&lt;/p&gt;
&lt;h3 id=&quot;Hamburger-Menu&quot;&gt;&lt;a href=&quot;#Hamburger-Menu&quot; class=&quot;headerlink&quot; title=&quot;Hamburger Menu&quot;&gt;&lt;/a&gt;Hamburger Menu&lt;/h3&gt;&lt;p&gt;Pros: 导航选项多, 设计干净, 给主要内容留出了更多空间.&lt;/p&gt;
&lt;p&gt;Cons: 不易被发现.&lt;br&gt;在iOS实现时, 和iOS的基本导航元素冲突.&lt;br&gt;hamburger的icon并没有给出上下文.&lt;br&gt;需要点两下才到目标页面.&lt;/p&gt;
&lt;p&gt;Tips: 给选项排列优先级. 如果你的高优先级选项不多, 可以考虑用tabs或者tab bar. 重审你的信息结构, 有没有必要划分成多个简单的app.&lt;/p&gt;
&lt;h3 id=&quot;Tab-Bar&quot;&gt;&lt;a href=&quot;#Tab-Bar&quot; class=&quot;headerlink&quot; title=&quot;Tab Bar&quot;&gt;&lt;/a&gt;Tab Bar&lt;/h3&gt;&lt;p&gt;Pros: Tab bar可以反映出当前在哪. 它们是永久存在的, 用户可以单击访问.&lt;/p&gt;
&lt;p&gt;Cons: 有限的选项数. iOS和Android可能会有不同的设计规范.&lt;/p&gt;
&lt;p&gt;Tips: 让点击区域足够大. icon要经过可用性测试. icon和label一起用.&lt;/p&gt;
&lt;h3 id=&quot;Gesture-Based-Navigation&quot;&gt;&lt;a href=&quot;#Gesture-Based-Navigation&quot; class=&quot;headerlink&quot; title=&quot;Gesture-Based Navigation&quot;&gt;&lt;/a&gt;Gesture-Based Navigation&lt;/h3&gt;&lt;p&gt;Pros: 移除了UI杂项, 节约了屏幕空间. 自然的人机交互接口.&lt;/p&gt;
&lt;p&gt;Cons: 导航不可见. 增加了用户教育成本.&lt;/p&gt;
&lt;p&gt;Tips: 确保不要必须教给用户一种全新的交互方式, 设计相似的体验. 使用过程动画的形式教用户如何使用. &lt;/p&gt;
&lt;h2 id=&quot;Design-Reviews-Going-beyond-the-surface&quot;&gt;&lt;a href=&quot;#Design-Reviews-Going-beyond-the-surface&quot; class=&quot;headerlink&quot; title=&quot;Design Reviews: Going beyond the surface&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://design.google.com/articles/going-beyond-the-surface/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Reviews: Going beyond the surface&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;关于设计的review.&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;green-coffee&quot;&gt;&lt;a href=&quot;#green-coffee&quot; class=&quot;headerlink&quot; title=&quot;green-coffee&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mauriciotogneri/green-coffee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;green-coffee&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android库, 让你可以在instrumentation测试中跑Cucumber.&lt;/p&gt;
&lt;h2 id=&quot;ThirtyInch-1&quot;&gt;&lt;a href=&quot;#ThirtyInch-1&quot; class=&quot;headerlink&quot; title=&quot;ThirtyInch&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/grandcentrix/ThirtyInch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThirtyInch&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android MVP库.&lt;/p&gt;
&lt;h1 id=&quot;Tools&quot;&gt;&lt;a href=&quot;#Tools&quot; class=&quot;headerlink&quot; title=&quot;Tools&quot;&gt;&lt;/a&gt;Tools&lt;/h1&gt;&lt;h2 id=&quot;Exynap&quot;&gt;&lt;a href=&quot;#Exynap&quot; class=&quot;headerlink&quot; title=&quot;Exynap&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://exynap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exynap&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个Android Studio插件, 可以生成实现代码.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-222&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-222&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #222&quot;&gt;&lt;/a&gt;Android Weekly Issue #222&lt;/h1&gt;&lt;p&gt;September 11th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-222&quot;&gt;Android Weekly Issue #222&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="Resources" scheme="http://mengdd.github.io/tags/Resources/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="Okio" scheme="http://mengdd.github.io/tags/Okio/"/>
    
      <category term="Tools" scheme="http://mengdd.github.io/tags/Tools/"/>
    
      <category term="Support Annotations" scheme="http://mengdd.github.io/tags/Support-Annotations/"/>
    
      <category term="Design" scheme="http://mengdd.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 221</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/09/09/android-weekly-notes-issue-221/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/09/09/android-weekly-notes-issue-221/</id>
    <published>2016-09-09T03:42:07.000Z</published>
    <updated>2016-09-16T02:55:12.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-221&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-221&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #221&quot;&gt;&lt;/a&gt;Android Weekly Issue #221&lt;/h1&gt;&lt;p&gt;September 4th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-221&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #221&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h2&gt;&lt;h2 id=&quot;Android-ImageView-ScaleType-A-Visual-Guide&quot;&gt;&lt;a href=&quot;#Android-ImageView-ScaleType-A-Visual-Guide&quot; class=&quot;headerlink&quot; title=&quot;Android ImageView ScaleType: A Visual Guide&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://robots.thoughtbot.com/android-imageview-scaletype-a-visual-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android ImageView ScaleType: A Visual Guide&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;回想一下, 你是不是总是记不住ImageView的不同ScaleType的区别, 每次都要各种尝试来找到自己适合的.&lt;br&gt;这篇文章的作者也有这样的烦恼, 于是他把各种ScaleType都截了图:&lt;br&gt;&lt;img src=&quot;/images/ImageView-ScaleTypes.png&quot; alt=&quot;ImageView-ScaleTypes&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果用了CENTER_INSIDE, FIT_CENTER, FIT_START,或者FIT_END, 而实际View的大小比图像的大, 可以使用&lt;code&gt;android:adjustViewBounds&lt;/code&gt;属性为true, 就会调整View的大小.&lt;/p&gt;
&lt;p&gt;官方文档: &lt;a href=&quot;https://developer.android.com/reference/android/widget/ImageView.ScaleType.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageView.ScaleType&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-steps-to-creating-frustration-free-Android-test-devices&quot;&gt;&lt;a href=&quot;#5-steps-to-creating-frustration-free-Android-test-devices&quot; class=&quot;headerlink&quot; title=&quot;5 steps to creating frustration-free Android test devices&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://m.signalvnoise.com/5-steps-to-creating-frustration-free-android-test-devices-9bb2750edd19#.56mnep7p1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5 steps to creating frustration-free Android test devices&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者讲了如何统一管理测试机.&lt;/p&gt;
&lt;h3 id=&quot;1-根据你要支持的API-level来安装系统&quot;&gt;&lt;a href=&quot;#1-根据你要支持的API-level来安装系统&quot; class=&quot;headerlink&quot; title=&quot;1.根据你要支持的API level来安装系统.&quot;&gt;&lt;/a&gt;1.根据你要支持的API level来安装系统.&lt;/h3&gt;&lt;p&gt;理想情况下你应该每一个API都有一个对应的机器, 更进一步可以统计一下你的用户用什么的最多来进行调整. &lt;/p&gt;
&lt;p&gt;作者列举了他当前的五个机器, 一般来讲, 你至少需要高中低API版本的, 也需要Samsung的机器来测试一些可能会被定制的地方, (当然作者是在国外了, 国内估计需要测试的定制机型就更多了), 另外还需要一个大屏幕的, 来查看UI的适配情况.&lt;/p&gt;
&lt;p&gt;幸运的是除了品牌定制机, 其他都可以用模拟器来补救, 在此推荐一下genymotion, 传说中最快的模拟器.&lt;/p&gt;
&lt;h3 id=&quot;2-安装并配置测试所需的应用&quot;&gt;&lt;a href=&quot;#2-安装并配置测试所需的应用&quot; class=&quot;headerlink&quot; title=&quot;2. 安装并配置测试所需的应用&quot;&gt;&lt;/a&gt;2. 安装并配置测试所需的应用&lt;/h3&gt;&lt;p&gt;为了测试你的app, 你可能需要一系列的工具app, 所以第二步你需要安装它们, 登录及设置等等.&lt;br&gt;原作者常用的工具app有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1Password: 管理密码.&lt;/li&gt;
&lt;li&gt;AZ Screen Recorder: 截屏, 制作gif.&lt;/li&gt;
&lt;li&gt;Chrome Beta: 因为原作者做WebView相关的工作, 所以需要看这个.&lt;/li&gt;
&lt;li&gt;Dropbox: 自动上传截图, 从电脑可以方便拿, 也可以用来做一些文件相关的测试.&lt;/li&gt;
&lt;li&gt;Flesky / Swiftkey / Google Keyboard: 也是作者应用相关, 需要测试各种键盘.&lt;/li&gt;
&lt;li&gt;Keep: 很好用的笔记应用, 可以存一些小notes, url等, 跨设备同步.&lt;/li&gt;
&lt;li&gt;Solid Explorer: 文件管理器, 可以在系统中方便地移动文件.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-在各处都登录&quot;&gt;&lt;a href=&quot;#3-在各处都登录&quot; class=&quot;headerlink&quot; title=&quot;3. 在各处都登录&quot;&gt;&lt;/a&gt;3. 在各处都登录&lt;/h3&gt;&lt;p&gt;需要登录的账号都登录.&lt;/p&gt;
&lt;h3 id=&quot;4-为了统一体验装个Nova-Launcher&quot;&gt;&lt;a href=&quot;#4-为了统一体验装个Nova-Launcher&quot; class=&quot;headerlink&quot; title=&quot;4. 为了统一体验装个Nova Launcher&quot;&gt;&lt;/a&gt;4. 为了统一体验装个Nova Launcher&lt;/h3&gt;&lt;p&gt;为了让每个机器都看起来一样, 原作者装了个launcher应用: &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nova Launcher&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;确实, 因为每个机器的launcher和组织方式不一样, 所以有时候换个机器就会很难找到你想要的东西.&lt;/p&gt;
&lt;p&gt;用了这个Nova Launcher之后, 你可以设置好你的home, dock, drawer, 然后多个机器分享设置, 这样当你拿起另一个机器的时候, 所有的应用都在同样的位置.&lt;/p&gt;
&lt;h3 id=&quot;5-设置每个机器的系统设置&quot;&gt;&lt;a href=&quot;#5-设置每个机器的系统设置&quot; class=&quot;headerlink&quot; title=&quot;5. 设置每个机器的系统设置&quot;&gt;&lt;/a&gt;5. 设置每个机器的系统设置&lt;/h3&gt;&lt;p&gt;最后一件事就是一些系统上的设置, 包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有地点的Wi-Fi;&lt;/li&gt;
&lt;li&gt;DND/total silence: 关声音;&lt;/li&gt;
&lt;li&gt;Developer options和USB debugging开关打开;&lt;/li&gt;
&lt;li&gt;当插线时仍然保持屏幕唤醒;&lt;/li&gt;
&lt;li&gt;亮度设置.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后作者建议开发者平时生活中可以多玩玩各种Android应用.&lt;/p&gt;
&lt;h2 id=&quot;Security-issues-with-Android-Accessibility&quot;&gt;&lt;a href=&quot;#Security-issues-with-Android-Accessibility&quot; class=&quot;headerlink&quot; title=&quot;Security issues with Android Accessibility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@vedprakashrout/android-accessibility-75fdc5810025#.f10tnu6oj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Security issues with Android Accessibility&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;看这篇文章之前, 让我们了解一下Accessibility是什么, 搜了一下Android相关文档:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/topics/ui/accessibility/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guides of Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/accessibility/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Training for Implementing Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/design/patterns/accessibility.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Guidelines for Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://material.google.com/usability/accessibility.html#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Accessibility是为了扩展访问和利用应用的形式, 基本出发点是为了辅助老年人或者是有障碍的人, 增加一些听觉或触觉反馈, 也可以用来辅助一些特殊场合下的用户, 比如正在开车或照顾孩子, 或者处于非常嘈杂的环境下的情形.&lt;/p&gt;
&lt;p&gt;可以结合Google的&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TalkBack&lt;/a&gt;, 也可以自己开发相关的服务.&lt;/p&gt;
&lt;p&gt;好了, 话题收敛回来, 看看作者说的安全问题指的是什么.&lt;/p&gt;
&lt;p&gt;作者一开篇以一个印度很流行的应用Voodoo为例指出, 把屏幕上的文字读出来这个功能是有安全漏洞的.&lt;/p&gt;
&lt;p&gt;首先Voodoo向用户请求accessibility的权限, 这个权限使得应用可以从屏幕上读取文字, 但是用户会认为所有的敏感字段应该不在这个范围之内, 这就是开发者需要认真对待的了.&lt;/p&gt;
&lt;p&gt;最近有一个新的登录设计, 已经被应用开来, 就是用户可以选择显示或者隐藏密码字段.&lt;/p&gt;
&lt;p&gt;当我们把输入框的input type设置为密码, 那么它是不会被读取到的, 但是有一些应用为了支持显示密码的功能, 可能会把input type设置为其他类型, 这样就会导致密码暴露, 有accessibility权限的恶意应用就会借此盗用用户的敏感信息.&lt;/p&gt;
&lt;p&gt;这样当然是不好的啦, 用户开启权限的时候还认为敏感字段总会受到保护呢, 所以我们开发者应该小心地对待用户的敏感信息, 很简单:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ViewCompat.setImportantForAccessibility(your_view, ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_NO);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;新的&lt;code&gt;TextInputLayout&lt;/code&gt;的API可以实现密码显示的toggle功能, 希望这个问题在TextInputLayout中已经解决了, 但是在用这个View之前, 上面的hotfix也算一种解决办法.&lt;/p&gt;
&lt;h2 id=&quot;How-to-fix-horizontal-scrolling-in-your-Android-app&quot;&gt;&lt;a href=&quot;#How-to-fix-horizontal-scrolling-in-your-Android-app&quot; class=&quot;headerlink&quot; title=&quot;How to fix horizontal scrolling in your Android app&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://nerds.headout.com/fix-horizontal-scrolling-in-your-android-app/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to fix horizontal scrolling in your Android app&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Android中垂直的滚动很常见, 但是如果在垂直滚动的View里嵌套一个水平滚动的View, 那滑动的体验将会非常不好.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: 垂直滚动和内嵌的水平滚动打架了, 滚动体验不佳.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening inside&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;例子里根view是一个&lt;code&gt;RecyclerView&lt;/code&gt;加垂直 &lt;code&gt;LinearLayoutManager&lt;/code&gt;, 里面的child是一个&lt;code&gt;RecyclerView&lt;/code&gt;加水平&lt;code&gt;LinearLayoutManager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是当用户做水平滚动的时候, touch事件首先被外面的父View给拦截了.&lt;/p&gt;
&lt;p&gt;看&lt;code&gt;RecyclerView&lt;/code&gt;的代码可知, 在&lt;code&gt;onInterceptTouchEvent()&lt;/code&gt;方法里, 在垂直滚动使能的情况下, 只要垂直移动的距离(dy)大于一定程度(&lt;code&gt;Math.abs(dy) &amp;gt; mTouchSlop&lt;/code&gt;), 就会被认为是垂直滚动.&lt;/p&gt;
&lt;p&gt;所以作者他们的解决方案是继承了RecyclerView, 覆写了这个方法, 把条件改成:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(canScrollVertically &amp;amp;&amp;amp; Math.abs(dy) &amp;gt; mTouchSlop &amp;amp;&amp;amp; (canScrollHorizontally || Math.abs(dy) &amp;gt; Math.abs(dx))) &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是他们的完整代码: &lt;a href=&quot;https://gist.github.com/manidesto/ecccd38787fa8e287a3f18bcd9867189&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BetterRecyclerView&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;&lt;br&gt;还有一个跟fling相关的问题: &lt;code&gt;RecyclerView&lt;/code&gt;在fling之后需要挺长的一段时间来稳定(settle)下来, 当child还在这个稳定过程中时, 如果用户尝试竖直滚动, touch事件实际上是被child吃掉的.&lt;/p&gt;
&lt;p&gt;还是从&lt;code&gt;onInterceptTouchEvent()&lt;/code&gt;的代码可以看出:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mScrollState == SCROLL_STATE_SETTLING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getParent().requestDisallowInterceptTouchEvent(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setScrollState(SCROLL_STATE_DRAGGING);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当child处于SETTLING状态时, child会要求它的parent不要拦截touch事件.&lt;/p&gt;
&lt;p&gt;这在通常情况下是好的.&lt;br&gt;但是在作者的使用场景里, 他们的root中没有其他竖直滚动和拖拽的child, 所以他们又继承了刚才那个BetterRecyclerView, 写了一个&lt;code&gt;requestDisallowInterceptTouchEvent()&lt;/code&gt;为空实现的View作为root.&lt;/p&gt;
&lt;p&gt;他们的sample demo在这里: &lt;a href=&quot;https://github.com/manidesto/scrolling-demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;manidesto/scrolling-demo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Update-Dependencies-Code-Repeat&quot;&gt;&lt;a href=&quot;#Update-Dependencies-Code-Repeat&quot; class=&quot;headerlink&quot; title=&quot;Update Dependencies. Code. Repeat.&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://crushingcode.co/update-dependencies-code-repeat/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Update Dependencies. Code. Repeat.&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;每一个Android开发可能都需要对他们的项目进行(更新依赖, 编码, 重复)这样的循环工作, 如果你想要你的所有项目都有同样的版本号, 这样是很浪费时间的.&lt;/p&gt;
&lt;p&gt;原文作者就经历了这样的情景, 他想要把他这个目录&lt;a href=&quot;https://github.com/nisrulz/android-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Examples&lt;/a&gt;下的所有项目都更新一下. 这个目录里全是那种很小的简单例子, 但都是可独立运行的工程.&lt;br&gt;每当gradle-plugin, support library或者google play services要更新版本号, 保持这些工程全部都updated是一项很难的工作.&lt;/p&gt;
&lt;p&gt;所以原作者想要放弃原先逐个更新的土办法, 更有效率地来更新依赖版本号.&lt;br&gt;首先想到的就是在gradle里定义一个变量, 然后双引号加$引用这个变量.&lt;br&gt;为了让所有的module都采用同一变量, 可以在根项目的build.gradle文件里定义变量, 即使用ext块.&lt;br&gt;但是到此, 只能统一管理在同一个project下的各个modules的依赖版本.&lt;/p&gt;
&lt;p&gt;如果跨projects呢?&lt;br&gt;首先, 作者在存放这些projects的根目录下建了一个gradle文件, 然后把变量都定义在那里.&lt;br&gt;然后如何应用到各个project呢?于是原作者找啊找, 找到了这块: &lt;a href=&quot;https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:subproject_configuration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle Subproject configuration&lt;/a&gt;&lt;br&gt;他给每个工程的根build文件加了个这个:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// This is added to apply the gradle file to each module under the project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apply from: &amp;apos;../../dependencies.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样以后在每个工程的module里面都可以直接引用变量了.&lt;/p&gt;
&lt;p&gt;但是, 这对于android-gradle-plugin的版本是不管用的.&lt;/p&gt;
&lt;p&gt;这是因为上面应用的配置只对subproject起作用, 对每一个root project是没有应用到的.&lt;br&gt;所以作者在每一个项目的root build.gradle中, 在buildscript块又加了它的依赖配置文件:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // This is added to apply the gradle file to facilitate providing variable values to root build.gradle of the project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apply from: &amp;apos;../dependencies.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;quot;com.android.tools.build:gradle:$androidPluginVer&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好啦, 至此, 所有的依赖配置问题就解决了, 以后改版本号只需要改一个地方就可以应用到所有项目.&lt;/p&gt;
&lt;h2 id=&quot;DI-101-Part-2&quot;&gt;&lt;a href=&quot;#DI-101-Part-2&quot; class=&quot;headerlink&quot; title=&quot;DI 101 - Part 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/di-101/di-101-part-2-9f7f4e1dcc81#.bfcmljct9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DI 101 - Part 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者上一篇的文章里介绍了Dagger的基本使用.&lt;br&gt;这篇还是教程类文章, 讲:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多个Modules&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;写了一个Retrofit 2的ApiModule, 和一个Realm的DatabaseModule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多个对象&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;有时候我们需要提供一个类的不同对象, 我们可以用&lt;code&gt;@Named&lt;/code&gt;注解, 然后用不同的字符串来区分它们.&lt;/p&gt;
&lt;p&gt;文中的例子是这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Named&lt;/span&gt;(IMAGE_URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;provideImageUrl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ImageApiService.ENDPOINT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Named&lt;/span&gt;(URL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;provideBaseUrl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; RestApiService.ENDPOINT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Named&lt;/span&gt;(REST_API_RETROFIT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Retrofit &lt;span class=&quot;title&quot;&gt;provideRetrofit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Named(URL)&lt;/span&gt; String baseUrl, OkHttpClient client) &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Named&lt;/span&gt;(IMAGE_API_RETROFIT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Retrofit &lt;span class=&quot;title&quot;&gt;provideImageRetrofit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Named(IMAGE_URL)&lt;/span&gt; String baseUrl, OkHttpClient client) &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Inject-interfaces-without-provide-methods-on-Dagger-2&quot;&gt;&lt;a href=&quot;#Inject-interfaces-without-provide-methods-on-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Inject interfaces without provide methods on Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://android.jlelse.eu/inject-interfaces-without-providing-in-dagger-2-618cce9b1e29?swoff=true#.66p0l6oik&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inject interfaces without provide methods on Dagger 2&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;用dagger2注入接口, 返回实现类的对象, 比较常规的方法是在Module里面写一个&lt;code&gt;@Provides&lt;/code&gt;标注的providesXXX()方法, 返回值类型是接口, 实际返回的是实现类的对象, 比如:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HomeModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HomePresenter &lt;span class=&quot;title&quot;&gt;providesHomePresenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HomePresenterImp();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是如果我们想给实现类加一个依赖UserService呢?&lt;/p&gt;
&lt;p&gt;我们当然可以把UserService作为参数传给这个provide方法, 然后传到实现类的构造函数中, 在里面存一个字段.&lt;/p&gt;
&lt;p&gt;又或者, 我们可以使用&lt;code&gt;@Binds&lt;/code&gt;注解, 像这样:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HomeModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Binds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; HomePresenter &lt;span class=&quot;title&quot;&gt;bindHomePresenter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HomePresenterImp   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    homePresenterImp)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是一个抽象类中的抽象方法, 这个方法的签名意思是告诉dagger, 注入&lt;code&gt;HomePresenter&lt;/code&gt;接口(返回值)时, 使用&lt;code&gt;HomePresenterImpl&lt;/code&gt;(方法参数)实现.&lt;/p&gt;
&lt;p&gt;然后, 在&lt;code&gt;HomePresenterImpl&lt;/code&gt;类的构造函数上加一个&lt;code&gt;@Inject&lt;/code&gt;就可以了.&lt;/p&gt;
&lt;p&gt;这样我们就不需要在provide方法上加依赖参数了.&lt;/p&gt;
&lt;h2 id=&quot;Introducing-ExpandableRecyclerView&quot;&gt;&lt;a href=&quot;#Introducing-ExpandableRecyclerView&quot; class=&quot;headerlink&quot; title=&quot;Introducing ExpandableRecyclerView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://robots.thoughtbot.com/introducing-expandablerecyclerview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing ExpandableRecyclerView&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;本文介绍&lt;a href=&quot;https://github.com/thoughtbot/expandable-recycler-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;expandable-recycler-view&lt;/a&gt;, 一个开源的库, 可以展开和折叠RecyclerView中的组.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RecyclerView&lt;/code&gt;作为&lt;code&gt;ListView&lt;/code&gt;的升级版, 却也减少了一些功能比如&lt;code&gt;OnItemClickListener&lt;/code&gt;, &lt;code&gt;ChoiseModes&lt;/code&gt;, 还有扩展版的&lt;code&gt;ExpandableListView&lt;/code&gt;.&lt;br&gt;本文作者就介绍这个开源库, &lt;code&gt;ExpandableRecyclerView&lt;/code&gt;, 用自定义的&lt;code&gt;RecyclerView.Adapter&lt;/code&gt;来实现展开关闭分组的功能.&lt;/p&gt;
&lt;p&gt;首先明白一下Adapter的功能, 其实adapter就是一个中间人, 将一些数据按照index翻译给View, 然后显示.&lt;/p&gt;
&lt;p&gt;当显示的list是单维度的时候, 这样的翻译很简单, 数据的index就直接对应了屏幕上view的index.&lt;/p&gt;
&lt;p&gt;当时当你显示二维数据时, 翻译就变得有点复杂,数据和view的index可能对应, 也可能不对应.&lt;br&gt;&lt;code&gt;RecyclerView.Adapter&lt;/code&gt;就只能处理一维数据的情况, 这就是为什么要对其进行一些扩展, 才能实现ExpandableRecyclerView.&lt;/p&gt;
&lt;p&gt;后来作者简单讲了实现的原理, 用到了&lt;code&gt;ExpandableListPosition&lt;/code&gt;, 是Android SDK中就有的类, 只不过有包限制, 所以拷贝到了这个库里.&lt;/p&gt;
&lt;p&gt;最后附上repo地址: &lt;a href=&quot;https://github.com/thoughtbot/expandable-recycler-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;expandable-recycler-view&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Creating-Custom-Annotations-in-Android&quot;&gt;&lt;a href=&quot;#Creating-Custom-Annotations-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Creating Custom Annotations in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.freecodecamp.com/creating-custom-annotations-in-android-a855c5b43ed9#.dq08cdjsm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating Custom Annotations in Android&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注解是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Annotations are Metadata.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注解是元数据, 而元数据是一些关于其他数据的信息.&lt;br&gt;所以说, 注解是关于代码的信息.&lt;/p&gt;
&lt;p&gt;比如&lt;code&gt;@Override&lt;/code&gt;注解, 即便你不在方法上标注它, 程序依然能够正常工作. 那么它是用来干什么的呢? &lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Override&lt;/code&gt;是用来告诉编译器, 这个方法覆写了一个方法, 如果父类没有这个方法, 则会报一个编译错误.&lt;/p&gt;
&lt;p&gt;如果你不加这个注解, 有可能你方法名不小心拼错了却仍然编译通过了.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建自定义注解&lt;/strong&gt;:&lt;br&gt;比如, 创建一个:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(ElementType.METHOD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; Status &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Priority &amp;#123;LOW, MEDIUM, HIGH&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;Priority &lt;span class=&quot;title&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Priority.LOW&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; “Amit”&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; 0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;@Target&lt;/code&gt;指定了这个注解可以放在哪里. 如果你不设置, 这个注解可以放在任何地方.&lt;br&gt;可能的值有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ElementType.TYPE&lt;/code&gt; (class, interface, enum)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElementType.FIELD&lt;/code&gt; (instance variable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElementType.METHOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElementType.PARAMETER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElementType.CONSTRUCTOR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElementType.LOCAL_VARIABLE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;@Retention&lt;/code&gt;定义这个注解可以被保存多久.&lt;br&gt;可能的值有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RetentionPolicy.SOURCE&lt;/code&gt; - 到编译结束, 不会被编进.class, 只会留在源文件中. &lt;code&gt;@Override&lt;/code&gt;, &lt;code&gt;@SuppressWarnings&lt;/code&gt;都是这种.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RetentionPolicy.CLASS&lt;/code&gt; - 到类加载丢弃, 注解将存储在.class文件中, 这是默认值.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RetentionPolicy.RUNTIME&lt;/code&gt; - 不被丢弃. .class文件中有, 并且可由VM读入, 在运行时可以通过反射的方式读取到.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的注解使用时:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// in Foo.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Status&lt;/span&gt;(priority = STATUS.Priority.MEDIUM, author = “Amit Shekhar”, completion = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;methodOne&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//no code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// get the annotation information&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Class foo = Foo.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Method method : foo.getMethods()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Status statusAnnotation = (Status)method.getAnnotation(Status.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(statusAnnotation != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; Method Name : &quot;&lt;/span&gt; + method.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; Author : &quot;&lt;/span&gt; + statusAnnotation.author());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; Priority : &quot;&lt;/span&gt; + statusAnnotation.priority());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; Completion Status : &quot;&lt;/span&gt; + statusAnnotation.completion());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你的注解中仅有一个属性, 它应该叫value, 并且使用的时候不用指定属性名.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; Status&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;meta&quot;&gt;@Status&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//few codes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后作者还附上了另一个他的文章, 推荐他的网络请求库: &lt;a href=&quot;https://medium.freecodecamp.com/simple-and-fast-android-networking-19ed860d1455#.3hqqpr1ba&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fast Android Networking&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;It’s-parfetti-time&quot;&gt;&lt;a href=&quot;#It’s-parfetti-time&quot; class=&quot;headerlink&quot; title=&quot;It’s parfetti time!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@jinatonic/its-parfetti-time-f40634472608#.9vf9fxn99&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;It’s parfetti time!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者介绍他的库: &lt;a href=&quot;https://github.com/jinatonic/confetti&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;confetti&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这个库实现了一个粒子系统, 来发射出随机的纸屑, 并且可以被定制化, 比如发射源的形状(点或者线), 初始的物理约束(速度, 加速度, 旋转等), 还可以定义消失或者拖拽行为, 感觉效果还挺好的.&lt;/p&gt;
&lt;p&gt;关于性能, 纸屑对象是循环利用的, 每一个bitmap也只被分配一次地址, 动画参数也做了一些预计算, 所以作者说不用担心丢帧, 除非你一次性出现的片儿实在是太多了.&lt;/p&gt;
&lt;h2 id=&quot;Converting-callback-async-calls-to-RxJava&quot;&gt;&lt;a href=&quot;#Converting-callback-async-calls-to-RxJava&quot; class=&quot;headerlink&quot; title=&quot;Converting callback async calls to RxJava&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/we-are-yammer/converting-callback-async-calls-to-rxjava-ebc68bde5831#.mmtpwqgkh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Converting callback async calls to RxJava&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者他们在自己Android应用里开始使用RxJava以后, 经常会遇到由于API没有follow reactive model, 导致他们必须做一些转换工作, 将它们和其他的RxJava Observable链连接起来.&lt;/p&gt;
&lt;p&gt;API对于很重的操作通常提供这两种方式之一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.同步阻塞方法调用, 通常需要后台线程调用.&lt;/li&gt;
&lt;li&gt;2.异步非阻塞方法调用, 结合callback, listener, 或者broadcast receiver等.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;把同步方法变为Observable&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;用这个&lt;a href=&quot;http://reactivex.io/RxJava/javadoc/rx/Observable.html#fromCallable%28java.util.concurrent.Callable%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Observable.fromCallable()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wrapping synchronous operation in an RxJava Observable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Observable&amp;lt;Boolean&amp;gt; &lt;span class=&quot;title&quot;&gt;wipeContents&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; SharedPreferences sharedPreferences)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.fromCallable(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callable&amp;lt;Boolean&amp;gt;() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Boolean &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sharedPreferences.edit().clear().commit(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把异步方法变为Observable&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;变异步没那么简单了, 之前有一些模式是用工厂方法&lt;code&gt;Observable.create()&lt;/code&gt;把它们包起来, 比如&lt;a href=&quot;http://ryanharter.com/blog/2015/07/07/wrapping-existing-libraries-with-rxjava/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://andriydruk.com/post/rxdnssd/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/29679801/chaining-rxjava-observables-with-callbacks-listeners/29682801#29682801&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;, 但是这种方法存在一些缺点.&lt;/p&gt;
&lt;p&gt;作者举了一个传感器监听的例子.&lt;br&gt;用create()转换之后, 需要处理一些问题, 比如注销listener, 错误处理, 检查subscriber等, 这几个都可能办到, 但是还有一个backpressure的问题, 不好办.&lt;br&gt;这个backpressure是什么捏: &lt;a href=&quot;http://stackoverflow.com/documentation/rx-java/2341/backpressure#t=201609081434407670206&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;backpressure&lt;/a&gt;&lt;br&gt;当生产者发射值的速率比消费者可以处理的速率快的时候, 有一个内置的buffer size, 当超出的时候就会抛出&lt;code&gt;MissingBackpressureException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;幸运的是, RxJava v1.1.7推出了&lt;code&gt;Observable.fromAsync()&lt;/code&gt;, 在v1.2.0改名为&lt;code&gt;Observable.fromEmitter()&lt;/code&gt;.&lt;br&gt;这个里面对于backpressure的处理定义了好几种策略, 你只需要选一种模式就行.&lt;/p&gt;
&lt;p&gt;然后作者给出了采用这个新方法的例子, 这里不再赘述, 可以看原文.&lt;br&gt;Sample代码在: &lt;a href=&quot;https://github.com/murki/AndroidRxFromAsyncSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidRxFromAsyncSample&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h1&gt;&lt;h2 id=&quot;ItemTouchHelper-Extension&quot;&gt;&lt;a href=&quot;#ItemTouchHelper-Extension&quot; class=&quot;headerlink&quot; title=&quot;ItemTouchHelper Extension&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/loopeer/itemtouchhelper-extension&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ItemTouchHelper Extension&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ItemTouchHelper&lt;/code&gt;的扩展, 加滑动settling和恢复. Sample的效果是给单个item加了滑动后出现删除和refresh两个按钮.&lt;/p&gt;
&lt;h2 id=&quot;Fresco-Image-Viewer&quot;&gt;&lt;a href=&quot;#Fresco-Image-Viewer&quot; class=&quot;headerlink&quot; title=&quot;Fresco Image Viewer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/stfalcon-studio/FrescoImageViewer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fresco Image Viewer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;为Fresco库加的全屏查看图像的工具, 支持双手指的zoom和滑动关闭手势.&lt;/p&gt;
&lt;h2 id=&quot;ABTestGen&quot;&gt;&lt;a href=&quot;#ABTestGen&quot; class=&quot;headerlink&quot; title=&quot;ABTestGen&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/imperial-crystalline-recursion/abtestgen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ABTestGen&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个生成简单A/B test的库, 使用注解.&lt;/p&gt;
&lt;h2 id=&quot;RecyclerViewHelper-v24-2-0&quot;&gt;&lt;a href=&quot;#RecyclerViewHelper-v24-2-0&quot; class=&quot;headerlink&quot; title=&quot;RecyclerViewHelper v24.2.0&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nisrulz/recyclerviewhelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RecyclerViewHelper v24.2.0&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个RecyclerView的辅助类, 提供滑动删除, 拖动, divider, 选中和非选中事件等的支持.&lt;/p&gt;
&lt;h2 id=&quot;Paginize&quot;&gt;&lt;a href=&quot;#Paginize&quot; class=&quot;headerlink&quot; title=&quot;Paginize&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/neevek/Paginize&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paginize&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个轻量级的Android应用framework.&lt;/p&gt;
&lt;h1 id=&quot;SPECIALS&quot;&gt;&lt;a href=&quot;#SPECIALS&quot; class=&quot;headerlink&quot; title=&quot;SPECIALS&quot;&gt;&lt;/a&gt;SPECIALS&lt;/h1&gt;&lt;h2 id=&quot;Tips-and-tricks-for-Android-Development&quot;&gt;&lt;a href=&quot;#Tips-and-tricks-for-Android-Development&quot; class=&quot;headerlink&quot; title=&quot;Tips and tricks for Android Development&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nisrulz/android-tips-tricks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tips and tricks for Android Development&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一个很长的README, 包含了各种快捷键, 编码建议, 工具, 插件, 还有有一些推荐的网站等, 其中有mock api和新闻网站及其他有用的工具等.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-221&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-221&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #221&quot;&gt;&lt;/a&gt;Android Weekly Issue #221&lt;/h1&gt;&lt;p&gt;September 4th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-221&quot;&gt;Android Weekly Issue #221&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Security" scheme="http://mengdd.github.io/tags/Security/"/>
    
      <category term="ScaleType" scheme="http://mengdd.github.io/tags/ScaleType/"/>
    
      <category term="Devices" scheme="http://mengdd.github.io/tags/Devices/"/>
    
      <category term="Accessibility" scheme="http://mengdd.github.io/tags/Accessibility/"/>
    
      <category term="Scrolling" scheme="http://mengdd.github.io/tags/Scrolling/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="ExpandableRecyclerView" scheme="http://mengdd.github.io/tags/ExpandableRecyclerView/"/>
    
      <category term="Annotation" scheme="http://mengdd.github.io/tags/Annotation/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="ItemTouchHelper" scheme="http://mengdd.github.io/tags/ItemTouchHelper/"/>
    
      <category term="Fresco" scheme="http://mengdd.github.io/tags/Fresco/"/>
    
      <category term="Resources" scheme="http://mengdd.github.io/tags/Resources/"/>
    
  </entry>
  
  <entry>
    <title>取代SharedPreferences的多进程解决方案</title>
    <link href="http://mengdd.github.io/Android/2016/09/07/hello-preferences-provider/"/>
    <id>http://mengdd.github.io/Android/2016/09/07/hello-preferences-provider/</id>
    <published>2016-09-07T03:19:32.000Z</published>
    <updated>2016-09-07T05:44:49.000Z</updated>
    
    <content type="html">&lt;p&gt;Android的SharedPreferences用来存储一些键值对, 但是却不支持跨进程使用.&lt;br&gt;跨进程来用的话, 当然是放在数据库更可靠啦, 本文主要是给作者的新库&lt;a href=&quot;https://github.com/mengdd/PreferencesProvider&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PreferencesProvider&lt;/a&gt;打个广告.&lt;br&gt;这是一个用ContentProvider实现的, 可以像SharedPreferences一样用于存储键值对, 支持跨进程使用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;SharedPreferences不支持多进程&quot;&gt;&lt;a href=&quot;#SharedPreferences不支持多进程&quot; class=&quot;headerlink&quot; title=&quot;SharedPreferences不支持多进程&quot;&gt;&lt;/a&gt;SharedPreferences不支持多进程&lt;/h2&gt;&lt;p&gt;SharedPreferences对多进程的支持不好, 你用什么mode也没用, 所以官方已经废弃了原先的MODE_MULTI_PROCESS, 并且建议跨进程存取值还是用ContentProvider之类的更靠谱一些.&lt;br&gt;说明见:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#MODE_MULTI_PROCESS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Context#MODE_MULTI_PROCESS&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;用ContentProvider来取代SharedPreferences-心路历程&quot;&gt;&lt;a href=&quot;#用ContentProvider来取代SharedPreferences-心路历程&quot; class=&quot;headerlink&quot; title=&quot;用ContentProvider来取代SharedPreferences 心路历程&quot;&gt;&lt;/a&gt;用ContentProvider来取代SharedPreferences 心路历程&lt;/h2&gt;&lt;p&gt;之前项目中为了解决跨进程存取值的问题, 找了一个解决方案: &lt;a href=&quot;https://github.com/grandcentrix/tray&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;grandcentrix/tray&lt;/a&gt;, 感觉还挺好用.&lt;/p&gt;
&lt;p&gt;我们最后一次用的版本是tray的v0.10.0, 因为项目发布以后后台的崩溃里总是有相关的crash, 也是它的一个issue: &lt;a href=&quot;https://github.com/grandcentrix/tray/issues/50&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/grandcentrix/tray/issues/50&lt;/a&gt;&lt;br&gt;这个crash不是必现的, 概率比较低, 但是还是影响了一部分用户, 当我们解决了项目中的其他更重要的crash之后, 这个crash的排名就越来越靠前了.&lt;/p&gt;
&lt;p&gt;后来作者做了一些改动, 说是在v0.11.0这个issue将会被修复, 但是这个版本却迟迟没有发布, 似乎作者做了一些很大的改动.&lt;/p&gt;
&lt;p&gt;为了及时补救, 不再让用户体验到这个随机的崩溃, 我们决定放弃等待Tray的下个版本, 自己实现用ContentProvider来存取preferences.&lt;/p&gt;
&lt;p&gt;实现过程用了&lt;a href=&quot;https://github.com/BoD/android-contentprovider-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BoD/android-contentprovider-generator&lt;/a&gt;来生成ContentProvider相关的代码.&lt;br&gt;我们把存preferences的表放在了自己的数据库里, 然后借鉴了Tray的接口, 封装了读取方法, 使之用起来和SharedPreferences类似.&lt;br&gt;之后我们就用自己写的新代码全面取代了Tray, 当然数据库升级时还需要对原来存在Tray里的重要数据进行迁移.&lt;/p&gt;
&lt;p&gt;做完了这些以后, 发现可以做一个像Tray一样的库, 更简单, 造福其他人, 那么何乐而不为呢.&lt;/p&gt;
&lt;h2 id=&quot;PreferencesProvider优势&quot;&gt;&lt;a href=&quot;#PreferencesProvider优势&quot; class=&quot;headerlink&quot; title=&quot;PreferencesProvider优势&quot;&gt;&lt;/a&gt;PreferencesProvider优势&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于ContentProvider实现, 支持跨进程使用;&lt;/li&gt;
&lt;li&gt;采用模块化的管理方式, 可以将preferences分组管理;&lt;/li&gt;
&lt;li&gt;没有Tray在v0.10.0版本的crash, 因为实现比Tray简单, 没有升级等功能.&lt;br&gt;(其实在我们实际项目的使用中, 基本上用不到对存preferences的表进行数据库升级的情况).&lt;/li&gt;
&lt;li&gt;使用方式简单, 见项目README说明:&lt;a href=&quot;https://github.com/mengdd/PreferencesProvider&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PreferencesProvider&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;有用的工具&quot;&gt;&lt;a href=&quot;#有用的工具&quot; class=&quot;headerlink&quot; title=&quot;有用的工具&quot;&gt;&lt;/a&gt;有用的工具&lt;/h2&gt;&lt;p&gt;生成ContentProvider相关代码:&lt;br&gt;&lt;a href=&quot;https://github.com/BoD/android-contentprovider-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BoD/android-contentprovider-generator&lt;/a&gt;&lt;br&gt;只要定义数据库基本信息, 在json中定义表结构, 就可以生成所有相关代码.&lt;/p&gt;
&lt;p&gt;查看数据库:&lt;br&gt;&lt;a href=&quot;http://facebook.github.io/stetho/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stetho&lt;/a&gt;&lt;br&gt;在Chrome中像调试网页一样看Android应用的资源, 这个真是太好用了.&lt;/p&gt;
&lt;p&gt;最后再次附上本文推荐的解决方案库: &lt;a href=&quot;https://github.com/mengdd/PreferencesProvider&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PreferencesProvider&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android的SharedPreferences用来存储一些键值对, 但是却不支持跨进程使用.&lt;br&gt;跨进程来用的话, 当然是放在数据库更可靠啦, 本文主要是给作者的新库&lt;a href=&quot;https://github.com/mengdd/PreferencesProvider&quot;&gt;PreferencesProvider&lt;/a&gt;打个广告.&lt;br&gt;这是一个用ContentProvider实现的, 可以像SharedPreferences一样用于存储键值对, 支持跨进程使用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Content Provider" scheme="http://mengdd.github.io/tags/Content-Provider/"/>
    
      <category term="SharedPreferences" scheme="http://mengdd.github.io/tags/SharedPreferences/"/>
    
      <category term="Mutilprocess" scheme="http://mengdd.github.io/tags/Mutilprocess/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 220</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/09/01/android-weekly-notes-issue-220/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/09/01/android-weekly-notes-issue-220/</id>
    <published>2016-09-01T06:05:48.000Z</published>
    <updated>2016-09-16T02:50:28.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-220&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-220&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #220&quot;&gt;&lt;/a&gt;Android Weekly Issue #220&lt;/h1&gt;&lt;p&gt;August 28th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-220&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #220&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h2&gt;&lt;h3 id=&quot;Manage-dependencies-versions-with-gradle-extra-properties&quot;&gt;&lt;a href=&quot;#Manage-dependencies-versions-with-gradle-extra-properties&quot; class=&quot;headerlink&quot; title=&quot;Manage dependencies versions with gradle extra properties&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://segunfamisa.com/posts/android-gradle-extra-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manage dependencies versions with gradle extra properties&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;依赖管理的小Tip: 把依赖的版本号作为变量管理.&lt;br&gt;改造之后, build.gradle文件变成这样:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.application&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    supportLibraryVersion = &amp;apos;23.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    playServicesVersion = &amp;apos;9.2.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // support libraries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:appcompat-v7:$supportLibraryVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:design:$supportLibraryVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:percent:$supportLibraryVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:cardview-v7:$supportLibraryVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:gridlayout-v7:$supportLibraryVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //play services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.google.android.gms:play-services-location:$playServicesVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.google.android.gms:play-services-gcm:$playServicesVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // other dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;定义了版本号变量, 原来hardcode时的单引号变成了双引号, 然后用$符号取变量值.&lt;/p&gt;
&lt;p&gt;上面这个是app module里面使用的例子, 如果你的应用有多个module怎么办呢?&lt;br&gt;当然一种办法是每个module里定义一组版本号变量, 更方便的办法是在项目工程总目录的build.gradle文件里定义变量.&lt;br&gt;可以在工程的build文件里写&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // sdk and tools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    minSdkVersion = 14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    targetSdkVersion = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compileSdkVersion = 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildToolsVersion = &amp;apos;23.0.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // dependencies versions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    supportLibraryVersion = &amp;apos;23.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    playServicesVersion = &amp;apos;9.2.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以这样定义:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;project.ext.supportLibVersion = &amp;apos;24.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用的时候可以这样取值: &lt;code&gt;$rootProject.supportLibraryVersion&lt;/code&gt;.&lt;br&gt;也可以省略前面的rootProject, 直接取&lt;code&gt;$supportLibraryVersion&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android-CI-with-Docker&quot;&gt;&lt;a href=&quot;#Android-CI-with-Docker&quot; class=&quot;headerlink&quot; title=&quot;Android CI with Docker&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@Malinskiy/android-ci-with-docker-a2f522086640#.ud9unt793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android CI with Docker&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者讲了他怎么用Docker搭建CI.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;环境:&lt;br&gt;首先, CI需要Android环境(JDK 7&amp;amp;8, Android SDK, Gradle, Release keychain, google-services.json, etc).&lt;br&gt;装了这些环境之后, 需要保证他们在每一个CI实例上都是同步更新的.&lt;br&gt;用了Docker之后, 更新环境的步骤变为:&lt;br&gt;更新你的Dockerfile -&amp;gt; Push到版本管理系统 -&amp;gt; CI会build新的image, 然后push到docker registry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build:&lt;br&gt;&lt;code&gt;docker run -v ./app:/opt/app docker-ci-android:latest gradle assembleRelease&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test:&lt;br&gt;有两种测试, 一种是单元测试, 只需要JVM; 另一种是UI或者功能测试, 需要Android.&lt;br&gt;emulator会有一些问题: &lt;a href=&quot;https://developer.android.com/training/articles/smp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;why&lt;/a&gt;&lt;br&gt;所以你可能想要在更真实的机器上测试: &lt;a href=&quot;https://github.com/openstf/stf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;STF&lt;/a&gt;提供了服务, 你只需要用这个&lt;a href=&quot;https://github.com/Malinskiy/stf-client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stf-client&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy:&lt;br&gt;部署用一些gradle的task就可以完成.&lt;br&gt;&lt;a href=&quot;https://docs.fabric.io/android/beta/gradle.html#distribution-with-gradle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fabric&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/Triple-T/gradle-play-publisher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-play-publisher&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后面还提到了一些扩展和问题.&lt;/p&gt;
&lt;h3 id=&quot;Bottom-Sheets-in-Android&quot;&gt;&lt;a href=&quot;#Bottom-Sheets-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Bottom Sheets in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mayojava.github.io/android/bottom-sheets-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom Sheets in Android&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;BottomSheet是support library 23.2加入的, 是从底部滑上来的一个块块, 用来向用户展现更多内容.&lt;br&gt;Support Library提供了:&lt;br&gt;&lt;code&gt;BottomSheetBehavior&lt;/code&gt;: 加在&lt;code&gt;CoordinatorLayout&lt;/code&gt;的直接child view上, 然后在java代码里get出来, 设置state控制其状态.&lt;br&gt;有HIDE, COLLAPSED和EXPANDED三种状态, 分别对应隐藏, 展开到指定高度(peekHeight)和完全展开.&lt;br&gt;&lt;code&gt;BottomSheetDialog&lt;/code&gt;:&lt;br&gt;&lt;code&gt;BottomSheetDialogFragment&lt;/code&gt;.&lt;br&gt;Behaviour是给View加行为, 后面这两种是更加模块化的dialog, 状态控制都一样.&lt;/p&gt;
&lt;p&gt;这里推荐一下笔者自己的demo: &lt;a href=&quot;https://github.com/mengdd/AndroidDesignWidgetsSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDesignWidgetsSample&lt;/a&gt;&lt;br&gt;再推荐一下这篇文章里面的Bottom Sheets部分: &lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath-Handling-Scrolls-with-CoordinatorLayout&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Certificate-public-key-pinning-using-Retrofit-2&quot;&gt;&lt;a href=&quot;#Certificate-public-key-pinning-using-Retrofit-2&quot; class=&quot;headerlink&quot; title=&quot;Certificate public key pinning using Retrofit 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sreekumar_av/certificate-public-key-pinning-in-android-using-retrofit-2-0-74140800025b#.9ajsf36qp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Certificate public key pinning using Retrofit 2&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;SSL handshake, 交换了证书(Certificate), 这样客户端就可以通过证书来验证服务器的身份.&lt;br&gt;什么是Certificate public key pinning呢? 也叫作SSL pinning.&lt;/p&gt;
&lt;p&gt;把host name和&lt;a href=&quot;https://tools.ietf.org/html/rfc7469#section-2.4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;public key&lt;/a&gt;关联起来, 这个public key将用来和证书中的public key比较, 如果匹配了, 就证明你正在和正确的server通信.&lt;br&gt;而直接pinning证书相比pinning public key更容易一些, 但是也有不好的地方, 如果网站(比如Google)经常轮换证书(rotate its certificate), 你的应用就也得经常更新, 而这种情况一般证书里面的public keys是保持不变的.&lt;br&gt;如何在Android中用Retrofit实现pinning呢?&lt;br&gt;首先需要网站的public key的hash, 有很多获取方法, 参见&lt;a href=&quot;https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/CertificatePinner.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;okhttp3-CertificatePinner&lt;/a&gt;.&lt;br&gt;然后构建CertificatePinner类对象, 加到OkHttpClient上.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CertificatePinner certificatePinner = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CertificatePinner.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   .add(&lt;span class=&quot;string&quot;&gt;&quot;api.github.com&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sha256/6wJsqVDF8K19zxfLxV5DGRneLyzso9adVdUN/exDacw=&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; OkHttpClient client = httpBuilder.certificatePinner(certificatePinner).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Retrofit retrofit = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Retrofit.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   .baseUrl(END_POINT)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   .addConverterFactory(GsonConverterFactory.create())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   .client(client)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;TLSv1.2从Android16+开始支持, 但是对于20+的设备默认是disabled的, 为了强制获取支持, 可以继承&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/javax/net/ssl/SSLSocketFactory.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSLSocketFactory&lt;/a&gt;, 强制设置为enabled, 代码见原文吧.&lt;br&gt;Github上有完整的代码&lt;a href=&quot;https://github.com/pollux-/PublicKeyPinning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PublicKeyPinning&lt;/a&gt;&lt;br&gt;作者最后还推荐了一个测试的工具&lt;a href=&quot;https://mitmproxy.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mitmproxy&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Isometric-AnimatedVectorDrawable-Part-3&quot;&gt;&lt;a href=&quot;#Isometric-AnimatedVectorDrawable-Part-3&quot; class=&quot;headerlink&quot; title=&quot;Isometric AnimatedVectorDrawable - Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/isometric-animatedvectordrawable-part-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Isometric AnimatedVectorDrawable - Part 3&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者继续讲了他如何构建方块地形图的动态效果.&lt;br&gt;一个AnimatedVectorDrawable的xml文件实际上是用来建立一个映射关系, 关联objectAnimators和VectorDrawable上的独立元素. 我们可以建立一个objectAnimator, 操纵我们的一块元素的动画效果.&lt;br&gt;文中实现了让方块地形动起来的动画效果.&lt;/p&gt;
&lt;h3 id=&quot;The-many-flavors-of-commit&quot;&gt;&lt;a href=&quot;#The-many-flavors-of-commit&quot; class=&quot;headerlink&quot; title=&quot;The many flavors of commit()&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The many flavors of commit()&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;FragmentTransaction的提交方法&lt;/strong&gt;:&lt;br&gt;support library的&lt;code&gt;FragmentTransaction&lt;/code&gt;现在提供了四种不同的方法来commit一个transaction:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commit%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commit()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitAllowingStateLoss%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitAllowingStateLoss()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitNow%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitNow()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitNowAllowingStateLoss%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitNowAllowingStateLoss()&lt;/a&gt;&lt;br&gt;这篇文章分析了这四个方法的不同.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;commit() vs commitAllowingStateLoss()&lt;/strong&gt;:&lt;br&gt;用&lt;code&gt;commit()&lt;/code&gt;提交有时候会遇到&lt;code&gt;IllegalStateException&lt;/code&gt;, 说你在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;之后提交, 这里有另一个文章很好地分析了这个问题:&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragment Transactions &amp;amp; Activity State Loss&lt;/a&gt;&lt;br&gt;&lt;code&gt;commit()&lt;/code&gt;和&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;在实现上唯一的不同就是当你调用&lt;code&gt;commit()&lt;/code&gt;的时候, FragmentManger会检查是否已经存储了它自己的状态, 如果已经存了, 就抛出&lt;code&gt;IllegalStateException&lt;/code&gt;.&lt;br&gt;那么如果你调用的是&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;, 并且是在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;之后, 你可能会丢失掉什么状态呢?&lt;br&gt;答案是你&lt;strong&gt;可能&lt;/strong&gt;会丢掉FragmentManager的状态, 即save之后任何被添加或被移除的Fragments.&lt;br&gt;举例说明:&lt;br&gt;1.在Activity里显示一个FragmentA;&lt;br&gt;2.然后Activity被后台, &lt;code&gt;onStop()&lt;/code&gt;和&lt;code&gt;onSaveInstanceState()&lt;/code&gt;被调用;&lt;br&gt;3.在某个事件触发下, 你用FragmentB replace FragmentA , 使用的是 &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;这时候, 用户再返回应用, 可能会有两种情况发生:&lt;br&gt;1.如果系统杀死了你的activity, 你的activity将会重建, 使用了上述步骤2保存的状态, 所以A会显示, B不会显示;&lt;br&gt;2.如果系统没有杀死你的activity, 它会被提到前台, FragmentB就会显示出来, 到下次Activity stop的时候, 这个包含了B的状态就会被存下来.&lt;br&gt;(上述测试可以利用开发者选项中的”Don’t Keep Activities”选项).&lt;br&gt;那么你要选择哪一种呢? 这就取决于你提交的是什么, 还有你是否能接受丢失.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;commit(), commitNow() 和 executePendingTransactions()&lt;/strong&gt;:&lt;br&gt;使用&lt;code&gt;commit()&lt;/code&gt;的时候, 一旦调用, 这个commit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行.&lt;br&gt;&lt;code&gt;popBackStack()&lt;/code&gt;的工作也是这样, 发送到主线程任务队列中去. 也即说它们都是异步的.&lt;/p&gt;
&lt;p&gt;但是有时候你希望你的操作是立即执行的, 之前的开发者会在&lt;code&gt;commit()&lt;/code&gt;调用之后加上 &lt;code&gt;executePendingTransactions()&lt;/code&gt;来保证立即执行, 即变异步为同步.&lt;br&gt;support library从v24.0.0开始提供了 &lt;code&gt;commitNow()&lt;/code&gt;方法, 之前用&lt;code&gt;executePendingTransactions()&lt;/code&gt;会将所有pending在队列中还有你新提交的transactions都执行了, 而&lt;code&gt;commitNow()&lt;/code&gt;将只会执行你当前要提交的transaction. 所以&lt;code&gt;commitNow()&lt;/code&gt;避免你会不小心执行了那些你可能并不想执行的transactions.&lt;/p&gt;
&lt;p&gt;但是你不能对要加在back stack中的transaction使用&lt;code&gt;commitNow()&lt;/code&gt;, 即&lt;code&gt;addToBackStack()&lt;/code&gt;和&lt;code&gt;commitNow()&lt;/code&gt;不能同时使用.&lt;br&gt;为什么呢?&lt;br&gt;想想一下, 如果你有一个提交使用了&lt;code&gt;commit()&lt;/code&gt;, 紧接着又有另一个提交使用了&lt;code&gt;commitNow()&lt;/code&gt;, 两个都想加入back stack, 那back stack会变成什么样呢? 到底是哪个transaction在上, 哪个在下? 答案将是一种不确定的状态, 因为系统并没有提供任何保证来确保顺序, 所以系统决定干脆不支持这个操作.&lt;/p&gt;
&lt;p&gt;前面提过&lt;code&gt;popBackStack()&lt;/code&gt;是异步的, 所以它同样也有一个同步的兄弟&lt;code&gt;popBackStackImmediate()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以实际应用的时候怎么选择呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果你需要同步的操作, 并且你不需要加到back stack里, 使用&lt;code&gt;commitNow()&lt;/code&gt;.&lt;br&gt;support library在FragmentPagerAdapter里就使用了commitNow()来保证在更新结束的时候, 正确的页面被加上或移除.&lt;/li&gt;
&lt;li&gt;如果你操作很多transactions, 并且不需要同步, 或者你需要把transactions加在back stack里, 那就使用&lt;code&gt;commit()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果你希望在某一个指定的点, 确保所有的transactions都被执行, 那么使用&lt;code&gt;executePendingTransactions()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Break-circular-dependency-with-RxJava-用RxJava打破循环依赖&quot;&gt;&lt;a href=&quot;#Break-circular-dependency-with-RxJava-用RxJava打破循环依赖&quot; class=&quot;headerlink&quot; title=&quot;Break circular dependency with RxJava 用RxJava打破循环依赖.&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@ferhatparmak/break-your-circular-dependency-with-rxjava-8a487345061#.4718laogc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Break circular dependency with RxJava&lt;/a&gt; 用RxJava打破循环依赖.&lt;/h3&gt;&lt;p&gt;当你把代码分成各个部分, 比如用MVP, 这些各个部分之间可能会有相互依赖, 比如View需要Presenter, Presenter也需要View.&lt;br&gt;作者也没有说双向关联有什么缺点, 但是他说RxJava可以把这种双向的依赖改成单向的.&lt;br&gt;作者的办法是使用&lt;a href=&quot;https://github.com/JakeWharton/RxBinding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxBinding&lt;/a&gt;把button的click事件变成一个Observable, 然后Presenter监听click这个Observable, 后面接一个flatMap, 里面发网络请求, 得到结果之后再调用view的方法.&lt;br&gt;这么一改以后View中就不需要再持有Presenter的引用了.&lt;br&gt;举这个例子, 最后是想说, 如果你想从A中调用B的异步方法, 你不用总是在A中保存一个B的引用, 你可以把A中的事件作为一个Observable. 这样只需要B保存了A的引用就可以了.&lt;/p&gt;
&lt;h3 id=&quot;Asynchronous-layout-inflation-异步解析layout&quot;&gt;&lt;a href=&quot;#Asynchronous-layout-inflation-异步解析layout&quot; class=&quot;headerlink&quot; title=&quot;Asynchronous layout inflation 异步解析layout&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@lupajz/asynchronous-layout-inflation-7cbca2653bf#.lld73d5uq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Asynchronous layout inflation&lt;/a&gt; 异步解析layout&lt;/h3&gt;&lt;p&gt;最近的support library revision 24中, Google的开发者在v4包中加入了一个新的辅助类&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/view/AsyncLayoutInflater.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AsyncLayoutInflater&lt;/a&gt;, 来实现布局的异步解析.&lt;/p&gt;
&lt;p&gt;我们现在常用的布局解析inflate方法都是同步的, 那什么时候需要异步地做这件事情呢?&lt;br&gt;比如你想延迟加载布局中的一块, 或者你想把布局解析作为用户某个交互的一个响应. 这样就可以用这个异步布局解析类, 保证了主线程在inflation进行的时候仍然可响应.&lt;br&gt;怎么使用呢?&lt;br&gt;首先, 在主线程创建对象&lt;code&gt;AsyncLayoutInflater(this)&lt;/code&gt;,&lt;br&gt;用它inflate布局的时候第三个参数是一个&lt;code&gt;OnInflateFinishedListener&lt;/code&gt;回调.&lt;br&gt;以前同步方法的第三个参数是一个boolean, 说布局是否需要attach到parent上, 现在没有这个boolean参数了.&lt;br&gt;当然, 使用异步解析也有缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父类方法&lt;code&gt;generateLayoutParams()&lt;/code&gt;必须是线程安全的.&lt;/li&gt;
&lt;li&gt;被创建的所有View不能创建Handler,或者调用&lt;code&gt;Looper.myLooper()&lt;/code&gt;方法.&lt;/li&gt;
&lt;li&gt;不支持设置&lt;code&gt;LayoutInflater.Factory&lt;/code&gt;和&lt;code&gt;LayoutInflater.Factory2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不支持布局里有Fragment.&lt;br&gt;如果我们要异步inflate的布局不能支持异步, inflate的过程将会自动转化为在UI线程的解析.&lt;br&gt;作者文中附有Kotlin的例子.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Introduction-to-Automated-Android-Testing-Part-5&quot;&gt;&lt;a href=&quot;#Introduction-to-Automated-Android-Testing-Part-5&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Automated Android Testing - Part 5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/introduction-automated-android-testing-part-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Automated Android Testing - Part 5&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;系列文章的第五篇, 之前第四篇的时候写了Presenter, 定义了V和P的接口, 本篇接着写View接口的实现.&lt;/p&gt;
&lt;p&gt;这里Presenter和View关联作者写了两个attachView()和detachView()方法, 前者在Presenter构造之后调用, 后者在Activity的onDestroy()里调用. 这里同时会unregister RxJava的subscriptions, 避免了内存泄露的发生.&lt;/p&gt;
&lt;p&gt;作者在布局时用了&lt;code&gt;ConstraintLayout&lt;/code&gt;, 关于这个layout的使用她有另一个&lt;a href=&quot;https://riggaroo.co.za/constraintlayout-101-new-layout-builder-android-studio/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt;&lt;br&gt;另外作者还加了Toolbar上的SearchView, 到此, 作者的这个app就基本完成了.&lt;br&gt;作者的代码里还有一个Injection类, 用来提供retrofit的service, 即代码中UserRepo的获取, 在Presenter构造时传入.&lt;/p&gt;
&lt;p&gt;作者的代码: &lt;a href=&quot;https://github.com/riggaroo/GithubUsersSearchApp/tree/testing-tutorial-part5-complete&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GithubUsersSearchApp&lt;/a&gt;&lt;br&gt;预告下一篇将会加入UI测试.&lt;/p&gt;
&lt;h3 id=&quot;DiffUtil-is-a-must&quot;&gt;&lt;a href=&quot;#DiffUtil-is-a-must&quot; class=&quot;headerlink&quot; title=&quot;DiffUtil is a must!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@nullthemall/diffutil-is-a-must-797502bc1149#.lqfl9xikm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DiffUtil is a must!&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;support library 24.2.0推出了一个新的辅助类&lt;code&gt;DiffUtil&lt;/code&gt;, 它是用来解决什么问题的呢?&lt;br&gt;如果你的RecyclerView.Adapter第一次接收到了新的数据, 这很简单, 只需要将它们显示出来, 但如果已经有了数据, 新的数据又来了, 这时候怎么做才是最好的呢?&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/util/DiffUtil.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DiffUtil&lt;/a&gt;来了, 它就是专门为了解决RecyclerView的Adapter更新而设计的, 他可以计算出前后两个list的不同, 然后返回一组更新操作, 把第一个list变为第二个list.&lt;br&gt;&lt;code&gt;DiffUtil&lt;/code&gt;需要知道你的两个list的基本信息: 长度, 基本item的比较.&lt;br&gt;&lt;code&gt;DiffUtil.Callback&lt;/code&gt;是用来向&lt;code&gt;DiffUtil&lt;/code&gt;提供这些基本信息的, 它是一个抽象类, 你需要继承它, 然后覆写里面的几个方法. 它的构造传入了两个待比较的list, 覆写的方法主要是get它们的size, 比较它们的内容.&lt;br&gt;Callback里还有一个&lt;code&gt;getChangePayload()&lt;/code&gt;方法, 它不是抽象的, 这个方法在&lt;code&gt;areItemsTheSame()&lt;/code&gt; 返回&lt;code&gt;true&lt;/code&gt;, 但是&lt;code&gt;areContentsTheSame()&lt;/code&gt;返回&lt;code&gt;false&lt;/code&gt;的时候被调用.&lt;br&gt;这意味着我们的item还是之前的那个item,但是可能里面的字段变化了.&lt;br&gt;这个方法的返回值即为两个对应item的diff, 基本来说, 这个方法返回的是为什么我们认为list变化了.&lt;br&gt;文中的代码例子返回了一个Bundle, 把compare不相等的字段都放进去了, 用的是new item的值.&lt;/p&gt;
&lt;p&gt;一旦我们写好了这个Callback类, 剩下的事情就很简单了, 我们只需要在新数据到来的时候计算一下diff, 然后更新.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@ &lt;span class=&quot;function&quot;&gt;Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNewProducts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;Product&amp;gt; newProducts)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ProductListDiffCallback(mProducts, newProducts));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    diffResult.dispatchUpdatesTo(mProductAdapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然上面&lt;code&gt;getChangePayload()&lt;/code&gt;返回的对象还得我们自己利用起来, 它会被&lt;code&gt;DiffResult&lt;/code&gt;分发到Adapter.&lt;br&gt;用的是&lt;code&gt;notifyItemRangeChange(position, count, payload)&lt;/code&gt;方法, 传到了Adapter的&lt;code&gt;onBindViewHolder()&lt;/code&gt;方法, 我们判断payload不为空时, 从里面拿出diff做更新.&lt;/p&gt;
&lt;p&gt;文档里说&lt;code&gt;DiffUtil&lt;/code&gt;对很大的数据集可能比较费时, 所以建议把计算放在后台线程.&lt;/p&gt;
&lt;p&gt;作者还给出了一个RxJava的例子, 各种flatMap.&lt;/p&gt;
&lt;h2 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://facebook.design/handskit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Diverse Device Hands&lt;/a&gt;&lt;br&gt;Facebook的design资源, 很多拿着手机的手的照片.&lt;/p&gt;
&lt;h2 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h2&gt;&lt;h3 id=&quot;unipiazza-android-twostepslogin&quot;&gt;&lt;a href=&quot;#unipiazza-android-twostepslogin&quot; class=&quot;headerlink&quot; title=&quot;unipiazza-android-twostepslogin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/unipiazza/unipiazza-android-twostepslogin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;unipiazza-android-twostepslogin&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个实现两步登录的库, 比如Google web登录, Material Design.&lt;br&gt;要用它的布局, 然后设置一些属性, 还有UI交互事件的Listener.&lt;/p&gt;
&lt;h3 id=&quot;Om-Recorder&quot;&gt;&lt;a href=&quot;#Om-Recorder&quot; class=&quot;headerlink&quot; title=&quot;Om Recorder&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kailash09dabhi.github.io/OmRecorder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Om Recorder&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个简单的Pcm / Wav 录音机, API简单, 可以录制Pcm和Wav音频, 可以配置输出, 有暂停功能.&lt;/p&gt;
&lt;h3 id=&quot;tiger&quot;&gt;&lt;a href=&quot;#tiger&quot; class=&quot;headerlink&quot; title=&quot;tiger&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/google/tiger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tiger&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;又一个依赖注入库, 但是README里说这不算一个Google的官方产品, 官方的是&lt;a href=&quot;https://github.com/google/dagger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger&lt;/a&gt;和&lt;a href=&quot;https://github.com/google/guice&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guice&lt;/a&gt;.&lt;br&gt;这个tiger好像自称是目前最快的java依赖注入.&lt;/p&gt;
&lt;h2 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/08/taking-final-wrapper-off-of-nougat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Taking the final wrapper off of Android 7.0 Nougat&lt;/a&gt;&lt;br&gt;Android 7.0已经问世了, 从Nexus开始, 同时API 24的source code已经push到AOSP了.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-220&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-220&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #220&quot;&gt;&lt;/a&gt;Android Weekly Issue #220&lt;/h1&gt;&lt;p&gt;August 28th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-220&quot;&gt;Android Weekly Issue #220&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="AnimatedVectorDrawable" scheme="http://mengdd.github.io/tags/AnimatedVectorDrawable/"/>
    
      <category term="Bottom Sheet" scheme="http://mengdd.github.io/tags/Bottom-Sheet/"/>
    
      <category term="Gradle" scheme="http://mengdd.github.io/tags/Gradle/"/>
    
      <category term="RxJava" scheme="http://mengdd.github.io/tags/RxJava/"/>
    
      <category term="Docker" scheme="http://mengdd.github.io/tags/Docker/"/>
    
      <category term="Certificate" scheme="http://mengdd.github.io/tags/Certificate/"/>
    
      <category term="Retrofit" scheme="http://mengdd.github.io/tags/Retrofit/"/>
    
      <category term="MVP" scheme="http://mengdd.github.io/tags/MVP/"/>
    
      <category term="AsyncLayoutInflater" scheme="http://mengdd.github.io/tags/AsyncLayoutInflater/"/>
    
      <category term="DiffUtil" scheme="http://mengdd.github.io/tags/DiffUtil/"/>
    
      <category term="Recorder" scheme="http://mengdd.github.io/tags/Recorder/"/>
    
      <category term="tiger" scheme="http://mengdd.github.io/tags/tiger/"/>
    
  </entry>
  
  <entry>
    <title>commit(), commitNow()和commitAllowingStateLoss()</title>
    <link href="http://mengdd.github.io/Android/2016/08/31/commit-commitNow-and-commitAllowingStateLoss/"/>
    <id>http://mengdd.github.io/Android/2016/08/31/commit-commitNow-and-commitAllowingStateLoss/</id>
    <published>2016-08-31T09:44:35.000Z</published>
    <updated>2016-08-31T10:18:20.000Z</updated>
    
    <content type="html">&lt;p&gt;关于FragmentTransaction的各种提交方法: &lt;code&gt;commit()&lt;/code&gt;,&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;,&lt;code&gt;commitNow()&lt;/code&gt;和&lt;code&gt;commitNowAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;作者Bryan Herbst发了一个blog &lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The many flavors of commit()&lt;/a&gt;讨论这几个方法的特点和用途.&lt;br&gt;下文是中文摘要.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;FragmentTransaction的提交方法&quot;&gt;&lt;a href=&quot;#FragmentTransaction的提交方法&quot; class=&quot;headerlink&quot; title=&quot;FragmentTransaction的提交方法&quot;&gt;&lt;/a&gt;FragmentTransaction的提交方法&lt;/h1&gt;&lt;p&gt;support library的&lt;code&gt;FragmentTransaction&lt;/code&gt;现在提供了四种不同的方法来commit一个transaction:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commit%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commit()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitAllowingStateLoss%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitAllowingStateLoss()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitNow%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitNow()&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html#commitNowAllowingStateLoss%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;commitNowAllowingStateLoss()&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章分析了这四个方法的不同.&lt;/p&gt;
&lt;h2 id=&quot;commit-vs-commitAllowingStateLoss&quot;&gt;&lt;a href=&quot;#commit-vs-commitAllowingStateLoss&quot; class=&quot;headerlink&quot; title=&quot;commit() vs commitAllowingStateLoss()&quot;&gt;&lt;/a&gt;commit() vs commitAllowingStateLoss()&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;commit()&lt;/code&gt;提交有时候会遇到&lt;code&gt;IllegalStateException&lt;/code&gt;, 说你在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;之后提交, 这里有另一个文章很好地分析了这个问题:&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragment Transactions &amp;amp; Activity State Loss&lt;/a&gt;&lt;br&gt;&lt;code&gt;commit()&lt;/code&gt;和&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;在实现上唯一的不同就是当你调用&lt;code&gt;commit()&lt;/code&gt;的时候, FragmentManger会检查是否已经存储了它自己的状态, 如果已经存了, 就抛出&lt;code&gt;IllegalStateException&lt;/code&gt;.&lt;br&gt;那么如果你调用的是&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;, 并且是在&lt;code&gt;onSaveInstanceState()&lt;/code&gt;之后, 你可能会丢失掉什么状态呢?&lt;br&gt;答案是你&lt;strong&gt;可能&lt;/strong&gt;会丢掉FragmentManager的状态, 即save之后任何被添加或被移除的Fragments.&lt;br&gt;举例说明:&lt;br&gt;1.在Activity里显示一个FragmentA;&lt;br&gt;2.然后Activity被后台, &lt;code&gt;onStop()&lt;/code&gt;和&lt;code&gt;onSaveInstanceState()&lt;/code&gt;被调用;&lt;br&gt;3.在某个事件触发下, 你用FragmentB replace FragmentA , 使用的是 &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;这时候, 用户再返回应用, 可能会有两种情况发生:&lt;br&gt;1.如果系统杀死了你的activity, 你的activity将会重建, 使用了上述步骤2保存的状态, 所以A会显示, B不会显示;&lt;br&gt;2.如果系统没有杀死你的activity, 它会被提到前台, FragmentB就会显示出来, 到下次Activity stop的时候, 这个包含了B的状态就会被存下来.&lt;br&gt;(上述测试可以利用开发者选项中的”Don’t Keep Activities”选项).&lt;br&gt;那么你要选择哪一种呢? 这就取决于你提交的是什么, 还有你是否能接受丢失.&lt;/p&gt;
&lt;h2 id=&quot;commit-commitNow-和-executePendingTransactions&quot;&gt;&lt;a href=&quot;#commit-commitNow-和-executePendingTransactions&quot; class=&quot;headerlink&quot; title=&quot;commit(), commitNow() 和 executePendingTransactions()&quot;&gt;&lt;/a&gt;commit(), commitNow() 和 executePendingTransactions()&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;commit()&lt;/code&gt;的时候, 一旦调用, 这个commit并不是立即执行的, 它会被发送到主线程的任务队列当中去, 当主线程准备好执行它的时候执行.&lt;br&gt;&lt;code&gt;popBackStack()&lt;/code&gt;的工作也是这样, 发送到主线程任务队列中去. 也即说它们都是异步的.&lt;/p&gt;
&lt;p&gt;但是有时候你希望你的操作是立即执行的, 之前的开发者会在&lt;code&gt;commit()&lt;/code&gt;调用之后加上 &lt;code&gt;executePendingTransactions()&lt;/code&gt;来保证立即执行, 即变异步为同步.&lt;br&gt;support library从v24.0.0开始提供了 &lt;code&gt;commitNow()&lt;/code&gt;方法, 之前用&lt;code&gt;executePendingTransactions()&lt;/code&gt;会将所有pending在队列中还有你新提交的transactions都执行了, 而&lt;code&gt;commitNow()&lt;/code&gt;将只会执行你当前要提交的transaction. 所以&lt;code&gt;commitNow()&lt;/code&gt;避免你会不小心执行了那些你可能并不想执行的transactions.&lt;/p&gt;
&lt;p&gt;但是你不能对要加在back stack中的transaction使用&lt;code&gt;commitNow()&lt;/code&gt;, 即&lt;code&gt;addToBackStack()&lt;/code&gt;和&lt;code&gt;commitNow()&lt;/code&gt;不能同时使用.&lt;br&gt;为什么呢?&lt;br&gt;想想一下, 如果你有一个提交使用了&lt;code&gt;commit()&lt;/code&gt;, 紧接着又有另一个提交使用了&lt;code&gt;commitNow()&lt;/code&gt;, 两个都想加入back stack, 那back stack会变成什么样呢? 到底是哪个transaction在上, 哪个在下? 答案将是一种不确定的状态, 因为系统并没有提供任何保证来确保顺序, 所以系统决定干脆不支持这个操作.&lt;/p&gt;
&lt;p&gt;前面提过&lt;code&gt;popBackStack()&lt;/code&gt;是异步的, 所以它同样也有一个同步的兄弟&lt;code&gt;popBackStackImmediate()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以实际应用的时候怎么选择呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果你需要同步的操作, 并且你不需要加到back stack里, 使用&lt;code&gt;commitNow()&lt;/code&gt;.&lt;br&gt;support library在FragmentPagerAdapter里就使用了commitNow()来保证在更新结束的时候, 正确的页面被加上或移除.&lt;/li&gt;
&lt;li&gt;如果你操作很多transactions, 并且不需要同步, 或者你需要把transactions加在back stack里, 那就使用&lt;code&gt;commit()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果你希望在某一个指定的点, 确保所有的transactions都被执行, 那么使用&lt;code&gt;executePendingTransactions()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;这是Android Weekly #220的一篇文章, 我在做这期笔记的时候觉得这个写得很好, 所以决定单独拿出来说一说. 这期整体的笔记稍后推出, 敬请期待哇.&lt;br&gt;原文&lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The many flavors of commit()&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于FragmentTransaction的各种提交方法: &lt;code&gt;commit()&lt;/code&gt;,&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;,&lt;code&gt;commitNow()&lt;/code&gt;和&lt;code&gt;commitNowAllowingStateLoss()&lt;/code&gt;.&lt;br&gt;作者Bryan Herbst发了一个blog &lt;a href=&quot;https://medium.com/@bherbst/the-many-flavors-of-commit-186608a015b1#.uwl2v86cx&quot;&gt;The many flavors of commit()&lt;/a&gt;讨论这几个方法的特点和用途.&lt;br&gt;下文是中文摘要.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android 7.0 Nougat released</title>
    <link href="http://mengdd.github.io/Android/Android-News/2016/08/29/android-7-0-Nougat-released/"/>
    <id>http://mengdd.github.io/Android/Android-News/2016/08/29/android-7-0-Nougat-released/</id>
    <published>2016-08-29T10:14:26.000Z</published>
    <updated>2016-08-29T10:22:43.000Z</updated>
    
    <content type="html">&lt;p&gt;Android 7.0 Nougat 牛轧糖于本月发布了. 从官方blog里可以了解到这个版本的新特性.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Android 7.0 从2016年8月正式推出, 从Nexus设备开始发行.&lt;br&gt;据说此版本有250个主要的features, 其中值得高亮的几个是:&lt;/p&gt;
&lt;h3 id=&quot;更加个性化&quot;&gt;&lt;a href=&quot;#更加个性化&quot; class=&quot;headerlink&quot; title=&quot;更加个性化&quot;&gt;&lt;/a&gt;更加个性化&lt;/h3&gt;&lt;p&gt;扩展了emoji: 现在内置有超过1500个emoji, 其中72是新增的.&lt;br&gt;快速设置控制: 快速设置给予了对一些东西更方便的访问途径, 比如蓝牙, Wi-Fi, 手电筒等. 在Android Nougat中, 你现在可以控制这些按钮的位置, 按自己的需要来移动它们.&lt;br&gt;支持多地点: app可以根据你的地点设置来定制内容, 如果你讲多种语言, 那么可能应用里搜索引擎会用多种语言返回给你结果.&lt;/p&gt;
&lt;h3 id=&quot;更有效率&quot;&gt;&lt;a href=&quot;#更有效率&quot; class=&quot;headerlink&quot; title=&quot;更有效率&quot;&gt;&lt;/a&gt;更有效率&lt;/h3&gt;&lt;p&gt;不管你是在回复工作邮件或者跟朋友制定计划, Android Nougat让你的多任务变得更加容易.&lt;br&gt;Multi-window 多窗口: 可以同时显示两个应用窗口, 可拖拽调整窗口大小.&lt;br&gt;Direct Reply 直接回应: 可以直接回应通知, 不必打开app.&lt;br&gt;Quick Switch 快速转换: 双击overview button, 可以在你最近使用的两个app间切换.&lt;/p&gt;
&lt;h3 id=&quot;更加省电&quot;&gt;&lt;a href=&quot;#更加省电&quot; class=&quot;headerlink&quot; title=&quot;更加省电&quot;&gt;&lt;/a&gt;更加省电&lt;/h3&gt;&lt;p&gt;从Android Marshmallow开始, 加了Doze模式, 让电池更加智能地工作. 在Android Nougat中, doze模式又做了一些改进, 在你走路的时候, 把手机装在兜里, 也会进入省电模式.&lt;/p&gt;
&lt;h3 id=&quot;更沉浸的体验&quot;&gt;&lt;a href=&quot;#更沉浸的体验&quot; class=&quot;headerlink&quot; title=&quot;更沉浸的体验&quot;&gt;&lt;/a&gt;更沉浸的体验&lt;/h3&gt;&lt;p&gt;Android Nougat设计的时候也考虑了一些沉浸体验相关的东东, 支持VulkanTM(一个高级的3D渲染API)和Daydream(Google的mobile VR平台).&lt;/p&gt;
&lt;h3 id=&quot;更安全&quot;&gt;&lt;a href=&quot;#更安全&quot; class=&quot;headerlink&quot; title=&quot;更安全&quot;&gt;&lt;/a&gt;更安全&lt;/h3&gt;&lt;p&gt;Seamless Updates 无缝更新: 现在Nougat可以后台安装应用了.&lt;br&gt;File-based encryption 文件加密: 设备上各个用户的文件得到了分离和保护.&lt;br&gt;Direct Boot 直接启动: 手机启动更快了, 当你重启设备时, 应用即便是在你没有解锁时也跑得更安全了.&lt;/p&gt;
&lt;h3 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;&lt;p&gt;更多信息请查看:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/about/versions/nougat/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.0 Nougat&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://android.googleblog.com/2016/08/android-70-nougat-more-powerful-os-made.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.0 Nougat: a more powerful OS, made for you&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://android-developers.blogspot.com.au/2016/08/taking-final-wrapper-off-of-nougat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Taking the final wrapper off of Android 7.0 Nougat&lt;/a&gt; 揭开Android 7.0 (牛轧糖) 的最后一层面纱.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android 7.0 Nougat 牛轧糖于本月发布了. 从官方blog里可以了解到这个版本的新特性.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android News" scheme="http://mengdd.github.io/categories/Android/Android-News/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android News" scheme="http://mengdd.github.io/tags/Android-News/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 219</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/08/24/android-weekly-notes-issue-219/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/08/24/android-weekly-notes-issue-219/</id>
    <published>2016-08-24T09:32:23.000Z</published>
    <updated>2016-09-16T02:47:22.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-219&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-219&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #219&quot;&gt;&lt;/a&gt;Android Weekly Issue #219&lt;/h1&gt;&lt;p&gt;August 21st, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-219&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly Issue #219&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h2&gt;&lt;h3 id=&quot;Android-Bottom-Sheet&quot;&gt;&lt;a href=&quot;#Android-Bottom-Sheet&quot; class=&quot;headerlink&quot; title=&quot;Android: Bottom Sheet&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@emrullahluleci/android-bottom-sheet-30284293f066#.i3i4ggv13&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android: Bottom Sheet&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Bottom Sheet是一个从底部滑上来的组件, 关于这个&lt;a href=&quot;https://material.google.com/components/bottom-sheets.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Material Design&lt;/a&gt;有相关的guidelines.&lt;br&gt;这篇文章主要讲了基本使用, 比较简单.&lt;/p&gt;
&lt;p&gt;这里私心推荐一下我自己的repo和另一个我觉得很好的教程:&lt;br&gt;&lt;a href=&quot;https://github.com/mengdd/AndroidDesignWidgetsSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDesignWidgetsSample&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout#bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath-handling-scrolls-with-CoordinatorLayout&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;DI-101-Part-1&quot;&gt;&lt;a href=&quot;#DI-101-Part-1&quot; class=&quot;headerlink&quot; title=&quot;DI 101 - Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/di-101/di-101-part-1-81896c2858a0#.sdgvcu8v3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DI 101 - Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Android平台的依赖注入.&lt;br&gt;文章开始讲了下依赖注入的概念, 当前在Android上的依赖注入最著名的是&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2&lt;/a&gt;.&lt;br&gt;然后文章讲了如何set up dagger 2, 举了个例子, 写Module, Component, 然后使用.&lt;/p&gt;
&lt;p&gt;这里再私心推荐一下我自己的一篇教程:&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5613889.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Dagger2 in Android&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android-Security-Welcome-to-Shell-Permissions&quot;&gt;&lt;a href=&quot;#Android-Security-Welcome-to-Shell-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Android Security: Welcome to Shell (Permissions)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://doridori.github.io/Android-Security-welcome-to-shell/#sthash.2BSXwRAF.dpbs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Security: Welcome to Shell (Permissions)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者在Reddit上看到了这么一句话:&lt;br&gt;&lt;code&gt;ADB is a shell that you get on a PC with the same permissions as if you were to run a shell/terminal app on the phone itself.&lt;/code&gt;&lt;br&gt;于是就写了这篇文章来讨论一下shell命令的权限问题, 关于系统底层的权限如何工作.&lt;br&gt;作者在里面提到了这本书&lt;a href=&quot;https://www.amazon.co.uk/Android-Security-Internals-Depth-Architecture/dp/1593275811&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Security Internals: An In-Depth Guide to Android’s Security Architecture&lt;/a&gt;.&lt;br&gt;关于Android安全方面的研究, 作者还建了一个repo: &lt;a href=&quot;https://github.com/doridori/Android-Security-Reference&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Security-Reference&lt;/a&gt;, 里面是关于安全问题的各种notes, still WIP.&lt;/p&gt;
&lt;h3 id=&quot;Lessons-from-converting-an-app-to-100-Kotlin&quot;&gt;&lt;a href=&quot;#Lessons-from-converting-an-app-to-100-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Lessons from converting an app to 100% Kotlin&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/keepsafe-engineering/lessons-from-converting-an-app-to-100-kotlin-68984a05dcb6#.mrqsqq9ap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lessons from converting an app to 100% Kotlin&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这是关于Kotlin的系列文章之part 1, part 2的文章在这里&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-the-good-the-bad-and-the-ugly-bf5f09b87e6f#.eyvm3gp5t&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin: The Good, The Bad, and The Ugly&lt;/a&gt;, 讨论Kotlin的语言设计.&lt;br&gt;本篇文章讲什么呢?&lt;br&gt;作者是一个应用的leader engineer, 学习了几天Kotlin之后, 觉得可以解决Java存在的一些痛点, 于是把应用改为用Kotlin了, 这篇文章是在此过程中的一些想法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法数问题&lt;/strong&gt;: 因为dex对方法数有要求, 不能超过64k, 见这里:&lt;a href=&quot;https://developer.android.com/studio/build/multidex.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multidex&lt;/a&gt;, 作者用了这个工具来统计方法数&lt;a href=&quot;https://github.com/KeepSafe/dexcount-gradle-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dexcount-gradle-plugin&lt;/a&gt;. 最后证明迁移到Kotlin之后, 代码行数减少了30%, 方法数减少了10%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Retrolambda&lt;/strong&gt;: 本来Retrolamda会生成匿名类, 并加上一些方法. Kotlin有内置的方法(apply), lamda可以直接传入, 不用生成匿名类, 不用添加额外的方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guava&lt;/strong&gt;: Guava的功能已经被Kotlin的标准库覆盖, 作者举例了Guava中的&lt;code&gt;ComparisonChains&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, lazy fields和&lt;code&gt;Preconditions&lt;/code&gt;等, 均有对应的Kotlin方法.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ButterKnife&lt;/strong&gt;: ButterKnife仍然可以使用, 但是&lt;a href=&quot;https://kotlinlang.org/docs/tutorials/android-plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin Android Extensions&lt;/a&gt;提供了更加自然的方式来访问绑定的views. 还有其他的方案比如&lt;a href=&quot;https://github.com/JakeWharton/kotterknife&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotterknife&lt;/a&gt;和&lt;a href=&quot;https://github.com/Kotlin/anko&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anko&lt;/a&gt;, 但是这俩都各自有些缺点, 不如Kotlin Android Extensions好用.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RxJava&lt;/strong&gt;: RxJava仍然是很好的, 但是由于对集合并没有函数式的方法, 所以有时候会用Kotlin替代一下.&lt;/p&gt;
&lt;p&gt;Kotlin的一个优势就是它和Java可以互相调用, 所以可以逐步改动.&lt;br&gt;Intellij有自动把Java转化为Kotlin的功能, 但是有时候会有错.&lt;/p&gt;
&lt;p&gt;作者推荐了学习Kotlin的资源:&lt;a href=&quot;http://kotlinlang.org/docs/reference/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reference&lt;/a&gt;.&lt;br&gt;最后鼓励大家使用Kotlin, 因为它现在已经足够成熟了.&lt;/p&gt;
&lt;h3 id=&quot;Rewriting-Android-Priority-JobQueue-Lessons-Learned&quot;&gt;&lt;a href=&quot;#Rewriting-Android-Priority-JobQueue-Lessons-Learned&quot; class=&quot;headerlink&quot; title=&quot;Rewriting Android Priority JobQueue - Lessons Learned&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.birbit.com/rewriting-android-priority-jobqueue-lessons-learned/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rewriting Android Priority JobQueue - Lessons Learned&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者有一个repo: &lt;a href=&quot;https://github.com/yigit/android-priority-jobqueue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-priority-jobqueue&lt;/a&gt;, 是为Android写的任务队列管理framework, 用于调度管理后台任务.&lt;br&gt;后来Android自己也加了这个类&lt;a href=&quot;https://developer.android.com/reference/android/app/job/JobScheduler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JobScheduler&lt;/a&gt;.&lt;br&gt;最近作者重写了这个库, 改善了稳定性并加了new features, 发了V2版, 然后写个文章分享一下心得:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要通过share memory来通信, 应该通过通信来share memory.&lt;br&gt;以前是多个线程访问加锁的共享资源, 线程里的一些字段标记为volatile. 新版JobManager改为单线程, 只有它可以访问共享资源, 其他线程都和JobManager通信. 这里有个文章在说这种方法&lt;a href=&quot;https://blog.golang.org/share-memory-by-communicating&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Share Memory By Communicating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果你的代码需要做时钟相关的事情, 抽象出来.&lt;br&gt;这主要是为测试和CI考虑.&lt;/li&gt;
&lt;li&gt;加新API之前多想想.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Trello-Android-Schema-Upgrades&quot;&gt;&lt;a href=&quot;#Trello-Android-Schema-Upgrades&quot; class=&quot;headerlink&quot; title=&quot;Trello Android Schema Upgrades&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://tech.trello.com/android-schemas/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trello Android Schema Upgrades&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Trello Android之前的数据库升级方式相当简单粗暴, 他们drop整个数据库, 重新创建, 然后用server上的数据填进来.&lt;br&gt;这样在以前是没有问题的, 因为Trello的每一个操作都会立即发送给server, 不支持离线操作, 所以server上的数据永远是最新的.&lt;br&gt;但是最近他们想支持离线工作了, 这就说明不能简单地删数据库了, 因为其中可能含有没有发给服务器的离线数据.&lt;br&gt;他们要升级数据库, 这篇文章讲了他们的升级策略和他们为数据库升级而写的测试.&lt;/p&gt;
&lt;h3 id=&quot;Animating-the-text-lt-gt-dots-translation-on-password-field&quot;&gt;&lt;a href=&quot;#Animating-the-text-lt-gt-dots-translation-on-password-field&quot; class=&quot;headerlink&quot; title=&quot;Animating the text &amp;lt;-&amp;gt; dots translation on password field&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://twitter.com/crafty/status/766967057921417216?s=03&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Animating the text &amp;lt;-&amp;gt; dots translation on password field&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这个链接点进去是Twitter.&lt;br&gt;在新的support库升级(August 2016, v24.2.0)&lt;a href=&quot;https://developer.android.com/topic/libraries/support-library/revisions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support Library Revision History&lt;/a&gt;中, TextInputLayout增加了密码可见的toggle. Nick Butcher决定给按钮和文字的改变都加上动画.&lt;br&gt;这是他的repo: &lt;a href=&quot;https://github.com/nickbutcher/plaid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;plaid&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Introducing-Android-code-style-guidelines-at-Buffer&quot;&gt;&lt;a href=&quot;#Introducing-Android-code-style-guidelines-at-Buffer&quot; class=&quot;headerlink&quot; title=&quot;Introducing Android code style guidelines at Buffer&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://overflow.buffer.com/2016/08/18/introducing-android-code-style-guidelines-buffer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing Android code style guidelines at Buffer&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;团队工作中, 有统一的代码风格很重要, 代码风格主要是代码的可读性和一致性相关问题.&lt;br&gt;作者他们为自己的Android App归档了新的code style: &lt;a href=&quot;https://github.com/bufferapp/android-guidelines/blob/master/project_style_guidelines.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project style guidelines&lt;/a&gt;, 当然啦, 文档是在使用中不断成长的.&lt;br&gt;做这种事主要目标是以下几个点: 一致性, 可读性, 可维护性, 易于浏览查询, 有意义.&lt;br&gt;文档写得很详细, 涉及到各个方面, 值得一看.&lt;/p&gt;
&lt;h3 id=&quot;Building-UserScope-with-Dagger-2&quot;&gt;&lt;a href=&quot;#Building-UserScope-with-Dagger-2&quot; class=&quot;headerlink&quot; title=&quot;Building UserScope with Dagger 2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://frogermcs.github.io/building-userscope-with-dagger2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building UserScope with Dagger 2&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;关于Dagger 2里面自定义scope, 作者之前有一篇文章&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dependency injection with Dagger 2 - Custom scopes&lt;/a&gt;, 本篇文章继续了这个话题.&lt;br&gt;所谓scope呢, 就是限制了单例的生存周期, 有些单例可能在整个应用生命周期都存在, 另一些单例可能只需要存在一定的时间. Dagger 2默认只提供了一个scope @Singleton, 所以我们要根据需要自定义自己的scope.&lt;br&gt;作者的例子中定义了@UserScope, 以实例说明了他的实现, 还讨论了UserScope的状态恢复问题.&lt;br&gt;例子代码: &lt;a href=&quot;https://github.com/frogermcs/Dagger2Recipes-UserScope&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2Recipes-UserScope&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Using-Java-8-Lambda-expressions-in-Android&quot;&gt;&lt;a href=&quot;#Using-Java-8-Lambda-expressions-in-Android&quot; class=&quot;headerlink&quot; title=&quot;Using Java 8 Lambda expressions in Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mayojava.github.io/android/java/using-java8-lambda-expressions-in-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Java 8 Lambda expressions in Android&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Java 8的一个重要特性是加入了Lambda表达式.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lambda表达式的语法&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;括号里是用逗号分隔的参数列表, 类型可以省略, 如果只有一个参数, 连括号也可以省略.&lt;br&gt;举例:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TextView textView = (TextView) findViewById(R.id.text_view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;textView.setOnLongClickListener(v -&amp;gt; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Long Click&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;箭头符号 &lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;箭头后面的body是单个表达式或者一个语句块.&lt;br&gt;如果是单个表达式, java runtime会返回它的值;&lt;br&gt;如果是语句块, 用大括号&lt;code&gt;{}&lt;/code&gt;包起来.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在Android中使用Lambda表达式&lt;/strong&gt;:&lt;br&gt;需要改build.gradle:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jackOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      enabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  compileOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sourceCompatibility JavaVersion.VERSION_1_8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    targetCompatibility JavaVersion.VERSION_1_8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有另一种方式是使用RetroLambda plugin: &lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-retrolambda&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Developing-for-Android-Wear-A-Noob’s-perspective&quot;&gt;&lt;a href=&quot;#Developing-for-Android-Wear-A-Noob’s-perspective&quot; class=&quot;headerlink&quot; title=&quot;Developing for Android Wear - A Noob’s perspective&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/@moyinoluwa/developing-for-android-wear-a-noob-s-perspective-de47c4686ffb#.xjawtq69e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Developing for Android Wear - A Noob’s perspective&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这篇文章讲了作者作为一个新手, 第一次开发Wear应用的时候遇到的种种问题.&lt;br&gt;比如, 手表和手机是需要配对的, 在手机上安装Google的这个&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.android.wearable.app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;软件&lt;/a&gt;, 才能和手表配对, 配对了之后, 给手机安装release版apk的时候就会自动给手表安装应用.&lt;br&gt;也可以在Android Studio中选择wear来单跑Wear应用安装到手表, 但是只有配对了才能和手机有通信.&lt;br&gt;使用Wear的模拟器, 还需要运行这个命令adb -d forward tcp:5601 tcp:5601来和连接到电脑的手机连接.&lt;br&gt;还有在传输Assets时, 作者按照官方文档的例子, 却遇到了一些方法不能在UI线程调用的问题, 后来也解决了.&lt;/p&gt;
&lt;h3 id=&quot;Remote-config-with-Firebase&quot;&gt;&lt;a href=&quot;#Remote-config-with-Firebase&quot; class=&quot;headerlink&quot; title=&quot;Remote config with Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://segunfamisa.com/posts/firebase-remote-config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote config with Firebase&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;作者讲了如何实现Firebase的Remote config.&lt;br&gt;Remote config可以使我们控制应用的更新, 而不用重新发布一个版本.&lt;br&gt;为什么要使用远程配置呢? 主要的原因是测试新的功能, 然后可以根据用户的反馈快速地做出响应, 把更好的行为呈现给用户. 简单来说就是做A/B Test.&lt;br&gt;Firebase的remote config很强大, 指定参数后可以指定应用条件, 包括国家, 系统, 应用版本, 随机等等.&lt;/p&gt;
&lt;h2 id=&quot;DESIGN&quot;&gt;&lt;a href=&quot;#DESIGN&quot; class=&quot;headerlink&quot; title=&quot;DESIGN&quot;&gt;&lt;/a&gt;DESIGN&lt;/h2&gt;&lt;h3 id=&quot;Updates-in-Material-design-guidelines&quot;&gt;&lt;a href=&quot;#Updates-in-Material-design-guidelines&quot; class=&quot;headerlink&quot; title=&quot;Updates in Material design guidelines&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://material.google.com/material-design/whats-new.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Updates in Material design guidelines&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;2016年8月新发布的Material design包括了以下更新:&lt;br&gt;Notifications, Widgets, 确认操作和操作后的提示.&lt;br&gt;比较重要的更新是:&lt;br&gt;Navigation现在包括了如何使用Up和Back button.&lt;br&gt;还有使用全屏模式的三种模式:Lean back, Immersive, Lights Out以及它们相应的交互行为.&lt;/p&gt;
&lt;h2 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h2&gt;&lt;h3 id=&quot;Auto-value-firebase&quot;&gt;&lt;a href=&quot;#Auto-value-firebase&quot; class=&quot;headerlink&quot; title=&quot;Auto-value-firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/mattlogan/auto-value-firebase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Auto-value-firebase&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;AutoValue的扩展, 用来创建Firebase的数据库对象.&lt;br&gt;&lt;a href=&quot;https://github.com/google/auto/tree/master/value&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AutoValue&lt;/a&gt;是google的一个库. 用来创建interchangeable的对象, 即如果两个对象的所有fields是相等的, 我们认为这两个对象相等.&lt;/p&gt;
&lt;h3 id=&quot;Icicle&quot;&gt;&lt;a href=&quot;#Icicle&quot; class=&quot;headerlink&quot; title=&quot;Icicle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/segunfamisa/Icicle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icicle&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;基于注解的一个工具, 用来保存和恢复实例的状态.&lt;br&gt;感觉跟&lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icepick&lt;/a&gt;一样.&lt;/p&gt;
&lt;h3 id=&quot;ReadMoreTextView&quot;&gt;&lt;a href=&quot;#ReadMoreTextView&quot; class=&quot;headerlink&quot; title=&quot;ReadMoreTextView&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/borjabravo10/ReadMoreTextView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReadMoreTextView&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个自定义的TextView, 可以指定按照文字长度或者行数截取显示, 带展开和关闭按钮操作.&lt;/p&gt;
&lt;h3 id=&quot;Android-priority-jobqueue&quot;&gt;&lt;a href=&quot;#Android-priority-jobqueue&quot; class=&quot;headerlink&quot; title=&quot;Android-priority-jobqueue&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/yigit/android-priority-jobqueue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-priority-jobqueue&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个为Android写的后台任务队列管理程序.&lt;/p&gt;
&lt;h2 id=&quot;NEWS&quot;&gt;&lt;a href=&quot;#NEWS&quot; class=&quot;headerlink&quot; title=&quot;NEWS&quot;&gt;&lt;/a&gt;NEWS&lt;/h2&gt;&lt;h3 id=&quot;Support-Library-Revision-History&quot;&gt;&lt;a href=&quot;#Support-Library-Revision-History&quot; class=&quot;headerlink&quot; title=&quot;Support Library Revision History&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.android.com/topic/libraries/support-library/revisions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Support Library Revision History&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Android Support Library 24.2.0发布啦(August 2016).&lt;/p&gt;
&lt;p&gt;v4被分成了很多小模块.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API更新&lt;/strong&gt;:&lt;br&gt;Custom Tabs可以控制instant app是否打开.&lt;br&gt;TextInputLayout加了密码可见的toggle.&lt;br&gt;Transition兼容到API 14及其以上.&lt;br&gt;Custom Tabs support library支持给secondary toolbar用RemoteViews.&lt;br&gt;AppCompatResources加了可以通过getDrawable()方法, 以resource id加载&lt;vector&gt;和&lt;animated-vector&gt;的功能.&lt;br&gt;CoordinatorLayout现在支持定义inset views, 然后指定其他Views给其让路. 就是当Snackbar出现的时候, FloatingActionButton躲开的那种行为, 只不过现在给任意的child view都可以设置了.&lt;br&gt;DiffUtil类可以计算出两个集合的不同, 然后得出一个更新操作的list, 可以交给RecyclerView.Adapter.&lt;br&gt;新增了RecyclerView.OnFlingListener. 有SnapHelper和LinearSnapHelper可供选择使用.&lt;/animated-vector&gt;&lt;/vector&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;行为改变&lt;/strong&gt;:&lt;br&gt;day/night模式改变的时候, activity将会自动重启.&lt;br&gt;如果status bar是透明的, Snacker现在会在navigation bar后面绘制.&lt;/p&gt;
&lt;p&gt;其他还有一些deprecations和bug fixes.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-219&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-219&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #219&quot;&gt;&lt;/a&gt;Android Weekly Issue #219&lt;/h1&gt;&lt;p&gt;August 21st, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-219&quot;&gt;Android Weekly Issue #219&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Bottom Sheet" scheme="http://mengdd.github.io/tags/Bottom-Sheet/"/>
    
      <category term="Security" scheme="http://mengdd.github.io/tags/Security/"/>
    
      <category term="Kotlin" scheme="http://mengdd.github.io/tags/Kotlin/"/>
    
      <category term="JobScheduler" scheme="http://mengdd.github.io/tags/JobScheduler/"/>
    
      <category term="Trello" scheme="http://mengdd.github.io/tags/Trello/"/>
    
      <category term="TextInputLayout" scheme="http://mengdd.github.io/tags/TextInputLayout/"/>
    
      <category term="Code Style" scheme="http://mengdd.github.io/tags/Code-Style/"/>
    
      <category term="Java 8" scheme="http://mengdd.github.io/tags/Java-8/"/>
    
      <category term="Lambda" scheme="http://mengdd.github.io/tags/Lambda/"/>
    
      <category term="Firebase" scheme="http://mengdd.github.io/tags/Firebase/"/>
    
      <category term="AutoValue" scheme="http://mengdd.github.io/tags/AutoValue/"/>
    
  </entry>
  
  <entry>
    <title>Android Weekly Notes Issue 218</title>
    <link href="http://mengdd.github.io/Android/Android-Weekly/2016/08/18/android-weekly-notes-issue-218/"/>
    <id>http://mengdd.github.io/Android/Android-Weekly/2016/08/18/android-weekly-notes-issue-218/</id>
    <published>2016-08-18T05:20:56.000Z</published>
    <updated>2016-09-16T02:42:35.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Weekly-Issue-218&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-218&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #218&quot;&gt;&lt;/a&gt;Android Weekly Issue #218&lt;/h1&gt;&lt;p&gt;August 14th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://androidweekly.net/issues/issue-218&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ARTICLES-amp-TUTORIALS&quot;&gt;&lt;a href=&quot;#ARTICLES-amp-TUTORIALS&quot; class=&quot;headerlink&quot; title=&quot;ARTICLES &amp;amp; TUTORIALS&quot;&gt;&lt;/a&gt;ARTICLES &amp;amp; TUTORIALS&lt;/h2&gt;&lt;h3 id=&quot;PathMorphing-with-AnimatedVectorDrawables&quot;&gt;&lt;a href=&quot;#PathMorphing-with-AnimatedVectorDrawables&quot; class=&quot;headerlink&quot; title=&quot;PathMorphing with AnimatedVectorDrawables&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://lewismcgeary.github.io/posts/animated-vector-drawable-pathMorphing/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PathMorphing with AnimatedVectorDrawables&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Android 5.0 推出了&lt;a href=&quot;https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VectorDrawable&lt;/a&gt;, 矢量图为处理多种屏幕尺寸的带来了很多好处. 这篇文章先介绍了VectorDrawable的使用, 然后主要讲如何实时操纵图像的改变, 用&lt;a href=&quot;https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatedVectorDrawable&lt;/a&gt;实现一个图像变形的效果.&lt;br&gt;文中的例子是Android和Apple的log在互相变化.&lt;br&gt;&lt;a href=&quot;https://github.com/lewismcgeary/AndroidtoAppleVectorLogo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source code available&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android-UI-Instrumentation-test-with-Espresso&quot;&gt;&lt;a href=&quot;#Android-UI-Instrumentation-test-with-Espresso&quot; class=&quot;headerlink&quot; title=&quot;Android UI Instrumentation test with Espresso&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mayojava.github.io/android/android-ui-instrumentation-test-with-espresso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android UI Instrumentation test with Espresso&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;用Espresso写UI功能测试, 通常是: 定位UI元素, 然后与其交互, 检查UI元素的状态.&lt;br&gt;三种主要的组件是: ViewMatchers, ViewActions 和ViewAssertions.&lt;br&gt;一个简短的例子:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onView(withId(R.id.my_view))            &lt;span class=&quot;comment&quot;&gt;// withId(R.id.my_view) - ViewMatcher&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .perform(click())                  &lt;span class=&quot;comment&quot;&gt;// click() - ViewAction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .check(matches(isDisplayed()));   &lt;span class=&quot;comment&quot;&gt;//matches(isDisplayed()) - ViewAssertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了测试不受animation的影响, 有时候可能需要把设备上的Developer Options里的下面几个animation全关掉:&lt;br&gt;Window animation scale&lt;br&gt;Transition animation scale&lt;br&gt;Animator duration scale&lt;br&gt;然后这个文章里有具体的例子介绍如何写并且运行测试, 还附有相关源码.&lt;/p&gt;
&lt;h3 id=&quot;How-to-Build-an-Android-App-for-Fire-TV-Part-1&quot;&gt;&lt;a href=&quot;#How-to-Build-an-Android-App-for-Fire-TV-Part-1&quot; class=&quot;headerlink&quot; title=&quot;How to Build an Android App for Fire TV - Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/amazon-appstore/developing-for-the-living-room-how-to-build-an-android-app-for-fire-tv-part-1-6ae108106fd2#.n39tl15pa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Build an Android App for Fire TV - Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;创建在亚马逊的Fire TV上跑的Android应用.&lt;br&gt;文后可以点进part 2.&lt;/p&gt;
&lt;h3 id=&quot;Android-Wear-Development-for-beginners&quot;&gt;&lt;a href=&quot;#Android-Wear-Development-for-beginners&quot; class=&quot;headerlink&quot; title=&quot;Android Wear Development for beginners&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/android-news/android-wear-development-for-beginners-82c2b06ff13a#.15v0ar2g3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Wear Development for beginners&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Complication是指手表上显示的除了小时和分钟之外的东西, 比如, 一个电池指示标志.&lt;br&gt;使用了Complication API之后, 用户就可以自己选一个地方, 然后从应用的列表中选一个东东来显示.&lt;br&gt;Wear应用是嵌入到一个主应用里面的, 当google play上主应用的apk被安装到手机上的时候, Wearable应用会自动安装在配对的设备上.&lt;br&gt;这篇文章详细介绍了如何创建一个Wear应用, 代码在&lt;a href=&quot;https://github.com/moyheen/radar-watch-face&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档: &lt;a href=&quot;https://developer.android.com/wear/preview/features/complications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Watch Face Complications&lt;/a&gt;&lt;br&gt;官方sample: &lt;a href=&quot;https://github.com/googlesamples/android-WatchFace&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-WatchFace&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Router-—-Everything-in-its-Right-Place&quot;&gt;&lt;a href=&quot;#Router-—-Everything-in-its-Right-Place&quot; class=&quot;headerlink&quot; title=&quot;Router — Everything in its Right Place&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/stories-from-eyeem/router-everything-in-its-right-place-4ca437871052#.cvou4493z&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Router — Everything in its Right Place&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;之前有一篇文章介绍了用装饰者模式来构建高度模块化的Android应用: &lt;a href=&quot;https://medium.com/stories-from-eyeem/creating-highly-modular-android-apps-933271fbdb7d#.4gtrccg9n&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Creating Highly Modular Android Apps&lt;/a&gt;&lt;br&gt;那篇文章里也有一个例子&lt;a href=&quot;https://github.com/eyeem/decorator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Decorator&lt;/a&gt;.&lt;br&gt;这篇文章讲同样采用装饰者思想的一个库: &lt;a href=&quot;https://github.com/eyeem/router&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Router&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Router首先基于一个将URL映射到程序界面的库: &lt;a href=&quot;https://github.com/clayallsopp/routable-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;routable-android&lt;/a&gt;&lt;br&gt;Router在此基础上做出了一些扩展和改进, 可以用一个map文件(YAML/JSON/XML)来定义基本的构架.&lt;br&gt;输入是URL(可以带参数), 根据map进行解析, 然后传到plugins, 然后每个plugin创造一部分的输出, 当左右plugins的工作结束后, 输出就可用了(输出是由多个plugins组装而成的).&lt;br&gt;文末附有&lt;a href=&quot;https://github.com/eyeem/router/tree/master/app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sample&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Boosting-app-performance-with-reflectionless-de-serialization&quot;&gt;&lt;a href=&quot;#Boosting-app-performance-with-reflectionless-de-serialization&quot; class=&quot;headerlink&quot; title=&quot;Boosting app performance with reflectionless (de)serialization&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://makingvimeo.com/post/148808044404/boosting-app-performance-with-reflectionless&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Boosting app performance with reflectionless (de)serialization&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这篇文章研究了在解析JSON响应的时候如何提高效率.&lt;br&gt;作者他们的应用Vimeo Android用了Retrofit来做网络请求, 用Gson来反序列化, 不好的一点就是有点慢, 因为Gson用反射来解析JSON. 为了改进,他们想要去除反射.&lt;br&gt;他们创建了自己的Gson TypeAdapters, 并且利用程序中各个不同大小的model来测量对比了了反序列化的时间.&lt;br&gt;他们的实验测试了不同的机器对于不同大小model的处理, 在多数情况下, 不用反射会提高性能, 但是也有例外, 在解析很大的model时, 在高性能的机器上, 反而是使用反射的情况比较快.&lt;br&gt;他们的库: &lt;a href=&quot;https://github.com/vimeo/stag-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stag-java&lt;/a&gt;&lt;br&gt;STAG: Speedy Type Adapter Generation.&lt;/p&gt;
&lt;h3 id=&quot;Introduction-to-Automated-Android-Testing-Part-4&quot;&gt;&lt;a href=&quot;#Introduction-to-Automated-Android-Testing-Part-4&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Automated Android Testing - Part 4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/introduction-android-testing-part-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Automated Android Testing - Part 4&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;讲如何写测试的系列文章, 有一个案例sample: &lt;a href=&quot;https://github.com/riggaroo/GithubUsersSearchApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GithubUsersSearchApp&lt;/a&gt;.&lt;br&gt;举例了一个MVP的真实例子, 然后给P写单元测试.&lt;br&gt;Presenter里有一个CompositeSubscription, 用来管理RxJava的subscriptions, detach的时候会注销所有的订阅, 防止了内存泄露和可能存在危险的view操作.&lt;br&gt;还创建了一个Contract接口, 把View和Presenter的接口定义写在里面.&lt;br&gt;这里面还有很机智的一点是把RxJava要用到的Scheduler也从presenter的构造函数传入, 这样在测试的时候就可以使用&lt;code&gt;Schedulers.immediate()&lt;/code&gt;, 而在View里面我们就按实际情况使用其他.&lt;/p&gt;
&lt;h3 id=&quot;Introduction-to-Android-Testing-Part-3&quot;&gt;&lt;a href=&quot;#Introduction-to-Android-Testing-Part-3&quot; class=&quot;headerlink&quot; title=&quot;Introduction to Android Testing - Part 3&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://riggaroo.co.za/introduction-android-testing-part3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to Android Testing - Part 3&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这应该是跟上面那条一个系列文章的第三篇.&lt;br&gt;介绍了如何用Retrofit和RxJava请求Github API然后解析到models.&lt;br&gt;后面是写单元测试, 步骤很清楚, given, when, then.&lt;br&gt;可以从中学习一下怎么给这种Retrofit + RxJava的程序写单元测试.&lt;/p&gt;
&lt;h3 id=&quot;Git-as-a-secure-private-Maven-repository&quot;&gt;&lt;a href=&quot;#Git-as-a-secure-private-Maven-repository&quot; class=&quot;headerlink&quot; title=&quot;Git as a secure private Maven repository&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://jeroenmols.com/blog/2016/02/05/wagongit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git as a secure private Maven repository&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bitbucket&lt;/a&gt; is a web-based hosting service for projects using Git.&lt;br&gt;讲了如何使用BitBucket或者Github作为一个private的Maven repository.&lt;br&gt;例子: &lt;a href=&quot;https://github.com/JeroenMols/WagonGitExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WagonGitExample&lt;/a&gt;&lt;br&gt;Gradle 脚本: &lt;a href=&quot;https://github.com/JeroenMols/GitAsMaven&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitAsMaven&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Crash-reporting-in-Firebase&quot;&gt;&lt;a href=&quot;#Crash-reporting-in-Firebase&quot; class=&quot;headerlink&quot; title=&quot;Crash reporting in Firebase&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://segunfamisa.com/posts/firebase-crash-reporting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Crash reporting in Firebase&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;比较简单的一个文章, 如何set up Firebase的crash reporting.&lt;br&gt;其实Firebase Crash Reporting一旦构建好之后, 不需要加java代码, 所有uncaught的异常都是自动报告的.&lt;br&gt;&lt;a href=&quot;https://firebase.google.com/docs/crash/android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firebase Report Crashes&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Isometric-AnimatedVectorDrawable-–-Part-1&quot;&gt;&lt;a href=&quot;#Isometric-AnimatedVectorDrawable-–-Part-1&quot; class=&quot;headerlink&quot; title=&quot;Isometric AnimatedVectorDrawable – Part 1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.stylingandroid.com/isometric-animatedvectordrawable-part-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Isometric AnimatedVectorDrawable – Part 1&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;神奇的&lt;a href=&quot;https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatedVectorDrawable&lt;/a&gt;, 这篇文章讲了用它来实现栅格地形图, 游戏里可以升降的草地的类似的东东. (看文章里的图吧, 我也形容不好.)&lt;br&gt;遗憾的是pathData animation当前在VectorDrawableCompat library暂不支持, 所以文中所讲的技术只能在api 21及其之上使用.&lt;br&gt;文中的例子有9个方块, 4个三角形, 把SVG作为矢量图VectorDrawable导入Android Studio, 然后给每一个path起名字.&lt;br&gt;本文只是part 1, 预告了下一篇文章将讲如何动画.&lt;br&gt;Source code available here: &lt;a href=&quot;https://github.com/StylingAndroid/IsometricAnimatedVector/tree/Part1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IsometricAnimatedVector&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Design&quot;&gt;&lt;a href=&quot;#Design&quot; class=&quot;headerlink&quot; title=&quot;Design&quot;&gt;&lt;/a&gt;Design&lt;/h2&gt;&lt;h3 id=&quot;Don’t-just-port-an-iOS-navigation-model-to-Android&quot;&gt;&lt;a href=&quot;#Don’t-just-port-an-iOS-navigation-model-to-Android&quot; class=&quot;headerlink&quot; title=&quot;Don’t just port an iOS navigation model to Android&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.androidpolice.com/2016/08/13/opinion-bottom-navigation-material-guidelines-platform-awareness/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Don’t just port an iOS navigation model to Android&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;关于bottom nav bars的讨论.&lt;br&gt;Hamburger menu有时候感觉不是很理想, 是因为抽屉里的items总是隐藏状态, 用户不易发现和使用.&lt;br&gt;Bottom bar则把每一个item都时刻展现给用户, 在iOS上使用得很成功.&lt;br&gt;Google在2016年3月提供了Guides: &lt;a href=&quot;https://material.google.com/components/bottom-navigation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom navigation&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么时候该用bottom navigation呢?&lt;br&gt;应用有3到5个top级别的目的地, 且它们需要直接被访问, 从各个目的地之间转换, 并且它们应该是具有同等重要性的.&lt;/li&gt;
&lt;li&gt;什么时候bottom navigation不适用呢?&lt;br&gt;不能因为怕用户看不见一个东东, 就把它放在bottom nav bar, 作为推广手段.&lt;br&gt;bottom nav bar也不是用来放menu的, 比如放不下了加个more tab, 展开以后是更多的二级页面入口; 也不要用来放一些弹出窗口, 它们同样也不是top level的目的地.&lt;br&gt;bottom nav bar不能放低级别的目的地.&lt;br&gt;最后文章强调了每个平台应该遵从自己的特性, 对Android来说, 如果完全拷贝iOS的设计可能不是一个好主意.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;LIBRARIES-amp-CODE&quot;&gt;&lt;a href=&quot;#LIBRARIES-amp-CODE&quot; class=&quot;headerlink&quot; title=&quot;LIBRARIES &amp;amp; CODE&quot;&gt;&lt;/a&gt;LIBRARIES &amp;amp; CODE&lt;/h2&gt;&lt;h3 id=&quot;stag-java&quot;&gt;&lt;a href=&quot;#stag-java&quot; class=&quot;headerlink&quot; title=&quot;stag-java&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/vimeo/stag-java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stag-java&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Stag通过减少反射改善了Gson的性能, 为你的model对象自动生成TypeAdapters.&lt;/p&gt;
&lt;h3 id=&quot;Router&quot;&gt;&lt;a href=&quot;#Router&quot; class=&quot;headerlink&quot; title=&quot;Router&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/eyeem/router&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Router&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一个基于routable-android的新的Android URL router, 摒弃了Activity/Intent依赖, 并加入了新的特性.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Weekly-Issue-218&quot;&gt;&lt;a href=&quot;#Android-Weekly-Issue-218&quot; class=&quot;headerlink&quot; title=&quot;Android Weekly Issue #218&quot;&gt;&lt;/a&gt;Android Weekly Issue #218&lt;/h1&gt;&lt;p&gt;August 14th, 2016&lt;br&gt;&lt;a href=&quot;http://androidweekly.net/issues/issue-218&quot;&gt;http://androidweekly.net/issues/issue-218&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/categories/Android/Android-Weekly/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Android Weekly" scheme="http://mengdd.github.io/tags/Android-Weekly/"/>
    
      <category term="AnimatedVectorDrawable" scheme="http://mengdd.github.io/tags/AnimatedVectorDrawable/"/>
    
      <category term="Espresso" scheme="http://mengdd.github.io/tags/Espresso/"/>
    
      <category term="TV" scheme="http://mengdd.github.io/tags/TV/"/>
    
      <category term="Wear" scheme="http://mengdd.github.io/tags/Wear/"/>
    
      <category term="Router" scheme="http://mengdd.github.io/tags/Router/"/>
    
      <category term="Performance" scheme="http://mengdd.github.io/tags/Performance/"/>
    
      <category term="Maven" scheme="http://mengdd.github.io/tags/Maven/"/>
    
      <category term="Bottom Navigation" scheme="http://mengdd.github.io/tags/Bottom-Navigation/"/>
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout使用</title>
    <link href="http://mengdd.github.io/Android/Design-Support-Library/2016/07/04/design-support-library-AppBarLayout/"/>
    <id>http://mengdd.github.io/Android/Design-Support-Library/2016/07/04/design-support-library-AppBarLayout/</id>
    <published>2016-07-04T08:41:11.000Z</published>
    <updated>2016-08-11T02:33:13.000Z</updated>
    
    <content type="html">&lt;p&gt;本文介绍Design Support Library中CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;br&gt;先列出了Design Support Library中的Features, 然后如何set up, 最后附有Demo程序, 介绍CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Design-Support-Library-Features&quot;&gt;&lt;a href=&quot;#Design-Support-Library-Features&quot; class=&quot;headerlink&quot; title=&quot;Design Support Library Features&quot;&gt;&lt;/a&gt;Design Support Library Features&lt;/h2&gt;&lt;p&gt;Design Support Library中有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Floating-Action-Buttons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FloatingActionButton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Google-Play-Style-Tabs-using-TabLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TabLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Fragment-Navigation-Drawer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NavigationView&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Displaying-the-Snackbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SnackBar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Working-with-the-EditText#displaying-floating-label-feedback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextInputLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoordinatorLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppBarLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CollapsingToolbarLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout#bottom-sheets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bottom Sheets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Constructing-View-Layouts#percentrelativelayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PercentRelativeLayout&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/reference/android/support/percent/PercentFrameLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PercentFrameLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Drawables#vector-drawables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vector Drawables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Design-Support-Library-Setup&quot;&gt;&lt;a href=&quot;#Design-Support-Library-Setup&quot; class=&quot;headerlink&quot; title=&quot;Design Support Library Setup&quot;&gt;&lt;/a&gt;Design Support Library Setup&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   compileSdkVersion 23  // needs to be consistent with major support libs used&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  supportLibVersion = &amp;apos;23.4.0&amp;apos;  // variable that can be referenced to keep support libs consistent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:appcompat-v7:$&amp;#123;supportLibVersion&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;com.android.support:design:$&amp;#123;supportLibVersion&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;CoordinatorLayout-AppBarLayout使用&quot;&gt;&lt;a href=&quot;#CoordinatorLayout-AppBarLayout使用&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout, AppBarLayout使用&quot;&gt;&lt;/a&gt;CoordinatorLayout, AppBarLayout使用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoordinatorLayout&lt;/a&gt;&lt;br&gt;实际上是一个更强大的FrameLayout, 可以通过&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Behavior&lt;/a&gt; 来控制其中各个child view的交互行为. 也可以指定anchor来指定floating view相对于其他某个View的位置. 比如Floating Action Button在显示Snackbar的时候自动向上移动.&lt;/p&gt;
&lt;p&gt;为了使Toolbar响应滚动事件, 我们需要给它外边包一个&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/AppBarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppBarLayout&lt;/a&gt;.&lt;br&gt;它是一个纵向的LinearLayout, 必须要作为CoordinateLayout的直接child使用.&lt;br&gt;然后, 我们需要定义AppBarLayout和我们scroll的内容View的关系.&lt;br&gt;这里可以是一个RecyclerView, 或者其他支持嵌套scrolling的view, 比如&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/widget/NestedScrollView.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NestedScrollView&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(实际上View类就有方法setNestedScrollingEnabled(), 但是还是需要View自己实现nested scrolling的功能, 否则这个开关也没有效果.)&lt;/p&gt;
&lt;p&gt;support library提供了&lt;code&gt;@string/appbar_scrolling_view_behavior&lt;/code&gt;, 它映射到&lt;code&gt;AppBarLayout.ScrollingViewBehavior&lt;/code&gt;.&lt;br&gt;它是用来告诉AppBarLayout下面那个scroll view上的scroll事件什么时候发生.&lt;br&gt;所以这个属性必须在触发事件的view上指定, 比如:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.RecyclerView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/rvToDoList&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:layout_behavior&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/appbar_scrolling_view_behavior&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当CoordinatorLayout看到自己的child(比如RecyclerView)声明了这个属性, 就会在自己的其他child中寻找相关的view(AppBarLayout).&lt;br&gt;这样, 当RecyclerView发生scroll事件的时候, AppBarLayout和其中的views都会被通知到.&lt;/p&gt;
&lt;p&gt;滚动事件怎么通知到AppBarLayout的呢? 还需要一个属性: &lt;code&gt;app:layout_scrollFlags&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|enterAlways&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;app:layout_scrollFlags&lt;/code&gt;属性中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scroll&lt;/code&gt;必须有, 这样scroll的任何效果才能生效.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enterAlways&lt;/code&gt;: 表示只要列表上方内容滚动出现, View就应该出现. 适用的情形: 当把列表滚到底部时, Toolbar被隐藏了, 一旦回滚一点儿, Toolbar就应该立即出现. 如果不设置这个flag, 默认的行为是一直要把列表滚到顶部, Toolbar才会出现.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enterAlwaysCollapsed&lt;/code&gt;: 正常情况下, 如果只有&lt;code&gt;enterAlways&lt;/code&gt;被指定, 在列表向下滚动的过程中Toolbar将会一直展开.&lt;br&gt;如果同时指定了&lt;code&gt;enterAlwaysCollapsed&lt;/code&gt;和&lt;code&gt;minHeight&lt;/code&gt;, 那么开始滚动以后, 只滚动到minHeight为止, 直到滚动到达列表顶部的时候, view才会展开到全部高度.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exitUntilCollapsed&lt;/code&gt;: 正常只指定scroll的情况下, scrolling down(即显示列表底部)将会使得整个Toolbar移动到不见.&lt;br&gt;如果同时指定了&lt;code&gt;exitUntilCollapsed&lt;/code&gt;和&lt;code&gt;minHeight&lt;/code&gt;, 那么将会收缩到minHeight为止, Toolbar不会一直滚动和退出屏幕.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snap&lt;/code&gt;: 使用了这个属性, 等scroll事件结束的时候, View可见的尺寸小于它的50%, 则它会直接消失, 如果大于50%, 则它会完整地出现.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还可以用&lt;code&gt;app:layout_scrollInterpolator&lt;/code&gt;属性指定滚动动画效果的插值器.&lt;/p&gt;
&lt;h3 id=&quot;折叠效果&quot;&gt;&lt;a href=&quot;#折叠效果&quot; class=&quot;headerlink&quot; title=&quot;折叠效果&quot;&gt;&lt;/a&gt;折叠效果&lt;/h3&gt;&lt;p&gt;如果想要折叠Toolbar的效果, 可以在Toolbar外面包一层&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CollapsingToolbarLayout&lt;/a&gt;&lt;br&gt;这个类必须作为AppBarLayout的直接child使用.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:contentScrim&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginEnd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;64dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginStart&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;48dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|exitUntilCollapsed&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|enterAlways&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;包了这个类之后, setTitle要调用这个类的方法:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;collapsingToolbar.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Title&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景图平行淡出&quot;&gt;&lt;a href=&quot;#背景图平行淡出&quot; class=&quot;headerlink&quot; title=&quot;背景图平行淡出&quot;&gt;&lt;/a&gt;背景图平行淡出&lt;/h3&gt;&lt;p&gt;这个类使得我们可以做更高级的动画效果, 比如放一个ImageView, 它在折叠的时候淡出.&lt;br&gt;这时候需要把ImageView的&lt;code&gt;app:layout_collapseMode&lt;/code&gt;属性置为&lt;code&gt;parallax&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/appbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;200dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/collapsing_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:contentScrim&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginEnd&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;64dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:expandedTitleMarginStart&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;48dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:layout_scrollFlags&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;scroll|exitUntilCollapsed&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:layout_scrollInterpolator&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@anim/hero_image_interpolator&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ImageView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/logo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:contentDescription&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@null&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:fitsSystemWindows&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:scaleType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;fitCenter&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/android_logo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_collapseMode&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parallax&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_collapseParallaxMultiplier&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0.1&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_collapseMode&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:popupTheme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Light&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.CollapsingToolbarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;android.support.design.widget.AppBarLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h2&gt;&lt;p&gt;这里推荐Demo: &lt;a href=&quot;https://github.com/mengdd/AndroidDesignWidgetsSample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDesignWidgetsSample&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/images/AndroidDesignWidgetsSample-screen-video.gif&quot; alt=&quot;Android Design Widgets Sample screen video&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling Scrolls with CoordinatorLayout&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://material.google.com/patterns/scrolling-techniques.html#scrolling-techniques-behavior&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design: scrolling techniques&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Design-Support-Library#official-source-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design Support Library&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://saulmm.github.io/mastering-coordinator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering the Coordinator Layout&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Design Support Library中CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;br&gt;先列出了Design Support Library中的Features, 然后如何set up, 最后附有Demo程序, 介绍CoordinatorLayout, AppBarLayout, CollapsingToolbarLayout的使用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
      <category term="Design Support Library" scheme="http://mengdd.github.io/categories/Android/Design-Support-Library/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Design Support Library" scheme="http://mengdd.github.io/tags/Design-Support-Library/"/>
    
      <category term="AppBarLayout" scheme="http://mengdd.github.io/tags/AppBarLayout/"/>
    
      <category term="Toolbar" scheme="http://mengdd.github.io/tags/Toolbar/"/>
    
  </entry>
  
  <entry>
    <title>Using Dagger2 in Android</title>
    <link href="http://mengdd.github.io/Android/2016/06/24/using-dagger2-in-android/"/>
    <id>http://mengdd.github.io/Android/2016/06/24/using-dagger2-in-android/</id>
    <published>2016-06-24T05:22:44.000Z</published>
    <updated>2016-06-24T08:16:47.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2&lt;/a&gt;是一个Java和Android的依赖注入框架.&lt;br&gt;本文介绍Android中dagger2的基本使用.&lt;br&gt;其中包括&lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Module&lt;/code&gt;和&lt;code&gt;@Provides&lt;/code&gt;注解的使用.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;使用依赖注入的好处&quot;&gt;&lt;a href=&quot;#使用依赖注入的好处&quot; class=&quot;headerlink&quot; title=&quot;使用依赖注入的好处&quot;&gt;&lt;/a&gt;使用依赖注入的好处&lt;/h1&gt;&lt;p&gt;1.使用类和被依赖的对象构造分开,这样如果我们需要改变被依赖类的构造方法,不必改动每一个使用类.&lt;br&gt;2.对各种被依赖类的实例,可以只构造一次.&lt;br&gt;3.当我们需要更换一种实现时,只需要保证接口一致.&lt;br&gt;4.利于单元测试,我们可以方便地mock依赖类的对象.&lt;/p&gt;
&lt;p&gt;优点总结: 创建对象和使用对象分离, 模块化增强.&lt;/p&gt;
&lt;h1 id=&quot;Dagger2的使用&quot;&gt;&lt;a href=&quot;#Dagger2的使用&quot; class=&quot;headerlink&quot; title=&quot;Dagger2的使用&quot;&gt;&lt;/a&gt;Dagger2的使用&lt;/h1&gt;&lt;h2 id=&quot;Set-Up&quot;&gt;&lt;a href=&quot;#Set-Up&quot; class=&quot;headerlink&quot; title=&quot;Set Up&quot;&gt;&lt;/a&gt;Set Up&lt;/h2&gt;&lt;p&gt;在项目的&lt;strong&gt;build.gradle&lt;/strong&gt;里加这个:&lt;br&gt;classpath ‘com.neenbedankt.gradle.plugins:android-apt:1.8’&lt;/p&gt;
&lt;p&gt;然后&lt;strong&gt;app的build.gradle&lt;/strong&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.application&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.neenbedankt.android-apt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compileSdkVersion 24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildToolsVersion &amp;quot;24.0.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        applicationId &amp;quot;com.ddmeng.dagger2sample&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        minSdkVersion 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        targetSdkVersion 24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        versionCode 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        versionName &amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile fileTree(dir: &amp;apos;libs&amp;apos;, include: [&amp;apos;*.jar&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &amp;apos;junit:junit:4.12&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.android.support:appcompat-v7:24.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;javax.annotation:jsr250-api:1.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.google.dagger:dagger:2.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &amp;apos;com.google.dagger:dagger-compiler:2.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;常用注解&quot;&gt;&lt;a href=&quot;#常用注解&quot; class=&quot;headerlink&quot; title=&quot;常用注解&quot;&gt;&lt;/a&gt;常用注解&lt;/h2&gt;&lt;p&gt;最常使用的主要是以下这几个注解:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/api/latest/dagger/Component.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Component&lt;/a&gt;&lt;br&gt;Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of modules(). The generated class will have the name of the type annotated with @Component prepended with Dagger. For example, @Component interface MyComponent {…} will produce an implementation named DaggerMyComponent.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/api/latest/dagger/Module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Module&lt;/a&gt;&lt;br&gt;Annotates a class that contributes to the object graph.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Inject&lt;/a&gt;&lt;br&gt;Dagger constructs instances of your application classes and satisfies their dependencies. It uses the javax.inject.Inject annotation to identify which constructors and fields it is interested in.&lt;/p&gt;
&lt;p&gt;Use @Inject to annotate the constructor that Dagger should use to create instances of a class. When a new instance is requested, Dagger will obtain the required parameters values and invoke this constructor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/api/latest/dagger/Provides.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@Provides&lt;/a&gt;&lt;br&gt;Annotates methods of a module to create a provider method binding. The method’s return type is bound to its returned value. The component implementation will pass dependencies to the method as parameters.&lt;/p&gt;
&lt;h2 id=&quot;Dagger2基本使用&quot;&gt;&lt;a href=&quot;#Dagger2基本使用&quot; class=&quot;headerlink&quot; title=&quot;Dagger2基本使用&quot;&gt;&lt;/a&gt;Dagger2基本使用&lt;/h2&gt;&lt;h3 id=&quot;最简单的一个实例&quot;&gt;&lt;a href=&quot;#最简单的一个实例&quot; class=&quot;headerlink&quot; title=&quot;最简单的一个实例&quot;&gt;&lt;/a&gt;最简单的一个实例&lt;/h3&gt;&lt;p&gt;首先写一个Component&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;(modules = MyApplicationModule.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// this should be an interface or abstract class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// write like this, and Make Project, then a DaggerMyApplicationComponent class will be generated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时里面的Module内容可以暂时为空:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写好后make一下,就生成了&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; com.ddmeng.dagger2sample.component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.ddmeng.dagger2sample.&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;.MyApplicationModule;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dagger.internal.Preconditions;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; javax.annotation.Generated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Generated&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value = &lt;span class=&quot;string&quot;&gt;&quot;dagger.internal.codegen.ComponentProcessor&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  comments = &lt;span class=&quot;string&quot;&gt;&quot;https://google.github.io/dagger&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaggerMyApplicationComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaggerMyApplicationComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Builder builder)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; builder != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Builder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; MyApplicationComponent &lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MyApplicationComponent &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DaggerMyApplicationComponent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@deprecated&lt;/span&gt; This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Deprecated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Builder &lt;span class=&quot;title&quot;&gt;myApplicationModule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MyApplicationModule myApplicationModule)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Preconditions.checkNotNull(myApplicationModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要切换到project视图下才能看见.&lt;br&gt;生成的这个实现,名字是在我们自己的Component名前面加了Dagger.&lt;br&gt;如果我们的类名不是顶级的,即还有外部类,则会以下划线分隔连接.&lt;/p&gt;
&lt;p&gt;现在我们的生成的myApplicationModule()方法被标记为&lt;code&gt;@Deprecated&lt;/code&gt;,这是因为我的module里面什么都还没有呢,所以被认为是没有必要的.&lt;/p&gt;
&lt;p&gt;现在我们添加一个要用的LogUtils类. 想要在MainActivity里面用.&lt;br&gt;写好LogUtils类,在构造函数上标记&lt;code&gt;@Inject&lt;/code&gt;. 这时候就将LogUtils加入了dependency graph中, 相当于作为预备队员.&lt;/p&gt;
&lt;p&gt;想要在MainActivity作为一个字段用,&lt;br&gt;在Component里面写一句:&lt;br&gt;&lt;code&gt;void inject(MainActivity activity);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因为此时还是没有用到Module,所以在application里面可以直接build,保存component:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleApplication&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Application&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; MyApplicationComponent component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        component = DaggerMyApplicationComponent.builder().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; MyApplicationComponent &lt;span class=&quot;title&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在MainActivity使用的时候, 先get到Component, 然后调用inject()方法, 字段就被注入了.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LogUtils logUtils;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ((SampleApplication) getApplication()).getComponent().inject(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logUtils.i(&lt;span class=&quot;string&quot;&gt;&quot;tag&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hi, I&#39;m an instance of LogUtils&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行程序后可以看到打出log,证明注入成功.&lt;/p&gt;
&lt;p&gt;此时我们看到生成的代码有三个类:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DaggerMyApplicationComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationComponent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; LogUtils_Factory implements Factory&amp;lt;LogUtils&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity_MembersInjector&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MembersInjector&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过查看调用栈来看调用关系.&lt;/p&gt;
&lt;h3 id=&quot;单例-Singleton&quot;&gt;&lt;a href=&quot;#单例-Singleton&quot; class=&quot;headerlink&quot; title=&quot;单例@Singleton&quot;&gt;&lt;/a&gt;单例&lt;code&gt;@Singleton&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;如果我们想让工具类是单例,只需要在上面的基础上,在类名前加上&lt;code&gt;@Singleton&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;此时对应的Component也需要加上&lt;code&gt;@Singleton&lt;/code&gt;.否则编译会不通过.&lt;br&gt;加好之后,可以打印hashCode()看出, 标记了&lt;code&gt;@Singleton&lt;/code&gt;的这个对象,不论被注入几次,都是同一个对象.&lt;/p&gt;
&lt;p&gt;在我们的例子中, 可以让FileUtils作为一个单例被注入:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileUtils&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(LogUtils.TAG, &lt;span class=&quot;string&quot;&gt;&quot;new FileUtils: &quot;&lt;/span&gt; + hashCode());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(LogUtils.TAG, &lt;span class=&quot;string&quot;&gt;&quot;do sth with FileUtils &quot;&lt;/span&gt; + hashCode());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看生成的代码,可以看见&lt;code&gt;DaggerMyApplicationComponent&lt;/code&gt;为单例的类多保存了一个字段:&lt;br&gt;&lt;code&gt;private Provider&amp;lt;FileUtils&amp;gt; fileUtilsProvider;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它在init的时候被初始化为:&lt;br&gt;&lt;code&gt;this.fileUtilsProvider = ScopedProvider.create(FileUtils_Factory.create());&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;包了一层之后,在ScopeProvider里实现了单例:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// double-check idiom from EJ2: Item 71&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Object result = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == UNINITIALIZED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      result = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result == UNINITIALIZED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        instance = result = factory.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (T) result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Module-和-Provides的使用&quot;&gt;&lt;a href=&quot;#Module-和-Provides的使用&quot; class=&quot;headerlink&quot; title=&quot;@Module 和 @Provides的使用&quot;&gt;&lt;/a&gt;&lt;code&gt;@Module&lt;/code&gt; 和 &lt;code&gt;@Provides&lt;/code&gt;的使用&lt;/h3&gt;&lt;p&gt;上面的注入都是用&lt;code&gt;@Inject&lt;/code&gt;, 在构造函数和要使用的字段上标记.&lt;br&gt;有些情况下&lt;code&gt;@Inject&lt;/code&gt;是不能满足需求的.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But @Inject doesn’t work everywhere&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interfaces can’t be constructed. 接口类型不能直接被构造.&lt;/li&gt;
&lt;li&gt;Third-party classes can’t be annotated. 第三方的类不能改动它的代码.&lt;/li&gt;
&lt;li&gt;Configurable objects must be configured! 需要配置的对象需要被配置.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些情况下, &lt;code&gt;@Inject&lt;/code&gt;不够用啦, 这时候就要用&lt;code&gt;@Provides&lt;/code&gt;标记的方法.&lt;br&gt;方法的返回值返回了它满足的依赖, 它实际返回的对象可以是返回值接口的实现,或者是返回值类型的子类.&lt;br&gt;&lt;code&gt;@Provides&lt;/code&gt;方法也可以有依赖, 即它的参数.&lt;br&gt;Dagger会注入它的参数值, 如果它的参数值不能被注入, 则编译会失败.&lt;br&gt;注意这个寻找参数注入的过程是在&lt;code&gt;@Component&lt;/code&gt;级别的, 只要这个Component里面有这个参数类型的注入, 即便可能是在另一个Module, 就会自动采用.&lt;/p&gt;
&lt;p&gt;所有的&lt;code&gt;@Provides&lt;/code&gt;方法都需要放在&lt;code&gt;@Module&lt;/code&gt;里面.&lt;br&gt;按照命名习惯(By convention), 一般&lt;code&gt;@Provides&lt;/code&gt;标记的方法都有一个provide前缀, 而module类都有一个Module后缀.&lt;br&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationModule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Context context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApplicationModule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.context = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Context &lt;span class=&quot;title&quot;&gt;providesContext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Inject interface, return implementation class instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; HttpUtil &lt;span class=&quot;title&quot;&gt;provideHttpUtil&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(LogUtils.TAG, &lt;span class=&quot;string&quot;&gt;&quot;provideHttpUtil&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyHttpUtil();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Inject class from third-party, or Android framework service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This provide method need a parameter, Dagger will obtain the parameter value (injected it)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If the parameter is not injectable, then compilation failed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Provides&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Singleton&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;ConnectivityManager &lt;span class=&quot;title&quot;&gt;provideConnectivityManager&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Dagger2中几种常用注解总结&quot;&gt;&lt;a href=&quot;#Dagger2中几种常用注解总结&quot; class=&quot;headerlink&quot; title=&quot;Dagger2中几种常用注解总结&quot;&gt;&lt;/a&gt;Dagger2中几种常用注解总结&lt;/h1&gt;&lt;h3 id=&quot;Inject&quot;&gt;&lt;a href=&quot;#Inject&quot; class=&quot;headerlink&quot; title=&quot;@Inject&quot;&gt;&lt;/a&gt;&lt;code&gt;@Inject&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Inject&lt;/code&gt;的用法分为三种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数上的&lt;code&gt;@Inject&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果构造函数是有参数的, 则它的所有参数都会自动从dependency graph中找到并注入.&lt;br&gt;同时构造的这个类也被作为dependency graph的一部分.&lt;br&gt;但是我们在一个类中最多只能用@Inject标记一个构造方法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字段上的&lt;code&gt;@Inject&lt;/code&gt;: 从dependency graph中找到并注入字段.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里需要手动调用&lt;br&gt;&lt;code&gt;(SampleApplication) getApplication()).getComponent().inject(this);&lt;/code&gt;&lt;br&gt;类似的方法, 在这个方法被调用之前, 字段都是null.&lt;br&gt;注意这里的字段不能是private的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public方法上的&lt;code&gt;@Inject&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有方法的参数都会由dependency graph提供.&lt;br&gt;方法注入在构造函数&lt;em&gt;之后&lt;/em&gt;立即调用, 意味着我们可以用一个构建好的this对象.&lt;/p&gt;
&lt;h3 id=&quot;Module-和-Provides&quot;&gt;&lt;a href=&quot;#Module-和-Provides&quot; class=&quot;headerlink&quot; title=&quot;@Module 和 @Provides&quot;&gt;&lt;/a&gt;&lt;code&gt;@Module&lt;/code&gt; 和 &lt;code&gt;@Provides&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Module&lt;/code&gt;标记了提供依赖的类, 其中包含了一些&lt;code&gt;@Provides&lt;/code&gt;标注的方法, 返回值即依赖.&lt;/p&gt;
&lt;h3 id=&quot;Component&quot;&gt;&lt;a href=&quot;#Component&quot; class=&quot;headerlink&quot; title=&quot;@Component&quot;&gt;&lt;/a&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;@Component&lt;/code&gt;标记的接口负责将所有的事情联系起来, 可以看做是&lt;code&gt;@Module&lt;/code&gt;和&lt;code&gt;@Inject&lt;/code&gt;之间的桥梁.&lt;br&gt;我们可以定义我们用的依赖来自哪些Module或者Component.&lt;/p&gt;
&lt;p&gt;在Component里可以定义哪些依赖是公有的 (提供返回值为某种依赖的无参数方法) , 也可以定义我们的component可以去哪里inject对象 (void inject()方法, 参数是去注入的地方) .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;可以有自己的子Component, 也可以有lifecycle.&lt;/p&gt;
&lt;p&gt;先就这么多吧, 更多更高级的使用可以期待下文, 也可以参见后面的参考资料.&lt;/p&gt;
&lt;p&gt;本文地址: &lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5613889.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Dagger2 in Android&lt;/a&gt;&lt;br&gt;本文Demo: &lt;a href=&quot;https://github.com/mengdd/dagger2-sample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2-sample&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料:&quot;&gt;&lt;/a&gt;参考资料:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2 repo&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2 website&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://google.github.io/dagger/users-guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;User Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1fwg-NsMKYtYxeEWe82rISIHjNrtdqonfiHgp8-PQ7m8/edit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger 2.0文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger 2的sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有些guides:&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Dependency-Injection-with-Dagger-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code Path Guides: DI with dagger2&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.gouline.net/dagger-2-even-sharper-less-square-b52101863542#.me0ieiaph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有一系列关于Dagger2的文章还挺好的:&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Froger_mcs dev blog&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dagger-1-to-2-migration/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger 1 to dagger 2 migration&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-introdution-to-di/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to DI&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-the-api/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2 API&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://medium.com/@froger_mcs/inject-everything-viewholder-and-dagger-2-e1551a76a908#.e3zxrynq4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inject everything - ViewHolder and Dagger2 (with Multibinding and AutoFactory example)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Custom Scope&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者的例子:&lt;br&gt;&lt;a href=&quot;https://github.com/frogermcs/GithubClient&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Client&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/google/dagger&quot;&gt;Dagger2&lt;/a&gt;是一个Java和Android的依赖注入框架.&lt;br&gt;本文介绍Android中dagger2的基本使用.&lt;br&gt;其中包括&lt;code&gt;@Inject&lt;/code&gt;, &lt;code&gt;@Component&lt;/code&gt;, &lt;code&gt;@Module&lt;/code&gt;和&lt;code&gt;@Provides&lt;/code&gt;注解的使用.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Dagger2" scheme="http://mengdd.github.io/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(四) Toolbar使用及Fragment中的Toolbar处理</title>
    <link href="http://mengdd.github.io/Android/2016/06/16/android-fragment-usage-4-toolbar/"/>
    <id>http://mengdd.github.io/Android/2016/06/16/android-fragment-usage-4-toolbar/</id>
    <published>2016-06-16T04:15:26.000Z</published>
    <updated>2016-06-16T04:52:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;a href=&quot;#Toolbar作为ActionBar使用介绍&quot; class=&quot;headerlink&quot; title=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;/a&gt;Toolbar作为ActionBar使用介绍&lt;/h1&gt;&lt;p&gt;本文介绍了在Android中将Toolbar作为ActionBar使用的方法.&lt;br&gt;并且介绍了在Fragment和嵌套Fragment中使用Toolbar作为ActionBar使用时需要注意的事项.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用support-library的Toolbar&quot;&gt;&lt;a href=&quot;#使用support-library的Toolbar&quot; class=&quot;headerlink&quot; title=&quot;使用support library的Toolbar&quot;&gt;&lt;/a&gt;使用support library的Toolbar&lt;/h2&gt;&lt;p&gt;Android的ActionBar每个版本都会做一些改变, 所以原生的ActionBar在不同的系统上看起来可能会不一样.&lt;br&gt;使用support library版本的&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Toolbar&lt;/a&gt;可以让你的应用在多种设备类型上保持一致. support library中总是包含了最新的features.&lt;br&gt;Android从5.0 (API Level 21)开始提供&lt;a href=&quot;https://developer.android.com/design/material/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Material Design&lt;/a&gt;, 使用v7版本的Toolbar后, 在任何Android 2.1(API Level 7)以上的机器上都可以看到Material Design风格的Toolbar.&lt;/p&gt;
&lt;h2 id=&quot;在Activity中使用Toolbar&quot;&gt;&lt;a href=&quot;#在Activity中使用Toolbar&quot; class=&quot;headerlink&quot; title=&quot;在Activity中使用Toolbar&quot;&gt;&lt;/a&gt;在Activity中使用Toolbar&lt;/h2&gt;&lt;p&gt;1.首先项目gradle中添加:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;com.android.support:appcompat-v7:23.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.确保Activity继承&lt;code&gt;AppCompatActivity&lt;/code&gt;&lt;br&gt;3.在application设置中使用NoActionBar的主题:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.把Toolbar写在布局中&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;android.support.v7.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/my_toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:elevation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;4dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;app:popupTheme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/ThemeOverlay.AppCompat.Light&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.在Activity里面把Toolbar设置成为ActionBar&lt;br&gt;首先把Toolbar find出来, 然后调用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#setSupportActionBar(android.support.v7.widget.Toolbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setSupportActionBar方法&lt;/a&gt;)&lt;br&gt;把Toolbar设置为自己的ActionBar即可.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ToolbarDemoActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@BindView&lt;/span&gt;(R.id.toolbar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Toolbar toolbar;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_toolbar_demo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以随意使用啦, 用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html#getSupportActionBar(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getSupportActionBar&lt;/a&gt;)可以获取ActionBar类型的对象, 从而使用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/ActionBar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActionBar&lt;/a&gt;的方法.&lt;/p&gt;
&lt;h3 id=&quot;添加Action-Buttons&quot;&gt;&lt;a href=&quot;#添加Action-Buttons&quot; class=&quot;headerlink&quot; title=&quot;添加Action Buttons&quot;&gt;&lt;/a&gt;添加Action Buttons&lt;/h3&gt;&lt;p&gt;定义menu:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xmlns:app&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/action_android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_android_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/action_android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:showAsAction&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;always&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/action_favourite&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:icon&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_favorite_black_24dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/action_favourite&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:showAsAction&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ifRoom&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/action_settings&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/action_settings&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;app:showAsAction&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;never&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在代码中inflate和处理它的点击事件:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCreateOptionsMenu()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getMenuInflater().inflate(R.menu.menu_activity_main, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreateOptionsMenu(menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onOptionsItemSelected&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MenuItem item)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (item.getItemId()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; R.id.action_android:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;action android selected&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; R.id.action_favourite:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;action favourite selected&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; R.id.action_settings:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;action settings selected&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onOptionsItemSelected(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;添加向上返回的action&quot;&gt;&lt;a href=&quot;#添加向上返回的action&quot; class=&quot;headerlink&quot; title=&quot;添加向上返回的action&quot;&gt;&lt;/a&gt;添加向上返回的action&lt;/h3&gt;&lt;p&gt;添加向上返回parent的action:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.activity_toolbar_demo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// add a left arrow to back to parent activity,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// no need to handle action selected event, this is handled by super&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getSupportActionBar().setDisplayHomeAsUpEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只需要在manifest中指定parent:&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.toolbar.ToolbarDemoActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:parentActivityName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Fragment中使用Toolbar&quot;&gt;&lt;a href=&quot;#在Fragment中使用Toolbar&quot; class=&quot;headerlink&quot; title=&quot;在Fragment中使用Toolbar&quot;&gt;&lt;/a&gt;在Fragment中使用Toolbar&lt;/h2&gt;&lt;p&gt;在Fragment中使用Toolbar的步骤和Activity差不多.&lt;br&gt;在Fragment布局中添加一个Toolbar, 然后find它, 然后调用Activity的方法来把它设置成ActionBar:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意此处有一个强转, 必须是AppCompatActivity才有这个方法.&lt;br&gt;但是此时运行到Fragment之后, 发现Toolbar上的文字和按钮全是Activity传过来的, 这是因为只有Activity的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;被调用了, 但是Fragment的并没有被调用.&lt;br&gt;在Fragment中加上这句:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setHasOptionsMenu(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时Fragment的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;回调会被调到了, 但是inflate出的按钮和Activity中的actions加在一起显示出来了.&lt;br&gt;因为Activity的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;会在之前调用到.&lt;br&gt;于是Fragment中的写成这样:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu, MenuInflater inflater)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCreateOptionsMenu()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    menu.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inflater.inflate(R.menu.menu_parent_fragment, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;即先clear()一下, 这样按钮就只有Fragment中设置的自己的了, 不会有Activity中的按钮.&lt;/p&gt;
&lt;h2 id=&quot;在嵌套的子Fragment中使用Toolbar&quot;&gt;&lt;a href=&quot;#在嵌套的子Fragment中使用Toolbar&quot; class=&quot;headerlink&quot; title=&quot;在嵌套的子Fragment中使用Toolbar&quot;&gt;&lt;/a&gt;在嵌套的子Fragment中使用Toolbar&lt;/h2&gt;&lt;p&gt;前面已经介绍过, Fragment可以嵌套使用: &lt;a href=&quot;http://www.cnblogs.com/mengdd/p/5552721.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Fragment使用(二) 嵌套Fragments (Nested Fragments) 的使用及常见错误&lt;/a&gt;.&lt;br&gt;那么在前面的Fragment中再显示一个子Fragment, 并且又带有一个不一样的Toolbar, 还需要哪些处理呢?&lt;br&gt;首先, java代码中还是需要有:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setHasOptionsMenu(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后根据是否需要菜单按钮, 覆写onCreateOptionsMenu()方法来inflate自己的menu文件即可.&lt;br&gt;感觉和在普通的Fragment中使用Toolbar作为ActionBar并没有什么区别.&lt;br&gt;但是如果你的多个Fragment有不同的Toolbar菜单选项, 如果你没有懂得其中的原理, 可能就会出现一些混乱.&lt;br&gt;下面来解说一下相关的方法.&lt;/p&gt;
&lt;h3 id=&quot;onCreateOptionsMenu-方法的调用&quot;&gt;&lt;a href=&quot;#onCreateOptionsMenu-方法的调用&quot; class=&quot;headerlink&quot; title=&quot;onCreateOptionsMenu()方法的调用&quot;&gt;&lt;/a&gt;onCreateOptionsMenu()方法的调用&lt;/h3&gt;&lt;p&gt;一旦调用&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就会导致Activity&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法的调用, 而Activity会根据其中Fragment是否设置了setHasOptionsMenu(true)来调用Fragment的&lt;br&gt;&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法, 调用顺序是树形的, 按层级调用, 中间如果有false则跳过.&lt;/p&gt;
&lt;p&gt;假设当前Activity, Parent Fragment和Child Fragment中都设置了自己的Toolbar为ActionBar.&lt;br&gt;在打开Child fragment的时候, &lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;的调用顺序是.&lt;br&gt;&lt;code&gt;Activity -&amp;gt; Parent -&amp;gt; Child.&lt;/code&gt; 此时parent和child fragment都设置了setHasOptionsMenu(true).&lt;/p&gt;
&lt;p&gt;关于这个, 还有以下几种情况:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 如果Parent的`setHasOptionsMenu(false)`, Child为true, 则Parent的`onCreateOptionsMenu()`不会调用, 打开Child的时候Activity -&amp;gt; Child.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 如果Child的`setHasOptionsMenu(false)`, Parent为true, 则打开Child的时候仍然会调用Activity和Parent的onCreateOptionsMenu()方法.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 如果Parent和Child都置为false, 打开Parent和Child Fragment的时候都会调用Activity的onCreateOptionsMenu()方法.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仅仅是child Fragment的show() hide()的切换, activity和parent Fragment的onCreateOptionsMenu()也会重新进入.&lt;/strong&gt;&lt;br&gt;这一点我还没有想明白, 是项目中遇到的, 初步推测可能是menu的显隐变化invalidate了menu, 改天有空再试试.&lt;/p&gt;
&lt;p&gt;上面的机制常常是导致Toolbar上面的按钮混淆错乱的原因.&lt;br&gt;举个例子:&lt;br&gt;如果我们现在Activity和Parent Fragment有不同的Toolbar按钮, 但是Child只有文字, 没有按钮.&lt;br&gt;很显然我们不需要给child写menu文件, 也不需要覆写child里的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法.&lt;br&gt;但是此时不管怎样, parent的&lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法都会被调用, 这样我们打开child的时候, toolbar上就神奇地出现了parent里的按钮.&lt;br&gt;这种情况如何解决呢?&lt;br&gt;可以在parent中加一个条件, 当没有child fragment的时候才做inflate的工作:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreateOptionsMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Menu menu, MenuInflater inflater)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.e(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCreateOptionsMenu()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    menu.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getChildFragmentManager().getBackStackEntryCount() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inflater.inflate(R.menu.menu_parent_fragment, menu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外, 除了&lt;code&gt;setSupportActionBar()&lt;/code&gt;之外, 如果我们想&lt;strong&gt;主动触发&lt;/strong&gt; &lt;code&gt;onCreateOptionsMenu()&lt;/code&gt;方法的调用, 可以用&lt;br&gt;&lt;code&gt;invalidateOptionsMenu()&lt;/code&gt;方法.&lt;/p&gt;
&lt;h3 id=&quot;onOptionsItemSelected-方法的调用&quot;&gt;&lt;a href=&quot;#onOptionsItemSelected-方法的调用&quot; class=&quot;headerlink&quot; title=&quot;onOptionsItemSelected()方法的调用&quot;&gt;&lt;/a&gt;onOptionsItemSelected()方法的调用&lt;/h3&gt;&lt;p&gt;在Activity和其中的Fragment都有options menu的时候, 需要注意menu item的id不要重复.&lt;br&gt;以为点击事件的分发也是从Activity开始分发下去的, 如果child fragment中有个选项的id和Activity中一个选项的id重复了, 则在Activity中就会将其处理, 不会继续分发.&lt;/p&gt;
&lt;h3 id=&quot;有嵌套Fragment时-Back键处理&quot;&gt;&lt;a href=&quot;#有嵌套Fragment时-Back键处理&quot; class=&quot;headerlink&quot; title=&quot;有嵌套Fragment时 Back键处理&quot;&gt;&lt;/a&gt;有嵌套Fragment时 Back键处理&lt;/h3&gt;&lt;p&gt;之前没有嵌套Fragment的情况下, 只要将Fragment加入到Back Stack中, 那么按下Back键的时候pop动作是系统自动做好的.&lt;br&gt;虽然在添加child fragment的时候将其加入到back stack中, 但是按back键的时候仍然是将parent fragment弹出, 只剩下Activity.&lt;br&gt;这是因为back键只检查第一层Fragment的back stack, 对于child fragment, 需要在其parent中自己处理.&lt;br&gt;比如这样处理:&lt;/p&gt;
&lt;p&gt;在Activity中&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment fragment = getSupportFragmentManager().findFragmentById(android.R.id.content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragment &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; ToolbarFragment) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (((ToolbarFragment) fragment).onBackPressed()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onBackPressed();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中ToolbarFragment是直接加在Activity中作为parent fragment的.&lt;br&gt;在parent fragment中(即ToolbarFragment中):&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getChildFragmentManager().popBackStackImmediate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本文Demo地址: &lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo on github&lt;/a&gt;&lt;br&gt;其中的: ToolbarDemoActivity即为Toolbar Demo.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;Developer Android:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/appbar/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Training AppBar&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/Toolbar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v7.widget.Toolbar Reference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/app/ActionBar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v7.app.ActionBar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Creating-and-Using-Fragments#actionbar-menu-items-and-fragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guides: action bar menu items and fragments&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;a href=&quot;#Toolbar作为ActionBar使用介绍&quot; class=&quot;headerlink&quot; title=&quot;Toolbar作为ActionBar使用介绍&quot;&gt;&lt;/a&gt;Toolbar作为ActionBar使用介绍&lt;/h1&gt;&lt;p&gt;本文介绍了在Android中将Toolbar作为ActionBar使用的方法.&lt;br&gt;并且介绍了在Fragment和嵌套Fragment中使用Toolbar作为ActionBar使用时需要注意的事项.&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="Nested Fragments" scheme="http://mengdd.github.io/tags/Nested-Fragments/"/>
    
      <category term="Toolbar" scheme="http://mengdd.github.io/tags/Toolbar/"/>
    
      <category term="ActionBar" scheme="http://mengdd.github.io/tags/ActionBar/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(三) Activity, Fragment, WebView的状态保存和恢复</title>
    <link href="http://mengdd.github.io/Android/2016/06/13/android-fragment-usage-3-state-restore/"/>
    <id>http://mengdd.github.io/Android/2016/06/13/android-fragment-usage-3-state-restore/</id>
    <published>2016-06-13T14:26:41.000Z</published>
    <updated>2016-06-13T14:22:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android中的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Android中的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Android中的状态保存和恢复&quot;&gt;&lt;/a&gt;Android中的状态保存和恢复&lt;/h1&gt;&lt;p&gt;Android中的状态保存和恢复, 包括Activity和Fragment以及其中View的状态处理.&lt;br&gt;Activity的状态除了其中的View和Fragment的状态之外, 还需要用户手动保存一些成员变量.&lt;br&gt;Fragment的状态有它自己的实例状态和其中的View状态, 因为其生命周期的灵活性和实际需要的不同, 情况会多一些.&lt;br&gt;根据源码, 列出了Fragment中实例状态和View状态保存和恢复的几个入口, 便于分析查看.&lt;br&gt;最后专门讲了WebView状态保存和恢复, 问题及处理.&lt;br&gt;还有一个工具类icepick的介绍.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Activity的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Activity的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Activity的状态保存和恢复&quot;&gt;&lt;/a&gt;Activity的状态保存和恢复&lt;/h1&gt;&lt;p&gt;作为热身, 先来讲一下Activity的状态保存和恢复.&lt;/p&gt;
&lt;h2 id=&quot;什么时候需要恢复Activity&quot;&gt;&lt;a href=&quot;#什么时候需要恢复Activity&quot; class=&quot;headerlink&quot; title=&quot;什么时候需要恢复Activity&quot;&gt;&lt;/a&gt;什么时候需要恢复Activity&lt;/h2&gt;&lt;p&gt;关于Activity的销毁和重建, 之前有这么一篇博文: &lt;a href=&quot;http://www.cnblogs.com/mengdd/archive/2012/12/17/2822291.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity的重新创建&lt;/a&gt;&lt;br&gt;总结来说, 就是Activity的销毁, 分为彻底销毁和留下数据的销毁两种.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;彻底销毁&lt;/strong&gt;是指用户主动去关闭或退出这个Activity. 此时是不需要状态恢复的, 因为下次回来又是重新创建全新的实例.&lt;br&gt;&lt;strong&gt;留下数据的销毁&lt;/strong&gt;是指系统销毁了activity, 但是当用户返回来时, 会重新创建它, 让用户觉得它一直都在.&lt;/p&gt;
&lt;p&gt;屏幕旋转重建可以归结为第二种情况, 打开Do not keep activities开关, 切换activities也是会出现第二种情况.&lt;br&gt;打开&lt;strong&gt;Do not keep activities&lt;/strong&gt;开关就是为了模拟内存不足时的系统行为, 这里有一篇&lt;a href=&quot;http://www.cnblogs.com/mengdd/p/4528417.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何恢复&quot;&gt;&lt;a href=&quot;#如何恢复&quot; class=&quot;headerlink&quot; title=&quot;如何恢复&quot;&gt;&lt;/a&gt;如何恢复&lt;/h2&gt;&lt;p&gt;实际上系统已经帮我们做好了View层面基本的恢复工作, 主要是依靠下面两个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在onStop()之前调用, 文档中说并不保证在onPause()的之前还是之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 我的试验中一般是在onPause()之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在onStart() 之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Bundle其中包含了activity中的view和fragment的各种信息, 所以调用基类的方法就可以完成基本的view层面的恢复工作.&lt;br&gt;&lt;strong&gt;注意这两个方法并不是activity的生命周期回调, 对于activity来说它们不是一定会发生的.&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;另外需要注意的是, View必须要有id才能被恢复.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举一个实例来说明:&lt;br&gt;Activity A start B, 那么A的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;会在onStop()之前调用, 以防A被系统销毁.&lt;br&gt;但是在B中按下back键finish()了自己后, B被销毁的过程中, 并没有调用&lt;code&gt;onSaveInstanceState()&lt;/code&gt;, 是因为B并没有被压入task的back stack中,&lt;br&gt;也即系统知道B并不需要储存自己的状态.&lt;br&gt;正常情况下, 返回到A, A没有被销毁, 也不会调用&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;, 因为所有的状态都还在, 并不需要重建.&lt;/p&gt;
&lt;p&gt;如果我们打开了&lt;strong&gt;Do not keep activities&lt;/strong&gt;开关, 模拟系统内存不足时的行为, 从A到B, 可以看到当B resume的时候A会一路走到onDestroy(),&lt;br&gt;而关掉B之后, A会从onCreate()开始走, 此时onCreate()的参数bundle就不为空了, onStart()之后会调用&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;方法, 其参数bundle中内容类似于如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bundle[&amp;#123;android:viewHierarchyState=Bundle[mParcelledData.dataSize=272]&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中包含了View的状态, 如果有Fragment, 也会包含Fragment的状态, 其实质是保存了FragmentManagerState, 内容类似于如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Bundle[&amp;#123;android:viewHierarchyState=Bundle[&amp;#123;android:views=&amp;#123;16908290=android.view.AbsSavedState$1@bc382e7, 2131492950=CompoundButton.SavedState&amp;#123;4034f96 checked=true&amp;#125;, 2131492951=android.view.AbsSavedState$1@bc382e7&amp;#125;&amp;#125;], android:fragments=android.app.FragmentManagerState@bacc717&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于上面的例子来说, B什么时候会调用&lt;code&gt;onSaveInstanceState()&lt;/code&gt;呢?&lt;br&gt;当从A打开B之后, 按下Home键, B就会调用&lt;code&gt;onSaveInstanceState()&lt;/code&gt;.&lt;br&gt;因为这时候系统不知道用户什么时候会返回, 有可能会把B也销毁了, 所以保存一下它的状态.&lt;br&gt;如果下次回来它没有被重建, &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;就不会被调用, 如果它被重建了, &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;才会被调用.&lt;/p&gt;
&lt;h3 id=&quot;Activity保存方法的调用时机&quot;&gt;&lt;a href=&quot;#Activity保存方法的调用时机&quot; class=&quot;headerlink&quot; title=&quot;Activity保存方法的调用时机&quot;&gt;&lt;/a&gt;Activity保存方法的调用时机&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;activity的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;和&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;方法在如下情形下会调用:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;屏幕旋转重建: 先save再restore.&lt;/li&gt;
&lt;li&gt;启动另一个activity: 当前activity在离开前会save, 返回时如果因为被系统杀死需要重建, 则会从onCreate()重新开始生命周期, 调用onRestoreInstanceState(); 如果没有重建, 则不会调用onCreate(), 也不会调用onRestoreInstanceState(), 生命周期从onRestart()开始, 接着onStart()和onResume().&lt;/li&gt;
&lt;li&gt;按Home键的情形和启动另一个activity一样, 当前activity在离开前会save, 用户再次点击应用图标返回时, 如果重建发生, 则会调用onCreate()和onRestoreInstanceState(); 如果activity不需要重建, 只是onRestart(), 则不会调用onRestoreInstanceState().&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Activity恢复方法的调用时机&quot;&gt;&lt;a href=&quot;#Activity恢复方法的调用时机&quot; class=&quot;headerlink&quot; title=&quot;Activity恢复方法的调用时机&quot;&gt;&lt;/a&gt;Activity恢复方法的调用时机&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;activity的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;和&lt;code&gt;onRestoreInstanceState()&lt;/code&gt;方法在如下情形下不会调用:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户主动finish()掉的activity不会调用onSaveInstanceState(), 包括主动按back退出的情况.&lt;/li&gt;
&lt;li&gt;新建的activity, 从onCreate()开始, 不会调用onRestoreInstanceState().&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Activity中还需要手动恢复什么&quot;&gt;&lt;a href=&quot;#Activity中还需要手动恢复什么&quot; class=&quot;headerlink&quot; title=&quot;Activity中还需要手动恢复什么&quot;&gt;&lt;/a&gt;Activity中还需要手动恢复什么&lt;/h2&gt;&lt;p&gt;如上, 系统已经为我们恢复了activity中的各种view和fragment, 那么我们自己需要保存和恢复一些什么呢?&lt;br&gt;答案是&lt;strong&gt;成员变量值&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;因为系统并不知道你的各种成员变量有什么用, 哪些值需要保存, 所以需要你自己覆写上面两个方法, 然后把自己需要保存的值加进bundle里面去. 具体例子, 这里&lt;a href=&quot;http://www.cnblogs.com/mengdd/archive/2012/12/17/2822291.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity的重新创建&lt;/a&gt;有, 我就不重复了.&lt;br&gt;重要的是不要忘记调用super的方法, 那里有系统帮我们恢复的工作.&lt;/p&gt;
&lt;h1 id=&quot;工具类Icepick介绍&quot;&gt;&lt;a href=&quot;#工具类Icepick介绍&quot; class=&quot;headerlink&quot; title=&quot;工具类Icepick介绍&quot;&gt;&lt;/a&gt;工具类Icepick介绍&lt;/h1&gt;&lt;p&gt;在介绍下面的内容之前, 先介绍一个小工具: &lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icepick&lt;/a&gt;&lt;br&gt;这个工具的作用是, 在你想保存和重建自己的成员变量数据时, 帮你省去那些put和get方法的调用, 你也不用为每一个字段起一个常量key.&lt;br&gt;你需要做的就是简单地在你想要保存状态的字段上面加上一个&lt;code&gt;@State&lt;/code&gt; 注解.&lt;br&gt;然后在保存和恢复的时候分别加上一句话:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Icepick.restoreInstanceState(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Icepick.saveInstanceState(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你的成员变量就有了它应该有的值了, DONE!&lt;/p&gt;
&lt;h1 id=&quot;Fragment的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Fragment的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Fragment的状态保存和恢复&quot;&gt;&lt;/a&gt;Fragment的状态保存和恢复&lt;/h1&gt;&lt;p&gt;Fragment的状态比Activity的要复杂一些, 因为它的生命周期状态比较多.&lt;/p&gt;
&lt;h2 id=&quot;Fragment状态保存和恢复的相关方法&quot;&gt;&lt;a href=&quot;#Fragment状态保存和恢复的相关方法&quot; class=&quot;headerlink&quot; title=&quot;Fragment状态保存和恢复的相关方法&quot;&gt;&lt;/a&gt;Fragment状态保存和恢复的相关方法&lt;/h2&gt;&lt;p&gt;按照上面的思路, 我先去查找Fragment中保存和恢复的回调方法了.&lt;br&gt;Fragment的状态保存回调是这个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// may be called any time before onDestroy()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法和之前activity的情况大体是类似的, 它不是生命周期的回调, 所以只在有需要的时候会调到.&lt;br&gt;onSaveInstanceState()在activity调用onSaveInstanceState()的时候发生, 用于保存实例状态.(看它的方法名: instance state).&lt;br&gt;&lt;code&gt;onSaveInstanceState()&lt;/code&gt;方法保存的bundle会返回给几个生命周期回调: &lt;code&gt;onCreate()&lt;/code&gt;, &lt;code&gt;onCreateView()&lt;/code&gt;, &lt;code&gt;onViewCreated()&lt;/code&gt;和&lt;code&gt;onActivityCreated()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fragment并没有对应的onRestoreInstanceState()方法.&lt;br&gt;也即没有实例状态的恢复回调.&lt;/p&gt;
&lt;p&gt;Fragment只有一个onViewStateRestored()的回调方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewStateRestored&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Nullable Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在onActivityCreated()和onStart()之间调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mCalled = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;onViewStateRestored()每次新建Fragment都会发生.&lt;br&gt;它并不是实例状态恢复的方法, 只是一个View状态恢复的回调.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里需要注意, Fragment的状态分两个类型: 实例状态和View状态&lt;/strong&gt;.&lt;br&gt;这里有个最佳实践: &lt;a href=&quot;https://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Real Best Practices to Save/Restore Activity’s and Fragment’s state&lt;/a&gt;&lt;br&gt;&lt;strong&gt;不要把Fragment的实例状态和View状态混在一起处理.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这里我先上个结论, 把查看源码中Fragment状态保存和恢复的相关方法列出来:&lt;/p&gt;
&lt;p&gt;Fragment状态保存入口:&lt;br&gt;&lt;img src=&quot;/images/fragment-state-save-entries.png&quot; alt=&quot;Fragment state saving&quot;&gt;&lt;/p&gt;
&lt;p&gt;Fragment的状态保存入口有三个:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Activity的状态保存, 在Activity的&lt;code&gt;onSaveInstanceState()&lt;/code&gt;里, 调用了FragmentManger的&lt;code&gt;saveAllState()&lt;/code&gt;方法, 其中会对mActive中各个Fragment的实例状态和View状态分别进行保存.&lt;/li&gt;
&lt;li&gt;FragmentManager还提供了public方法: &lt;code&gt;saveFragmentInstanceState()&lt;/code&gt;, 可以对单个Fragment进行状态保存, 这是提供给我们用的, 后面会有例子介绍这个. 其中调用的&lt;code&gt;saveFragmentBasicState()&lt;/code&gt;方法即为情况一中所用, 图中已画出标记.&lt;/li&gt;
&lt;li&gt;FragmentManager的&lt;code&gt;moveToState()&lt;/code&gt;方法中, 当状态回退到&lt;code&gt;ACTIVITY_CREATED&lt;/code&gt;, 会调用&lt;code&gt;saveFragmentViewState()&lt;/code&gt;方法, 保存View的状态.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;moveToState()&lt;/code&gt;方法中有很长的switch case, 中间不带break, 基本是根据新状态和当前状态的比较, 分为正向创建和反向销毁两个方向, 一路沿着多个case走下去.&lt;/p&gt;
&lt;p&gt;Fragment状态恢复入口:&lt;br&gt;&lt;img src=&quot;/images/fragment-state-restore-entries.png&quot; alt=&quot;Fragment state restoring&quot;&gt;&lt;/p&gt;
&lt;p&gt;三个恢复的入口和三个保存的入口刚好对应.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Activity重新创建的时候, 恢复所有的Fragment状态.&lt;/li&gt;
&lt;li&gt;如果调用了FragmentManager的方法: &lt;code&gt;saveFragmentInstanceState()&lt;/code&gt;, 返回值得到的状态可以用Fragment的&lt;code&gt;setInitialSavedState()&lt;/code&gt;方法设置给新的Fragment实例, 作为初始状态.&lt;/li&gt;
&lt;li&gt;FragmentManager的&lt;code&gt;moveToState()&lt;/code&gt;方法中, 当状态正向创建到&lt;code&gt;CREATED&lt;/code&gt;时, Fragment自己会恢复View的状态.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三个入口分别对应的情况是:&lt;br&gt;入口1对应系统销毁和重建新实例.&lt;br&gt;入口2对应用户自定义销毁和创建新Fragment实例的状态传递.&lt;br&gt;入口3对应同一Fragment实例自身的View状态重建.&lt;/p&gt;
&lt;h2 id=&quot;Fragment状态保存恢复和Activity的联系&quot;&gt;&lt;a href=&quot;#Fragment状态保存恢复和Activity的联系&quot; class=&quot;headerlink&quot; title=&quot;Fragment状态保存恢复和Activity的联系&quot;&gt;&lt;/a&gt;Fragment状态保存恢复和Activity的联系&lt;/h2&gt;&lt;p&gt;这里对应的是入口1的情况.&lt;br&gt;当Activity在做状态保存和恢复的时候, 在它其中的fragment自然也需要做状态保存和恢复.&lt;br&gt;所以Fragment的onSaveInstanceState()在activity调用onSaveInstanceState()的时候一定会发生.&lt;br&gt;同样的, 如果Fragment中有一些成员变量的值在此时需要保存, 也可以用@State标记, 处理方法和上面一样.&lt;br&gt;也即, 在Activity需要保存状态的时候, 其中的Fragments的&lt;strong&gt;实例状态&lt;/strong&gt;自动被处理保存.&lt;/p&gt;
&lt;h2 id=&quot;Fragment同一实例的View状态恢复&quot;&gt;&lt;a href=&quot;#Fragment同一实例的View状态恢复&quot; class=&quot;headerlink&quot; title=&quot;Fragment同一实例的View状态恢复&quot;&gt;&lt;/a&gt;Fragment同一实例的View状态恢复&lt;/h2&gt;&lt;p&gt;这里对应的是入口3的情况.&lt;br&gt;前面介绍过, activity在保存状态的时候, 会将所有View和Fragment的状态都保存起来等待重建的时候使用.&lt;br&gt;但是如果是单个Activity对应多个Fragments的架构, Activity永远是resume状态, 多个Fragments在切换的过程中, 没有activity的帮助, 如何保存自己的状态?&lt;/p&gt;
&lt;p&gt;首先, 取决于你的多个Fragments是如何初始化的.&lt;br&gt;我做了一个实验, 在activity的onCreate()里面初始化两个Fragment:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initFragments&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab1Fragment = getFragmentManager().findFragmentByTag(Tab1Fragment.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tab1Fragment == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tab1Fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tab1Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tab2Fragment = getFragmentManager().findFragmentByTag(Tab2Fragment.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tab2Fragment == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tab2Fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tab2Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后点击两个按钮来切换它们, replace(), 并且不加入到back stack中:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.tab1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTab1Clicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getFragmentManager().beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(R.id.content_container, tab1Fragment, Tab1Fragment.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@OnClick&lt;/span&gt;(R.id.tab2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTab2Clicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getFragmentManager().beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(R.id.content_container, tab2Fragment, Tab2Fragment.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到, 每一次的切换, 都是一个Fragment的完全destroy, detach和另一个fragment的attach, create,&lt;br&gt;但是当我在这两个fragment中各自加上EditText, 发现只要EditText有id, 切换过程中EditText的内容是被保存的.&lt;br&gt;这是谁在什么时候保存并恢复的呢?&lt;br&gt;我在TextChange的回调里打了断点, 发现调用栈如下:&lt;br&gt;&lt;img src=&quot;/images/fragment-state-debug-onRestore.png&quot; alt=&quot;Fragment view state debug&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;FragmentManagerImpl&lt;/code&gt;中, &lt;code&gt;moveToState()&lt;/code&gt;方法的case Fragment.CREATED中:&lt;br&gt;调用了: &lt;code&gt;f.restoreViewState(f.mSavedFragmentState);&lt;/code&gt;&lt;br&gt;此时我没有做任何保存状态的处理, 但是断点中可以看出:&lt;br&gt;&lt;img src=&quot;/images/fragment-states.png&quot; alt=&quot;Fragment states&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然mSavedFragmentState是null, 但是mSavedViewState却有值.&lt;br&gt;所以这个View状态保存和恢复对应的入口即是上面两个图中的入口三.&lt;/p&gt;
&lt;p&gt;这是因为我的两个fragment只new了一次, 然后保存了成员变量, 即便是Fragment重新onCreate(), 但是对应的实例仍然是同一个.&lt;br&gt;这和Activity是不同的, 因为你是无法new一个Activity的.&lt;/p&gt;
&lt;p&gt;在上面的例子中, 如果不保存Fragment的引用, 每次都new Fragment, 那么View的状态是不会被保存的, 因为不同实例间的状态传递只有在系统销毁恢复的情况下才会发生(入口一).&lt;br&gt;如果我们需要在不同的实例间传递状态, 就需要用到下面的方法:&lt;/p&gt;
&lt;h2 id=&quot;不同Fragment实例间的状态保存和恢复&quot;&gt;&lt;a href=&quot;#不同Fragment实例间的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;不同Fragment实例间的状态保存和恢复&quot;&gt;&lt;/a&gt;不同Fragment实例间的状态保存和恢复&lt;/h2&gt;&lt;p&gt;这里对应的是入口2, 不同于入口1和3, 它们是自动的, 入口2是用户主动保存和恢复的情形.&lt;br&gt;自己主动保存Fragment的状态, 可以调用FragmentManager的这个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public abstract Fragment.SavedState saveFragmentInstanceState(Fragment f);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它的实现是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Fragment.&lt;span class=&quot;function&quot;&gt;SavedState &lt;span class=&quot;title&quot;&gt;saveFragmentInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Fragment fragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragment.mIndex &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throwException(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Fragment &quot;&lt;/span&gt; + fragment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                + &lt;span class=&quot;string&quot;&gt;&quot; is not currently in the FragmentManager&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragment.mState &amp;gt; Fragment.INITIALIZING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bundle result = saveFragmentBasicState(fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fragment.SavedState(result) : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回的数据类型是: Fragment.SavedState, 这个state可以通过Fragment的这个方法设置给自己:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setInitialSavedState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SavedState state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mIndex &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Fragment already active&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mSavedFragmentState = state != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; state.mState != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ? state.mState : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是注意只能在Fragment被加入之前设置, 这是一个初始状态.&lt;br&gt;利用这两个方法可以更加自由地保存和恢复状态, 而不依赖于Activity.&lt;br&gt;这样处理以后, 不必保存Fragment的引用, 每次切换的时候虽然都new了新的实例, 但是旧的实例的状态可以设置给新实例.&lt;/p&gt;
&lt;p&gt;例子代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@State&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SparseArray&amp;lt;Fragment.SavedState&amp;gt; savedStateSparseArray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SparseArray&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTab1Clicked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// save current tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment tab2Fragment = getSupportFragmentManager().findFragmentByTag(Tab2Fragment.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tab2Fragment != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        saveFragmentState(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, tab2Fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// restore last state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Tab1Fragment tab1Fragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Tab1Fragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    restoreFragmentState(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, tab1Fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// show new tab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getSupportFragmentManager().beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(R.id.content_container, tab1Fragment, Tab1Fragment.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveFragmentState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, Fragment fragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment.SavedState savedState = getSupportFragmentManager().saveFragmentInstanceState(fragment);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    savedStateSparseArray.put(index, savedState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;restoreFragmentState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, Fragment fragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment.SavedState savedState = savedStateSparseArray.get(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragment.setInitialSavedState(savedState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这里用了SparseArray来存储Fragment的状态, 并且加上了&lt;code&gt;@State&lt;/code&gt;, 这样在Activity重建的时候其中的内容也能够被恢复.&lt;/p&gt;
&lt;h2 id=&quot;Back-stack中的fragment&quot;&gt;&lt;a href=&quot;#Back-stack中的fragment&quot; class=&quot;headerlink&quot; title=&quot;Back stack中的fragment&quot;&gt;&lt;/a&gt;Back stack中的fragment&lt;/h2&gt;&lt;p&gt;有一点很特殊的是, 当Fragment从back stack中返回, 实际上是经历了一次View的销毁和重建, 但是它本身并没有被重建.&lt;br&gt;即View状态需要重建, 实例状态不需要重建.&lt;/p&gt;
&lt;p&gt;举个例子说明这种情形: Fragment被另一个Fragment replace(), 并且压入back stack中, 此时它的View是被销毁的, 但是它本身并没有被销毁.&lt;br&gt;也即, 它走到了onDestroyView(), 却没有走&lt;code&gt;onDestroy()&lt;/code&gt;和&lt;code&gt;onDetact()&lt;/code&gt;.&lt;br&gt;等back回来的时候, 它的view会被重建, 重新从onCreateView()开始走生命周期.&lt;br&gt;在这整个过程中, 该Fragment中的成员变量是保持不变的, 只有View会被重新创建.&lt;br&gt;在这个过程中, instance state的saving并没有发生.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以, 很多时候Fragment还需要考虑的是在没有Activity帮助的情形下(Activity并没有可能重建的情形), 自身View状态的保存.&lt;/strong&gt;&lt;br&gt;此时要注意一些不容易发现的错误, 比如List的新实例需要重新setAdapter等.&lt;/p&gt;
&lt;h2 id=&quot;Fragment-setRetainInstance&quot;&gt;&lt;a href=&quot;#Fragment-setRetainInstance&quot; class=&quot;headerlink&quot; title=&quot;Fragment setRetainInstance&quot;&gt;&lt;/a&gt;Fragment setRetainInstance&lt;/h2&gt;&lt;p&gt;Fragment有一个相关方法:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#setRetainInstance(boolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setRetainInstance&lt;/a&gt;)&lt;br&gt;这个方法设置为true的时候表示, 即便activity重建了, 但是fragment的实例并不被重建.&lt;br&gt;注意此方法只对没有放在back stack中的fragment生效.&lt;br&gt;什么时候要用这个方法呢? 处理configuration change的时候:&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling Configuration Changes with Fragments&lt;/a&gt;&lt;br&gt;这样, 当屏幕旋转, Activity重建, 但是其中的fragment和fragment正在执行的任务不必重建.&lt;br&gt;更多解释可以参见:&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11182180/understanding-fragments-setretaininstanceboolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/11182180/understanding-fragments-setretaininstanceboolean&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11160412/why-use-fragmentsetretaininstanceboolean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/11160412/why-use-fragmentsetretaininstanceboolean&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意这个方法只是针对&lt;strong&gt;configuration change&lt;/strong&gt;, 并不影响用户主动关闭和系统销毁的情况:&lt;br&gt;当activity被用户主动finish, 其中的所有fragments仍然会被销毁.&lt;br&gt;当activity不在最顶端, memory不够了, 系统仍然可能会销毁activity和其中的fragments.&lt;/p&gt;
&lt;h1 id=&quot;View的状态保存和恢复&quot;&gt;&lt;a href=&quot;#View的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;View的状态保存和恢复&quot;&gt;&lt;/a&gt;View的状态保存和恢复&lt;/h1&gt;&lt;p&gt;View的状态保存和恢复主要是依赖于下面几个方法:&lt;br&gt;保存: &lt;code&gt;saveHierarchyState()&lt;/code&gt; -&amp;gt; &lt;code&gt;dispatchSaveInstanceState()&lt;/code&gt; -&amp;gt; &lt;code&gt;onSaveInstanceState()&lt;/code&gt;&lt;br&gt;恢复: &lt;code&gt;restoreHierarchyState()&lt;/code&gt; -&amp;gt; &lt;code&gt;dispatchRestoreInstanceState()&lt;/code&gt; -&amp;gt; &lt;code&gt;onRestoreInstanceState()&lt;/code&gt;&lt;br&gt;还有两个重要的前提条件是View要有id, 并且&lt;code&gt;setSavedEnabled()&lt;/code&gt;为true.(这个值默认为true).&lt;br&gt;在系统的widget里(比如TextView, EditText, Checkbox等), 这些都是已经被处理好的, 我们只需要给View赋予id, Activity和Fragment重建的时候会自动恢复其中的状态. (这里的Fragment恢复对应入口一和入口三, 入口二属于跨实例新建的情况).&lt;/p&gt;
&lt;p&gt;但是如果你要使用第三方的自定义View, 就需要确认一下它们内部是否有状态保存和恢复的代码.&lt;br&gt;如果不行你就需要继承该自定义View, 然后实现这两个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Assumes that SomeSmartButton is a 3rd Party view that&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View State Saving/Restoring are not implemented internally&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeBetterSmartButton&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SomeSmartButton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Parcelable &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Bundle bundle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Save current View&#39;s state here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bundle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Parcelable state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onRestoreInstanceState(state);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Restore View&#39;s state here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;WebView的状态保存和恢复&quot;&gt;&lt;a href=&quot;#WebView的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;WebView的状态保存和恢复&quot;&gt;&lt;/a&gt;WebView的状态保存和恢复&lt;/h1&gt;&lt;p&gt;WebView的状态保存和恢复不像其他原生View一样是自动完成的.&lt;br&gt;WebView不是继承自View的.&lt;br&gt;如果我们把WebView放在布局里, 不加处理, 那么Activity或Fragment重建的过程中, WebView的状态就会丢失, 变成初始状态.&lt;/p&gt;
&lt;p&gt;在Fragment的onSaveInstanceState()里面可以加入如下代码来保存WebView的状态:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onSaveInstanceState(Bundle outState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.saveState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在初始化的时候, 增加判断, 不必每次都打开初始链接:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (savedInstanceState != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.restoreState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.loadUrl(TEST_URL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样处理以后, 在重新建立的时候, WebView的状态就能恢复到离开前的页面.&lt;br&gt;不论WebView是放在Activity里还是Fragment里, 这个方法都适用.&lt;/p&gt;
&lt;p&gt;但是Fragment还有另一种情况, 即Fragment被压入back stack, 此时它没有被destroy(), 所以没有调用onSavedInstanceState()这个方法.&lt;br&gt;这种情况返回的时候, 会从onCreateView()开始, 并且savedInstanceState为null, 于是其中WebView之前的状态在此时丢失了.&lt;br&gt;解决这种情况可以利用Fragment实例并未销毁的条件, 增加一个成员变量bundle, 保存WebView的状态, 最终解决如下:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Bundle webViewState;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onViewCreated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(View view, Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onViewCreated(view, savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    initWebView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (webViewState != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Fragment实例并未被销毁, 重新create view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.restoreState(webViewState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (savedInstanceState != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//Fragment实例被销毁重建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.restoreState(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//全新Fragment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.loadUrl(TEST_URL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Fragment不被销毁(Fragment被加入back stack)的情况下, 依靠Fragment中的成员变量保存WebView状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webViewState = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webView.saveState(webViewState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle outState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onSaveInstanceState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//Fragment被销毁的情况, 依靠outState保存WebView状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (webView != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.saveState(outState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本文完整例子相关实验代码可见:&lt;br&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloActivityAndFragment&lt;/a&gt;&lt;br&gt;中的State Restore Demo.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;Developer Android:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Fragment Reference&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android FragmentManager Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Posts:&lt;br&gt;&lt;a href=&quot;https://developer.android.com/training/basics/activity-lifecycle/recreating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Recreating an Activity&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mengdd/archive/2012/12/17/2822291.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity的重新创建&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/180d2cc0feb5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从源码角度剖析Fragment核心知识点&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/bd4a8be309c8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragment源码阅读笔记&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Real Best Practices to Save/Restore Activity’s and Fragment’s state&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0327/2648.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android中保存和恢复Fragment状态的最好方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handling Configuration Changes with Fragments&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://trickyandroid.com/saving-android-view-state-correctly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Saving Android View state correctly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tools:&lt;br&gt;&lt;a href=&quot;https://github.com/frankiesardo/icepick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;icepick&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android中的状态保存和恢复&quot;&gt;&lt;a href=&quot;#Android中的状态保存和恢复&quot; class=&quot;headerlink&quot; title=&quot;Android中的状态保存和恢复&quot;&gt;&lt;/a&gt;Android中的状态保存和恢复&lt;/h1&gt;&lt;p&gt;Android中的状态保存和恢复, 包括Activity和Fragment以及其中View的状态处理.&lt;br&gt;Activity的状态除了其中的View和Fragment的状态之外, 还需要用户手动保存一些成员变量.&lt;br&gt;Fragment的状态有它自己的实例状态和其中的View状态, 因为其生命周期的灵活性和实际需要的不同, 情况会多一些.&lt;br&gt;根据源码, 列出了Fragment中实例状态和View状态保存和恢复的几个入口, 便于分析查看.&lt;br&gt;最后专门讲了WebView状态保存和恢复, 问题及处理.&lt;br&gt;还有一个工具类icepick的介绍.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="WebView" scheme="http://mengdd.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(二) 嵌套Fragments (Nested Fragments) 的使用及常见错误</title>
    <link href="http://mengdd.github.io/Android/2016/06/02/android-fragment-usage-2-nested-fragments/"/>
    <id>http://mengdd.github.io/Android/2016/06/02/android-fragment-usage-2-nested-fragments/</id>
    <published>2016-06-02T05:03:04.000Z</published>
    <updated>2016-06-16T05:20:33.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;a href=&quot;#嵌套Fragment的使用及常见错误&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;/a&gt;嵌套Fragment的使用及常见错误&lt;/h1&gt;&lt;p&gt;嵌套Fragments (Nested Fragments), 是在Fragment内部又添加Fragment.&lt;br&gt;使用时, 主要要依靠宿主Fragment的 &lt;code&gt;getChildFragmentManager()&lt;/code&gt; 来获取FragmentManger.&lt;br&gt;虽然看起来和在activity中添加fragment差不多, 但因为fragment生命周期及管理恢复模式不同, 其中有一些需要特别注意的地方.&lt;br&gt;本文内容还包括了从Fragment迁移到v4.Fragment代码中需要改动的一些地方.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;嵌套Fragments&quot;&gt;&lt;a href=&quot;#嵌套Fragments&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragments&quot;&gt;&lt;/a&gt;嵌套Fragments&lt;/h2&gt;&lt;p&gt;嵌套Fragments &lt;a href=&quot;https://developer.android.com/about/versions/android-4.2.html#NestedFragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nested Fragments&lt;/a&gt; 是Android 4.2 API 17 引入的.&lt;br&gt;目的: 进一步增强动态复用.&lt;br&gt;如果要在Android 4.2之前使用, 可以用support library v4的版本, 后面会有详细的迁移过程介绍.&lt;/p&gt;
&lt;h3 id=&quot;嵌套Fragment的动态添加&quot;&gt;&lt;a href=&quot;#嵌套Fragment的动态添加&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment的动态添加&quot;&gt;&lt;/a&gt;嵌套Fragment的动态添加&lt;/h3&gt;&lt;p&gt;在宿主fragment里调用&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#getChildFragmentManager(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getChildFragmentManager()&lt;/a&gt;)&lt;br&gt;即可用它来向这个fragment内部添加fragments.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Fragment videoFragment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; VideoPlayerFragment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FragmentTransaction transaction = getChildFragmentManager().beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transaction.add(R.id.video_fragment, videoFragment).commit();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样, 对于内部的fragment来说, &lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#getParentFragment(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;getParentFragment()&lt;/a&gt;) 方法可以获取到fragment的宿主fragment.&lt;/p&gt;
&lt;h3 id=&quot;getChildFragmentManager-和-getFragmentManager&quot;&gt;&lt;a href=&quot;#getChildFragmentManager-和-getFragmentManager&quot; class=&quot;headerlink&quot; title=&quot;getChildFragmentManager() 和 getFragmentManager()&quot;&gt;&lt;/a&gt;getChildFragmentManager() 和 getFragmentManager()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;getChildFragmentManager()&lt;/code&gt;是fragment中的方法, 返回的是管理当前fragment内部子fragments的manager.&lt;br&gt;&lt;code&gt;getFragmentManager()&lt;/code&gt;在activity和fragment中都有.&lt;br&gt;在activity中, 如果用的是v4 support库, 方法应该用&lt;code&gt;getSupportFragmentManager()&lt;/code&gt;, 返回的是管理activity中fragments的manager.&lt;br&gt;在fragment中, 还叫getFragmentManager(), 返回的是把自己加进来的那个manager.&lt;/p&gt;
&lt;p&gt;也即, 如果fragment在activity中, fragment.getFragmentManager()得到的是activity中管理fragments的那个manager.&lt;br&gt;如果fragment是嵌套在另一个fragment中, fragment.getFragmentManager()得到的是它的parent的getChildFragmentManager().&lt;/p&gt;
&lt;p&gt;总结就是: &lt;strong&gt;&lt;em&gt;getFragmentManager()是本级别管理者, getChildFragmentManager()是下一级别管理者&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;这实际上是一个树形管理结构.&lt;/p&gt;
&lt;h2 id=&quot;使用Support-library&quot;&gt;&lt;a href=&quot;#使用Support-library&quot; class=&quot;headerlink&quot; title=&quot;使用Support library&quot;&gt;&lt;/a&gt;使用Support library&lt;/h2&gt;&lt;h3 id=&quot;为什么要使用support-library-有两种原因&quot;&gt;&lt;a href=&quot;#为什么要使用support-library-有两种原因&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用support library? 有两种原因:&quot;&gt;&lt;/a&gt;为什么要使用support library? 有两种原因:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;要在API level11之前使用fragment.&lt;/li&gt;
&lt;li&gt;要在API Level 17之前使用&lt;code&gt;getChildFragmentManager()&lt;/code&gt;, 即使用嵌套Fragment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;迁移到support-library需要改动哪些地方&quot;&gt;&lt;a href=&quot;#迁移到support-library需要改动哪些地方&quot; class=&quot;headerlink&quot; title=&quot;迁移到support library需要改动哪些地方?&quot;&gt;&lt;/a&gt;迁移到support library需要改动哪些地方?&lt;/h3&gt;&lt;p&gt;把Fragment迁移到v4版本, 需要改动如下地方:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import android.app.Fragment; -&amp;gt; import android.support.v4.app.Fragment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Activity -&amp;gt; FragmentActivity / AppCompatActivity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activity.getFragmentManager() -&amp;gt; getSupportFragmentManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Loader, LoaderManager, LoaderCursor也需要改成v4包的.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activity.getLoaderManager() -&amp;gt; getSupportLoaderManager()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Fragment中onTrimMemory()方法不见了&lt;br&gt;以前是这个方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onTrimMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; level)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onTrimMemory(level);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imageLoader.trimMemory(level);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;v4版本需要改成这个&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onLowMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onLowMemory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     imageLoader.trimMemory(ComponentCallbacks2.TRIM_MEMORY_COMPLETE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;嵌套Fragment使用常见错误&quot;&gt;&lt;a href=&quot;#嵌套Fragment使用常见错误&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment使用常见错误&quot;&gt;&lt;/a&gt;嵌套Fragment使用常见错误&lt;/h2&gt;&lt;h3 id=&quot;错误情形1-把嵌套Fragment放在布局里&quot;&gt;&lt;a href=&quot;#错误情形1-把嵌套Fragment放在布局里&quot; class=&quot;headerlink&quot; title=&quot;错误情形1: 把嵌套Fragment放在布局里&quot;&gt;&lt;/a&gt;错误情形1: 把嵌套Fragment放在布局里&lt;/h3&gt;&lt;p&gt;把嵌套Fragment放在布局里 -&amp;gt; &lt;code&gt;InflateException in Binary XML&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看起来嵌套fragment的使用除了要用&lt;code&gt;getChildFragmentManager()&lt;/code&gt;以外, 其他跟之前似乎没什么区别.&lt;br&gt;如果嵌套的fragment不需要太多控制, 固定地占据了一块地方, 你可能想当然地为了省事就把它放进了xml布局文件里, 写个&lt;fragment&gt;标签.&lt;br&gt;运行一下初看起来似乎没什么错, run一下也能显示出来, 但是千万不要这样做, 多玩两下更复杂的你就知道了.&lt;/fragment&gt;&lt;/p&gt;
&lt;p&gt;上面&lt;a href=&quot;https://developer.android.com/about/versions/android-4.2.html#NestedFragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网介绍时&lt;/a&gt;就有这么一句:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note: You cannot inflate a layout into a fragment when that layout includes a &amp;lt;fragment&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nested fragments are only supported when added to a fragment dynamically.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;人家这么说肯定是有原因的哇, 下面我来告诉你我知道的问题:&lt;br&gt;如果Fragment被嵌套写在了布局里, inflate到这个标签的时候就相当于将它加进了FragmentManager里.&lt;br&gt;如果嵌套的parent fragment因为需要重建View而重新走了&lt;code&gt;onCreateView()&lt;/code&gt;方法, 再次inflate, 此时就会抛出异常:  &lt;code&gt;InflateException in Binary XML&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前为什么可以呢? 非嵌套的情况, fragment直接加在activity里, 如果需要重新inflate, 必定是在onCreate()里, activity是重新建的, 所以没有问题, 因为不存在fragmentManager中已经持有同一个fragment的问题.&lt;/p&gt;
&lt;p&gt;举一个例子:&lt;br&gt;在嵌套的情况下, 如果FragmentE布局里有FragmentA, 这时候我们需要叠加一个FragmentD.&lt;br&gt;用了&lt;code&gt;replace()&lt;/code&gt;, 并且&lt;code&gt;addToBackStack()&lt;/code&gt;.&lt;br&gt;当D显示的时候, E实际上View是被销毁的, 然后back回来, 重建View, 即FragementE需要重新从onCreateView&lt;br&gt;()开始走生命周期, 走到inflate的时候又看到了fragmentA的标签.&lt;br&gt;但是这时候A实际上还在FragmentManager里面, 所以就会抛出如下的异常:&lt;br&gt;&lt;code&gt;android.view.InflateException: Binary XML file line # XX: Binary XML file line #XX: Error inflating class fragment&lt;/code&gt;&lt;br&gt;崩溃的位置就在parent fragment(FragmentE) inflate的时候.&lt;br&gt;打印具体的异常栈信息可以看到:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;at com.example.ddmeng.helloactivityandfragment.fragment.FragmentE.onCreateView(FragmentE.java:35)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.Fragment.performCreateView(Fragment.java:2220)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:973)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.popBackStackState(FragmentManager.java:1587)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:578)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.support.v4.app.BaseFragmentActivityEclair.onBackPressedNotHandled(BaseFragmentActivityEclair.java:27)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.support.v4.app.FragmentActivity.onBackPressed(FragmentActivity.java:189)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Caused by: java.lang.IllegalArgumentException: Binary XML file line #16: Duplicate id 0x7f0c0059, tag null, or parent id 0xffffffff with another fragment for com.example.ddmeng.helloactivityandfragment.fragment.FragmentA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;at android.app.FragmentManagerImpl.onCreateView(FragmentManager.java:2205)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验例子代码&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Solution-1-动态添加child-fragment&quot;&gt;&lt;a href=&quot;#Solution-1-动态添加child-fragment&quot; class=&quot;headerlink&quot; title=&quot;Solution 1: 动态添加child fragment&quot;&gt;&lt;/a&gt;Solution 1: 动态添加child fragment&lt;/h4&gt;&lt;p&gt;解决上面的问题有各种方法, 最常规的做法是, 使用动态添加:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Fragment fragmentA = getChildFragmentManager().findFragmentByTag(NESTED_FRAGMENT_TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fragmentA == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.i(LOG_TAG, &lt;span class=&quot;string&quot;&gt;&quot;add new FragmentA !!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentA = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FragmentA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentTransaction fragmentTransaction = getChildFragmentManager().beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentTransaction.add(R.id.fragment_container, fragmentA, NESTED_FRAGMENT_TAG).commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Log.i(LOG_TAG, &lt;span class=&quot;string&quot;&gt;&quot;found existing FragmentA, no need to add it again !!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Solution-2-在异常之前remove-child-fragment&quot;&gt;&lt;a href=&quot;#Solution-2-在异常之前remove-child-fragment&quot; class=&quot;headerlink&quot; title=&quot;Solution 2: 在异常之前remove child fragment&quot;&gt;&lt;/a&gt;Solution 2: 在异常之前remove child fragment&lt;/h4&gt;&lt;p&gt;如果你的子fragment非要加在布局里不可, 而你的程序确实会有重建父fragment view的情形.&lt;br&gt;为了避免上面的异常, 你也可以这样做(tricky and not recommended):&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeChildFragment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Fragment parentFragment)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentManager fragmentManager = parentFragment.getChildFragmentManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Fragment child = fragmentManager.findFragmentById(R.id.child);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (child != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fragmentManager.beginTransaction()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .remove(child)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .commitAllowingStateLoss();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在parentFragment的&lt;code&gt;onCreateView()&lt;/code&gt;方法中inflate之前和&lt;code&gt;onSaveInstanceState()&lt;/code&gt;方法中做save工作之前调用它.&lt;br&gt;这两个地方是发生异常的地方, 只要在其之前remove就好.&lt;/p&gt;
&lt;h3 id=&quot;错误情形2-把fragment放在一个动态布局里&quot;&gt;&lt;a href=&quot;#错误情形2-把fragment放在一个动态布局里&quot; class=&quot;headerlink&quot; title=&quot;错误情形2: 把fragment放在一个动态布局里&quot;&gt;&lt;/a&gt;错误情形2: 把fragment放在一个动态布局里&lt;/h3&gt;&lt;p&gt;把fragment放在一个动态布局里 -&amp;gt; &lt;code&gt;java.lang.IllegalArgumentException: No view found for id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发现这个错误是因为项目中的一个子Fragment是添加在RecyclerView里面的一块的.&lt;br&gt;RecyclerView要等到Loader的数据取到了之后再populate每一块的布局.&lt;br&gt;还是上面的流程, 启动父fragment, load数据, 添加子fragment, 这都没有问题.&lt;br&gt;但是一旦如果是上面的&lt;code&gt;replace()&lt;/code&gt;加&lt;code&gt;addToBackStack()&lt;/code&gt; , 并且再次返回, 就会出现异常.&lt;/p&gt;
&lt;p&gt;因为当重建View的时候, fragmentManager其中是持有child fragment的, 但是找不到它的container, 于是就会抛出异常.&lt;br&gt;我也同样做了一个小实验, 在我的demo程序里:&lt;br&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HelloActivityAndFragment&lt;/a&gt;&lt;br&gt;Nested Fragment in Dynamic Container:&lt;br&gt;在Fragment F中, 先添加一个FrameLayout, 再把child fragment A加进去.&lt;br&gt;然后在Activity中, 用D replace F, 按back键返回, 就会有crash:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: No view found for id 0x7f0c0062 (com.example.ddmeng.helloactivityandfragment:id/frame_container) for fragment FragmentA&amp;#123;b37763 #0 id=0x7f0c0062 FragmentA&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:965)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1130)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.dispatchActivityCreated(FragmentManager.java:1953)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.Fragment.performActivityCreated(Fragment.java:2234)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:992)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1148)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.BackStackRecord.popFromBackStack(BackStackRecord.java:1670)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.popBackStackState(FragmentManager.java:1587)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:578)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at android.app.Activity.onBackPressed(Activity.java:2503)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是因为返回的时候FragmentManager找不到对应的container了.&lt;br&gt;所以应该避免这种做法, 尽量把fragment加进parent的根布局里, 而不是某个动态添加的布局.&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;关于嵌套fragments的情况, 可能和ViewPager结合使用的情形比较多.&lt;br&gt;这个感觉说来话长了, 以为有很多系统帮忙做的事情, 改天有空再说吧.&lt;/p&gt;
&lt;p&gt;这里有个大哥写了个工具类&lt;a href=&quot;https://github.com/YoKeyword/Fragmentation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragmentation&lt;/a&gt;.&lt;br&gt;他也有几篇博文分析遇到的坑和原因(见上面repo的README给出的链接), 里面有一些back stack的问题, 还有动画什么的, 大家有兴趣可以看看.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Creating-and-Using-Fragments#nesting-fragments-within-fragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Guide: Nested Fragments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mengdd/HelloActivityAndFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;相关Demo&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;a href=&quot;#嵌套Fragment的使用及常见错误&quot; class=&quot;headerlink&quot; title=&quot;嵌套Fragment的使用及常见错误&quot;&gt;&lt;/a&gt;嵌套Fragment的使用及常见错误&lt;/h1&gt;&lt;p&gt;嵌套Fragments (Nested Fragments), 是在Fragment内部又添加Fragment.&lt;br&gt;使用时, 主要要依靠宿主Fragment的 &lt;code&gt;getChildFragmentManager()&lt;/code&gt; 来获取FragmentManger.&lt;br&gt;虽然看起来和在activity中添加fragment差不多, 但因为fragment生命周期及管理恢复模式不同, 其中有一些需要特别注意的地方.&lt;br&gt;本文内容还包括了从Fragment迁移到v4.Fragment代码中需要改动的一些地方.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
      <category term="Nested Fragments" scheme="http://mengdd.github.io/tags/Nested-Fragments/"/>
    
  </entry>
  
  <entry>
    <title>Test Links</title>
    <link href="http://mengdd.github.io/uncategorized/2016/05/31/test-links/"/>
    <id>http://mengdd.github.io/uncategorized/2016/05/31/test-links/</id>
    <published>2016-05-31T04:51:19.000Z</published>
    <updated>2016-08-03T01:58:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/property-house-nsw-singleton+heights-122331330&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/property-house-nsw-singleton+heights-122331330&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://m.realestate.com.au/sold/property-house-act-waramanga-122532898&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.realestate.com.au/sold/property-house-act-waramanga-122532898&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;realestate.com.au/suggested-properties&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/suggested-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/suggested-properties&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/blog/expand-your-real-estate-search-with-apps-suggested-properties/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/blog/expand-your-real-estate-search-with-apps-suggested-properties/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-with-1-bedroom-between-600000-750000-in-mentone%2c+vic+3194%3b/list-1?maxBeds=2&amp;amp;includeSurrounding=false&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-with-1-bedroom-between-600000-750000-in-mentone%2c+vic+3194%3b/list-1?maxBeds=2&amp;amp;includeSurrounding=false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-400-between-800000-900000-in-mentone%2c+vic+3194/list-1?keywords=pool&amp;amp;numParkingSpaces=3&amp;amp;numBaths=2&amp;amp;maxBeds=2&amp;amp;includeSurrounding=false&amp;amp;persistIncludeSurrounding=true&amp;amp;source=location-search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-400-between-800000-900000-in-mentone%2c+vic+3194/list-1?keywords=pool&amp;amp;numParkingSpaces=3&amp;amp;numBaths=2&amp;amp;maxBeds=2&amp;amp;includeSurrounding=false&amp;amp;persistIncludeSurrounding=true&amp;amp;source=location-search&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/rent/property-townhouse-villa-acreage-with-2-bedrooms-between-300-450-in-parkdale%2c+vic+3195%3b/list-1?availableBefore=2016-05-16&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/rent/property-townhouse-villa-acreage-with-2-bedrooms-between-300-450-in-parkdale%2c+vic+3195%3b/list-1?availableBefore=2016-05-16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/property-house-townhouse-with-3-bedrooms-between-0-1000000-in-sandringham%2c+vic+3191/map-1?maxBeds=3&amp;amp;includeSurrounding=false&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/property-house-townhouse-with-3-bedrooms-between-0-1000000-in-sandringham%2c+vic+3191/map-1?maxBeds=3&amp;amp;includeSurrounding=false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/property-house-with-2-bedrooms-between-50000-950000-in-kew%2c+vic+3101/list-1?maxBeds=3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/property-house-with-2-bedrooms-between-50000-950000-in-kew%2c+vic+3101/list-1?maxBeds=3&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://m.realestate.com.au/sold/property-townhouse-with-studio-in-weston+creek+district%2c+act/list-1?numParkingSpaces=1&amp;amp;numBaths=1&amp;amp;keywords=car&amp;amp;activeSort=sold-price-desc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.realestate.com.au/sold/property-townhouse-with-studio-in-weston+creek+district%2c+act/list-1?numParkingSpaces=1&amp;amp;numBaths=1&amp;amp;keywords=car&amp;amp;activeSort=sold-price-desc&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/in-scoresby%2c+vic+3179%3b/list-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/in-scoresby%2c+vic+3179%3b/list-1&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;2016-06-15&lt;br&gt;&lt;a href=&quot;http://www.realestate.com.au/sold/in-bentleigh%2c+vic+3204/list-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/sold/in-bentleigh%2c+vic+3204/list-1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-between-0-2000000-in-melbourne%2c+vic+3000/list-1?numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=price-asc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-between-0-2000000-in-melbourne%2c+vic+3000/list-1?numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=price-asc&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-1-between-0-2000000-in-melbourne%2c+vic+3000/list-1?maxBeds=5&amp;amp;numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=list-date&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestate.com.au/buy/property-house-with-1-bedroom-size-1-between-0-2000000-in-melbourne%2c+vic+3000/list-1?maxBeds=5&amp;amp;numBaths=1&amp;amp;numParkingSpaces=1&amp;amp;activeSort=list-date&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2016-08-03&lt;br&gt;&lt;a href=&quot;https://m.realestate.com.au/saved-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://m.realestate.com.au/saved-properties&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.realestate.com.au/property-house-nsw-singleton+heights-122331330&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.realestat
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Fragment使用(一) 基础篇 温故知新</title>
    <link href="http://mengdd.github.io/Android/2016/05/31/android-fragment-usage-1-basic-part/"/>
    <id>http://mengdd.github.io/Android/2016/05/31/android-fragment-usage-1-basic-part/</id>
    <published>2016-05-31T04:51:19.000Z</published>
    <updated>2016-06-16T05:36:30.000Z</updated>
    
    <content type="html">&lt;p&gt;Fragment使用的基本知识点总结, 包括Fragment的添加, 参数传递和通信, 生命周期和各种操作.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Fragment使用基础&quot;&gt;&lt;a href=&quot;#Fragment使用基础&quot; class=&quot;headerlink&quot; title=&quot;Fragment使用基础&quot;&gt;&lt;/a&gt;Fragment使用基础&lt;/h1&gt;&lt;h2 id=&quot;Fragment添加&quot;&gt;&lt;a href=&quot;#Fragment添加&quot; class=&quot;headerlink&quot; title=&quot;Fragment添加&quot;&gt;&lt;/a&gt;Fragment添加&lt;/h2&gt;&lt;p&gt;方法一: 布局里的标签&lt;fragment&gt;&lt;br&gt;标识符: tag, id, 如果都没有, container的id将会被使用.&lt;/fragment&gt;&lt;/p&gt;
&lt;p&gt;方法二: 动态添加&lt;br&gt;动态添加利用了一个transaction:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FragmentManager fragmentManager = getFragmentManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fragment fragment = fragmentManager.findFragmentByTag(FragmentB.TAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == fragment) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentB fragmentB = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FragmentB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentTransaction.add(R.id.fragment_container, fragmentB, FragmentB.TAG)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       .commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;commit()&lt;/code&gt;方法并不立即执行transaction中包含的动作,而是把它加入到UI线程队列中.&lt;br&gt;如果想要立即执行,可以在commit之后立即调用FragmentManager的&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentManager.html#executePendingTransactions(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;executePendingTransactions()&lt;/code&gt;&lt;/a&gt;)方法.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commit()&lt;/code&gt;方法必须在状态存储之前调用,否则会抛出异常,如果觉得状态丢失没关系,可以调用&lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;. 但是除非万不得已, 一般不推荐用这个方法, 会掩盖很多错误.&lt;/p&gt;
&lt;h2 id=&quot;Back-Stack&quot;&gt;&lt;a href=&quot;#Back-Stack&quot; class=&quot;headerlink&quot; title=&quot;Back Stack&quot;&gt;&lt;/a&gt;Back Stack&lt;/h2&gt;&lt;p&gt;Activity的back stack: 系统维护, 每个task一个back stack.&lt;br&gt;Fragment的back stack: 宿主activity掌管, 每个activity一个.&lt;/p&gt;
&lt;p&gt;通过调用&lt;code&gt;addToBackStack()&lt;/code&gt;,commit()的一系列转换作为一个transaction被存储在back stack中,&lt;br&gt;用户按Back键, 从栈中pop出一个transaction, 逆转操作, 可以返回上一个转换前的状态.&lt;/p&gt;
&lt;p&gt;一个transaction可以包含多种操作, 并且不局限于对同一个Fragment, 所以每一个transaction实际上可以是一系列对多个fragment的操作的组合.&lt;br&gt;加入到back stack中去的时候, 是把这一系列的组合作为一个原子, 加入到back stack中.&lt;/p&gt;
&lt;h2 id=&quot;构造和参数传递&quot;&gt;&lt;a href=&quot;#构造和参数传递&quot; class=&quot;headerlink&quot; title=&quot;构造和参数传递&quot;&gt;&lt;/a&gt;构造和参数传递&lt;/h2&gt;&lt;p&gt;所有的Fragment都必须有一个&lt;code&gt;public的无参构造函数&lt;/code&gt;, 因为framework经常会在需要的时候重新创建实例(状态恢复时), 它需要的就是这个构造.&lt;br&gt;如果无参构造没有提供,会有异常.&lt;/p&gt;
&lt;p&gt;所以&lt;code&gt;不要给Fragment写有参数的构造函数, 也不要企图搞个什么单例的Fragment&lt;/code&gt;. 这些都是反设计的.&lt;/p&gt;
&lt;p&gt;参数传递的正确姿势:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; FragmentWithParameters &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FragmentWithParameters fragmentWithParameter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FragmentWithParameters();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Bundle args = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args.putInt(NUM, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fragmentWithParameter.setArguments(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fragmentWithParameter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num = getArguments() != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? getArguments().getInt(NUM) : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里是提供了一个静态方法, 也可以new出对象后自己set Bundle参数.&lt;/p&gt;
&lt;h2 id=&quot;Fragment的通信&quot;&gt;&lt;a href=&quot;#Fragment的通信&quot; class=&quot;headerlink&quot; title=&quot;Fragment的通信&quot;&gt;&lt;/a&gt;Fragment的通信&lt;/h2&gt;&lt;p&gt;除了DialogFragment和嵌套Fragment需要与自己的parent fragment通信以外, 一般的fragment是不与其他fragment有任何通信的. 因为要求应尽量独立, 模块化, 可复用.&lt;br&gt;fragment与自己的parent activity (除了嵌套和dialog的情况外, 这个parent通常是activity) 有直接通信, 一般以这三种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在构造fragment的时候, 通过Bundle传递参数.&lt;/li&gt;
&lt;li&gt;parent可以直接调用fragment的public方法, 这里也可以传递一些参数.&lt;/li&gt;
&lt;li&gt;Listener, 也即parent实现的callback接口, fragment可以在自己内部调用, 这里fragment也可以传递参数出去.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于DialogFragment来说, 可以通过一个public的set方法将外面的target设置进去.&lt;br&gt;比如用Fragment的这个方法: &lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html#setTargetFragment(android.app.Fragment,%20int&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;setTargetFragment()&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://guides.codepath.com/android/Using-DialogFragment#passing-data-to-parent-fragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;&lt;br&gt;对于嵌套(nested)Fragment, 通信方式与上面普通的fragment类似, 只不过parent此时不是activity而是一个fragment.&lt;br&gt;后面会单独有一个文章说嵌套Fragment的使用, 敬请期待.&lt;/p&gt;
&lt;h1 id=&quot;Fragment的生命周期&quot;&gt;&lt;a href=&quot;#Fragment的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Fragment的生命周期&quot;&gt;&lt;/a&gt;Fragment的生命周期&lt;/h1&gt;&lt;p&gt;Fragment的生命周期首先和Activity的生命周期密切相关,&lt;br&gt;如果activity stopped,其中所有的fragment都不能start;&lt;br&gt;如果activity destroyed, 其中所有的fragment都会被destroyed.&lt;br&gt;只有activity在resumed状态下,fragment的生命周期可以独立改变,否则它被activity控制.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/fragment-lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/fragment-lifecycle-2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/activity-fragment-lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/fragment-lifecycle-with-callbacks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面这个图来自于: &lt;a href=&quot;https://corner.squareup.com/2014/10/advocating-against-android-fragments.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://corner.squareup.com/2014/10/advocating-against-android-fragments.html&lt;/a&gt;&lt;br&gt;这里还有一个更吊的图: &lt;a href=&quot;https://github.com/xxv/android-lifecycle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xxv/android-lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;FragmentTransaction基础操作&quot;&gt;&lt;a href=&quot;#FragmentTransaction基础操作&quot; class=&quot;headerlink&quot; title=&quot;FragmentTransaction基础操作&quot;&gt;&lt;/a&gt;FragmentTransaction基础操作&lt;/h1&gt;&lt;h2 id=&quot;操作类型&quot;&gt;&lt;a href=&quot;#操作类型&quot; class=&quot;headerlink&quot; title=&quot;操作类型&quot;&gt;&lt;/a&gt;操作类型&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentTransaction&lt;/a&gt; 中对Fragment有如下几种操作:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;attach(), detach()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add(), remove(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show(), hide(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;replace()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了&lt;code&gt;replace()&lt;/code&gt;以外其他都是成对的.&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;attach()&lt;/code&gt;和&lt;code&gt;detach()&lt;/code&gt;不是很常用.&lt;br&gt;调用&lt;code&gt;detach()&lt;/code&gt;之后, fragment实际的生命周期会走到onDestroyView(), 但不会走onDestroy()和onDetach(), 也即fragment本身并没有被销毁, 只是view被销毁了. 这和addToBackStack()的情况一样, 尽管调用detach()的时候没有addToBackStack(), 仍然只是走到view被销毁的阶段.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;add()&lt;/code&gt;和&lt;code&gt;remove()&lt;/code&gt;是将fragment添加和移除.&lt;br&gt;remove()比detach()要彻底一些, 如果不加入到back stack, remove()的时候, fragment的生命周期会一直走到onDetach().&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show()&lt;/code&gt;和&lt;code&gt;hide()&lt;/code&gt;是用来设置fragment的显示和隐藏状态, 这两个方法并不对应fragment的状态变化,只是将view设置为visible和gone,然后调用onHiddenChanged()的回调.&lt;/p&gt;
&lt;p&gt;实际上&lt;code&gt;replace() == remove() + add()&lt;/code&gt;, 所以它的反操作也是replace(), 只不过把add和remove的东西交换一下.&lt;/p&gt;
&lt;p&gt;关于replace()和show(), hide()的选择, 要根据实际使用情形来定.&lt;br&gt;&lt;code&gt;replace()&lt;/code&gt;的好处是会减少内存占用, 但是返回时需要重新走完初始化的过程.&lt;br&gt;&lt;code&gt;show()&lt;/code&gt;和&lt;code&gt;hide()&lt;/code&gt;只是控制了fragment的显示和隐藏, 不会改变生命周期状态, 也即fragment始终是处于running状态的, 被保持在内存中, 适用于频繁切换的情形.&lt;/p&gt;
&lt;h2 id=&quot;remove-replace-是否加到back-stack对生命周期的影响&quot;&gt;&lt;a href=&quot;#remove-replace-是否加到back-stack对生命周期的影响&quot; class=&quot;headerlink&quot; title=&quot;remove(), replace()是否加到back stack对生命周期的影响&quot;&gt;&lt;/a&gt;remove(), replace()是否加到back stack对生命周期的影响&lt;/h2&gt;&lt;p&gt;前面说过, &lt;code&gt;replace() == remove() + add()&lt;/code&gt;&lt;br&gt;新的fragment将取代在容器布局中的fragment, 如果没有,将直接添加新的fragment.&lt;/p&gt;
&lt;p&gt;是否添加到back stack对fragment的生命周期是有影响的.&lt;br&gt;&lt;code&gt;remove()&lt;/code&gt;或者&lt;code&gt;replace()&lt;/code&gt;的时候,如果&lt;code&gt;commit()&lt;/code&gt;之前没有调用&lt;code&gt;addToBackStack()&lt;/code&gt;,那个旧fragment将会被destroyed和detach; 即完全销毁和移除.&lt;/p&gt;
&lt;p&gt;如果调用了&lt;code&gt;addToBackStack()&lt;/code&gt;,旧的fragment会处在stopped状态,调用到&lt;code&gt;onDestroyView()&lt;/code&gt;, 可以通过返回键来resume.&lt;br&gt;这个时候对于旧的Fragment来说, 成员变量依然在,但是View被销毁了. 所以返回时它的生命周期从&lt;code&gt;onCreateView()&lt;/code&gt;开始重建View.&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Fragment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Reference Fragment&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/FragmentTransaction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Reference FragmentTransaction&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://guides.codepath.com/android/Creating-and-Using-Fragments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePath Guides: Creating and Using Fragments&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Fragment使用的基本知识点总结, 包括Fragment的添加, 参数传递和通信, 生命周期和各种操作.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://mengdd.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://mengdd.github.io/tags/Android/"/>
    
      <category term="Fragment" scheme="http://mengdd.github.io/tags/Fragment/"/>
    
  </entry>
  
</feed>
